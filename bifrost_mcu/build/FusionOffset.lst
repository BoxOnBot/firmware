ARM GAS  /tmp/ccWNIuVW.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"FusionOffset.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_ui2f
  16              		.global	__aeabi_fdiv
  17              		.global	__aeabi_fmul
  18              		.section	.text.FusionOffsetInitialise,"ax",%progbits
  19              		.align	1
  20              		.global	FusionOffsetInitialise
  21              		.arch armv6s-m
  22              		.syntax unified
  23              		.code	16
  24              		.thumb_func
  25              		.fpu softvfp
  27              	FusionOffsetInitialise:
  28              	.LVL0:
  29              	.LFB21:
  30              		.file 1 "Core/Src/Fusion/FusionOffset.c"
   1:Core/Src/Fusion/FusionOffset.c **** /**
   2:Core/Src/Fusion/FusionOffset.c ****  * @file FusionOffset.c
   3:Core/Src/Fusion/FusionOffset.c ****  * @author Seb Madgwick
   4:Core/Src/Fusion/FusionOffset.c ****  * @brief Gyroscope offset correction algorithm for run-time calibration of the
   5:Core/Src/Fusion/FusionOffset.c ****  * gyroscope offset.
   6:Core/Src/Fusion/FusionOffset.c ****  */
   7:Core/Src/Fusion/FusionOffset.c **** 
   8:Core/Src/Fusion/FusionOffset.c **** //------------------------------------------------------------------------------
   9:Core/Src/Fusion/FusionOffset.c **** // Includes
  10:Core/Src/Fusion/FusionOffset.c **** 
  11:Core/Src/Fusion/FusionOffset.c **** #include "FusionOffset.h"
  12:Core/Src/Fusion/FusionOffset.c **** #include <math.h> // fabs
  13:Core/Src/Fusion/FusionOffset.c **** 
  14:Core/Src/Fusion/FusionOffset.c **** //------------------------------------------------------------------------------
  15:Core/Src/Fusion/FusionOffset.c **** // Definitions
  16:Core/Src/Fusion/FusionOffset.c **** 
  17:Core/Src/Fusion/FusionOffset.c **** /**
  18:Core/Src/Fusion/FusionOffset.c ****  * @brief Cutoff frequency in Hz.
  19:Core/Src/Fusion/FusionOffset.c ****  */
  20:Core/Src/Fusion/FusionOffset.c **** #define CUTOFF_FREQUENCY (0.02f)
  21:Core/Src/Fusion/FusionOffset.c **** 
  22:Core/Src/Fusion/FusionOffset.c **** /**
  23:Core/Src/Fusion/FusionOffset.c ****  * @brief Timeout in seconds.
  24:Core/Src/Fusion/FusionOffset.c ****  */
  25:Core/Src/Fusion/FusionOffset.c **** #define TIMEOUT (5)
  26:Core/Src/Fusion/FusionOffset.c **** 
  27:Core/Src/Fusion/FusionOffset.c **** /**
  28:Core/Src/Fusion/FusionOffset.c ****  * @brief Threshold in degrees per second.
ARM GAS  /tmp/ccWNIuVW.s 			page 2


  29:Core/Src/Fusion/FusionOffset.c ****  */
  30:Core/Src/Fusion/FusionOffset.c **** #define THRESHOLD (3.0f)
  31:Core/Src/Fusion/FusionOffset.c **** 
  32:Core/Src/Fusion/FusionOffset.c **** //------------------------------------------------------------------------------
  33:Core/Src/Fusion/FusionOffset.c **** // Functions
  34:Core/Src/Fusion/FusionOffset.c **** 
  35:Core/Src/Fusion/FusionOffset.c **** /**
  36:Core/Src/Fusion/FusionOffset.c ****  * @brief Initialises the gyroscope offset algorithm.
  37:Core/Src/Fusion/FusionOffset.c ****  * @param offset Gyroscope offset algorithm structure.
  38:Core/Src/Fusion/FusionOffset.c ****  * @param sampleRate Sample rate in Hz.
  39:Core/Src/Fusion/FusionOffset.c ****  */
  40:Core/Src/Fusion/FusionOffset.c **** void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
  31              		.loc 1 40 88 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 40 88 is_stmt 0 view .LVU1
  36 0000 70B5     		push	{r4, r5, r6, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 4, -16
  40              		.cfi_offset 5, -12
  41              		.cfi_offset 6, -8
  42              		.cfi_offset 14, -4
  43 0002 0400     		movs	r4, r0
  44 0004 0D00     		movs	r5, r1
  41:Core/Src/Fusion/FusionOffset.c ****     offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate
  45              		.loc 1 41 5 is_stmt 1 view .LVU2
  46              		.loc 1 41 82 is_stmt 0 view .LVU3
  47 0006 0800     		movs	r0, r1
  48              	.LVL1:
  49              		.loc 1 41 82 view .LVU4
  50 0008 FFF7FEFF 		bl	__aeabi_ui2f
  51              	.LVL2:
  52              		.loc 1 41 82 view .LVU5
  53 000c 011C     		adds	r1, r0, #0
  54              		.loc 1 41 80 view .LVU6
  55 000e FE20     		movs	r0, #254
  56 0010 8005     		lsls	r0, r0, #22
  57 0012 FFF7FEFF 		bl	__aeabi_fdiv
  58              	.LVL3:
  59              		.loc 1 41 72 view .LVU7
  60 0016 0749     		ldr	r1, .L2
  61 0018 FFF7FEFF 		bl	__aeabi_fmul
  62              	.LVL4:
  63              		.loc 1 41 31 view .LVU8
  64 001c 2060     		str	r0, [r4]
  42:Core/Src/Fusion/FusionOffset.c ****     offset->timeout = TIMEOUT * sampleRate;
  65              		.loc 1 42 5 is_stmt 1 view .LVU9
  66              		.loc 1 42 31 is_stmt 0 view .LVU10
  67 001e A900     		lsls	r1, r5, #2
  68 0020 4D19     		adds	r5, r1, r5
  69              	.LVL5:
  70              		.loc 1 42 21 view .LVU11
  71 0022 6560     		str	r5, [r4, #4]
  43:Core/Src/Fusion/FusionOffset.c ****     offset->timer = 0;
  72              		.loc 1 43 5 is_stmt 1 view .LVU12
ARM GAS  /tmp/ccWNIuVW.s 			page 3


  73              		.loc 1 43 19 is_stmt 0 view .LVU13
  74 0024 0023     		movs	r3, #0
  75 0026 A360     		str	r3, [r4, #8]
  44:Core/Src/Fusion/FusionOffset.c ****     offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
  76              		.loc 1 44 5 is_stmt 1 view .LVU14
  77              		.loc 1 44 29 is_stmt 0 view .LVU15
  78 0028 0023     		movs	r3, #0
  79 002a E360     		str	r3, [r4, #12]
  80 002c 2361     		str	r3, [r4, #16]
  81 002e 6361     		str	r3, [r4, #20]
  45:Core/Src/Fusion/FusionOffset.c **** }
  82              		.loc 1 45 1 view .LVU16
  83              		@ sp needed
  84              	.LVL6:
  85              		.loc 1 45 1 view .LVU17
  86 0030 70BD     		pop	{r4, r5, r6, pc}
  87              	.L3:
  88 0032 C046     		.align	2
  89              	.L2:
  90 0034 FDAD003E 		.word	1040231933
  91              		.cfi_endproc
  92              	.LFE21:
  94              		.global	__aeabi_fsub
  95              		.global	__aeabi_fcmpgt
  96              		.global	__aeabi_fadd
  97              		.section	.text.FusionOffsetUpdate,"ax",%progbits
  98              		.align	1
  99              		.global	FusionOffsetUpdate
 100              		.syntax unified
 101              		.code	16
 102              		.thumb_func
 103              		.fpu softvfp
 105              	FusionOffsetUpdate:
 106              	.LVL7:
 107              	.LFB22:
  46:Core/Src/Fusion/FusionOffset.c **** 
  47:Core/Src/Fusion/FusionOffset.c **** /**
  48:Core/Src/Fusion/FusionOffset.c ****  * @brief Updates the gyroscope offset algorithm and returns the corrected
  49:Core/Src/Fusion/FusionOffset.c ****  * gyroscope measurement.
  50:Core/Src/Fusion/FusionOffset.c ****  * @param offset Gyroscope offset algorithm structure.
  51:Core/Src/Fusion/FusionOffset.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
  52:Core/Src/Fusion/FusionOffset.c ****  * @return Corrected gyroscope measurement in degrees per second.
  53:Core/Src/Fusion/FusionOffset.c ****  */
  54:Core/Src/Fusion/FusionOffset.c **** FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
 108              		.loc 1 54 85 is_stmt 1 view -0
 109              		.cfi_startproc
 110              		@ args = 12, pretend = 8, frame = 72
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		.loc 1 54 85 is_stmt 0 view .LVU19
 113 0000 82B0     		sub	sp, sp, #8
 114              	.LCFI1:
 115              		.cfi_def_cfa_offset 8
 116 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 28
 119              		.cfi_offset 4, -28
 120              		.cfi_offset 5, -24
ARM GAS  /tmp/ccWNIuVW.s 			page 4


 121              		.cfi_offset 6, -20
 122              		.cfi_offset 7, -16
 123              		.cfi_offset 14, -12
 124 0004 DE46     		mov	lr, fp
 125 0006 5746     		mov	r7, r10
 126 0008 4E46     		mov	r6, r9
 127 000a 4546     		mov	r5, r8
 128 000c E0B5     		push	{r5, r6, r7, lr}
 129              	.LCFI3:
 130              		.cfi_def_cfa_offset 44
 131              		.cfi_offset 8, -44
 132              		.cfi_offset 9, -40
 133              		.cfi_offset 10, -36
 134              		.cfi_offset 11, -32
 135 000e 93B0     		sub	sp, sp, #76
 136              	.LCFI4:
 137              		.cfi_def_cfa_offset 120
 138 0010 0190     		str	r0, [sp, #4]
 139 0012 0E00     		movs	r6, r1
 140 0014 1C92     		str	r2, [sp, #112]
 141 0016 1D93     		str	r3, [sp, #116]
  55:Core/Src/Fusion/FusionOffset.c **** 
  56:Core/Src/Fusion/FusionOffset.c ****     // Subtract offset from gyroscope measurement
  57:Core/Src/Fusion/FusionOffset.c ****     gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 142              		.loc 1 57 5 is_stmt 1 view .LVU20
 143 0018 03AD     		add	r5, sp, #12
 144 001a 2B00     		movs	r3, r5
 145 001c 1CAA     		add	r2, sp, #112
 146 001e 13CA     		ldmia	r2!, {r0, r1, r4}
 147 0020 13C3     		stmia	r3!, {r0, r1, r4}
 148              	.LVL8:
 149              		.loc 1 57 5 is_stmt 0 view .LVU21
 150 0022 1F00     		movs	r7, r3
 151 0024 3300     		movs	r3, r6
 152 0026 0C33     		adds	r3, r3, #12
 153 0028 3A00     		movs	r2, r7
 154 002a 13CB     		ldmia	r3!, {r0, r1, r4}
 155 002c 13C2     		stmia	r2!, {r0, r1, r4}
 156              	.LBB8:
 157              	.LBI8:
 158              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
ARM GAS  /tmp/ccWNIuVW.s 			page 5


  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
ARM GAS  /tmp/ccWNIuVW.s 			page 6


  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
ARM GAS  /tmp/ccWNIuVW.s 			page 7


 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
ARM GAS  /tmp/ccWNIuVW.s 			page 8


 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 159              		.loc 2 215 28 is_stmt 1 view .LVU22
 160              	.LBB9:
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 161              		.loc 2 216 5 view .LVU23
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 162              		.loc 2 217 5 view .LVU24
 163              		.loc 2 217 36 is_stmt 0 view .LVU25
 164 002e 0699     		ldr	r1, [sp, #24]
 165 0030 0398     		ldr	r0, [sp, #12]
 166 0032 FFF7FEFF 		bl	__aeabi_fsub
 167              	.LVL9:
 168 0036 8146     		mov	r9, r0
 169              		.loc 2 217 19 view .LVU26
 170 0038 09AC     		add	r4, sp, #36
 171 003a 0990     		str	r0, [sp, #36]
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 172              		.loc 2 218 5 is_stmt 1 view .LVU27
 173              		.loc 2 218 36 is_stmt 0 view .LVU28
 174 003c 7968     		ldr	r1, [r7, #4]
 175 003e 0498     		ldr	r0, [sp, #16]
 176 0040 FFF7FEFF 		bl	__aeabi_fsub
 177              	.LVL10:
 178 0044 8246     		mov	r10, r0
 179              		.loc 2 218 19 view .LVU29
 180 0046 0A90     		str	r0, [sp, #40]
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 181              		.loc 2 219 5 is_stmt 1 view .LVU30
 182              		.loc 2 219 33 is_stmt 0 view .LVU31
 183 0048 0598     		ldr	r0, [sp, #20]
ARM GAS  /tmp/ccWNIuVW.s 			page 9


 184              		.loc 2 219 50 view .LVU32
 185 004a B968     		ldr	r1, [r7, #8]
 186              		.loc 2 219 36 view .LVU33
 187 004c FFF7FEFF 		bl	__aeabi_fsub
 188              	.LVL11:
 189 0050 071C     		adds	r7, r0, #0
 190              		.loc 2 219 19 view .LVU34
 191 0052 0B90     		str	r0, [sp, #44]
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
 192              		.loc 2 220 5 is_stmt 1 view .LVU35
 193              		.loc 2 220 12 is_stmt 0 view .LVU36
 194 0054 1CAB     		add	r3, sp, #112
 195 0056 07CC     		ldmia	r4!, {r0, r1, r2}
 196 0058 07C3     		stmia	r3!, {r0, r1, r2}
 197              	.LBE9:
 198              	.LBE8:
  58:Core/Src/Fusion/FusionOffset.c **** 
  59:Core/Src/Fusion/FusionOffset.c ****     // Reset timer if gyroscope not stationary
  60:Core/Src/Fusion/FusionOffset.c ****     if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyros
 199              		.loc 1 60 5 is_stmt 1 view .LVU37
 200              		.loc 1 60 10 is_stmt 0 view .LVU38
 201 005a 4B46     		mov	r3, r9
 202 005c 5800     		lsls	r0, r3, #1
 203 005e 4008     		lsrs	r0, r0, #1
 204              		.loc 1 60 8 view .LVU39
 205 0060 3A49     		ldr	r1, .L12
 206 0062 FFF7FEFF 		bl	__aeabi_fcmpgt
 207              	.LVL12:
 208 0066 0028     		cmp	r0, #0
 209 0068 57D1     		bne	.L5
 210              		.loc 1 60 50 discriminator 1 view .LVU40
 211 006a 5346     		mov	r3, r10
 212 006c 5800     		lsls	r0, r3, #1
 213 006e 4008     		lsrs	r0, r0, #1
 214              		.loc 1 60 46 discriminator 1 view .LVU41
 215 0070 3649     		ldr	r1, .L12
 216 0072 FFF7FEFF 		bl	__aeabi_fcmpgt
 217              	.LVL13:
 218 0076 0028     		cmp	r0, #0
 219 0078 4FD1     		bne	.L5
 220              		.loc 1 60 90 discriminator 2 view .LVU42
 221 007a 7800     		lsls	r0, r7, #1
 222 007c 4008     		lsrs	r0, r0, #1
 223              		.loc 1 60 86 discriminator 2 view .LVU43
 224 007e 3349     		ldr	r1, .L12
 225 0080 FFF7FEFF 		bl	__aeabi_fcmpgt
 226              	.LVL14:
 227 0084 0028     		cmp	r0, #0
 228 0086 48D1     		bne	.L5
  61:Core/Src/Fusion/FusionOffset.c ****         offset->timer = 0;
  62:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
  63:Core/Src/Fusion/FusionOffset.c ****     }
  64:Core/Src/Fusion/FusionOffset.c **** 
  65:Core/Src/Fusion/FusionOffset.c ****     // Increment timer while gyroscope stationary
  66:Core/Src/Fusion/FusionOffset.c ****     if (offset->timer < offset->timeout) {
 229              		.loc 1 66 5 is_stmt 1 view .LVU44
 230              		.loc 1 66 15 is_stmt 0 view .LVU45
ARM GAS  /tmp/ccWNIuVW.s 			page 10


 231 0088 B368     		ldr	r3, [r6, #8]
 232              		.loc 1 66 8 view .LVU46
 233 008a 7268     		ldr	r2, [r6, #4]
 234 008c 9342     		cmp	r3, r2
 235 008e 55D3     		bcc	.L11
  67:Core/Src/Fusion/FusionOffset.c ****         offset->timer++;
  68:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
  69:Core/Src/Fusion/FusionOffset.c ****     }
  70:Core/Src/Fusion/FusionOffset.c **** 
  71:Core/Src/Fusion/FusionOffset.c ****     // Adjust offset if timer has elapsed
  72:Core/Src/Fusion/FusionOffset.c ****     offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(g
 236              		.loc 1 72 5 is_stmt 1 view .LVU47
 237              		.loc 1 72 31 is_stmt 0 view .LVU48
 238 0090 3368     		ldr	r3, [r6]
 239 0092 9B46     		mov	fp, r3
 240 0094 06AB     		add	r3, sp, #24
 241 0096 9846     		mov	r8, r3
 242 0098 1CAA     		add	r2, sp, #112
 243 009a 13CA     		ldmia	r2!, {r0, r1, r4}
 244 009c 13C3     		stmia	r3!, {r0, r1, r4}
 245              	.LVL15:
 246              	.LBB10:
 247              	.LBI10:
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 248              		.loc 2 238 28 is_stmt 1 view .LVU49
 249              	.LBB11:
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 250              		.loc 2 239 5 view .LVU50
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 251              		.loc 2 240 5 view .LVU51
 252              		.loc 2 240 35 is_stmt 0 view .LVU52
 253 009e 4946     		mov	r1, r9
 254 00a0 5846     		mov	r0, fp
 255 00a2 FFF7FEFF 		bl	__aeabi_fmul
 256              	.LVL16:
 257              		.loc 2 240 35 view .LVU53
 258 00a6 8146     		mov	r9, r0
 259              		.loc 2 240 19 view .LVU54
 260 00a8 09AC     		add	r4, sp, #36
 261 00aa 0990     		str	r0, [sp, #36]
ARM GAS  /tmp/ccWNIuVW.s 			page 11


 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 262              		.loc 2 241 5 is_stmt 1 view .LVU55
 263              		.loc 2 241 35 is_stmt 0 view .LVU56
 264 00ac 5146     		mov	r1, r10
 265 00ae 5846     		mov	r0, fp
 266 00b0 FFF7FEFF 		bl	__aeabi_fmul
 267              	.LVL17:
 268 00b4 8246     		mov	r10, r0
 269              		.loc 2 241 19 view .LVU57
 270 00b6 0A90     		str	r0, [sp, #40]
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 271              		.loc 2 242 5 is_stmt 1 view .LVU58
 272              		.loc 2 242 35 is_stmt 0 view .LVU59
 273 00b8 391C     		adds	r1, r7, #0
 274 00ba 5846     		mov	r0, fp
 275 00bc FFF7FEFF 		bl	__aeabi_fmul
 276              	.LVL18:
 277 00c0 8346     		mov	fp, r0
 278              	.LVL19:
 279              		.loc 2 242 19 view .LVU60
 280 00c2 0B90     		str	r0, [sp, #44]
 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 281              		.loc 2 243 5 is_stmt 1 view .LVU61
 282              		.loc 2 243 12 is_stmt 0 view .LVU62
 283 00c4 0CAB     		add	r3, sp, #48
 284 00c6 9C46     		mov	ip, r3
 285 00c8 2200     		movs	r2, r4
 286 00ca A1CA     		ldmia	r2!, {r0, r5, r7}
 287 00cc A1C3     		stmia	r3!, {r0, r5, r7}
 288              		.loc 2 243 12 view .LVU63
 289 00ce 03AF     		add	r7, sp, #12
 290 00d0 3300     		movs	r3, r6
 291 00d2 0C33     		adds	r3, r3, #12
 292 00d4 3A00     		movs	r2, r7
 293 00d6 23CB     		ldmia	r3!, {r0, r1, r5}
 294 00d8 23C2     		stmia	r2!, {r0, r1, r5}
 295 00da 0C22     		movs	r2, #12
 296 00dc 6146     		mov	r1, ip
 297 00de 4046     		mov	r0, r8
 298 00e0 FFF7FEFF 		bl	memcpy
 299              	.LVL20:
 300              	.LBE11:
 301              	.LBE10:
 302              	.LBB12:
 303              	.LBI12:
 201:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 304              		.loc 2 201 28 is_stmt 1 view .LVU64
 305              	.LBB13:
 202:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 306              		.loc 2 202 5 view .LVU65
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 307              		.loc 2 203 5 view .LVU66
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 308              		.loc 2 203 36 is_stmt 0 view .LVU67
 309 00e4 4946     		mov	r1, r9
 310 00e6 0398     		ldr	r0, [sp, #12]
 311 00e8 FFF7FEFF 		bl	__aeabi_fadd
ARM GAS  /tmp/ccWNIuVW.s 			page 12


 312              	.LVL21:
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 313              		.loc 2 203 19 view .LVU68
 314 00ec 0990     		str	r0, [sp, #36]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 315              		.loc 2 204 5 is_stmt 1 view .LVU69
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 316              		.loc 2 204 36 is_stmt 0 view .LVU70
 317 00ee 5146     		mov	r1, r10
 318 00f0 0498     		ldr	r0, [sp, #16]
 319 00f2 FFF7FEFF 		bl	__aeabi_fadd
 320              	.LVL22:
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 321              		.loc 2 204 19 view .LVU71
 322 00f6 0A90     		str	r0, [sp, #40]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 323              		.loc 2 205 5 is_stmt 1 view .LVU72
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 324              		.loc 2 205 33 is_stmt 0 view .LVU73
 325 00f8 0598     		ldr	r0, [sp, #20]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 326              		.loc 2 205 36 view .LVU74
 327 00fa 5946     		mov	r1, fp
 328 00fc FFF7FEFF 		bl	__aeabi_fadd
 329              	.LVL23:
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 330              		.loc 2 205 19 view .LVU75
 331 0100 0B90     		str	r0, [sp, #44]
 206:Core/Inc/Fusion/FusionMath.h **** }
 332              		.loc 2 206 5 is_stmt 1 view .LVU76
 206:Core/Inc/Fusion/FusionMath.h **** }
 333              		.loc 2 206 12 is_stmt 0 view .LVU77
 334 0102 0FAB     		add	r3, sp, #60
 335 0104 1A00     		movs	r2, r3
 336 0106 23CC     		ldmia	r4!, {r0, r1, r5}
 337 0108 23C2     		stmia	r2!, {r0, r1, r5}
 338              	.LBE13:
 339              	.LBE12:
 340              		.loc 1 72 31 view .LVU78
 341 010a 0C36     		adds	r6, r6, #12
 342              	.LVL24:
 343              		.loc 1 72 31 view .LVU79
 344 010c 07CB     		ldmia	r3!, {r0, r1, r2}
 345 010e 07C6     		stmia	r6!, {r0, r1, r2}
 346              	.LVL25:
  73:Core/Src/Fusion/FusionOffset.c ****     return gyroscope;
 347              		.loc 1 73 5 is_stmt 1 view .LVU80
 348              		.loc 1 73 12 is_stmt 0 view .LVU81
 349 0110 019B     		ldr	r3, [sp, #4]
 350 0112 1CAA     		add	r2, sp, #112
 351 0114 13CA     		ldmia	r2!, {r0, r1, r4}
 352 0116 13C3     		stmia	r3!, {r0, r1, r4}
 353 0118 05E0     		b	.L4
 354              	.LVL26:
 355              	.L5:
  61:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 356              		.loc 1 61 9 is_stmt 1 view .LVU82
ARM GAS  /tmp/ccWNIuVW.s 			page 13


  61:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 357              		.loc 1 61 23 is_stmt 0 view .LVU83
 358 011a 0023     		movs	r3, #0
 359 011c B360     		str	r3, [r6, #8]
  62:Core/Src/Fusion/FusionOffset.c ****     }
 360              		.loc 1 62 9 is_stmt 1 view .LVU84
  62:Core/Src/Fusion/FusionOffset.c ****     }
 361              		.loc 1 62 16 is_stmt 0 view .LVU85
 362 011e 019B     		ldr	r3, [sp, #4]
 363 0120 1CAA     		add	r2, sp, #112
 364 0122 13CA     		ldmia	r2!, {r0, r1, r4}
 365 0124 13C3     		stmia	r3!, {r0, r1, r4}
 366              	.LVL27:
 367              	.L4:
  74:Core/Src/Fusion/FusionOffset.c **** }
 368              		.loc 1 74 1 view .LVU86
 369 0126 0198     		ldr	r0, [sp, #4]
 370 0128 13B0     		add	sp, sp, #76
 371              		@ sp needed
 372 012a F0BC     		pop	{r4, r5, r6, r7}
 373 012c BB46     		mov	fp, r7
 374 012e B246     		mov	r10, r6
 375 0130 A946     		mov	r9, r5
 376 0132 A046     		mov	r8, r4
 377 0134 F0BC     		pop	{r4, r5, r6, r7}
 378 0136 08BC     		pop	{r3}
 379 0138 02B0     		add	sp, sp, #8
 380 013a 1847     		bx	r3
 381              	.LVL28:
 382              	.L11:
  67:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 383              		.loc 1 67 9 is_stmt 1 view .LVU87
  67:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 384              		.loc 1 67 22 is_stmt 0 view .LVU88
 385 013c 0133     		adds	r3, r3, #1
 386 013e B360     		str	r3, [r6, #8]
  68:Core/Src/Fusion/FusionOffset.c ****     }
 387              		.loc 1 68 9 is_stmt 1 view .LVU89
  68:Core/Src/Fusion/FusionOffset.c ****     }
 388              		.loc 1 68 16 is_stmt 0 view .LVU90
 389 0140 019B     		ldr	r3, [sp, #4]
 390 0142 1CAA     		add	r2, sp, #112
 391 0144 13CA     		ldmia	r2!, {r0, r1, r4}
 392 0146 13C3     		stmia	r3!, {r0, r1, r4}
 393              	.LVL29:
  68:Core/Src/Fusion/FusionOffset.c ****     }
 394              		.loc 1 68 16 view .LVU91
 395 0148 EDE7     		b	.L4
 396              	.L13:
 397 014a C046     		.align	2
 398              	.L12:
 399 014c 00004040 		.word	1077936128
 400              		.cfi_endproc
 401              	.LFE22:
 403              		.text
 404              	.Letext0:
 405              		.file 3 "Core/Inc/Fusion/FusionOffset.h"
ARM GAS  /tmp/ccWNIuVW.s 			page 14


 406              		.file 4 "<built-in>"
ARM GAS  /tmp/ccWNIuVW.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FusionOffset.c
     /tmp/ccWNIuVW.s:19     .text.FusionOffsetInitialise:0000000000000000 $t
     /tmp/ccWNIuVW.s:27     .text.FusionOffsetInitialise:0000000000000000 FusionOffsetInitialise
     /tmp/ccWNIuVW.s:90     .text.FusionOffsetInitialise:0000000000000034 $d
     /tmp/ccWNIuVW.s:98     .text.FusionOffsetUpdate:0000000000000000 $t
     /tmp/ccWNIuVW.s:105    .text.FusionOffsetUpdate:0000000000000000 FusionOffsetUpdate
     /tmp/ccWNIuVW.s:399    .text.FusionOffsetUpdate:000000000000014c $d

UNDEFINED SYMBOLS
__aeabi_ui2f
__aeabi_fdiv
__aeabi_fmul
__aeabi_fsub
__aeabi_fcmpgt
__aeabi_fadd
memcpy

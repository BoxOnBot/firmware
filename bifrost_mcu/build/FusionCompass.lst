ARM GAS  /tmp/ccOMjGby.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"FusionCompass.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_fmul
  16              		.global	__aeabi_fsub
  17              		.global	__aeabi_fadd
  18              		.section	.text.FusionCompassCalculateHeading,"ax",%progbits
  19              		.align	1
  20              		.global	FusionCompassCalculateHeading
  21              		.arch armv6s-m
  22              		.syntax unified
  23              		.code	16
  24              		.thumb_func
  25              		.fpu softvfp
  27              	FusionCompassCalculateHeading:
  28              	.LFB21:
  29              		.file 1 "Core/Src/Fusion/FusionCompass.c"
   1:Core/Src/Fusion/FusionCompass.c **** /**
   2:Core/Src/Fusion/FusionCompass.c ****  * @file FusionCompass.c
   3:Core/Src/Fusion/FusionCompass.c ****  * @author Seb Madgwick
   4:Core/Src/Fusion/FusionCompass.c ****  * @brief Tilt-compensated compass to calculate an heading relative to magnetic
   5:Core/Src/Fusion/FusionCompass.c ****  * north using accelerometer and magnetometer measurements.
   6:Core/Src/Fusion/FusionCompass.c ****  */
   7:Core/Src/Fusion/FusionCompass.c **** 
   8:Core/Src/Fusion/FusionCompass.c **** //------------------------------------------------------------------------------
   9:Core/Src/Fusion/FusionCompass.c **** // Includes
  10:Core/Src/Fusion/FusionCompass.c **** 
  11:Core/Src/Fusion/FusionCompass.c **** #include "FusionCompass.h"
  12:Core/Src/Fusion/FusionCompass.c **** #include <math.h> // atan2f
  13:Core/Src/Fusion/FusionCompass.c **** 
  14:Core/Src/Fusion/FusionCompass.c **** //------------------------------------------------------------------------------
  15:Core/Src/Fusion/FusionCompass.c **** // Functions
  16:Core/Src/Fusion/FusionCompass.c **** 
  17:Core/Src/Fusion/FusionCompass.c **** /**
  18:Core/Src/Fusion/FusionCompass.c ****  * @brief Calculates the heading relative to magnetic north.
  19:Core/Src/Fusion/FusionCompass.c ****  * @param accelerometer Accelerometer measurement in any calibrated units.
  20:Core/Src/Fusion/FusionCompass.c ****  * @param magnetometer Magnetometer measurement in any calibrated units.
  21:Core/Src/Fusion/FusionCompass.c ****  * @return Heading angle in degrees.
  22:Core/Src/Fusion/FusionCompass.c ****  */
  23:Core/Src/Fusion/FusionCompass.c **** float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetomet
  30              		.loc 1 23 104 view -0
  31              		.cfi_startproc
  32              		@ args = 16, pretend = 8, frame = 160
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
ARM GAS  /tmp/ccOMjGby.s 			page 2


  36              		.cfi_def_cfa_offset 8
  37 0002 F0B5     		push	{r4, r5, r6, r7, lr}
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 28
  40              		.cfi_offset 4, -28
  41              		.cfi_offset 5, -24
  42              		.cfi_offset 6, -20
  43              		.cfi_offset 7, -16
  44              		.cfi_offset 14, -12
  45 0004 DE46     		mov	lr, fp
  46 0006 5746     		mov	r7, r10
  47 0008 4E46     		mov	r6, r9
  48 000a 4546     		mov	r5, r8
  49 000c E0B5     		push	{r5, r6, r7, lr}
  50              	.LCFI2:
  51              		.cfi_def_cfa_offset 44
  52              		.cfi_offset 8, -44
  53              		.cfi_offset 9, -40
  54              		.cfi_offset 10, -36
  55              		.cfi_offset 11, -32
  56 000e A9B0     		sub	sp, sp, #164
  57              	.LCFI3:
  58              		.cfi_def_cfa_offset 208
  59 0010 0390     		str	r0, [sp, #12]
  60 0012 0491     		str	r1, [sp, #16]
  61 0014 0592     		str	r2, [sp, #20]
  62 0016 33AA     		add	r2, sp, #204
  63 0018 3393     		str	r3, [sp, #204]
  24:Core/Src/Fusion/FusionCompass.c **** 
  25:Core/Src/Fusion/FusionCompass.c ****     // Compute direction of magnetic west (Earth's y axis)
  26:Core/Src/Fusion/FusionCompass.c ****     const FusionVector magneticWest = FusionVectorNormalise(FusionVectorCrossProduct(accelerometer,
  64              		.loc 1 26 5 view .LVU1
  65 001a 0DAE     		add	r6, sp, #52
  66 001c 3300     		movs	r3, r6
  67 001e 03A9     		add	r1, sp, #12
  68 0020 31C9     		ldmia	r1!, {r0, r4, r5}
  69 0022 31C3     		stmia	r3!, {r0, r4, r5}
  70 0024 1D00     		movs	r5, r3
  71 0026 13CA     		ldmia	r2!, {r0, r1, r4}
  72 0028 13C3     		stmia	r3!, {r0, r1, r4}
  73              	.LBB42:
  74              	.LBI42:
  75              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
ARM GAS  /tmp/ccOMjGby.s 			page 3


  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
ARM GAS  /tmp/ccOMjGby.s 			page 4


  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
ARM GAS  /tmp/ccOMjGby.s 			page 5


 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
ARM GAS  /tmp/ccOMjGby.s 			page 6


 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
ARM GAS  /tmp/ccOMjGby.s 			page 7


 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 244:Core/Inc/Fusion/FusionMath.h **** }
 245:Core/Inc/Fusion/FusionMath.h **** 
 246:Core/Inc/Fusion/FusionMath.h **** /**
 247:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 248:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 249:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 250:Core/Inc/Fusion/FusionMath.h ****  * @return Hadamard product.
 251:Core/Inc/Fusion/FusionMath.h ****  */
 252:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 253:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 256:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 257:Core/Inc/Fusion/FusionMath.h ****     return result;
 258:Core/Inc/Fusion/FusionMath.h **** }
 259:Core/Inc/Fusion/FusionMath.h **** 
 260:Core/Inc/Fusion/FusionMath.h **** /**
 261:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the cross product.
 262:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 263:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 264:Core/Inc/Fusion/FusionMath.h ****  * @return Cross product.
 265:Core/Inc/Fusion/FusionMath.h ****  */
 266:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
  76              		.loc 2 266 28 view .LVU2
  77              	.LBB43:
 267:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 268:Core/Inc/Fusion/FusionMath.h **** #define B vectorB.axis
 269:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
  78              		.loc 2 269 5 view .LVU3
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
  79              		.loc 2 270 5 view .LVU4
  80              		.loc 2 270 22 is_stmt 0 view .LVU5
  81 002a 0E9B     		ldr	r3, [sp, #56]
  82 002c 9846     		mov	r8, r3
  83              		.loc 2 270 28 view .LVU6
  84 002e AB68     		ldr	r3, [r5, #8]
  85 0030 9B46     		mov	fp, r3
  86              		.loc 2 270 25 view .LVU7
  87 0032 191C     		adds	r1, r3, #0
  88 0034 4046     		mov	r0, r8
  89 0036 FFF7FEFF 		bl	__aeabi_fmul
  90              	.LVL0:
  91 003a 041C     		adds	r4, r0, #0
  92              		.loc 2 270 34 view .LVU8
  93 003c 0F9B     		ldr	r3, [sp, #60]
  94 003e 9A46     		mov	r10, r3
  95              		.loc 2 270 40 view .LVU9
  96 0040 6B68     		ldr	r3, [r5, #4]
  97 0042 1F1C     		adds	r7, r3, #0
  98              		.loc 2 270 37 view .LVU10
  99 0044 191C     		adds	r1, r3, #0
 100 0046 5046     		mov	r0, r10
 101 0048 FFF7FEFF 		bl	__aeabi_fmul
 102              	.LVL1:
 103 004c 011C     		adds	r1, r0, #0
 104              		.loc 2 270 31 view .LVU11
ARM GAS  /tmp/ccOMjGby.s 			page 8


 105 004e 201C     		adds	r0, r4, #0
 106 0050 FFF7FEFF 		bl	__aeabi_fsub
 107              	.LVL2:
 108              		.loc 2 270 19 view .LVU12
 109 0054 13AC     		add	r4, sp, #76
 110 0056 1390     		str	r0, [sp, #76]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 111              		.loc 2 271 5 is_stmt 1 view .LVU13
 112              		.loc 2 271 28 is_stmt 0 view .LVU14
 113 0058 109B     		ldr	r3, [sp, #64]
 114 005a 9946     		mov	r9, r3
 115              		.loc 2 271 25 view .LVU15
 116 005c 191C     		adds	r1, r3, #0
 117 005e 5046     		mov	r0, r10
 118 0060 FFF7FEFF 		bl	__aeabi_fmul
 119              	.LVL3:
 120 0064 0090     		str	r0, [sp]
 121              		.loc 2 271 34 view .LVU16
 122 0066 0D9B     		ldr	r3, [sp, #52]
 123 0068 9A46     		mov	r10, r3
 124              		.loc 2 271 37 view .LVU17
 125 006a 191C     		adds	r1, r3, #0
 126 006c 5846     		mov	r0, fp
 127 006e FFF7FEFF 		bl	__aeabi_fmul
 128              	.LVL4:
 129 0072 011C     		adds	r1, r0, #0
 130              		.loc 2 271 31 view .LVU18
 131 0074 0098     		ldr	r0, [sp]
 132 0076 FFF7FEFF 		bl	__aeabi_fsub
 133              	.LVL5:
 134              		.loc 2 271 19 view .LVU19
 135 007a 6060     		str	r0, [r4, #4]
 272:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 136              		.loc 2 272 5 is_stmt 1 view .LVU20
 137              		.loc 2 272 25 is_stmt 0 view .LVU21
 138 007c 5146     		mov	r1, r10
 139 007e 381C     		adds	r0, r7, #0
 140 0080 FFF7FEFF 		bl	__aeabi_fmul
 141              	.LVL6:
 142 0084 8246     		mov	r10, r0
 143              		.loc 2 272 37 view .LVU22
 144 0086 4946     		mov	r1, r9
 145 0088 4046     		mov	r0, r8
 146 008a FFF7FEFF 		bl	__aeabi_fmul
 147              	.LVL7:
 148 008e 011C     		adds	r1, r0, #0
 149              		.loc 2 272 31 view .LVU23
 150 0090 5046     		mov	r0, r10
 151 0092 FFF7FEFF 		bl	__aeabi_fsub
 152              	.LVL8:
 153              		.loc 2 272 19 view .LVU24
 154 0096 A060     		str	r0, [r4, #8]
 273:Core/Inc/Fusion/FusionMath.h ****     return result;
 155              		.loc 2 273 5 is_stmt 1 view .LVU25
 156              		.loc 2 273 12 is_stmt 0 view .LVU26
 157 0098 1CAB     		add	r3, sp, #112
 158 009a 9C46     		mov	ip, r3
ARM GAS  /tmp/ccOMjGby.s 			page 9


 159 009c 1A00     		movs	r2, r3
 160 009e 2100     		movs	r1, r4
 161 00a0 89C9     		ldmia	r1!, {r0, r3, r7}
 162 00a2 89C2     		stmia	r2!, {r0, r3, r7}
 163 00a4 07AA     		add	r2, sp, #28
 164 00a6 9046     		mov	r8, r2
 165 00a8 6346     		mov	r3, ip
 166 00aa 83CB     		ldmia	r3!, {r0, r1, r7}
 167 00ac 83C2     		stmia	r2!, {r0, r1, r7}
 168              	.LBE43:
 169              	.LBE42:
 170              	.LBB44:
 171              	.LBI44:
 274:Core/Inc/Fusion/FusionMath.h **** #undef A
 275:Core/Inc/Fusion/FusionMath.h **** #undef B
 276:Core/Inc/Fusion/FusionMath.h **** }
 277:Core/Inc/Fusion/FusionMath.h **** 
 278:Core/Inc/Fusion/FusionMath.h **** /**
 279:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 280:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 281:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude squared.
 282:Core/Inc/Fusion/FusionMath.h ****  */
 283:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 284:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 285:Core/Inc/Fusion/FusionMath.h **** }
 286:Core/Inc/Fusion/FusionMath.h **** 
 287:Core/Inc/Fusion/FusionMath.h **** /**
 288:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude.
 289:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 290:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude.
 291:Core/Inc/Fusion/FusionMath.h ****  */
 292:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 293:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 294:Core/Inc/Fusion/FusionMath.h **** }
 295:Core/Inc/Fusion/FusionMath.h **** 
 296:Core/Inc/Fusion/FusionMath.h **** /**
 297:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised vector.
 298:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 299:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised vector.
 300:Core/Inc/Fusion/FusionMath.h ****  */
 301:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 172              		.loc 2 301 28 is_stmt 1 view .LVU27
 173              	.LBB45:
 302:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 303:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 304:Core/Inc/Fusion/FusionMath.h **** #else
 305:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 174              		.loc 2 305 5 view .LVU28
 175 00ae 1300     		movs	r3, r2
 176 00b0 9246     		mov	r10, r2
 177 00b2 4246     		mov	r2, r8
 178 00b4 83CA     		ldmia	r2!, {r0, r1, r7}
 179 00b6 83C3     		stmia	r3!, {r0, r1, r7}
 180              	.LBB46:
 181              	.LBI46:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 182              		.loc 2 283 21 view .LVU29
ARM GAS  /tmp/ccOMjGby.s 			page 10


 183              	.LBB47:
 284:Core/Inc/Fusion/FusionMath.h **** }
 184              		.loc 2 284 5 view .LVU30
 185 00b8 0C22     		movs	r2, #12
 186 00ba 5146     		mov	r1, r10
 187 00bc 2800     		movs	r0, r5
 188 00be FFF7FEFF 		bl	memcpy
 189              	.LVL9:
 190 00c2 3300     		movs	r3, r6
 191 00c4 5246     		mov	r2, r10
 192 00c6 83CA     		ldmia	r2!, {r0, r1, r7}
 193 00c8 83C3     		stmia	r3!, {r0, r1, r7}
 194              	.LBB48:
 195              	.LBI48:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 196              		.loc 2 252 28 view .LVU31
 197              	.LBB49:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 198              		.loc 2 253 5 view .LVU32
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 199              		.loc 2 254 5 view .LVU33
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 200              		.loc 2 254 36 is_stmt 0 view .LVU34
 201 00ca 0D99     		ldr	r1, [sp, #52]
 202 00cc 1098     		ldr	r0, [sp, #64]
 203 00ce FFF7FEFF 		bl	__aeabi_fmul
 204              	.LVL10:
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 205              		.loc 2 254 19 view .LVU35
 206 00d2 0090     		str	r0, [sp]
 207 00d4 1390     		str	r0, [sp, #76]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 208              		.loc 2 255 5 is_stmt 1 view .LVU36
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 209              		.loc 2 255 36 is_stmt 0 view .LVU37
 210 00d6 0E99     		ldr	r1, [sp, #56]
 211 00d8 6868     		ldr	r0, [r5, #4]
 212 00da FFF7FEFF 		bl	__aeabi_fmul
 213              	.LVL11:
 214 00de 8346     		mov	fp, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 215              		.loc 2 255 19 view .LVU38
 216 00e0 6060     		str	r0, [r4, #4]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 217              		.loc 2 256 5 is_stmt 1 view .LVU39
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 218              		.loc 2 256 36 is_stmt 0 view .LVU40
 219 00e2 0F99     		ldr	r1, [sp, #60]
 220 00e4 A868     		ldr	r0, [r5, #8]
 221 00e6 FFF7FEFF 		bl	__aeabi_fmul
 222              	.LVL12:
 223 00ea 8146     		mov	r9, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 224              		.loc 2 256 19 view .LVU41
 225 00ec A060     		str	r0, [r4, #8]
 257:Core/Inc/Fusion/FusionMath.h **** }
 226              		.loc 2 257 5 is_stmt 1 view .LVU42
ARM GAS  /tmp/ccOMjGby.s 			page 11


 257:Core/Inc/Fusion/FusionMath.h **** }
 227              		.loc 2 257 12 is_stmt 0 view .LVU43
 228 00ee 22AB     		add	r3, sp, #136
 229 00f0 9C46     		mov	ip, r3
 230 00f2 1A00     		movs	r2, r3
 231 00f4 2100     		movs	r1, r4
 232 00f6 89C9     		ldmia	r1!, {r0, r3, r7}
 233 00f8 89C2     		stmia	r2!, {r0, r3, r7}
 234 00fa 2200     		movs	r2, r4
 235 00fc 6346     		mov	r3, ip
 236 00fe 83CB     		ldmia	r3!, {r0, r1, r7}
 237 0100 83C2     		stmia	r2!, {r0, r1, r7}
 238              	.LBE49:
 239              	.LBE48:
 240              	.LBB50:
 241              	.LBI50:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 242              		.loc 2 228 21 is_stmt 1 view .LVU44
 243              	.LBB51:
 229:Core/Inc/Fusion/FusionMath.h **** }
 244              		.loc 2 229 5 view .LVU45
 229:Core/Inc/Fusion/FusionMath.h **** }
 245              		.loc 2 229 26 is_stmt 0 view .LVU46
 246 0102 5946     		mov	r1, fp
 247 0104 0098     		ldr	r0, [sp]
 248 0106 FFF7FEFF 		bl	__aeabi_fadd
 249              	.LVL13:
 250 010a 011C     		adds	r1, r0, #0
 229:Core/Inc/Fusion/FusionMath.h **** }
 251              		.loc 2 229 42 view .LVU47
 252 010c 4846     		mov	r0, r9
 253 010e FFF7FEFF 		bl	__aeabi_fadd
 254              	.LVL14:
 229:Core/Inc/Fusion/FusionMath.h **** }
 255              		.loc 2 229 42 view .LVU48
 256              	.LBE51:
 257              	.LBE50:
 258              	.LBE47:
 259              	.LBE46:
 260              	.LBB52:
 261              	.LBI52:
 169:Core/Inc/Fusion/FusionMath.h **** 
 262              		.loc 2 169 21 is_stmt 1 view .LVU49
 263              	.LBB53:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 264              		.loc 2 171 5 view .LVU50
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 265              		.loc 2 176 5 view .LVU51
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 266              		.loc 2 177 5 view .LVU52
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 267              		.loc 2 177 41 is_stmt 0 view .LVU53
 268 0112 4310     		asrs	r3, r0, #1
 178:Core/Inc/Fusion/FusionMath.h **** }
 269              		.loc 2 178 5 is_stmt 1 view .LVU54
 270 0114 724A     		ldr	r2, .L2
 271 0116 D31A     		subs	r3, r2, r3
ARM GAS  /tmp/ccOMjGby.s 			page 12


 272 0118 9946     		mov	r9, r3
 178:Core/Inc/Fusion/FusionMath.h **** }
 273              		.loc 2 178 52 is_stmt 0 view .LVU55
 274 011a 7249     		ldr	r1, .L2+4
 275 011c FFF7FEFF 		bl	__aeabi_fmul
 276              	.LVL15:
 178:Core/Inc/Fusion/FusionMath.h **** }
 277              		.loc 2 178 52 view .LVU56
 278 0120 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 279              		.loc 2 178 56 view .LVU57
 280 0122 4846     		mov	r0, r9
 281 0124 FFF7FEFF 		bl	__aeabi_fmul
 282              	.LVL16:
 283 0128 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 284              		.loc 2 178 68 view .LVU58
 285 012a 4846     		mov	r0, r9
 286 012c FFF7FEFF 		bl	__aeabi_fmul
 287              	.LVL17:
 288 0130 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 289              		.loc 2 178 37 view .LVU59
 290 0132 6D48     		ldr	r0, .L2+8
 291 0134 FFF7FEFF 		bl	__aeabi_fsub
 292              	.LVL18:
 293 0138 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 294              		.loc 2 178 22 view .LVU60
 295 013a 4846     		mov	r0, r9
 296 013c FFF7FEFF 		bl	__aeabi_fmul
 297              	.LVL19:
 298 0140 8146     		mov	r9, r0
 299              	.LVL20:
 178:Core/Inc/Fusion/FusionMath.h **** }
 300              		.loc 2 178 22 view .LVU61
 301              	.LBE53:
 302              	.LBE52:
 306:Core/Inc/Fusion/FusionMath.h **** #endif
 307:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 303              		.loc 2 307 5 is_stmt 1 view .LVU62
 304 0142 2B00     		movs	r3, r5
 305 0144 4146     		mov	r1, r8
 306 0146 85C9     		ldmia	r1!, {r0, r2, r7}
 307 0148 85C3     		stmia	r3!, {r0, r2, r7}
 308              	.LVL21:
 309              	.LBB54:
 310              	.LBI54:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 311              		.loc 2 238 28 view .LVU63
 312              	.LBB55:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 313              		.loc 2 239 5 view .LVU64
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 314              		.loc 2 240 5 view .LVU65
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 315              		.loc 2 240 35 is_stmt 0 view .LVU66
ARM GAS  /tmp/ccOMjGby.s 			page 13


 316 014a 1099     		ldr	r1, [sp, #64]
 317 014c 4846     		mov	r0, r9
 318 014e FFF7FEFF 		bl	__aeabi_fmul
 319              	.LVL22:
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 320              		.loc 2 240 19 view .LVU67
 321 0152 1390     		str	r0, [sp, #76]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 322              		.loc 2 241 5 is_stmt 1 view .LVU68
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 323              		.loc 2 241 35 is_stmt 0 view .LVU69
 324 0154 6968     		ldr	r1, [r5, #4]
 325 0156 4846     		mov	r0, r9
 326 0158 FFF7FEFF 		bl	__aeabi_fmul
 327              	.LVL23:
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 328              		.loc 2 241 19 view .LVU70
 329 015c 6060     		str	r0, [r4, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 330              		.loc 2 242 5 is_stmt 1 view .LVU71
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 331              		.loc 2 242 35 is_stmt 0 view .LVU72
 332 015e A968     		ldr	r1, [r5, #8]
 333 0160 4846     		mov	r0, r9
 334 0162 FFF7FEFF 		bl	__aeabi_fmul
 335              	.LVL24:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 336              		.loc 2 242 19 view .LVU73
 337 0166 A060     		str	r0, [r4, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 338              		.loc 2 243 5 is_stmt 1 view .LVU74
 243:Core/Inc/Fusion/FusionMath.h **** }
 339              		.loc 2 243 12 is_stmt 0 view .LVU75
 340 0168 19AB     		add	r3, sp, #100
 341 016a 9C46     		mov	ip, r3
 342 016c 1900     		movs	r1, r3
 343 016e 2000     		movs	r0, r4
 344 0170 8CC8     		ldmia	r0!, {r2, r3, r7}
 345 0172 8CC1     		stmia	r1!, {r2, r3, r7}
 346              	.LVL25:
 243:Core/Inc/Fusion/FusionMath.h **** }
 347              		.loc 2 243 12 view .LVU76
 348              	.LBE55:
 349              	.LBE54:
 350              	.LBE45:
 351              	.LBE44:
  27:Core/Src/Fusion/FusionCompass.c **** 
  28:Core/Src/Fusion/FusionCompass.c ****     // Compute direction of magnetic north (Earth's x axis)
  29:Core/Src/Fusion/FusionCompass.c ****     const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest,
 352              		.loc 1 29 5 is_stmt 1 view .LVU77
 353 0174 3100     		movs	r1, r6
 354 0176 6346     		mov	r3, ip
 355 0178 85CB     		ldmia	r3!, {r0, r2, r7}
 356 017a 85C1     		stmia	r1!, {r0, r2, r7}
 357 017c 2B00     		movs	r3, r5
 358 017e 03AF     		add	r7, sp, #12
 359 0180 07CF     		ldmia	r7!, {r0, r1, r2}
ARM GAS  /tmp/ccOMjGby.s 			page 14


 360 0182 07C3     		stmia	r3!, {r0, r1, r2}
 361              	.LBB56:
 362              	.LBI56:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 363              		.loc 2 266 28 view .LVU78
 364              	.LBB57:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 365              		.loc 2 269 5 view .LVU79
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 366              		.loc 2 270 5 view .LVU80
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 367              		.loc 2 270 22 is_stmt 0 view .LVU81
 368 0184 0E9B     		ldr	r3, [sp, #56]
 369 0186 9B46     		mov	fp, r3
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 370              		.loc 2 270 28 view .LVU82
 371 0188 AB68     		ldr	r3, [r5, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 372              		.loc 2 270 25 view .LVU83
 373 018a 0093     		str	r3, [sp]
 374 018c 191C     		adds	r1, r3, #0
 375 018e 5846     		mov	r0, fp
 376 0190 FFF7FEFF 		bl	__aeabi_fmul
 377              	.LVL26:
 378 0194 071C     		adds	r7, r0, #0
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 379              		.loc 2 270 34 view .LVU84
 380 0196 0F9B     		ldr	r3, [sp, #60]
 381 0198 9946     		mov	r9, r3
 382              	.LVL27:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 383              		.loc 2 270 40 view .LVU85
 384 019a 6B68     		ldr	r3, [r5, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 385              		.loc 2 270 37 view .LVU86
 386 019c 0193     		str	r3, [sp, #4]
 387 019e 191C     		adds	r1, r3, #0
 388 01a0 4846     		mov	r0, r9
 389 01a2 FFF7FEFF 		bl	__aeabi_fmul
 390              	.LVL28:
 391 01a6 011C     		adds	r1, r0, #0
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 392              		.loc 2 270 31 view .LVU87
 393 01a8 381C     		adds	r0, r7, #0
 394 01aa FFF7FEFF 		bl	__aeabi_fsub
 395              	.LVL29:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 396              		.loc 2 270 19 view .LVU88
 397 01ae 1390     		str	r0, [sp, #76]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 398              		.loc 2 271 5 is_stmt 1 view .LVU89
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 399              		.loc 2 271 28 is_stmt 0 view .LVU90
 400 01b0 109F     		ldr	r7, [sp, #64]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 401              		.loc 2 271 25 view .LVU91
 402 01b2 391C     		adds	r1, r7, #0
ARM GAS  /tmp/ccOMjGby.s 			page 15


 403 01b4 4846     		mov	r0, r9
 404 01b6 FFF7FEFF 		bl	__aeabi_fmul
 405              	.LVL30:
 406 01ba 0290     		str	r0, [sp, #8]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 407              		.loc 2 271 34 view .LVU92
 408 01bc 0D9B     		ldr	r3, [sp, #52]
 409 01be 9946     		mov	r9, r3
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 410              		.loc 2 271 37 view .LVU93
 411 01c0 191C     		adds	r1, r3, #0
 412 01c2 0098     		ldr	r0, [sp]
 413 01c4 FFF7FEFF 		bl	__aeabi_fmul
 414              	.LVL31:
 415 01c8 011C     		adds	r1, r0, #0
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 416              		.loc 2 271 31 view .LVU94
 417 01ca 0298     		ldr	r0, [sp, #8]
 418 01cc FFF7FEFF 		bl	__aeabi_fsub
 419              	.LVL32:
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 420              		.loc 2 271 19 view .LVU95
 421 01d0 6060     		str	r0, [r4, #4]
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 422              		.loc 2 272 5 is_stmt 1 view .LVU96
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 423              		.loc 2 272 25 is_stmt 0 view .LVU97
 424 01d2 4946     		mov	r1, r9
 425 01d4 0198     		ldr	r0, [sp, #4]
 426 01d6 FFF7FEFF 		bl	__aeabi_fmul
 427              	.LVL33:
 428 01da 8146     		mov	r9, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 429              		.loc 2 272 37 view .LVU98
 430 01dc 391C     		adds	r1, r7, #0
 431 01de 5846     		mov	r0, fp
 432 01e0 FFF7FEFF 		bl	__aeabi_fmul
 433              	.LVL34:
 434 01e4 011C     		adds	r1, r0, #0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 435              		.loc 2 272 31 view .LVU99
 436 01e6 4846     		mov	r0, r9
 437 01e8 FFF7FEFF 		bl	__aeabi_fsub
 438              	.LVL35:
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 439              		.loc 2 272 19 view .LVU100
 440 01ec A060     		str	r0, [r4, #8]
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 441              		.loc 2 273 5 is_stmt 1 view .LVU101
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 442              		.loc 2 273 12 is_stmt 0 view .LVU102
 443 01ee 1FAB     		add	r3, sp, #124
 444 01f0 9C46     		mov	ip, r3
 445 01f2 1900     		movs	r1, r3
 446 01f4 2000     		movs	r0, r4
 447 01f6 8CC8     		ldmia	r0!, {r2, r3, r7}
 448 01f8 8CC1     		stmia	r1!, {r2, r3, r7}
ARM GAS  /tmp/ccOMjGby.s 			page 16


 449 01fa 4146     		mov	r1, r8
 450 01fc 6346     		mov	r3, ip
 451 01fe 85CB     		ldmia	r3!, {r0, r2, r7}
 452 0200 85C1     		stmia	r1!, {r0, r2, r7}
 453              	.LBE57:
 454              	.LBE56:
 455              	.LBB58:
 456              	.LBI58:
 301:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 457              		.loc 2 301 28 is_stmt 1 view .LVU103
 458              	.LBB59:
 305:Core/Inc/Fusion/FusionMath.h **** #endif
 459              		.loc 2 305 5 view .LVU104
 460 0202 5346     		mov	r3, r10
 461 0204 4146     		mov	r1, r8
 462 0206 85C9     		ldmia	r1!, {r0, r2, r7}
 463 0208 85C3     		stmia	r3!, {r0, r2, r7}
 464              	.LBB60:
 465              	.LBI60:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 466              		.loc 2 283 21 view .LVU105
 467              	.LBB61:
 284:Core/Inc/Fusion/FusionMath.h **** }
 468              		.loc 2 284 5 view .LVU106
 469 020a 0C22     		movs	r2, #12
 470 020c 2800     		movs	r0, r5
 471 020e FFF7FEFF 		bl	memcpy
 472              	.LVL36:
 473 0212 3300     		movs	r3, r6
 474 0214 5146     		mov	r1, r10
 475 0216 85C9     		ldmia	r1!, {r0, r2, r7}
 476 0218 85C3     		stmia	r3!, {r0, r2, r7}
 477              	.LBB62:
 478              	.LBI62:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 479              		.loc 2 252 28 view .LVU107
 480              	.LBB63:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 481              		.loc 2 253 5 view .LVU108
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 482              		.loc 2 254 5 view .LVU109
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 483              		.loc 2 254 36 is_stmt 0 view .LVU110
 484 021a 0D99     		ldr	r1, [sp, #52]
 485 021c 1098     		ldr	r0, [sp, #64]
 486 021e FFF7FEFF 		bl	__aeabi_fmul
 487              	.LVL37:
 488 0222 071C     		adds	r7, r0, #0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 489              		.loc 2 254 19 view .LVU111
 490 0224 1390     		str	r0, [sp, #76]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 491              		.loc 2 255 5 is_stmt 1 view .LVU112
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 492              		.loc 2 255 36 is_stmt 0 view .LVU113
 493 0226 0E99     		ldr	r1, [sp, #56]
 494 0228 6868     		ldr	r0, [r5, #4]
ARM GAS  /tmp/ccOMjGby.s 			page 17


 495 022a FFF7FEFF 		bl	__aeabi_fmul
 496              	.LVL38:
 497 022e 8146     		mov	r9, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 498              		.loc 2 255 19 view .LVU114
 499 0230 6060     		str	r0, [r4, #4]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 500              		.loc 2 256 5 is_stmt 1 view .LVU115
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 501              		.loc 2 256 50 is_stmt 0 view .LVU116
 502 0232 0F99     		ldr	r1, [sp, #60]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 503              		.loc 2 256 36 view .LVU117
 504 0234 A868     		ldr	r0, [r5, #8]
 505 0236 FFF7FEFF 		bl	__aeabi_fmul
 506              	.LVL39:
 507 023a 8246     		mov	r10, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 508              		.loc 2 256 19 view .LVU118
 509 023c A060     		str	r0, [r4, #8]
 257:Core/Inc/Fusion/FusionMath.h **** }
 510              		.loc 2 257 5 is_stmt 1 view .LVU119
 257:Core/Inc/Fusion/FusionMath.h **** }
 511              		.loc 2 257 12 is_stmt 0 view .LVU120
 512 023e 25AB     		add	r3, sp, #148
 513 0240 9C46     		mov	ip, r3
 514 0242 1900     		movs	r1, r3
 515 0244 2000     		movs	r0, r4
 516 0246 4CC8     		ldmia	r0!, {r2, r3, r6}
 517 0248 4CC1     		stmia	r1!, {r2, r3, r6}
 518 024a 2100     		movs	r1, r4
 519 024c 6346     		mov	r3, ip
 520 024e 45CB     		ldmia	r3!, {r0, r2, r6}
 521 0250 45C1     		stmia	r1!, {r0, r2, r6}
 522              	.LBE63:
 523              	.LBE62:
 524              	.LBB64:
 525              	.LBI64:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 526              		.loc 2 228 21 is_stmt 1 view .LVU121
 527              	.LBB65:
 229:Core/Inc/Fusion/FusionMath.h **** }
 528              		.loc 2 229 5 view .LVU122
 229:Core/Inc/Fusion/FusionMath.h **** }
 529              		.loc 2 229 26 is_stmt 0 view .LVU123
 530 0252 4946     		mov	r1, r9
 531 0254 381C     		adds	r0, r7, #0
 532 0256 FFF7FEFF 		bl	__aeabi_fadd
 533              	.LVL40:
 534 025a 011C     		adds	r1, r0, #0
 229:Core/Inc/Fusion/FusionMath.h **** }
 535              		.loc 2 229 42 view .LVU124
 536 025c 5046     		mov	r0, r10
 537 025e FFF7FEFF 		bl	__aeabi_fadd
 538              	.LVL41:
 229:Core/Inc/Fusion/FusionMath.h **** }
 539              		.loc 2 229 42 view .LVU125
ARM GAS  /tmp/ccOMjGby.s 			page 18


 540              	.LBE65:
 541              	.LBE64:
 542              	.LBE61:
 543              	.LBE60:
 544              	.LBB66:
 545              	.LBI66:
 169:Core/Inc/Fusion/FusionMath.h **** 
 546              		.loc 2 169 21 is_stmt 1 view .LVU126
 547              	.LBB67:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 548              		.loc 2 171 5 view .LVU127
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 549              		.loc 2 176 5 view .LVU128
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 550              		.loc 2 177 5 view .LVU129
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 551              		.loc 2 177 41 is_stmt 0 view .LVU130
 552 0262 4610     		asrs	r6, r0, #1
 178:Core/Inc/Fusion/FusionMath.h **** }
 553              		.loc 2 178 5 is_stmt 1 view .LVU131
 554 0264 1E4A     		ldr	r2, .L2
 555 0266 961B     		subs	r6, r2, r6
 178:Core/Inc/Fusion/FusionMath.h **** }
 556              		.loc 2 178 52 is_stmt 0 view .LVU132
 557 0268 1E49     		ldr	r1, .L2+4
 558 026a FFF7FEFF 		bl	__aeabi_fmul
 559              	.LVL42:
 178:Core/Inc/Fusion/FusionMath.h **** }
 560              		.loc 2 178 52 view .LVU133
 561 026e 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 562              		.loc 2 178 56 view .LVU134
 563 0270 301C     		adds	r0, r6, #0
 564 0272 FFF7FEFF 		bl	__aeabi_fmul
 565              	.LVL43:
 566 0276 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 567              		.loc 2 178 68 view .LVU135
 568 0278 301C     		adds	r0, r6, #0
 569 027a FFF7FEFF 		bl	__aeabi_fmul
 570              	.LVL44:
 571 027e 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 572              		.loc 2 178 37 view .LVU136
 573 0280 1948     		ldr	r0, .L2+8
 574 0282 FFF7FEFF 		bl	__aeabi_fsub
 575              	.LVL45:
 576 0286 011C     		adds	r1, r0, #0
 178:Core/Inc/Fusion/FusionMath.h **** }
 577              		.loc 2 178 22 view .LVU137
 578 0288 301C     		adds	r0, r6, #0
 579 028a FFF7FEFF 		bl	__aeabi_fmul
 580              	.LVL46:
 581 028e 061C     		adds	r6, r0, #0
 582              	.LVL47:
 178:Core/Inc/Fusion/FusionMath.h **** }
 583              		.loc 2 178 22 view .LVU138
ARM GAS  /tmp/ccOMjGby.s 			page 19


 584              	.LBE67:
 585              	.LBE66:
 586              		.loc 2 307 5 is_stmt 1 view .LVU139
 587 0290 2B00     		movs	r3, r5
 588 0292 4246     		mov	r2, r8
 589 0294 83CA     		ldmia	r2!, {r0, r1, r7}
 590 0296 83C3     		stmia	r3!, {r0, r1, r7}
 591              	.LVL48:
 592              	.LBB68:
 593              	.LBI68:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 594              		.loc 2 238 28 view .LVU140
 595              	.LBB69:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 596              		.loc 2 239 5 view .LVU141
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 597              		.loc 2 240 5 view .LVU142
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 598              		.loc 2 240 35 is_stmt 0 view .LVU143
 599 0298 1099     		ldr	r1, [sp, #64]
 600 029a 301C     		adds	r0, r6, #0
 601 029c FFF7FEFF 		bl	__aeabi_fmul
 602              	.LVL49:
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 603              		.loc 2 240 19 view .LVU144
 604 02a0 1390     		str	r0, [sp, #76]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 605              		.loc 2 241 5 is_stmt 1 view .LVU145
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 606              		.loc 2 241 35 is_stmt 0 view .LVU146
 607 02a2 6968     		ldr	r1, [r5, #4]
 608 02a4 301C     		adds	r0, r6, #0
 609 02a6 FFF7FEFF 		bl	__aeabi_fmul
 610              	.LVL50:
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 611              		.loc 2 241 19 view .LVU147
 612 02aa 6060     		str	r0, [r4, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 613              		.loc 2 242 5 is_stmt 1 view .LVU148
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 614              		.loc 2 242 32 is_stmt 0 view .LVU149
 615 02ac A968     		ldr	r1, [r5, #8]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 616              		.loc 2 242 35 view .LVU150
 617 02ae 301C     		adds	r0, r6, #0
 618 02b0 FFF7FEFF 		bl	__aeabi_fmul
 619              	.LVL51:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 620              		.loc 2 242 19 view .LVU151
 621 02b4 A060     		str	r0, [r4, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 622              		.loc 2 243 5 is_stmt 1 view .LVU152
 243:Core/Inc/Fusion/FusionMath.h **** }
 623              		.loc 2 243 12 is_stmt 0 view .LVU153
 624 02b6 16AB     		add	r3, sp, #88
 625 02b8 07CC     		ldmia	r4!, {r0, r1, r2}
 626 02ba 07C3     		stmia	r3!, {r0, r1, r2}
ARM GAS  /tmp/ccOMjGby.s 			page 20


 627              	.LVL52:
 243:Core/Inc/Fusion/FusionMath.h **** }
 628              		.loc 2 243 12 view .LVU154
 629              	.LBE69:
 630              	.LBE68:
 631              	.LBE59:
 632              	.LBE58:
  30:Core/Src/Fusion/FusionCompass.c **** 
  31:Core/Src/Fusion/FusionCompass.c ****     // Calculate angular heading relative to magnetic north
  32:Core/Src/Fusion/FusionCompass.c ****     return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
 633              		.loc 1 32 5 is_stmt 1 view .LVU155
 634              		.loc 1 32 12 is_stmt 0 view .LVU156
 635 02bc 1699     		ldr	r1, [sp, #88]
 636 02be 1998     		ldr	r0, [sp, #100]
 637 02c0 FFF7FEFF 		bl	atan2f
 638              	.LVL53:
 639              	.LBB70:
 640              	.LBI70:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 641              		.loc 2 136 21 is_stmt 1 view .LVU157
 642              	.LBB71:
 137:Core/Inc/Fusion/FusionMath.h **** }
 643              		.loc 2 137 5 view .LVU158
 137:Core/Inc/Fusion/FusionMath.h **** }
 644              		.loc 2 137 20 is_stmt 0 view .LVU159
 645 02c4 0949     		ldr	r1, .L2+12
 646 02c6 FFF7FEFF 		bl	__aeabi_fmul
 647              	.LVL54:
 137:Core/Inc/Fusion/FusionMath.h **** }
 648              		.loc 2 137 20 view .LVU160
 649              	.LBE71:
 650              	.LBE70:
  33:Core/Src/Fusion/FusionCompass.c **** }
 651              		.loc 1 33 1 view .LVU161
 652 02ca 29B0     		add	sp, sp, #164
 653              		@ sp needed
 654              	.LVL55:
 655              		.loc 1 33 1 view .LVU162
 656 02cc F0BC     		pop	{r4, r5, r6, r7}
 657 02ce BB46     		mov	fp, r7
 658 02d0 B246     		mov	r10, r6
 659 02d2 A946     		mov	r9, r5
 660 02d4 A046     		mov	r8, r4
 661 02d6 F0BC     		pop	{r4, r5, r6, r7}
 662 02d8 08BC     		pop	{r3}
 663 02da 02B0     		add	sp, sp, #8
 664 02dc 1847     		bx	r3
 665              	.L3:
 666 02de C046     		.align	2
 667              	.L2:
 668 02e0 12141F5F 		.word	1595872274
 669 02e4 12D3363F 		.word	1060557586
 670 02e8 FF51D83F 		.word	1071141375
 671 02ec E02E6542 		.word	1113927392
 672              		.cfi_endproc
 673              	.LFE21:
 675              		.text
ARM GAS  /tmp/ccOMjGby.s 			page 21


 676              	.Letext0:
 677              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 678              		.file 4 "<built-in>"
 679              		.file 5 "/usr/include/newlib/math.h"
ARM GAS  /tmp/ccOMjGby.s 			page 22


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FusionCompass.c
     /tmp/ccOMjGby.s:19     .text.FusionCompassCalculateHeading:0000000000000000 $t
     /tmp/ccOMjGby.s:27     .text.FusionCompassCalculateHeading:0000000000000000 FusionCompassCalculateHeading
     /tmp/ccOMjGby.s:668    .text.FusionCompassCalculateHeading:00000000000002e0 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fsub
__aeabi_fadd
memcpy
atan2f

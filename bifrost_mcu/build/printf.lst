ARM GAS  /tmp/cca6dLeK.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"printf.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._out_buffer,"ax",%progbits
  16              		.align	1
  17              		.arch armv6s-m
  18              		.syntax unified
  19              		.code	16
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_out_buffer:
  24              	.LVL0:
  25              	.LFB0:
  26              		.file 1 "Core/Src/printf.c"
   1:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
   2:Core/Src/printf.c **** // \author (c) Marco Paland (info@paland.com)
   3:Core/Src/printf.c **** //             2014-2019, PALANDesign Hannover, Germany
   4:Core/Src/printf.c **** //
   5:Core/Src/printf.c **** // \license The MIT License (MIT)
   6:Core/Src/printf.c **** //
   7:Core/Src/printf.c **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   8:Core/Src/printf.c **** // of this software and associated documentation files (the "Software"), to deal
   9:Core/Src/printf.c **** // in the Software without restriction, including without limitation the rights
  10:Core/Src/printf.c **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:Core/Src/printf.c **** // copies of the Software, and to permit persons to whom the Software is
  12:Core/Src/printf.c **** // furnished to do so, subject to the following conditions:
  13:Core/Src/printf.c **** //
  14:Core/Src/printf.c **** // The above copyright notice and this permission notice shall be included in
  15:Core/Src/printf.c **** // all copies or substantial portions of the Software.
  16:Core/Src/printf.c **** //
  17:Core/Src/printf.c **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Core/Src/printf.c **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:Core/Src/printf.c **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:Core/Src/printf.c **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:Core/Src/printf.c **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:Core/Src/printf.c **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:Core/Src/printf.c **** // THE SOFTWARE.
  24:Core/Src/printf.c **** //
  25:Core/Src/printf.c **** // \brief Tiny printf, sprintf and (v)snprintf implementation, optimized for speed on
  26:Core/Src/printf.c **** //        embedded systems with a very limited resources. These routines are thread
  27:Core/Src/printf.c **** //        safe and reentrant!
  28:Core/Src/printf.c **** //        Use this instead of the bloated standard/newlib printf cause these use
  29:Core/Src/printf.c **** //        malloc for printf (and may not be thread safe).
  30:Core/Src/printf.c **** //
  31:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
  32:Core/Src/printf.c **** 
ARM GAS  /tmp/cca6dLeK.s 			page 2


  33:Core/Src/printf.c **** #include <stdbool.h>
  34:Core/Src/printf.c **** #include <stdint.h>
  35:Core/Src/printf.c **** 
  36:Core/Src/printf.c **** #include "printf.h"
  37:Core/Src/printf.c **** 
  38:Core/Src/printf.c **** 
  39:Core/Src/printf.c **** // define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the
  40:Core/Src/printf.c **** // printf_config.h header file
  41:Core/Src/printf.c **** // default: undefined
  42:Core/Src/printf.c **** #ifdef PRINTF_INCLUDE_CONFIG_H
  43:Core/Src/printf.c **** #include "printf_config.h"
  44:Core/Src/printf.c **** #endif
  45:Core/Src/printf.c **** 
  46:Core/Src/printf.c **** 
  47:Core/Src/printf.c **** // 'ntoa' conversion buffer size, this must be big enough to hold one converted
  48:Core/Src/printf.c **** // numeric number including padded zeros (dynamically created on stack)
  49:Core/Src/printf.c **** // default: 32 byte
  50:Core/Src/printf.c **** #ifndef PRINTF_NTOA_BUFFER_SIZE
  51:Core/Src/printf.c **** #define PRINTF_NTOA_BUFFER_SIZE    32U
  52:Core/Src/printf.c **** #endif
  53:Core/Src/printf.c **** 
  54:Core/Src/printf.c **** // 'ftoa' conversion buffer size, this must be big enough to hold one converted
  55:Core/Src/printf.c **** // float number including padded zeros (dynamically created on stack)
  56:Core/Src/printf.c **** // default: 32 byte
  57:Core/Src/printf.c **** #ifndef PRINTF_FTOA_BUFFER_SIZE
  58:Core/Src/printf.c **** #define PRINTF_FTOA_BUFFER_SIZE    32U
  59:Core/Src/printf.c **** #endif
  60:Core/Src/printf.c **** 
  61:Core/Src/printf.c **** // support for the floating point type (%f)
  62:Core/Src/printf.c **** // default: activated
  63:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_FLOAT
  64:Core/Src/printf.c **** #define PRINTF_SUPPORT_FLOAT
  65:Core/Src/printf.c **** #endif
  66:Core/Src/printf.c **** 
  67:Core/Src/printf.c **** // support for exponential floating point notation (%e/%g)
  68:Core/Src/printf.c **** // default: activated
  69:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_EXPONENTIAL
  70:Core/Src/printf.c **** #define PRINTF_SUPPORT_EXPONENTIAL
  71:Core/Src/printf.c **** #endif
  72:Core/Src/printf.c **** 
  73:Core/Src/printf.c **** // define the default floating point precision
  74:Core/Src/printf.c **** // default: 6 digits
  75:Core/Src/printf.c **** #ifndef PRINTF_DEFAULT_FLOAT_PRECISION
  76:Core/Src/printf.c **** #define PRINTF_DEFAULT_FLOAT_PRECISION  6U
  77:Core/Src/printf.c **** #endif
  78:Core/Src/printf.c **** 
  79:Core/Src/printf.c **** // define the largest float suitable to print with %f
  80:Core/Src/printf.c **** // default: 1e9
  81:Core/Src/printf.c **** #ifndef PRINTF_MAX_FLOAT
  82:Core/Src/printf.c **** #define PRINTF_MAX_FLOAT  1e9
  83:Core/Src/printf.c **** #endif
  84:Core/Src/printf.c **** 
  85:Core/Src/printf.c **** // support for the long long types (%llu or %p)
  86:Core/Src/printf.c **** // default: activated
  87:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG
  88:Core/Src/printf.c **** #define PRINTF_SUPPORT_LONG_LONG
  89:Core/Src/printf.c **** #endif
ARM GAS  /tmp/cca6dLeK.s 			page 3


  90:Core/Src/printf.c **** 
  91:Core/Src/printf.c **** // support for the ptrdiff_t type (%t)
  92:Core/Src/printf.c **** // ptrdiff_t is normally defined in <stddef.h> as long or long long type
  93:Core/Src/printf.c **** // default: activated
  94:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T
  95:Core/Src/printf.c **** #define PRINTF_SUPPORT_PTRDIFF_T
  96:Core/Src/printf.c **** #endif
  97:Core/Src/printf.c **** 
  98:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
  99:Core/Src/printf.c **** 
 100:Core/Src/printf.c **** // internal flag definitions
 101:Core/Src/printf.c **** #define FLAGS_ZEROPAD   (1U <<  0U)
 102:Core/Src/printf.c **** #define FLAGS_LEFT      (1U <<  1U)
 103:Core/Src/printf.c **** #define FLAGS_PLUS      (1U <<  2U)
 104:Core/Src/printf.c **** #define FLAGS_SPACE     (1U <<  3U)
 105:Core/Src/printf.c **** #define FLAGS_HASH      (1U <<  4U)
 106:Core/Src/printf.c **** #define FLAGS_UPPERCASE (1U <<  5U)
 107:Core/Src/printf.c **** #define FLAGS_CHAR      (1U <<  6U)
 108:Core/Src/printf.c **** #define FLAGS_SHORT     (1U <<  7U)
 109:Core/Src/printf.c **** #define FLAGS_LONG      (1U <<  8U)
 110:Core/Src/printf.c **** #define FLAGS_LONG_LONG (1U <<  9U)
 111:Core/Src/printf.c **** #define FLAGS_PRECISION (1U << 10U)
 112:Core/Src/printf.c **** #define FLAGS_ADAPT_EXP (1U << 11U)
 113:Core/Src/printf.c **** 
 114:Core/Src/printf.c **** 
 115:Core/Src/printf.c **** // import float.h for DBL_MAX
 116:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 117:Core/Src/printf.c **** #include <float.h>
 118:Core/Src/printf.c **** #endif
 119:Core/Src/printf.c **** 
 120:Core/Src/printf.c **** 
 121:Core/Src/printf.c **** // output function type
 122:Core/Src/printf.c **** typedef void (*out_fct_type)(char character, void* buffer, size_t idx, size_t maxlen);
 123:Core/Src/printf.c **** 
 124:Core/Src/printf.c **** 
 125:Core/Src/printf.c **** // wrapper (used as buffer) for output function type
 126:Core/Src/printf.c **** typedef struct {
 127:Core/Src/printf.c ****   void  (*fct)(char character, void* arg);
 128:Core/Src/printf.c ****   void* arg;
 129:Core/Src/printf.c **** } out_fct_wrap_type;
 130:Core/Src/printf.c **** 
 131:Core/Src/printf.c **** 
 132:Core/Src/printf.c **** // internal buffer output
 133:Core/Src/printf.c **** static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
 134:Core/Src/printf.c **** {
  27              		.loc 1 134 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 135:Core/Src/printf.c ****   if (idx < maxlen) {
  32              		.loc 1 135 3 view .LVU1
  33              		.loc 1 135 6 is_stmt 0 view .LVU2
  34 0000 9A42     		cmp	r2, r3
  35 0002 00D2     		bcs	.L1
 136:Core/Src/printf.c ****     ((char*)buffer)[idx] = character;
  36              		.loc 1 136 5 is_stmt 1 view .LVU3
ARM GAS  /tmp/cca6dLeK.s 			page 4


  37              		.loc 1 136 26 is_stmt 0 view .LVU4
  38 0004 8854     		strb	r0, [r1, r2]
  39              	.L1:
 137:Core/Src/printf.c ****   }
 138:Core/Src/printf.c **** }
  40              		.loc 1 138 1 view .LVU5
  41              		@ sp needed
  42 0006 7047     		bx	lr
  43              		.cfi_endproc
  44              	.LFE0:
  46              		.section	.text._out_null,"ax",%progbits
  47              		.align	1
  48              		.syntax unified
  49              		.code	16
  50              		.thumb_func
  51              		.fpu softvfp
  53              	_out_null:
  54              	.LVL1:
  55              	.LFB1:
 139:Core/Src/printf.c **** 
 140:Core/Src/printf.c **** 
 141:Core/Src/printf.c **** // internal null output
 142:Core/Src/printf.c **** static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
 143:Core/Src/printf.c **** {
  56              		.loc 1 143 1 is_stmt 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
 144:Core/Src/printf.c ****   (void)character; (void)buffer; (void)idx; (void)maxlen;
  61              		.loc 1 144 3 view .LVU7
  62              		.loc 1 144 20 view .LVU8
  63              		.loc 1 144 34 view .LVU9
  64              		.loc 1 144 45 view .LVU10
 145:Core/Src/printf.c **** }
  65              		.loc 1 145 1 is_stmt 0 view .LVU11
  66              		@ sp needed
  67 0000 7047     		bx	lr
  68              		.cfi_endproc
  69              	.LFE1:
  71              		.section	.text._out_char,"ax",%progbits
  72              		.align	1
  73              		.syntax unified
  74              		.code	16
  75              		.thumb_func
  76              		.fpu softvfp
  78              	_out_char:
  79              	.LVL2:
  80              	.LFB2:
 146:Core/Src/printf.c **** 
 147:Core/Src/printf.c **** 
 148:Core/Src/printf.c **** // internal _putchar wrapper
 149:Core/Src/printf.c **** static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
 150:Core/Src/printf.c **** {
  81              		.loc 1 150 1 is_stmt 1 view -0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cca6dLeK.s 			page 5


  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
 151:Core/Src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
  86              		.loc 1 151 3 view .LVU13
  87              		.loc 1 151 17 view .LVU14
  88              		.loc 1 151 28 view .LVU15
 152:Core/Src/printf.c ****   if (character) {
  89              		.loc 1 152 3 view .LVU16
 153:Core/Src/printf.c ****     _putchar(character);
 154:Core/Src/printf.c ****   }
 155:Core/Src/printf.c **** }
  90              		.loc 1 155 1 is_stmt 0 view .LVU17
  91              		@ sp needed
  92 0000 7047     		bx	lr
  93              		.cfi_endproc
  94              	.LFE2:
  96              		.section	.text._out_fct,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.code	16
 100              		.thumb_func
 101              		.fpu softvfp
 103              	_out_fct:
 104              	.LVL3:
 105              	.LFB3:
 156:Core/Src/printf.c **** 
 157:Core/Src/printf.c **** 
 158:Core/Src/printf.c **** // internal output function wrapper
 159:Core/Src/printf.c **** static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
 160:Core/Src/printf.c **** {
 106              		.loc 1 160 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		.loc 1 160 1 is_stmt 0 view .LVU19
 111 0000 10B5     		push	{r4, lr}
 112              	.LCFI0:
 113              		.cfi_def_cfa_offset 8
 114              		.cfi_offset 4, -8
 115              		.cfi_offset 14, -4
 161:Core/Src/printf.c ****   (void)idx; (void)maxlen;
 116              		.loc 1 161 3 is_stmt 1 view .LVU20
 117              		.loc 1 161 14 view .LVU21
 162:Core/Src/printf.c ****   if (character) {
 118              		.loc 1 162 3 view .LVU22
 119              		.loc 1 162 6 is_stmt 0 view .LVU23
 120 0002 0028     		cmp	r0, #0
 121 0004 02D0     		beq	.L5
 163:Core/Src/printf.c ****     // buffer is the output fct pointer
 164:Core/Src/printf.c ****     ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 122              		.loc 1 164 5 is_stmt 1 view .LVU24
 123              		.loc 1 164 33 is_stmt 0 view .LVU25
 124 0006 0B68     		ldr	r3, [r1]
 125              	.LVL4:
 126              		.loc 1 164 6 view .LVU26
 127 0008 4968     		ldr	r1, [r1, #4]
 128              	.LVL5:
ARM GAS  /tmp/cca6dLeK.s 			page 6


 129              		.loc 1 164 6 view .LVU27
 130 000a 9847     		blx	r3
 131              	.LVL6:
 132              	.L5:
 165:Core/Src/printf.c ****   }
 166:Core/Src/printf.c **** }
 133              		.loc 1 166 1 view .LVU28
 134              		@ sp needed
 135 000c 10BD     		pop	{r4, pc}
 136              		.cfi_endproc
 137              	.LFE3:
 139              		.section	.text._atoi,"ax",%progbits
 140              		.align	1
 141              		.syntax unified
 142              		.code	16
 143              		.thumb_func
 144              		.fpu softvfp
 146              	_atoi:
 147              	.LVL7:
 148              	.LFB6:
 167:Core/Src/printf.c **** 
 168:Core/Src/printf.c **** 
 169:Core/Src/printf.c **** // internal secure strlen
 170:Core/Src/printf.c **** // \return The length of the string (excluding the terminating 0) limited by 'maxsize'
 171:Core/Src/printf.c **** static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
 172:Core/Src/printf.c **** {
 173:Core/Src/printf.c ****   const char* s;
 174:Core/Src/printf.c ****   for (s = str; *s && maxsize--; ++s);
 175:Core/Src/printf.c ****   return (unsigned int)(s - str);
 176:Core/Src/printf.c **** }
 177:Core/Src/printf.c **** 
 178:Core/Src/printf.c **** 
 179:Core/Src/printf.c **** // internal test if char is a digit (0-9)
 180:Core/Src/printf.c **** // \return true if char is a digit
 181:Core/Src/printf.c **** static inline bool _is_digit(char ch)
 182:Core/Src/printf.c **** {
 183:Core/Src/printf.c ****   return (ch >= '0') && (ch <= '9');
 184:Core/Src/printf.c **** }
 185:Core/Src/printf.c **** 
 186:Core/Src/printf.c **** 
 187:Core/Src/printf.c **** // internal ASCII string to unsigned int conversion
 188:Core/Src/printf.c **** static unsigned int _atoi(const char** str)
 189:Core/Src/printf.c **** {
 149              		.loc 1 189 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              		.loc 1 189 1 is_stmt 0 view .LVU30
 155 0000 0100     		movs	r1, r0
 190:Core/Src/printf.c ****   unsigned int i = 0U;
 156              		.loc 1 190 3 is_stmt 1 view .LVU31
 157              	.LVL8:
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 158              		.loc 1 191 3 view .LVU32
 190:Core/Src/printf.c ****   unsigned int i = 0U;
 159              		.loc 1 190 16 is_stmt 0 view .LVU33
ARM GAS  /tmp/cca6dLeK.s 			page 7


 160 0002 0020     		movs	r0, #0
 161              	.LVL9:
 162              		.loc 1 191 9 view .LVU34
 163 0004 07E0     		b	.L8
 164              	.LVL10:
 165              	.L9:
 192:Core/Src/printf.c ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 166              		.loc 1 192 5 is_stmt 1 view .LVU35
 167              		.loc 1 192 11 is_stmt 0 view .LVU36
 168 0006 8300     		lsls	r3, r0, #2
 169 0008 1B18     		adds	r3, r3, r0
 170 000a 5B00     		lsls	r3, r3, #1
 171              		.loc 1 192 42 view .LVU37
 172 000c 501C     		adds	r0, r2, #1
 173              	.LVL11:
 174              		.loc 1 192 42 view .LVU38
 175 000e 0860     		str	r0, [r1]
 176              		.loc 1 192 34 view .LVU39
 177 0010 1078     		ldrb	r0, [r2]
 178              		.loc 1 192 17 view .LVU40
 179 0012 C018     		adds	r0, r0, r3
 180              		.loc 1 192 7 view .LVU41
 181 0014 3038     		subs	r0, r0, #48
 182              	.LVL12:
 183              	.L8:
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 184              		.loc 1 191 9 is_stmt 1 view .LVU42
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 185              		.loc 1 191 21 is_stmt 0 view .LVU43
 186 0016 0A68     		ldr	r2, [r1]
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 187              		.loc 1 191 10 view .LVU44
 188 0018 1378     		ldrb	r3, [r2]
 189              	.LVL13:
 190              	.LBB20:
 191              	.LBI20:
 181:Core/Src/printf.c **** {
 192              		.loc 1 181 20 is_stmt 1 view .LVU45
 193              	.LBB21:
 183:Core/Src/printf.c **** }
 194              		.loc 1 183 3 view .LVU46
 183:Core/Src/printf.c **** }
 195              		.loc 1 183 22 is_stmt 0 view .LVU47
 196 001a 303B     		subs	r3, r3, #48
 197              	.LVL14:
 183:Core/Src/printf.c **** }
 198              		.loc 1 183 22 view .LVU48
 199 001c DBB2     		uxtb	r3, r3
 200              	.LVL15:
 183:Core/Src/printf.c **** }
 201              		.loc 1 183 22 view .LVU49
 202              	.LBE21:
 203              	.LBE20:
 191:Core/Src/printf.c ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 204              		.loc 1 191 9 view .LVU50
 205 001e 092B     		cmp	r3, #9
 206 0020 F1D9     		bls	.L9
ARM GAS  /tmp/cca6dLeK.s 			page 8


 193:Core/Src/printf.c ****   }
 194:Core/Src/printf.c ****   return i;
 207              		.loc 1 194 3 is_stmt 1 view .LVU51
 195:Core/Src/printf.c **** }
 208              		.loc 1 195 1 is_stmt 0 view .LVU52
 209              		@ sp needed
 210 0022 7047     		bx	lr
 211              		.cfi_endproc
 212              	.LFE6:
 214              		.section	.text._out_rev,"ax",%progbits
 215              		.align	1
 216              		.syntax unified
 217              		.code	16
 218              		.thumb_func
 219              		.fpu softvfp
 221              	_out_rev:
 222              	.LVL16:
 223              	.LFB7:
 196:Core/Src/printf.c **** 
 197:Core/Src/printf.c **** 
 198:Core/Src/printf.c **** // output the specified string in reverse, taking care of any zero-padding
 199:Core/Src/printf.c **** static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, 
 200:Core/Src/printf.c **** {
 224              		.loc 1 200 1 is_stmt 1 view -0
 225              		.cfi_startproc
 226              		@ args = 16, pretend = 0, frame = 8
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		.loc 1 200 1 is_stmt 0 view .LVU54
 229 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 230              	.LCFI1:
 231              		.cfi_def_cfa_offset 20
 232              		.cfi_offset 4, -20
 233              		.cfi_offset 5, -16
 234              		.cfi_offset 6, -12
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 DE46     		mov	lr, fp
 238 0004 5746     		mov	r7, r10
 239 0006 4E46     		mov	r6, r9
 240 0008 4546     		mov	r5, r8
 241 000a E0B5     		push	{r5, r6, r7, lr}
 242              	.LCFI2:
 243              		.cfi_def_cfa_offset 36
 244              		.cfi_offset 8, -36
 245              		.cfi_offset 9, -32
 246              		.cfi_offset 10, -28
 247              		.cfi_offset 11, -24
 248 000c 83B0     		sub	sp, sp, #12
 249              	.LCFI3:
 250              		.cfi_def_cfa_offset 48
 251 000e 9346     		mov	fp, r2
 252 0010 1F00     		movs	r7, r3
 253 0012 0C9B     		ldr	r3, [sp, #48]
 254              	.LVL17:
 255              		.loc 1 200 1 view .LVU55
 256 0014 9A46     		mov	r10, r3
 257 0016 0D9C     		ldr	r4, [sp, #52]
ARM GAS  /tmp/cca6dLeK.s 			page 9


 258 0018 0E9B     		ldr	r3, [sp, #56]
 259 001a 9946     		mov	r9, r3
 201:Core/Src/printf.c ****   const size_t start_idx = idx;
 260              		.loc 1 201 3 is_stmt 1 view .LVU56
 261              	.LVL18:
 202:Core/Src/printf.c **** 
 203:Core/Src/printf.c ****   // pad spaces up to given width
 204:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 262              		.loc 1 204 3 view .LVU57
 263              		.loc 1 204 6 is_stmt 0 view .LVU58
 264 001c 0F9B     		ldr	r3, [sp, #60]
 265 001e 9B07     		lsls	r3, r3, #30
 266 0020 03D0     		beq	.L19
 267 0022 B846     		mov	r8, r7
 268 0024 0F00     		movs	r7, r1
 269              	.LVL19:
 270              		.loc 1 204 6 view .LVU59
 271 0026 0600     		movs	r6, r0
 272 0028 22E0     		b	.L12
 273              	.LVL20:
 274              	.L19:
 275              		.loc 1 204 6 view .LVU60
 276 002a 0192     		str	r2, [sp, #4]
 277 002c A346     		mov	fp, r4
 278 002e 8846     		mov	r8, r1
 279 0030 4E46     		mov	r6, r9
 280 0032 B946     		mov	r9, r7
 281 0034 0700     		movs	r7, r0
 282              	.LVL21:
 283              	.L11:
 284              	.LBB22:
 205:Core/Src/printf.c ****     for (size_t i = len; i < width; i++) {
 285              		.loc 1 205 26 is_stmt 1 discriminator 1 view .LVU61
 286              		.loc 1 205 5 is_stmt 0 discriminator 1 view .LVU62
 287 0036 B442     		cmp	r4, r6
 288 0038 07D2     		bcs	.L21
 206:Core/Src/printf.c ****       out(' ', buffer, idx++, maxlen);
 289              		.loc 1 206 7 is_stmt 1 discriminator 3 view .LVU63
 290 003a 551C     		adds	r5, r2, #1
 291              	.LVL22:
 292              		.loc 1 206 7 is_stmt 0 discriminator 3 view .LVU64
 293 003c 4B46     		mov	r3, r9
 294 003e 4146     		mov	r1, r8
 295 0040 2020     		movs	r0, #32
 296 0042 B847     		blx	r7
 297              	.LVL23:
 205:Core/Src/printf.c ****     for (size_t i = len; i < width; i++) {
 298              		.loc 1 205 37 is_stmt 1 discriminator 3 view .LVU65
 205:Core/Src/printf.c ****     for (size_t i = len; i < width; i++) {
 299              		.loc 1 205 38 is_stmt 0 discriminator 3 view .LVU66
 300 0044 0134     		adds	r4, r4, #1
 301              	.LVL24:
 302              		.loc 1 206 7 discriminator 3 view .LVU67
 303 0046 2A00     		movs	r2, r5
 304 0048 F5E7     		b	.L11
 305              	.LVL25:
 306              	.L21:
ARM GAS  /tmp/cca6dLeK.s 			page 10


 307              		.loc 1 206 7 discriminator 3 view .LVU68
 308 004a 3D00     		movs	r5, r7
 309 004c 4F46     		mov	r7, r9
 310              	.LVL26:
 311              		.loc 1 206 7 discriminator 3 view .LVU69
 312 004e 5C46     		mov	r4, fp
 313              	.LVL27:
 314              		.loc 1 206 7 discriminator 3 view .LVU70
 315 0050 019B     		ldr	r3, [sp, #4]
 316 0052 9B46     		mov	fp, r3
 317 0054 B146     		mov	r9, r6
 318              	.LVL28:
 319              		.loc 1 206 7 discriminator 3 view .LVU71
 320 0056 4646     		mov	r6, r8
 321 0058 B846     		mov	r8, r7
 322              	.LVL29:
 323              		.loc 1 206 7 discriminator 3 view .LVU72
 324 005a 3700     		movs	r7, r6
 325              	.LVL30:
 326              		.loc 1 206 7 discriminator 3 view .LVU73
 327 005c 2E00     		movs	r6, r5
 328              	.LVL31:
 329              		.loc 1 206 7 discriminator 3 view .LVU74
 330 005e 07E0     		b	.L12
 331              	.LVL32:
 332              	.L15:
 333              		.loc 1 206 7 discriminator 3 view .LVU75
 334              	.LBE22:
 207:Core/Src/printf.c ****     }
 208:Core/Src/printf.c ****   }
 209:Core/Src/printf.c **** 
 210:Core/Src/printf.c ****   // reverse string
 211:Core/Src/printf.c ****   while (len) {
 212:Core/Src/printf.c ****     out(buf[--len], buffer, idx++, maxlen);
 335              		.loc 1 212 5 is_stmt 1 view .LVU76
 336 0060 013C     		subs	r4, r4, #1
 337              	.LVL33:
 338              		.loc 1 212 5 is_stmt 0 view .LVU77
 339 0062 551C     		adds	r5, r2, #1
 340              	.LVL34:
 341              		.loc 1 212 5 view .LVU78
 342 0064 5346     		mov	r3, r10
 343 0066 185D     		ldrb	r0, [r3, r4]
 344 0068 4346     		mov	r3, r8
 345 006a 3900     		movs	r1, r7
 346 006c B047     		blx	r6
 347              	.LVL35:
 348 006e 2A00     		movs	r2, r5
 349              	.LVL36:
 350              	.L12:
 211:Core/Src/printf.c ****     out(buf[--len], buffer, idx++, maxlen);
 351              		.loc 1 211 9 is_stmt 1 view .LVU79
 352 0070 002C     		cmp	r4, #0
 353 0072 F5D1     		bne	.L15
 213:Core/Src/printf.c ****   }
 214:Core/Src/printf.c **** 
 215:Core/Src/printf.c ****   // append pad spaces up to given width
ARM GAS  /tmp/cca6dLeK.s 			page 11


 216:Core/Src/printf.c ****   if (flags & FLAGS_LEFT) {
 354              		.loc 1 216 6 is_stmt 0 view .LVU80
 355 0074 3500     		movs	r5, r6
 356 0076 3E00     		movs	r6, r7
 357              	.LVL37:
 358              		.loc 1 216 6 view .LVU81
 359 0078 4746     		mov	r7, r8
 360              	.LVL38:
 361              		.loc 1 216 3 is_stmt 1 view .LVU82
 362              		.loc 1 216 6 is_stmt 0 view .LVU83
 363 007a 0F9B     		ldr	r3, [sp, #60]
 364 007c 9B07     		lsls	r3, r3, #30
 365 007e 07D4     		bmi	.L20
 366              	.LVL39:
 367              	.L10:
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 218:Core/Src/printf.c ****       out(' ', buffer, idx++, maxlen);
 219:Core/Src/printf.c ****     }
 220:Core/Src/printf.c ****   }
 221:Core/Src/printf.c **** 
 222:Core/Src/printf.c ****   return idx;
 223:Core/Src/printf.c **** }
 368              		.loc 1 223 1 view .LVU84
 369 0080 1000     		movs	r0, r2
 370 0082 03B0     		add	sp, sp, #12
 371              		@ sp needed
 372 0084 F0BC     		pop	{r4, r5, r6, r7}
 373 0086 BB46     		mov	fp, r7
 374 0088 B246     		mov	r10, r6
 375 008a A946     		mov	r9, r5
 376 008c A046     		mov	r8, r4
 377 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 378              	.LVL40:
 379              	.L20:
 380              		.loc 1 223 1 view .LVU85
 381 0090 B046     		mov	r8, r6
 382 0092 4E46     		mov	r6, r9
 383              	.LVL41:
 384              		.loc 1 223 1 view .LVU86
 385 0094 B946     		mov	r9, r7
 386 0096 2F00     		movs	r7, r5
 387              	.LVL42:
 388              		.loc 1 223 1 view .LVU87
 389 0098 5D46     		mov	r5, fp
 390              	.LVL43:
 391              	.L16:
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 392              		.loc 1 217 11 is_stmt 1 view .LVU88
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 393              		.loc 1 217 16 is_stmt 0 view .LVU89
 394 009a 531B     		subs	r3, r2, r5
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 395              		.loc 1 217 11 view .LVU90
 396 009c B342     		cmp	r3, r6
 397 009e EFD2     		bcs	.L10
 218:Core/Src/printf.c ****     }
 398              		.loc 1 218 7 is_stmt 1 view .LVU91
ARM GAS  /tmp/cca6dLeK.s 			page 12


 399 00a0 541C     		adds	r4, r2, #1
 400              	.LVL44:
 218:Core/Src/printf.c ****     }
 401              		.loc 1 218 7 is_stmt 0 view .LVU92
 402 00a2 4B46     		mov	r3, r9
 403 00a4 4146     		mov	r1, r8
 404 00a6 2020     		movs	r0, #32
 405 00a8 B847     		blx	r7
 406              	.LVL45:
 407 00aa 2200     		movs	r2, r4
 408 00ac F5E7     		b	.L16
 409              		.cfi_endproc
 410              	.LFE7:
 412              		.section	.text._ntoa_format,"ax",%progbits
 413              		.align	1
 414              		.syntax unified
 415              		.code	16
 416              		.thumb_func
 417              		.fpu softvfp
 419              	_ntoa_format:
 420              	.LVL46:
 421              	.LFB8:
 224:Core/Src/printf.c **** 
 225:Core/Src/printf.c **** 
 226:Core/Src/printf.c **** // internal itoa format
 227:Core/Src/printf.c **** static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, si
 228:Core/Src/printf.c **** {
 422              		.loc 1 228 1 is_stmt 1 view -0
 423              		.cfi_startproc
 424              		@ args = 28, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              		.loc 1 228 1 is_stmt 0 view .LVU94
 427 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 428              	.LCFI4:
 429              		.cfi_def_cfa_offset 20
 430              		.cfi_offset 4, -20
 431              		.cfi_offset 5, -16
 432              		.cfi_offset 6, -12
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 CE46     		mov	lr, r9
 436 0004 4746     		mov	r7, r8
 437 0006 80B5     		push	{r7, lr}
 438              	.LCFI5:
 439              		.cfi_def_cfa_offset 28
 440              		.cfi_offset 8, -28
 441              		.cfi_offset 9, -24
 442 0008 85B0     		sub	sp, sp, #20
 443              	.LCFI6:
 444              		.cfi_def_cfa_offset 48
 445 000a 9446     		mov	ip, r2
 446 000c 9846     		mov	r8, r3
 447 000e 0C9D     		ldr	r5, [sp, #48]
 448 0010 0D9C     		ldr	r4, [sp, #52]
 449 0012 0EAB     		add	r3, sp, #56
 450              	.LVL47:
 451              		.loc 1 228 1 view .LVU95
ARM GAS  /tmp/cca6dLeK.s 			page 13


 452 0014 1B78     		ldrb	r3, [r3]
 453              	.LVL48:
 454              		.loc 1 228 1 view .LVU96
 455 0016 9946     		mov	r9, r3
 456 0018 109A     		ldr	r2, [sp, #64]
 457              	.LVL49:
 458              		.loc 1 228 1 view .LVU97
 459 001a 119B     		ldr	r3, [sp, #68]
 460 001c 129E     		ldr	r6, [sp, #72]
 229:Core/Src/printf.c ****   // pad leading zeros
 230:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT)) {
 461              		.loc 1 230 3 is_stmt 1 view .LVU98
 462              		.loc 1 230 6 is_stmt 0 view .LVU99
 463 001e B707     		lsls	r7, r6, #30
 464 0020 1CD4     		bmi	.L23
 231:Core/Src/printf.c ****     if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 465              		.loc 1 231 5 is_stmt 1 view .LVU100
 466              		.loc 1 231 8 is_stmt 0 view .LVU101
 467 0022 002B     		cmp	r3, #0
 468 0024 0CD0     		beq	.L26
 469              		.loc 1 231 15 discriminator 1 view .LVU102
 470 0026 F707     		lsls	r7, r6, #31
 471 0028 0AD5     		bpl	.L26
 472              		.loc 1 231 42 discriminator 2 view .LVU103
 473 002a 4F46     		mov	r7, r9
 474 002c 002F     		cmp	r7, #0
 475 002e 02D1     		bne	.L25
 476              		.loc 1 231 65 discriminator 3 view .LVU104
 477 0030 0C37     		adds	r7, r7, #12
 478              		.loc 1 231 55 discriminator 3 view .LVU105
 479 0032 3742     		tst	r7, r6
 480 0034 04D0     		beq	.L26
 481              	.L25:
 232:Core/Src/printf.c ****       width--;
 482              		.loc 1 232 7 is_stmt 1 view .LVU106
 483              		.loc 1 232 12 is_stmt 0 view .LVU107
 484 0036 013B     		subs	r3, r3, #1
 485              	.LVL50:
 486              		.loc 1 232 12 view .LVU108
 487 0038 02E0     		b	.L26
 488              	.LVL51:
 489              	.L28:
 233:Core/Src/printf.c ****     }
 234:Core/Src/printf.c ****     while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 235:Core/Src/printf.c ****       buf[len++] = '0';
 490              		.loc 1 235 7 is_stmt 1 view .LVU109
 491              		.loc 1 235 18 is_stmt 0 view .LVU110
 492 003a 3027     		movs	r7, #48
 493 003c 2F55     		strb	r7, [r5, r4]
 494              		.loc 1 235 14 view .LVU111
 495 003e 0134     		adds	r4, r4, #1
 496              	.LVL52:
 497              	.L26:
 234:Core/Src/printf.c ****       buf[len++] = '0';
 498              		.loc 1 234 11 is_stmt 1 view .LVU112
 499 0040 9442     		cmp	r4, r2
 500 0042 01D2     		bcs	.L29
ARM GAS  /tmp/cca6dLeK.s 			page 14


 234:Core/Src/printf.c ****       buf[len++] = '0';
 501              		.loc 1 234 25 is_stmt 0 discriminator 1 view .LVU113
 502 0044 1F2C     		cmp	r4, #31
 503 0046 F8D9     		bls	.L28
 504              	.L29:
 236:Core/Src/printf.c ****     }
 237:Core/Src/printf.c ****     while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 505              		.loc 1 237 11 is_stmt 1 view .LVU114
 506 0048 F707     		lsls	r7, r6, #31
 507 004a 07D5     		bpl	.L23
 508              		.loc 1 237 36 is_stmt 0 discriminator 1 view .LVU115
 509 004c 9C42     		cmp	r4, r3
 510 004e 05D2     		bcs	.L23
 511              		.loc 1 237 53 discriminator 2 view .LVU116
 512 0050 1F2C     		cmp	r4, #31
 513 0052 03D8     		bhi	.L23
 238:Core/Src/printf.c ****       buf[len++] = '0';
 514              		.loc 1 238 7 is_stmt 1 view .LVU117
 515              	.LVL53:
 516              		.loc 1 238 18 is_stmt 0 view .LVU118
 517 0054 3027     		movs	r7, #48
 518 0056 2F55     		strb	r7, [r5, r4]
 519              		.loc 1 238 14 view .LVU119
 520 0058 0134     		adds	r4, r4, #1
 521              	.LVL54:
 522              		.loc 1 238 14 view .LVU120
 523 005a F5E7     		b	.L29
 524              	.LVL55:
 525              	.L23:
 239:Core/Src/printf.c ****     }
 240:Core/Src/printf.c ****   }
 241:Core/Src/printf.c **** 
 242:Core/Src/printf.c ****   // handle hash
 243:Core/Src/printf.c ****   if (flags & FLAGS_HASH) {
 526              		.loc 1 243 3 is_stmt 1 view .LVU121
 527              		.loc 1 243 6 is_stmt 0 view .LVU122
 528 005c F706     		lsls	r7, r6, #27
 529 005e 15D5     		bpl	.L31
 244:Core/Src/printf.c ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 530              		.loc 1 244 5 is_stmt 1 view .LVU123
 531              		.loc 1 244 8 is_stmt 0 view .LVU124
 532 0060 7705     		lsls	r7, r6, #21
 533 0062 05D4     		bmi	.L32
 534              		.loc 1 244 36 discriminator 1 view .LVU125
 535 0064 002C     		cmp	r4, #0
 536 0066 03D0     		beq	.L32
 537              		.loc 1 244 43 discriminator 2 view .LVU126
 538 0068 9442     		cmp	r4, r2
 539 006a 24D0     		beq	.L33
 540              		.loc 1 244 61 discriminator 3 view .LVU127
 541 006c 9C42     		cmp	r4, r3
 542 006e 22D0     		beq	.L33
 543              	.L32:
 245:Core/Src/printf.c ****       len--;
 246:Core/Src/printf.c ****       if (len && (base == 16U)) {
 247:Core/Src/printf.c ****         len--;
 248:Core/Src/printf.c ****       }
ARM GAS  /tmp/cca6dLeK.s 			page 15


 249:Core/Src/printf.c ****     }
 250:Core/Src/printf.c ****     if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 544              		.loc 1 250 5 is_stmt 1 view .LVU128
 545              		.loc 1 250 8 is_stmt 0 view .LVU129
 546 0070 0F9A     		ldr	r2, [sp, #60]
 547 0072 102A     		cmp	r2, #16
 548 0074 2BD0     		beq	.L42
 549              	.L34:
 251:Core/Src/printf.c ****       buf[len++] = 'x';
 252:Core/Src/printf.c ****     }
 253:Core/Src/printf.c ****     else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 550              		.loc 1 253 10 is_stmt 1 view .LVU130
 551              		.loc 1 253 13 is_stmt 0 view .LVU131
 552 0076 0F9A     		ldr	r2, [sp, #60]
 553 0078 102A     		cmp	r2, #16
 554 007a 30D0     		beq	.L43
 555              	.L36:
 254:Core/Src/printf.c ****       buf[len++] = 'X';
 255:Core/Src/printf.c ****     }
 256:Core/Src/printf.c ****     else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 556              		.loc 1 256 10 is_stmt 1 view .LVU132
 557              		.loc 1 256 13 is_stmt 0 view .LVU133
 558 007c 0F9A     		ldr	r2, [sp, #60]
 559 007e 022A     		cmp	r2, #2
 560 0080 35D0     		beq	.L44
 561              	.L35:
 257:Core/Src/printf.c ****       buf[len++] = 'b';
 258:Core/Src/printf.c ****     }
 259:Core/Src/printf.c ****     if (len < PRINTF_NTOA_BUFFER_SIZE) {
 562              		.loc 1 259 5 is_stmt 1 view .LVU134
 563              		.loc 1 259 8 is_stmt 0 view .LVU135
 564 0082 1F2C     		cmp	r4, #31
 565 0084 02D8     		bhi	.L31
 260:Core/Src/printf.c ****       buf[len++] = '0';
 566              		.loc 1 260 7 is_stmt 1 view .LVU136
 567              	.LVL56:
 568              		.loc 1 260 18 is_stmt 0 view .LVU137
 569 0086 3022     		movs	r2, #48
 570 0088 2A55     		strb	r2, [r5, r4]
 571              		.loc 1 260 14 view .LVU138
 572 008a 0134     		adds	r4, r4, #1
 573              	.LVL57:
 574              	.L31:
 261:Core/Src/printf.c ****     }
 262:Core/Src/printf.c ****   }
 263:Core/Src/printf.c **** 
 264:Core/Src/printf.c ****   if (len < PRINTF_NTOA_BUFFER_SIZE) {
 575              		.loc 1 264 3 is_stmt 1 view .LVU139
 576              		.loc 1 264 6 is_stmt 0 view .LVU140
 577 008c 1F2C     		cmp	r4, #31
 578 008e 05D8     		bhi	.L37
 265:Core/Src/printf.c ****     if (negative) {
 579              		.loc 1 265 5 is_stmt 1 view .LVU141
 580              		.loc 1 265 8 is_stmt 0 view .LVU142
 581 0090 4A46     		mov	r2, r9
 582 0092 002A     		cmp	r2, #0
 583 0094 31D0     		beq	.L38
ARM GAS  /tmp/cca6dLeK.s 			page 16


 266:Core/Src/printf.c ****       buf[len++] = '-';
 584              		.loc 1 266 7 is_stmt 1 view .LVU143
 585              	.LVL58:
 586              		.loc 1 266 18 is_stmt 0 view .LVU144
 587 0096 2D22     		movs	r2, #45
 588 0098 2A55     		strb	r2, [r5, r4]
 589              		.loc 1 266 14 view .LVU145
 590 009a 0134     		adds	r4, r4, #1
 591              	.LVL59:
 592              	.L37:
 267:Core/Src/printf.c ****     }
 268:Core/Src/printf.c ****     else if (flags & FLAGS_PLUS) {
 269:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 270:Core/Src/printf.c ****     }
 271:Core/Src/printf.c ****     else if (flags & FLAGS_SPACE) {
 272:Core/Src/printf.c ****       buf[len++] = ' ';
 273:Core/Src/printf.c ****     }
 274:Core/Src/printf.c ****   }
 275:Core/Src/printf.c **** 
 276:Core/Src/printf.c ****   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 593              		.loc 1 276 3 is_stmt 1 view .LVU146
 594              		.loc 1 276 10 is_stmt 0 view .LVU147
 595 009c 0396     		str	r6, [sp, #12]
 596 009e 0293     		str	r3, [sp, #8]
 597 00a0 0194     		str	r4, [sp, #4]
 598 00a2 0095     		str	r5, [sp]
 599 00a4 4346     		mov	r3, r8
 600              	.LVL60:
 601              		.loc 1 276 10 view .LVU148
 602 00a6 6246     		mov	r2, ip
 603 00a8 FFF7FEFF 		bl	_out_rev
 604              	.LVL61:
 277:Core/Src/printf.c **** }
 605              		.loc 1 277 1 view .LVU149
 606 00ac 05B0     		add	sp, sp, #20
 607              		@ sp needed
 608              	.LVL62:
 609              	.LVL63:
 610              		.loc 1 277 1 view .LVU150
 611 00ae C0BC     		pop	{r6, r7}
 612 00b0 B946     		mov	r9, r7
 613 00b2 B046     		mov	r8, r6
 614 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 615              	.LVL64:
 616              	.L33:
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 617              		.loc 1 245 7 is_stmt 1 view .LVU151
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 618              		.loc 1 245 10 is_stmt 0 view .LVU152
 619 00b6 621E     		subs	r2, r4, #1
 620              	.LVL65:
 246:Core/Src/printf.c ****         len--;
 621              		.loc 1 246 7 is_stmt 1 view .LVU153
 246:Core/Src/printf.c ****         len--;
 622              		.loc 1 246 10 is_stmt 0 view .LVU154
 623 00b8 012C     		cmp	r4, #1
 624 00ba 06D0     		beq	.L40
ARM GAS  /tmp/cca6dLeK.s 			page 17


 246:Core/Src/printf.c ****         len--;
 625              		.loc 1 246 15 discriminator 1 view .LVU155
 626 00bc 0F9F     		ldr	r7, [sp, #60]
 627 00be 102F     		cmp	r7, #16
 628 00c0 01D0     		beq	.L45
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 629              		.loc 1 245 10 view .LVU156
 630 00c2 1400     		movs	r4, r2
 631 00c4 D4E7     		b	.L32
 632              	.L45:
 247:Core/Src/printf.c ****       }
 633              		.loc 1 247 9 is_stmt 1 view .LVU157
 247:Core/Src/printf.c ****       }
 634              		.loc 1 247 12 is_stmt 0 view .LVU158
 635 00c6 023C     		subs	r4, r4, #2
 636              	.LVL66:
 247:Core/Src/printf.c ****       }
 637              		.loc 1 247 12 view .LVU159
 638 00c8 D2E7     		b	.L32
 639              	.LVL67:
 640              	.L40:
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 641              		.loc 1 245 10 view .LVU160
 642 00ca 1400     		movs	r4, r2
 643 00cc D0E7     		b	.L32
 644              	.LVL68:
 645              	.L42:
 250:Core/Src/printf.c ****       buf[len++] = 'x';
 646              		.loc 1 250 23 discriminator 1 view .LVU161
 647 00ce B206     		lsls	r2, r6, #26
 648 00d0 D1D4     		bmi	.L34
 250:Core/Src/printf.c ****       buf[len++] = 'x';
 649              		.loc 1 250 53 discriminator 2 view .LVU162
 650 00d2 1F2C     		cmp	r4, #31
 651 00d4 CFD8     		bhi	.L34
 251:Core/Src/printf.c ****     }
 652              		.loc 1 251 7 is_stmt 1 view .LVU163
 653              	.LVL69:
 251:Core/Src/printf.c ****     }
 654              		.loc 1 251 18 is_stmt 0 view .LVU164
 655 00d6 7822     		movs	r2, #120
 656 00d8 2A55     		strb	r2, [r5, r4]
 251:Core/Src/printf.c ****     }
 657              		.loc 1 251 14 view .LVU165
 658 00da 0134     		adds	r4, r4, #1
 659              	.LVL70:
 251:Core/Src/printf.c ****     }
 660              		.loc 1 251 18 view .LVU166
 661 00dc D1E7     		b	.L35
 662              	.L43:
 253:Core/Src/printf.c ****       buf[len++] = 'X';
 663              		.loc 1 253 28 discriminator 1 view .LVU167
 664 00de B206     		lsls	r2, r6, #26
 665 00e0 CCD5     		bpl	.L36
 253:Core/Src/printf.c ****       buf[len++] = 'X';
 666              		.loc 1 253 57 discriminator 2 view .LVU168
 667 00e2 1F2C     		cmp	r4, #31
ARM GAS  /tmp/cca6dLeK.s 			page 18


 668 00e4 CAD8     		bhi	.L36
 254:Core/Src/printf.c ****     }
 669              		.loc 1 254 7 is_stmt 1 view .LVU169
 670              	.LVL71:
 254:Core/Src/printf.c ****     }
 671              		.loc 1 254 18 is_stmt 0 view .LVU170
 672 00e6 5822     		movs	r2, #88
 673 00e8 2A55     		strb	r2, [r5, r4]
 254:Core/Src/printf.c ****     }
 674              		.loc 1 254 14 view .LVU171
 675 00ea 0134     		adds	r4, r4, #1
 676              	.LVL72:
 254:Core/Src/printf.c ****     }
 677              		.loc 1 254 18 view .LVU172
 678 00ec C9E7     		b	.L35
 679              	.L44:
 256:Core/Src/printf.c ****       buf[len++] = 'b';
 680              		.loc 1 256 27 discriminator 1 view .LVU173
 681 00ee 1F2C     		cmp	r4, #31
 682 00f0 C7D8     		bhi	.L35
 257:Core/Src/printf.c ****     }
 683              		.loc 1 257 7 is_stmt 1 view .LVU174
 684              	.LVL73:
 257:Core/Src/printf.c ****     }
 685              		.loc 1 257 18 is_stmt 0 view .LVU175
 686 00f2 6032     		adds	r2, r2, #96
 687 00f4 2A55     		strb	r2, [r5, r4]
 257:Core/Src/printf.c ****     }
 688              		.loc 1 257 14 view .LVU176
 689 00f6 0134     		adds	r4, r4, #1
 690              	.LVL74:
 257:Core/Src/printf.c ****     }
 691              		.loc 1 257 14 view .LVU177
 692 00f8 C3E7     		b	.L35
 693              	.L38:
 268:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 694              		.loc 1 268 10 is_stmt 1 view .LVU178
 268:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 695              		.loc 1 268 13 is_stmt 0 view .LVU179
 696 00fa 7207     		lsls	r2, r6, #29
 697 00fc 03D5     		bpl	.L39
 269:Core/Src/printf.c ****     }
 698              		.loc 1 269 7 is_stmt 1 view .LVU180
 699              	.LVL75:
 269:Core/Src/printf.c ****     }
 700              		.loc 1 269 18 is_stmt 0 view .LVU181
 701 00fe 2B22     		movs	r2, #43
 702 0100 2A55     		strb	r2, [r5, r4]
 269:Core/Src/printf.c ****     }
 703              		.loc 1 269 14 view .LVU182
 704 0102 0134     		adds	r4, r4, #1
 705              	.LVL76:
 269:Core/Src/printf.c ****     }
 706              		.loc 1 269 14 view .LVU183
 707 0104 CAE7     		b	.L37
 708              	.L39:
 271:Core/Src/printf.c ****       buf[len++] = ' ';
ARM GAS  /tmp/cca6dLeK.s 			page 19


 709              		.loc 1 271 10 is_stmt 1 view .LVU184
 271:Core/Src/printf.c ****       buf[len++] = ' ';
 710              		.loc 1 271 13 is_stmt 0 view .LVU185
 711 0106 3207     		lsls	r2, r6, #28
 712 0108 C8D5     		bpl	.L37
 272:Core/Src/printf.c ****     }
 713              		.loc 1 272 7 is_stmt 1 view .LVU186
 714              	.LVL77:
 272:Core/Src/printf.c ****     }
 715              		.loc 1 272 18 is_stmt 0 view .LVU187
 716 010a 2022     		movs	r2, #32
 717 010c 2A55     		strb	r2, [r5, r4]
 272:Core/Src/printf.c ****     }
 718              		.loc 1 272 14 view .LVU188
 719 010e 0134     		adds	r4, r4, #1
 720              	.LVL78:
 272:Core/Src/printf.c ****     }
 721              		.loc 1 272 14 view .LVU189
 722 0110 C4E7     		b	.L37
 723              		.cfi_endproc
 724              	.LFE8:
 726              		.global	__aeabi_uidivmod
 727              		.global	__aeabi_uidiv
 728              		.section	.text._ntoa_long,"ax",%progbits
 729              		.align	1
 730              		.syntax unified
 731              		.code	16
 732              		.thumb_func
 733              		.fpu softvfp
 735              	_ntoa_long:
 736              	.LVL79:
 737              	.LFB9:
 278:Core/Src/printf.c **** 
 279:Core/Src/printf.c **** 
 280:Core/Src/printf.c **** // internal itoa for 'long' type
 281:Core/Src/printf.c **** static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long v
 282:Core/Src/printf.c **** {
 738              		.loc 1 282 1 is_stmt 1 view -0
 739              		.cfi_startproc
 740              		@ args = 24, pretend = 0, frame = 40
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              		.loc 1 282 1 is_stmt 0 view .LVU191
 743 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 744              	.LCFI7:
 745              		.cfi_def_cfa_offset 20
 746              		.cfi_offset 4, -20
 747              		.cfi_offset 5, -16
 748              		.cfi_offset 6, -12
 749              		.cfi_offset 7, -8
 750              		.cfi_offset 14, -4
 751 0002 DE46     		mov	lr, fp
 752 0004 5746     		mov	r7, r10
 753 0006 4E46     		mov	r6, r9
 754 0008 4546     		mov	r5, r8
 755 000a E0B5     		push	{r5, r6, r7, lr}
 756              	.LCFI8:
 757              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cca6dLeK.s 			page 20


 758              		.cfi_offset 8, -36
 759              		.cfi_offset 9, -32
 760              		.cfi_offset 10, -28
 761              		.cfi_offset 11, -24
 762 000c 93B0     		sub	sp, sp, #76
 763              	.LCFI9:
 764              		.cfi_def_cfa_offset 112
 765 000e 8146     		mov	r9, r0
 766 0010 8A46     		mov	r10, r1
 767 0012 0892     		str	r2, [sp, #32]
 768 0014 0993     		str	r3, [sp, #36]
 769 0016 1CAB     		add	r3, sp, #112
 770              	.LVL80:
 771              		.loc 1 282 1 view .LVU192
 772 0018 10CB     		ldmia	r3!, {r4}
 773              	.LVL81:
 774              		.loc 1 282 1 view .LVU193
 775 001a 1B78     		ldrb	r3, [r3]
 776              	.LVL82:
 777              		.loc 1 282 1 view .LVU194
 778 001c 9B46     		mov	fp, r3
 779 001e 1E9D     		ldr	r5, [sp, #120]
 780 0020 219B     		ldr	r3, [sp, #132]
 781 0022 9846     		mov	r8, r3
 283:Core/Src/printf.c ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 782              		.loc 1 283 3 is_stmt 1 view .LVU195
 284:Core/Src/printf.c ****   size_t len = 0U;
 783              		.loc 1 284 3 view .LVU196
 784              	.LVL83:
 285:Core/Src/printf.c **** 
 286:Core/Src/printf.c ****   // no hash for 0 values
 287:Core/Src/printf.c ****   if (!value) {
 785              		.loc 1 287 3 view .LVU197
 786              		.loc 1 287 6 is_stmt 0 view .LVU198
 787 0024 002C     		cmp	r4, #0
 788 0026 03D1     		bne	.L47
 288:Core/Src/printf.c ****     flags &= ~FLAGS_HASH;
 789              		.loc 1 288 5 is_stmt 1 view .LVU199
 790              		.loc 1 288 11 is_stmt 0 view .LVU200
 791 0028 1023     		movs	r3, #16
 792 002a 4246     		mov	r2, r8
 793              	.LVL84:
 794              		.loc 1 288 11 view .LVU201
 795 002c 9A43     		bics	r2, r3
 796 002e 9046     		mov	r8, r2
 797              	.LVL85:
 798              	.L47:
 289:Core/Src/printf.c ****   }
 290:Core/Src/printf.c **** 
 291:Core/Src/printf.c ****   // write if precision != 0 and value is != 0
 292:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION) || value) {
 799              		.loc 1 292 3 is_stmt 1 view .LVU202
 800              		.loc 1 292 15 is_stmt 0 view .LVU203
 801 0030 8023     		movs	r3, #128
 802 0032 DB00     		lsls	r3, r3, #3
 803 0034 4646     		mov	r6, r8
 804 0036 1E40     		ands	r6, r3
ARM GAS  /tmp/cca6dLeK.s 			page 21


 805              		.loc 1 292 6 view .LVU204
 806 0038 4246     		mov	r2, r8
 807 003a 1A42     		tst	r2, r3
 808 003c 12D0     		beq	.L53
 809              		.loc 1 292 34 discriminator 1 view .LVU205
 810 003e 002C     		cmp	r4, #0
 811 0040 22D0     		beq	.L54
 812 0042 0026     		movs	r6, #0
 813 0044 0EE0     		b	.L53
 814              	.LVL86:
 815              	.L57:
 816              	.LBB23:
 293:Core/Src/printf.c ****     do {
 294:Core/Src/printf.c ****       const char digit = (char)(value % base);
 295:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 817              		.loc 1 295 18 discriminator 1 view .LVU206
 818 0046 3033     		adds	r3, r3, #48
 819              	.LVL87:
 820              		.loc 1 295 18 discriminator 1 view .LVU207
 821 0048 D9B2     		uxtb	r1, r3
 822              	.LVL88:
 823              	.L51:
 824              		.loc 1 295 14 discriminator 8 view .LVU208
 825 004a 771C     		adds	r7, r6, #1
 826              	.LVL89:
 827              		.loc 1 295 18 discriminator 8 view .LVU209
 828 004c 0AAB     		add	r3, sp, #40
 829 004e 9955     		strb	r1, [r3, r6]
 296:Core/Src/printf.c ****       value /= base;
 830              		.loc 1 296 7 is_stmt 1 discriminator 8 view .LVU210
 831              		.loc 1 296 13 is_stmt 0 discriminator 8 view .LVU211
 832 0050 2900     		movs	r1, r5
 833 0052 2000     		movs	r0, r4
 834 0054 FFF7FEFF 		bl	__aeabi_uidiv
 835              	.LVL90:
 836              		.loc 1 296 13 discriminator 8 view .LVU212
 837              	.LBE23:
 297:Core/Src/printf.c ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 838              		.loc 1 297 13 is_stmt 1 discriminator 8 view .LVU213
 839              		.loc 1 297 5 is_stmt 0 discriminator 8 view .LVU214
 840 0058 AC42     		cmp	r4, r5
 841 005a 16D3     		bcc	.L49
 842              		.loc 1 297 20 discriminator 1 view .LVU215
 843 005c 1F2F     		cmp	r7, #31
 844 005e 14D8     		bhi	.L49
 845              	.LBB24:
 295:Core/Src/printf.c ****       value /= base;
 846              		.loc 1 295 14 view .LVU216
 847 0060 3E00     		movs	r6, r7
 296:Core/Src/printf.c ****       value /= base;
 848              		.loc 1 296 13 view .LVU217
 849 0062 0400     		movs	r4, r0
 850              	.LVL91:
 851              	.L53:
 296:Core/Src/printf.c ****       value /= base;
 852              		.loc 1 296 13 view .LVU218
 853              	.LBE24:
ARM GAS  /tmp/cca6dLeK.s 			page 22


 293:Core/Src/printf.c ****       const char digit = (char)(value % base);
 854              		.loc 1 293 5 is_stmt 1 view .LVU219
 855              	.LBB25:
 294:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 856              		.loc 1 294 7 view .LVU220
 294:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 857              		.loc 1 294 39 is_stmt 0 view .LVU221
 858 0064 2900     		movs	r1, r5
 859 0066 2000     		movs	r0, r4
 860 0068 FFF7FEFF 		bl	__aeabi_uidivmod
 861              	.LVL92:
 294:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 862              		.loc 1 294 18 view .LVU222
 863 006c CBB2     		uxtb	r3, r1
 864              	.LVL93:
 295:Core/Src/printf.c ****       value /= base;
 865              		.loc 1 295 7 is_stmt 1 view .LVU223
 295:Core/Src/printf.c ****       value /= base;
 866              		.loc 1 295 18 is_stmt 0 view .LVU224
 867 006e 092B     		cmp	r3, #9
 868 0070 E9D9     		bls	.L57
 295:Core/Src/printf.c ****       value /= base;
 869              		.loc 1 295 85 discriminator 2 view .LVU225
 870 0072 4246     		mov	r2, r8
 871 0074 9206     		lsls	r2, r2, #26
 872 0076 05D5     		bpl	.L55
 295:Core/Src/printf.c ****       value /= base;
 873              		.loc 1 295 85 view .LVU226
 874 0078 4121     		movs	r1, #65
 875              	.L52:
 295:Core/Src/printf.c ****       value /= base;
 876              		.loc 1 295 85 discriminator 7 view .LVU227
 877 007a C918     		adds	r1, r1, r3
 878 007c C9B2     		uxtb	r1, r1
 295:Core/Src/printf.c ****       value /= base;
 879              		.loc 1 295 18 discriminator 7 view .LVU228
 880 007e 0A39     		subs	r1, r1, #10
 881 0080 C9B2     		uxtb	r1, r1
 882 0082 E2E7     		b	.L51
 883              	.L55:
 295:Core/Src/printf.c ****       value /= base;
 884              		.loc 1 295 85 view .LVU229
 885 0084 6121     		movs	r1, #97
 886 0086 F8E7     		b	.L52
 887              	.LVL94:
 888              	.L54:
 295:Core/Src/printf.c ****       value /= base;
 889              		.loc 1 295 85 view .LVU230
 890              	.LBE25:
 284:Core/Src/printf.c **** 
 891              		.loc 1 284 10 view .LVU231
 892 0088 2700     		movs	r7, r4
 893              	.LVL95:
 894              	.L49:
 298:Core/Src/printf.c ****   }
 299:Core/Src/printf.c **** 
 300:Core/Src/printf.c ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
ARM GAS  /tmp/cca6dLeK.s 			page 23


 895              		.loc 1 300 3 is_stmt 1 view .LVU232
 896              		.loc 1 300 10 is_stmt 0 view .LVU233
 897 008a 4346     		mov	r3, r8
 898 008c 0693     		str	r3, [sp, #24]
 899 008e 209B     		ldr	r3, [sp, #128]
 900 0090 0593     		str	r3, [sp, #20]
 901 0092 1F9B     		ldr	r3, [sp, #124]
 902 0094 0493     		str	r3, [sp, #16]
 903 0096 0395     		str	r5, [sp, #12]
 904 0098 5B46     		mov	r3, fp
 905 009a 0293     		str	r3, [sp, #8]
 906 009c 0197     		str	r7, [sp, #4]
 907 009e 0AAB     		add	r3, sp, #40
 908 00a0 0093     		str	r3, [sp]
 909 00a2 099B     		ldr	r3, [sp, #36]
 910 00a4 089A     		ldr	r2, [sp, #32]
 911 00a6 5146     		mov	r1, r10
 912 00a8 4846     		mov	r0, r9
 913 00aa FFF7FEFF 		bl	_ntoa_format
 914              	.LVL96:
 301:Core/Src/printf.c **** }
 915              		.loc 1 301 1 view .LVU234
 916 00ae 13B0     		add	sp, sp, #76
 917              		@ sp needed
 918              	.LVL97:
 919              	.LVL98:
 920              	.LVL99:
 921              	.LVL100:
 922              		.loc 1 301 1 view .LVU235
 923 00b0 F0BC     		pop	{r4, r5, r6, r7}
 924 00b2 BB46     		mov	fp, r7
 925 00b4 B246     		mov	r10, r6
 926 00b6 A946     		mov	r9, r5
 927 00b8 A046     		mov	r8, r4
 928 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 929              		.cfi_endproc
 930              	.LFE9:
 932              		.global	__aeabi_uldivmod
 933              		.section	.text._ntoa_long_long,"ax",%progbits
 934              		.align	1
 935              		.syntax unified
 936              		.code	16
 937              		.thumb_func
 938              		.fpu softvfp
 940              	_ntoa_long_long:
 941              	.LVL101:
 942              	.LFB10:
 302:Core/Src/printf.c **** 
 303:Core/Src/printf.c **** 
 304:Core/Src/printf.c **** // internal itoa for 'long long' type
 305:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 306:Core/Src/printf.c **** static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned l
 307:Core/Src/printf.c **** {
 943              		.loc 1 307 1 is_stmt 1 view -0
 944              		.cfi_startproc
 945              		@ args = 36, pretend = 0, frame = 48
 946              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cca6dLeK.s 			page 24


 947              		.loc 1 307 1 is_stmt 0 view .LVU237
 948 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 949              	.LCFI10:
 950              		.cfi_def_cfa_offset 20
 951              		.cfi_offset 4, -20
 952              		.cfi_offset 5, -16
 953              		.cfi_offset 6, -12
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
 956 0002 DE46     		mov	lr, fp
 957 0004 5746     		mov	r7, r10
 958 0006 4E46     		mov	r6, r9
 959 0008 4546     		mov	r5, r8
 960 000a E0B5     		push	{r5, r6, r7, lr}
 961              	.LCFI11:
 962              		.cfi_def_cfa_offset 36
 963              		.cfi_offset 8, -36
 964              		.cfi_offset 9, -32
 965              		.cfi_offset 10, -28
 966              		.cfi_offset 11, -24
 967 000c 95B0     		sub	sp, sp, #84
 968              	.LCFI12:
 969              		.cfi_def_cfa_offset 120
 970 000e 0890     		str	r0, [sp, #32]
 971 0010 0991     		str	r1, [sp, #36]
 972 0012 0A92     		str	r2, [sp, #40]
 973 0014 0B93     		str	r3, [sp, #44]
 974 0016 1E9E     		ldr	r6, [sp, #120]
 975 0018 1F9C     		ldr	r4, [sp, #124]
 976 001a 20AB     		add	r3, sp, #128
 977              	.LVL102:
 978              		.loc 1 307 1 view .LVU238
 979 001c 1B78     		ldrb	r3, [r3]
 980              	.LVL103:
 981              		.loc 1 307 1 view .LVU239
 982 001e 9B46     		mov	fp, r3
 983 0020 229B     		ldr	r3, [sp, #136]
 984 0022 9946     		mov	r9, r3
 985 0024 239D     		ldr	r5, [sp, #140]
 986 0026 269B     		ldr	r3, [sp, #152]
 987 0028 9A46     		mov	r10, r3
 308:Core/Src/printf.c ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 988              		.loc 1 308 3 is_stmt 1 view .LVU240
 309:Core/Src/printf.c ****   size_t len = 0U;
 989              		.loc 1 309 3 view .LVU241
 990              	.LVL104:
 310:Core/Src/printf.c **** 
 311:Core/Src/printf.c ****   // no hash for 0 values
 312:Core/Src/printf.c ****   if (!value) {
 991              		.loc 1 312 3 view .LVU242
 992              		.loc 1 312 6 is_stmt 0 view .LVU243
 993 002a 3300     		movs	r3, r6
 994 002c 2343     		orrs	r3, r4
 995 002e 03D1     		bne	.L59
 313:Core/Src/printf.c ****     flags &= ~FLAGS_HASH;
 996              		.loc 1 313 5 is_stmt 1 view .LVU244
 997              		.loc 1 313 11 is_stmt 0 view .LVU245
ARM GAS  /tmp/cca6dLeK.s 			page 25


 998 0030 1033     		adds	r3, r3, #16
 999 0032 5246     		mov	r2, r10
 1000              	.LVL105:
 1001              		.loc 1 313 11 view .LVU246
 1002 0034 9A43     		bics	r2, r3
 1003 0036 9246     		mov	r10, r2
 1004              	.LVL106:
 1005              	.L59:
 314:Core/Src/printf.c ****   }
 315:Core/Src/printf.c **** 
 316:Core/Src/printf.c ****   // write if precision != 0 and value is != 0
 317:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION) || value) {
 1006              		.loc 1 317 3 is_stmt 1 view .LVU247
 1007              		.loc 1 317 15 is_stmt 0 view .LVU248
 1008 0038 8023     		movs	r3, #128
 1009 003a DB00     		lsls	r3, r3, #3
 1010 003c 5746     		mov	r7, r10
 1011 003e 1F40     		ands	r7, r3
 1012              		.loc 1 317 6 view .LVU249
 1013 0040 5246     		mov	r2, r10
 1014 0042 1A42     		tst	r2, r3
 1015 0044 19D0     		beq	.L67
 1016              		.loc 1 317 34 discriminator 1 view .LVU250
 1017 0046 3300     		movs	r3, r6
 1018 0048 2343     		orrs	r3, r4
 1019 004a 2DD0     		beq	.L68
 1020 004c 0027     		movs	r7, #0
 1021 004e 14E0     		b	.L67
 1022              	.LVL107:
 1023              	.L76:
 1024              	.LBB26:
 318:Core/Src/printf.c ****     do {
 319:Core/Src/printf.c ****       const char digit = (char)(value % base);
 320:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1025              		.loc 1 320 18 discriminator 1 view .LVU251
 1026 0050 3033     		adds	r3, r3, #48
 1027              	.LVL108:
 1028              		.loc 1 320 18 discriminator 1 view .LVU252
 1029 0052 DAB2     		uxtb	r2, r3
 1030              	.LVL109:
 1031              	.L64:
 1032              		.loc 1 320 14 discriminator 8 view .LVU253
 1033 0054 7B1C     		adds	r3, r7, #1
 1034 0056 9846     		mov	r8, r3
 1035              	.LVL110:
 1036              		.loc 1 320 18 discriminator 8 view .LVU254
 1037 0058 0CAB     		add	r3, sp, #48
 1038              	.LVL111:
 1039              		.loc 1 320 18 discriminator 8 view .LVU255
 1040 005a DA55     		strb	r2, [r3, r7]
 321:Core/Src/printf.c ****       value /= base;
 1041              		.loc 1 321 7 is_stmt 1 discriminator 8 view .LVU256
 1042              		.loc 1 321 13 is_stmt 0 discriminator 8 view .LVU257
 1043 005c 4A46     		mov	r2, r9
 1044 005e 2B00     		movs	r3, r5
 1045 0060 3000     		movs	r0, r6
 1046 0062 2100     		movs	r1, r4
ARM GAS  /tmp/cca6dLeK.s 			page 26


 1047 0064 FFF7FEFF 		bl	__aeabi_uldivmod
 1048              	.LVL112:
 1049              		.loc 1 321 13 discriminator 8 view .LVU258
 1050              	.LBE26:
 322:Core/Src/printf.c ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 1051              		.loc 1 322 13 is_stmt 1 discriminator 8 view .LVU259
 1052              		.loc 1 322 5 is_stmt 0 discriminator 8 view .LVU260
 1053 0068 A542     		cmp	r5, r4
 1054 006a 1FD8     		bhi	.L61
 1055 006c 19D0     		beq	.L75
 1056              	.L71:
 1057              		.loc 1 322 20 discriminator 1 view .LVU261
 1058 006e 4346     		mov	r3, r8
 1059 0070 1F2B     		cmp	r3, #31
 1060 0072 1BD8     		bhi	.L61
 1061              	.LVL113:
 1062              	.LBB27:
 320:Core/Src/printf.c ****       value /= base;
 1063              		.loc 1 320 14 view .LVU262
 1064 0074 4746     		mov	r7, r8
 321:Core/Src/printf.c ****       value /= base;
 1065              		.loc 1 321 13 view .LVU263
 1066 0076 0600     		movs	r6, r0
 1067 0078 0C00     		movs	r4, r1
 1068              	.LVL114:
 1069              	.L67:
 321:Core/Src/printf.c ****       value /= base;
 1070              		.loc 1 321 13 view .LVU264
 1071              	.LBE27:
 318:Core/Src/printf.c ****       const char digit = (char)(value % base);
 1072              		.loc 1 318 5 is_stmt 1 view .LVU265
 1073              	.LBB28:
 319:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1074              		.loc 1 319 7 view .LVU266
 319:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1075              		.loc 1 319 39 is_stmt 0 view .LVU267
 1076 007a 4A46     		mov	r2, r9
 1077 007c 2B00     		movs	r3, r5
 1078 007e 3000     		movs	r0, r6
 1079 0080 2100     		movs	r1, r4
 1080 0082 FFF7FEFF 		bl	__aeabi_uldivmod
 1081              	.LVL115:
 319:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 1082              		.loc 1 319 18 view .LVU268
 1083 0086 D3B2     		uxtb	r3, r2
 1084              	.LVL116:
 320:Core/Src/printf.c ****       value /= base;
 1085              		.loc 1 320 7 is_stmt 1 view .LVU269
 320:Core/Src/printf.c ****       value /= base;
 1086              		.loc 1 320 18 is_stmt 0 view .LVU270
 1087 0088 092B     		cmp	r3, #9
 1088 008a E1D9     		bls	.L76
 320:Core/Src/printf.c ****       value /= base;
 1089              		.loc 1 320 85 discriminator 2 view .LVU271
 1090 008c 5246     		mov	r2, r10
 1091 008e 9206     		lsls	r2, r2, #26
 1092 0090 05D5     		bpl	.L69
ARM GAS  /tmp/cca6dLeK.s 			page 27


 320:Core/Src/printf.c ****       value /= base;
 1093              		.loc 1 320 85 view .LVU272
 1094 0092 4122     		movs	r2, #65
 1095              	.L65:
 320:Core/Src/printf.c ****       value /= base;
 1096              		.loc 1 320 85 discriminator 7 view .LVU273
 1097 0094 D218     		adds	r2, r2, r3
 1098 0096 D2B2     		uxtb	r2, r2
 320:Core/Src/printf.c ****       value /= base;
 1099              		.loc 1 320 18 discriminator 7 view .LVU274
 1100 0098 0A3A     		subs	r2, r2, #10
 1101 009a D2B2     		uxtb	r2, r2
 1102 009c DAE7     		b	.L64
 1103              	.L69:
 320:Core/Src/printf.c ****       value /= base;
 1104              		.loc 1 320 85 view .LVU275
 1105 009e 6122     		movs	r2, #97
 1106 00a0 F8E7     		b	.L65
 1107              	.LVL117:
 1108              	.L75:
 320:Core/Src/printf.c ****       value /= base;
 1109              		.loc 1 320 85 view .LVU276
 1110              	.LBE28:
 1111              		.loc 1 322 5 discriminator 8 view .LVU277
 1112 00a2 B145     		cmp	r9, r6
 1113 00a4 E3D9     		bls	.L71
 1114 00a6 01E0     		b	.L61
 1115              	.LVL118:
 1116              	.L68:
 309:Core/Src/printf.c **** 
 1117              		.loc 1 309 10 view .LVU278
 1118 00a8 0023     		movs	r3, #0
 1119 00aa 9846     		mov	r8, r3
 1120              	.LVL119:
 1121              	.L61:
 323:Core/Src/printf.c ****   }
 324:Core/Src/printf.c **** 
 325:Core/Src/printf.c ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 1122              		.loc 1 325 3 is_stmt 1 view .LVU279
 1123              		.loc 1 325 10 is_stmt 0 view .LVU280
 1124 00ac 5346     		mov	r3, r10
 1125 00ae 0693     		str	r3, [sp, #24]
 1126 00b0 259B     		ldr	r3, [sp, #148]
 1127 00b2 0593     		str	r3, [sp, #20]
 1128 00b4 249B     		ldr	r3, [sp, #144]
 1129 00b6 0493     		str	r3, [sp, #16]
 1130 00b8 4B46     		mov	r3, r9
 1131 00ba 0393     		str	r3, [sp, #12]
 1132 00bc 5B46     		mov	r3, fp
 1133 00be 0293     		str	r3, [sp, #8]
 1134 00c0 4346     		mov	r3, r8
 1135 00c2 0193     		str	r3, [sp, #4]
 1136 00c4 0CAB     		add	r3, sp, #48
 1137 00c6 0093     		str	r3, [sp]
 1138 00c8 0B9B     		ldr	r3, [sp, #44]
 1139 00ca 0A9A     		ldr	r2, [sp, #40]
 1140 00cc 0999     		ldr	r1, [sp, #36]
ARM GAS  /tmp/cca6dLeK.s 			page 28


 1141 00ce 0898     		ldr	r0, [sp, #32]
 1142 00d0 FFF7FEFF 		bl	_ntoa_format
 1143              	.LVL120:
 326:Core/Src/printf.c **** }
 1144              		.loc 1 326 1 view .LVU281
 1145 00d4 15B0     		add	sp, sp, #84
 1146              		@ sp needed
 1147              	.LVL121:
 1148              	.LVL122:
 1149              		.loc 1 326 1 view .LVU282
 1150 00d6 F0BC     		pop	{r4, r5, r6, r7}
 1151 00d8 BB46     		mov	fp, r7
 1152 00da B246     		mov	r10, r6
 1153 00dc A946     		mov	r9, r5
 1154 00de A046     		mov	r8, r4
 1155 00e0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1156              		.cfi_endproc
 1157              	.LFE10:
 1159              		.global	__aeabi_dcmpeq
 1160              		.global	__aeabi_dcmpgt
 1161              		.global	__aeabi_dcmplt
 1162              		.global	__aeabi_i2d
 1163              		.global	__aeabi_dmul
 1164              		.global	__aeabi_dadd
 1165              		.global	__aeabi_dsub
 1166              		.global	__aeabi_d2iz
 1167              		.global	__aeabi_ddiv
 1168              		.global	__aeabi_dcmpge
 1169              		.section	.text._etoa,"ax",%progbits
 1170              		.align	1
 1171              		.syntax unified
 1172              		.code	16
 1173              		.thumb_func
 1174              		.fpu softvfp
 1176              	_etoa:
 1177              	.LVL123:
 1178              	.LFB12:
 327:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_LONG_LONG
 328:Core/Src/printf.c **** 
 329:Core/Src/printf.c **** 
 330:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 331:Core/Src/printf.c **** 
 332:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 333:Core/Src/printf.c **** // forward declaration so that _ftoa can switch to exp notation for values > PRINTF_MAX_FLOAT
 334:Core/Src/printf.c **** static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 335:Core/Src/printf.c **** #endif
 336:Core/Src/printf.c **** 
 337:Core/Src/printf.c **** 
 338:Core/Src/printf.c **** // internal ftoa for fixed decimal floating point
 339:Core/Src/printf.c **** static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 340:Core/Src/printf.c **** {
 341:Core/Src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 342:Core/Src/printf.c ****   size_t len  = 0U;
 343:Core/Src/printf.c ****   double diff = 0.0;
 344:Core/Src/printf.c **** 
 345:Core/Src/printf.c ****   // powers of 10
 346:Core/Src/printf.c ****   static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 10
ARM GAS  /tmp/cca6dLeK.s 			page 29


 347:Core/Src/printf.c **** 
 348:Core/Src/printf.c ****   // test for special values
 349:Core/Src/printf.c ****   if (value != value)
 350:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 351:Core/Src/printf.c ****   if (value < -DBL_MAX)
 352:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 353:Core/Src/printf.c ****   if (value > DBL_MAX)
 354:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 355:Core/Src/printf.c **** 
 356:Core/Src/printf.c ****   // test for very large values
 357:Core/Src/printf.c ****   // standard printf behavior is to print EVERY whole number digit -- which could be 100s of charac
 358:Core/Src/printf.c ****   if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 359:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 360:Core/Src/printf.c ****     return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 361:Core/Src/printf.c **** #else
 362:Core/Src/printf.c ****     return 0U;
 363:Core/Src/printf.c **** #endif
 364:Core/Src/printf.c ****   }
 365:Core/Src/printf.c **** 
 366:Core/Src/printf.c ****   // test for negative
 367:Core/Src/printf.c ****   bool negative = false;
 368:Core/Src/printf.c ****   if (value < 0) {
 369:Core/Src/printf.c ****     negative = true;
 370:Core/Src/printf.c ****     value = 0 - value;
 371:Core/Src/printf.c ****   }
 372:Core/Src/printf.c **** 
 373:Core/Src/printf.c ****   // set default precision, if not set explicitly
 374:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 375:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 376:Core/Src/printf.c ****   }
 377:Core/Src/printf.c ****   // limit precision to 9, cause a prec >= 10 can lead to overflow errors
 378:Core/Src/printf.c ****   while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 379:Core/Src/printf.c ****     buf[len++] = '0';
 380:Core/Src/printf.c ****     prec--;
 381:Core/Src/printf.c ****   }
 382:Core/Src/printf.c **** 
 383:Core/Src/printf.c ****   int whole = (int)value;
 384:Core/Src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 385:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 386:Core/Src/printf.c ****   diff = tmp - frac;
 387:Core/Src/printf.c **** 
 388:Core/Src/printf.c ****   if (diff > 0.5) {
 389:Core/Src/printf.c ****     ++frac;
 390:Core/Src/printf.c ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 391:Core/Src/printf.c ****     if (frac >= pow10[prec]) {
 392:Core/Src/printf.c ****       frac = 0;
 393:Core/Src/printf.c ****       ++whole;
 394:Core/Src/printf.c ****     }
 395:Core/Src/printf.c ****   }
 396:Core/Src/printf.c ****   else if (diff < 0.5) {
 397:Core/Src/printf.c ****   }
 398:Core/Src/printf.c ****   else if ((frac == 0U) || (frac & 1U)) {
 399:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 400:Core/Src/printf.c ****     ++frac;
 401:Core/Src/printf.c ****   }
 402:Core/Src/printf.c **** 
 403:Core/Src/printf.c ****   if (prec == 0U) {
ARM GAS  /tmp/cca6dLeK.s 			page 30


 404:Core/Src/printf.c ****     diff = value - (double)whole;
 405:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 406:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 407:Core/Src/printf.c ****       // 1.5 -> 2, but 2.5 -> 2
 408:Core/Src/printf.c ****       ++whole;
 409:Core/Src/printf.c ****     }
 410:Core/Src/printf.c ****   }
 411:Core/Src/printf.c ****   else {
 412:Core/Src/printf.c ****     unsigned int count = prec;
 413:Core/Src/printf.c ****     // now do fractional part, as an unsigned number
 414:Core/Src/printf.c ****     while (len < PRINTF_FTOA_BUFFER_SIZE) {
 415:Core/Src/printf.c ****       --count;
 416:Core/Src/printf.c ****       buf[len++] = (char)(48U + (frac % 10U));
 417:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 418:Core/Src/printf.c ****         break;
 419:Core/Src/printf.c ****       }
 420:Core/Src/printf.c ****     }
 421:Core/Src/printf.c ****     // add extra 0s
 422:Core/Src/printf.c ****     while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 423:Core/Src/printf.c ****       buf[len++] = '0';
 424:Core/Src/printf.c ****     }
 425:Core/Src/printf.c ****     if (len < PRINTF_FTOA_BUFFER_SIZE) {
 426:Core/Src/printf.c ****       // add decimal
 427:Core/Src/printf.c ****       buf[len++] = '.';
 428:Core/Src/printf.c ****     }
 429:Core/Src/printf.c ****   }
 430:Core/Src/printf.c **** 
 431:Core/Src/printf.c ****   // do whole part, number is reversed
 432:Core/Src/printf.c ****   while (len < PRINTF_FTOA_BUFFER_SIZE) {
 433:Core/Src/printf.c ****     buf[len++] = (char)(48 + (whole % 10));
 434:Core/Src/printf.c ****     if (!(whole /= 10)) {
 435:Core/Src/printf.c ****       break;
 436:Core/Src/printf.c ****     }
 437:Core/Src/printf.c ****   }
 438:Core/Src/printf.c **** 
 439:Core/Src/printf.c ****   // pad leading zeros
 440:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 441:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 442:Core/Src/printf.c ****       width--;
 443:Core/Src/printf.c ****     }
 444:Core/Src/printf.c ****     while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 445:Core/Src/printf.c ****       buf[len++] = '0';
 446:Core/Src/printf.c ****     }
 447:Core/Src/printf.c ****   }
 448:Core/Src/printf.c **** 
 449:Core/Src/printf.c ****   if (len < PRINTF_FTOA_BUFFER_SIZE) {
 450:Core/Src/printf.c ****     if (negative) {
 451:Core/Src/printf.c ****       buf[len++] = '-';
 452:Core/Src/printf.c ****     }
 453:Core/Src/printf.c ****     else if (flags & FLAGS_PLUS) {
 454:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 455:Core/Src/printf.c ****     }
 456:Core/Src/printf.c ****     else if (flags & FLAGS_SPACE) {
 457:Core/Src/printf.c ****       buf[len++] = ' ';
 458:Core/Src/printf.c ****     }
 459:Core/Src/printf.c ****   }
 460:Core/Src/printf.c **** 
ARM GAS  /tmp/cca6dLeK.s 			page 31


 461:Core/Src/printf.c ****   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 462:Core/Src/printf.c **** }
 463:Core/Src/printf.c **** 
 464:Core/Src/printf.c **** 
 465:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 466:Core/Src/printf.c **** // internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.ja
 467:Core/Src/printf.c **** static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 468:Core/Src/printf.c **** {
 1179              		.loc 1 468 1 is_stmt 1 view -0
 1180              		.cfi_startproc
 1181              		@ args = 20, pretend = 0, frame = 40
 1182              		@ frame_needed = 0, uses_anonymous_args = 0
 1183              		.loc 1 468 1 is_stmt 0 view .LVU284
 1184 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1185              	.LCFI13:
 1186              		.cfi_def_cfa_offset 20
 1187              		.cfi_offset 4, -20
 1188              		.cfi_offset 5, -16
 1189              		.cfi_offset 6, -12
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 DE46     		mov	lr, fp
 1193 0004 5746     		mov	r7, r10
 1194 0006 4E46     		mov	r6, r9
 1195 0008 4546     		mov	r5, r8
 1196 000a E0B5     		push	{r5, r6, r7, lr}
 1197              	.LCFI14:
 1198              		.cfi_def_cfa_offset 36
 1199              		.cfi_offset 8, -36
 1200              		.cfi_offset 9, -32
 1201              		.cfi_offset 10, -28
 1202              		.cfi_offset 11, -24
 1203 000c 91B0     		sub	sp, sp, #68
 1204              	.LCFI15:
 1205              		.cfi_def_cfa_offset 104
 1206 000e 8246     		mov	r10, r0
 1207 0010 8946     		mov	r9, r1
 1208 0012 0E92     		str	r2, [sp, #56]
 1209 0014 9846     		mov	r8, r3
 1210 0016 1A9C     		ldr	r4, [sp, #104]
 1211 0018 0694     		str	r4, [sp, #24]
 1212 001a 1B9D     		ldr	r5, [sp, #108]
 1213 001c 0795     		str	r5, [sp, #28]
 469:Core/Src/printf.c ****   // check for NaN and special values
 470:Core/Src/printf.c ****   if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 1214              		.loc 1 470 3 is_stmt 1 view .LVU285
 1215              		.loc 1 470 6 is_stmt 0 view .LVU286
 1216 001e 2200     		movs	r2, r4
 1217              	.LVL124:
 1218              		.loc 1 470 6 view .LVU287
 1219 0020 2B00     		movs	r3, r5
 1220              	.LVL125:
 1221              		.loc 1 470 6 view .LVU288
 1222 0022 2000     		movs	r0, r4
 1223              	.LVL126:
 1224              		.loc 1 470 6 view .LVU289
 1225 0024 2900     		movs	r1, r5
ARM GAS  /tmp/cca6dLeK.s 			page 32


 1226              	.LVL127:
 1227              		.loc 1 470 6 view .LVU290
 1228 0026 FFF7FEFF 		bl	__aeabi_dcmpeq
 1229              	.LVL128:
 1230 002a 0028     		cmp	r0, #0
 1231 002c 00D1     		bne	.LCB1287
 1232 002e 09E1     		b	.L78	@long jump
 1233              	.LCB1287:
 1234              		.loc 1 470 24 discriminator 1 view .LVU291
 1235 0030 0122     		movs	r2, #1
 1236 0032 5242     		rsbs	r2, r2, #0
 1237 0034 D64B     		ldr	r3, .L118
 1238 0036 2000     		movs	r0, r4
 1239 0038 2900     		movs	r1, r5
 1240 003a FFF7FEFF 		bl	__aeabi_dcmpgt
 1241              	.LVL129:
 1242 003e 0028     		cmp	r0, #0
 1243 0040 00D0     		beq	.LCB1296
 1244 0042 FFE0     		b	.L78	@long jump
 1245              	.LCB1296:
 1246              		.loc 1 470 45 discriminator 2 view .LVU292
 1247 0044 0122     		movs	r2, #1
 1248 0046 5242     		rsbs	r2, r2, #0
 1249 0048 D24B     		ldr	r3, .L118+4
 1250 004a 2000     		movs	r0, r4
 1251 004c 2900     		movs	r1, r5
 1252 004e FFF7FEFF 		bl	__aeabi_dcmplt
 1253              	.LVL130:
 1254 0052 0028     		cmp	r0, #0
 1255 0054 00D0     		beq	.LCB1305
 1256 0056 F5E0     		b	.L78	@long jump
 1257              	.LCB1305:
 471:Core/Src/printf.c ****     return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 472:Core/Src/printf.c ****   }
 473:Core/Src/printf.c **** 
 474:Core/Src/printf.c ****   // determine the sign
 475:Core/Src/printf.c ****   const bool negative = value < 0;
 1258              		.loc 1 475 3 is_stmt 1 view .LVU293
 1259              	.LVL131:
 476:Core/Src/printf.c ****   if (negative) {
 1260              		.loc 1 476 3 view .LVU294
 1261              		.loc 1 476 6 is_stmt 0 view .LVU295
 1262 0058 0022     		movs	r2, #0
 1263 005a 0023     		movs	r3, #0
 1264 005c 069D     		ldr	r5, [sp, #24]
 1265              	.LVL132:
 1266              		.loc 1 476 6 view .LVU296
 1267 005e 2800     		movs	r0, r5
 1268 0060 079C     		ldr	r4, [sp, #28]
 1269              	.LVL133:
 1270              		.loc 1 476 6 view .LVU297
 1271 0062 2100     		movs	r1, r4
 1272 0064 FFF7FEFF 		bl	__aeabi_dcmplt
 1273              	.LVL134:
 1274              		.loc 1 476 6 view .LVU298
 1275 0068 0028     		cmp	r0, #0
 1276 006a 00D0     		beq	.LCB1321
ARM GAS  /tmp/cca6dLeK.s 			page 33


 1277 006c 01E1     		b	.L116	@long jump
 1278              	.LCB1321:
 1279 006e 069A     		ldr	r2, [sp, #24]
 1280 0070 079B     		ldr	r3, [sp, #28]
 1281 0072 0992     		str	r2, [sp, #36]
 1282 0074 0893     		str	r3, [sp, #32]
 1283              	.LVL135:
 1284              	.L82:
 477:Core/Src/printf.c ****     value = -value;
 478:Core/Src/printf.c ****   }
 479:Core/Src/printf.c **** 
 480:Core/Src/printf.c ****   // default precision
 481:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 1285              		.loc 1 481 3 is_stmt 1 view .LVU299
 1286              		.loc 1 481 15 is_stmt 0 view .LVU300
 1287 0076 8023     		movs	r3, #128
 1288 0078 DB00     		lsls	r3, r3, #3
 1289 007a 1E9A     		ldr	r2, [sp, #120]
 1290 007c 1A40     		ands	r2, r3
 1291 007e 0F92     		str	r2, [sp, #60]
 1292              		.loc 1 481 6 view .LVU301
 1293 0080 1E9A     		ldr	r2, [sp, #120]
 1294 0082 1A42     		tst	r2, r3
 1295 0084 01D1     		bne	.L84
 482:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1296              		.loc 1 482 10 view .LVU302
 1297 0086 0623     		movs	r3, #6
 1298 0088 1C93     		str	r3, [sp, #112]
 1299              	.LVL136:
 1300              	.L84:
 483:Core/Src/printf.c ****   }
 484:Core/Src/printf.c **** 
 485:Core/Src/printf.c ****   // determine the decimal exponent
 486:Core/Src/printf.c ****   // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
 487:Core/Src/printf.c ****   union {
 1301              		.loc 1 487 3 is_stmt 1 view .LVU303
 488:Core/Src/printf.c ****     uint64_t U;
 489:Core/Src/printf.c ****     double   F;
 490:Core/Src/printf.c ****   } conv;
 491:Core/Src/printf.c **** 
 492:Core/Src/printf.c ****   conv.F = value;
 1302              		.loc 1 492 3 view .LVU304
 493:Core/Src/printf.c ****   int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 1303              		.loc 1 493 3 view .LVU305
 1304 008a 099B     		ldr	r3, [sp, #36]
 1305              		.loc 1 493 28 is_stmt 0 view .LVU306
 1306 008c 089A     		ldr	r2, [sp, #32]
 1307 008e 100D     		lsrs	r0, r2, #20
 1308              		.loc 1 493 14 view .LVU307
 1309 0090 4005     		lsls	r0, r0, #21
 1310 0092 400D     		lsrs	r0, r0, #21
 1311              		.loc 1 493 7 view .LVU308
 1312 0094 C049     		ldr	r1, .L118+8
 1313 0096 8C46     		mov	ip, r1
 1314 0098 6044     		add	r0, r0, ip
 1315              	.LVL137:
 494:Core/Src/printf.c ****   conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is n
ARM GAS  /tmp/cca6dLeK.s 			page 34


 1316              		.loc 1 494 3 is_stmt 1 view .LVU309
 1317              		.loc 1 494 20 is_stmt 0 view .LVU310
 1318 009a 1203     		lsls	r2, r2, #12
 1319 009c 120B     		lsrs	r2, r2, #12
 1320              		.loc 1 494 44 view .LVU311
 1321 009e 1C00     		movs	r4, r3
 1322 00a0 BE4B     		ldr	r3, .L118+12
 1323 00a2 1343     		orrs	r3, r2
 1324 00a4 1D00     		movs	r5, r3
 1325              	.LVL138:
 495:Core/Src/printf.c ****   // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
 496:Core/Src/printf.c ****   int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.28952965460216
 1326              		.loc 1 496 3 is_stmt 1 view .LVU312
 1327              		.loc 1 496 45 is_stmt 0 view .LVU313
 1328 00a6 FFF7FEFF 		bl	__aeabi_i2d
 1329              	.LVL139:
 1330              		.loc 1 496 45 view .LVU314
 1331 00aa BD4A     		ldr	r2, .L118+16
 1332 00ac BD4B     		ldr	r3, .L118+20
 1333 00ae FFF7FEFF 		bl	__aeabi_dmul
 1334              	.LVL140:
 1335              		.loc 1 496 38 view .LVU315
 1336 00b2 BD4A     		ldr	r2, .L118+24
 1337 00b4 BD4B     		ldr	r3, .L118+28
 1338 00b6 FFF7FEFF 		bl	__aeabi_dadd
 1339              	.LVL141:
 1340 00ba 0600     		movs	r6, r0
 1341 00bc 0F00     		movs	r7, r1
 1342              		.loc 1 496 75 view .LVU316
 1343 00be 0022     		movs	r2, #0
 1344 00c0 BB4B     		ldr	r3, .L118+32
 1345 00c2 2000     		movs	r0, r4
 1346 00c4 2900     		movs	r1, r5
 1347 00c6 FFF7FEFF 		bl	__aeabi_dsub
 1348              	.LVL142:
 1349              		.loc 1 496 82 view .LVU317
 1350 00ca BA4A     		ldr	r2, .L118+36
 1351 00cc BA4B     		ldr	r3, .L118+40
 1352 00ce FFF7FEFF 		bl	__aeabi_dmul
 1353              	.LVL143:
 1354 00d2 0200     		movs	r2, r0
 1355 00d4 0B00     		movs	r3, r1
 1356              		.loc 1 496 65 view .LVU318
 1357 00d6 3000     		movs	r0, r6
 1358 00d8 3900     		movs	r1, r7
 1359 00da FFF7FEFF 		bl	__aeabi_dadd
 1360              	.LVL144:
 1361              		.loc 1 496 7 view .LVU319
 1362 00de FFF7FEFF 		bl	__aeabi_d2iz
 1363              	.LVL145:
 1364 00e2 8346     		mov	fp, r0
 1365              	.LVL146:
 497:Core/Src/printf.c ****   // now we want to compute 10^expval but we want to be sure it won't overflow
 498:Core/Src/printf.c ****   exp2 = (int)(expval * 3.321928094887362 + 0.5);
 1366              		.loc 1 498 3 is_stmt 1 view .LVU320
 1367              		.loc 1 498 23 is_stmt 0 view .LVU321
 1368 00e4 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/cca6dLeK.s 			page 35


 1369              	.LVL147:
 1370              		.loc 1 498 23 view .LVU322
 1371 00e8 0400     		movs	r4, r0
 1372 00ea 0D00     		movs	r5, r1
 1373 00ec B34A     		ldr	r2, .L118+44
 1374 00ee B44B     		ldr	r3, .L118+48
 1375 00f0 FFF7FEFF 		bl	__aeabi_dmul
 1376              	.LVL148:
 1377              		.loc 1 498 43 view .LVU323
 1378 00f4 0022     		movs	r2, #0
 1379 00f6 B34B     		ldr	r3, .L118+52
 1380 00f8 FFF7FEFF 		bl	__aeabi_dadd
 1381              	.LVL149:
 1382              		.loc 1 498 8 view .LVU324
 1383 00fc FFF7FEFF 		bl	__aeabi_d2iz
 1384              	.LVL150:
 1385 0100 0600     		movs	r6, r0
 1386              	.LVL151:
 499:Core/Src/printf.c ****   const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 1387              		.loc 1 499 3 is_stmt 1 view .LVU325
 1388              		.loc 1 499 28 is_stmt 0 view .LVU326
 1389 0102 B14A     		ldr	r2, .L118+56
 1390 0104 B14B     		ldr	r3, .L118+60
 1391 0106 2000     		movs	r0, r4
 1392              	.LVL152:
 1393              		.loc 1 499 28 view .LVU327
 1394 0108 2900     		movs	r1, r5
 1395 010a FFF7FEFF 		bl	__aeabi_dmul
 1396              	.LVL153:
 1397 010e 0400     		movs	r4, r0
 1398 0110 0D00     		movs	r5, r1
 1399              		.loc 1 499 55 view .LVU328
 1400 0112 0A96     		str	r6, [sp, #40]
 1401 0114 3000     		movs	r0, r6
 1402 0116 FFF7FEFF 		bl	__aeabi_i2d
 1403              	.LVL154:
 1404 011a AD4A     		ldr	r2, .L118+64
 1405 011c AD4B     		ldr	r3, .L118+68
 1406 011e FFF7FEFF 		bl	__aeabi_dmul
 1407              	.LVL155:
 1408 0122 0200     		movs	r2, r0
 1409 0124 0B00     		movs	r3, r1
 1410              		.loc 1 499 16 view .LVU329
 1411 0126 2000     		movs	r0, r4
 1412 0128 2900     		movs	r1, r5
 1413 012a FFF7FEFF 		bl	__aeabi_dsub
 1414              	.LVL156:
 1415 012e 0400     		movs	r4, r0
 1416 0130 0D00     		movs	r5, r1
 1417              	.LVL157:
 500:Core/Src/printf.c ****   const double z2 = z * z;
 1418              		.loc 1 500 3 is_stmt 1 view .LVU330
 1419              		.loc 1 500 16 is_stmt 0 view .LVU331
 1420 0132 0200     		movs	r2, r0
 1421 0134 0B00     		movs	r3, r1
 1422 0136 FFF7FEFF 		bl	__aeabi_dmul
 1423              	.LVL158:
ARM GAS  /tmp/cca6dLeK.s 			page 36


 1424 013a 0600     		movs	r6, r0
 1425              	.LVL159:
 1426              		.loc 1 500 16 view .LVU332
 1427 013c 0F00     		movs	r7, r1
 1428              	.LVL160:
 501:Core/Src/printf.c ****   conv.U = (uint64_t)(exp2 + 1023) << 52U;
 1429              		.loc 1 501 3 is_stmt 1 view .LVU333
 1430              		.loc 1 501 28 is_stmt 0 view .LVU334
 1431 013e 0A98     		ldr	r0, [sp, #40]
 1432 0140 A549     		ldr	r1, .L118+72
 1433 0142 8C46     		mov	ip, r1
 1434 0144 6044     		add	r0, r0, ip
 1435              		.loc 1 501 36 view .LVU335
 1436 0146 0022     		movs	r2, #0
 1437 0148 0023     		movs	r3, #0
 1438 014a 0A92     		str	r2, [sp, #40]
 1439 014c 0B93     		str	r3, [sp, #44]
 1440              	.LVL161:
 1441              		.loc 1 501 36 view .LVU336
 1442 014e 0105     		lsls	r1, r0, #20
 1443 0150 0B91     		str	r1, [sp, #44]
 1444 0152 0021     		movs	r1, #0
 1445 0154 0A91     		str	r1, [sp, #40]
 502:Core/Src/printf.c ****   // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_functi
 503:Core/Src/printf.c ****   conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 1446              		.loc 1 503 3 is_stmt 1 view .LVU337
 1447              		.loc 1 503 19 is_stmt 0 view .LVU338
 1448 0156 2200     		movs	r2, r4
 1449 0158 2B00     		movs	r3, r5
 1450 015a 2000     		movs	r0, r4
 1451              	.LVL162:
 1452              		.loc 1 503 19 view .LVU339
 1453 015c 2900     		movs	r1, r5
 1454 015e FFF7FEFF 		bl	__aeabi_dadd
 1455              	.LVL163:
 1456 0162 0C90     		str	r0, [sp, #48]
 1457 0164 0D91     		str	r1, [sp, #52]
 1458              		.loc 1 503 28 view .LVU340
 1459 0166 2200     		movs	r2, r4
 1460 0168 2B00     		movs	r3, r5
 1461 016a 0020     		movs	r0, #0
 1462 016c 8021     		movs	r1, #128
 1463 016e C905     		lsls	r1, r1, #23
 1464 0170 FFF7FEFF 		bl	__aeabi_dsub
 1465              	.LVL164:
 1466 0174 0400     		movs	r4, r0
 1467              	.LVL165:
 1468              		.loc 1 503 28 view .LVU341
 1469 0176 0D00     		movs	r5, r1
 1470              		.loc 1 503 60 view .LVU342
 1471 0178 0022     		movs	r2, #0
 1472 017a 984B     		ldr	r3, .L118+76
 1473 017c 3000     		movs	r0, r6
 1474 017e 3900     		movs	r1, r7
 1475 0180 FFF7FEFF 		bl	__aeabi_ddiv
 1476              	.LVL166:
 1477              		.loc 1 503 55 view .LVU343
ARM GAS  /tmp/cca6dLeK.s 			page 37


 1478 0184 0022     		movs	r2, #0
 1479 0186 964B     		ldr	r3, .L118+80
 1480 0188 FFF7FEFF 		bl	__aeabi_dadd
 1481              	.LVL167:
 1482 018c 0200     		movs	r2, r0
 1483 018e 0B00     		movs	r3, r1
 1484              		.loc 1 503 49 view .LVU344
 1485 0190 3000     		movs	r0, r6
 1486 0192 3900     		movs	r1, r7
 1487 0194 FFF7FEFF 		bl	__aeabi_ddiv
 1488              	.LVL168:
 1489              		.loc 1 503 43 view .LVU345
 1490 0198 0022     		movs	r2, #0
 1491 019a 924B     		ldr	r3, .L118+84
 1492 019c FFF7FEFF 		bl	__aeabi_dadd
 1493              	.LVL169:
 1494 01a0 0200     		movs	r2, r0
 1495 01a2 0B00     		movs	r3, r1
 1496              		.loc 1 503 38 view .LVU346
 1497 01a4 3000     		movs	r0, r6
 1498 01a6 3900     		movs	r1, r7
 1499 01a8 FFF7FEFF 		bl	__aeabi_ddiv
 1500              	.LVL170:
 1501 01ac 0200     		movs	r2, r0
 1502 01ae 0B00     		movs	r3, r1
 1503              		.loc 1 503 32 view .LVU347
 1504 01b0 2000     		movs	r0, r4
 1505 01b2 2900     		movs	r1, r5
 1506 01b4 FFF7FEFF 		bl	__aeabi_dadd
 1507              	.LVL171:
 1508 01b8 0200     		movs	r2, r0
 1509 01ba 0B00     		movs	r3, r1
 1510              		.loc 1 503 23 view .LVU348
 1511 01bc 0C98     		ldr	r0, [sp, #48]
 1512 01be 0D99     		ldr	r1, [sp, #52]
 1513 01c0 FFF7FEFF 		bl	__aeabi_ddiv
 1514              	.LVL172:
 1515              		.loc 1 503 15 view .LVU349
 1516 01c4 0022     		movs	r2, #0
 1517 01c6 754B     		ldr	r3, .L118+12
 1518 01c8 FFF7FEFF 		bl	__aeabi_dadd
 1519              	.LVL173:
 1520              		.loc 1 503 10 view .LVU350
 1521 01cc 0A9A     		ldr	r2, [sp, #40]
 1522 01ce 0B9B     		ldr	r3, [sp, #44]
 1523 01d0 FFF7FEFF 		bl	__aeabi_dmul
 1524              	.LVL174:
 1525 01d4 0400     		movs	r4, r0
 1526 01d6 0D00     		movs	r5, r1
 1527 01d8 0A94     		str	r4, [sp, #40]
 1528 01da 0B95     		str	r5, [sp, #44]
 504:Core/Src/printf.c ****   // correct for rounding errors
 505:Core/Src/printf.c ****   if (value < conv.F) {
 1529              		.loc 1 505 3 is_stmt 1 view .LVU351
 1530              		.loc 1 505 6 is_stmt 0 view .LVU352
 1531 01dc 099A     		ldr	r2, [sp, #36]
 1532 01de 089B     		ldr	r3, [sp, #32]
ARM GAS  /tmp/cca6dLeK.s 			page 38


 1533 01e0 FFF7FEFF 		bl	__aeabi_dcmpgt
 1534              	.LVL175:
 1535 01e4 0028     		cmp	r0, #0
 1536 01e6 0BD0     		beq	.L85
 506:Core/Src/printf.c ****     expval--;
 1537              		.loc 1 506 5 is_stmt 1 view .LVU353
 1538              		.loc 1 506 11 is_stmt 0 view .LVU354
 1539 01e8 0123     		movs	r3, #1
 1540 01ea 5B42     		rsbs	r3, r3, #0
 1541 01ec 9C46     		mov	ip, r3
 1542 01ee E344     		add	fp, fp, ip
 1543              	.LVL176:
 507:Core/Src/printf.c ****     conv.F /= 10;
 1544              		.loc 1 507 5 is_stmt 1 view .LVU355
 1545              		.loc 1 507 12 is_stmt 0 view .LVU356
 1546 01f0 0022     		movs	r2, #0
 1547 01f2 7B4B     		ldr	r3, .L118+80
 1548 01f4 2000     		movs	r0, r4
 1549 01f6 2900     		movs	r1, r5
 1550 01f8 FFF7FEFF 		bl	__aeabi_ddiv
 1551              	.LVL177:
 1552 01fc 0A90     		str	r0, [sp, #40]
 1553 01fe 0B91     		str	r1, [sp, #44]
 1554              	.L85:
 508:Core/Src/printf.c ****   }
 509:Core/Src/printf.c **** 
 510:Core/Src/printf.c ****   // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
 511:Core/Src/printf.c ****   unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 1555              		.loc 1 511 3 is_stmt 1 view .LVU357
 1556              		.loc 1 511 43 is_stmt 0 view .LVU358
 1557 0200 5B46     		mov	r3, fp
 1558 0202 6333     		adds	r3, r3, #99
 1559              		.loc 1 511 68 view .LVU359
 1560 0204 C62B     		cmp	r3, #198
 1561 0206 3BD8     		bhi	.L103
 1562              		.loc 1 511 68 view .LVU360
 1563 0208 0424     		movs	r4, #4
 1564              	.L87:
 1565              	.LVL178:
 512:Core/Src/printf.c **** 
 513:Core/Src/printf.c ****   // in "%g" mode, "prec" is the number of *significant figures* not decimals
 514:Core/Src/printf.c ****   if (flags & FLAGS_ADAPT_EXP) {
 1566              		.loc 1 514 3 is_stmt 1 discriminator 4 view .LVU361
 1567              		.loc 1 514 6 is_stmt 0 discriminator 4 view .LVU362
 1568 020a 1E9B     		ldr	r3, [sp, #120]
 1569 020c 1B05     		lsls	r3, r3, #20
 1570 020e 43D5     		bpl	.L88
 515:Core/Src/printf.c ****     // do we want to fall-back to "%f" mode?
 516:Core/Src/printf.c ****     if ((value >= 1e-4) && (value < 1e6)) {
 1571              		.loc 1 516 5 is_stmt 1 view .LVU363
 1572              		.loc 1 516 8 is_stmt 0 view .LVU364
 1573 0210 754A     		ldr	r2, .L118+88
 1574 0212 764B     		ldr	r3, .L118+92
 1575 0214 099E     		ldr	r6, [sp, #36]
 1576              	.LVL179:
 1577              		.loc 1 516 8 view .LVU365
 1578 0216 3000     		movs	r0, r6
ARM GAS  /tmp/cca6dLeK.s 			page 39


 1579 0218 089D     		ldr	r5, [sp, #32]
 1580 021a 2900     		movs	r1, r5
 1581 021c FFF7FEFF 		bl	__aeabi_dcmpge
 1582              	.LVL180:
 1583 0220 0028     		cmp	r0, #0
 1584 0222 3ED0     		beq	.L89
 1585              		.loc 1 516 25 discriminator 1 view .LVU366
 1586 0224 0022     		movs	r2, #0
 1587 0226 724B     		ldr	r3, .L118+96
 1588 0228 3000     		movs	r0, r6
 1589 022a 2900     		movs	r1, r5
 1590 022c FFF7FEFF 		bl	__aeabi_dcmplt
 1591              	.LVL181:
 1592 0230 0028     		cmp	r0, #0
 1593 0232 36D0     		beq	.L89
 517:Core/Src/printf.c ****       if ((int)prec > expval) {
 1594              		.loc 1 517 7 is_stmt 1 view .LVU367
 1595              		.loc 1 517 10 is_stmt 0 view .LVU368
 1596 0234 1C9B     		ldr	r3, [sp, #112]
 1597 0236 5B45     		cmp	r3, fp
 1598 0238 24DD     		ble	.L104
 518:Core/Src/printf.c ****         prec = (unsigned)((int)prec - expval - 1);
 1599              		.loc 1 518 9 is_stmt 1 view .LVU369
 1600              		.loc 1 518 37 is_stmt 0 view .LVU370
 1601 023a 5A46     		mov	r2, fp
 1602 023c 981A     		subs	r0, r3, r2
 1603              		.loc 1 518 46 view .LVU371
 1604 023e 431E     		subs	r3, r0, #1
 1605 0240 1C93     		str	r3, [sp, #112]
 1606              	.LVL182:
 1607              		.loc 1 518 46 view .LVU372
 1608 0242 21E0     		b	.L92
 1609              	.LVL183:
 1610              	.L78:
 471:Core/Src/printf.c ****   }
 1611              		.loc 1 471 5 is_stmt 1 view .LVU373
 471:Core/Src/printf.c ****   }
 1612              		.loc 1 471 12 is_stmt 0 view .LVU374
 1613 0244 1E9B     		ldr	r3, [sp, #120]
 1614 0246 0493     		str	r3, [sp, #16]
 1615 0248 1D9B     		ldr	r3, [sp, #116]
 1616 024a 0393     		str	r3, [sp, #12]
 1617 024c 1C9B     		ldr	r3, [sp, #112]
 1618 024e 0293     		str	r3, [sp, #8]
 1619 0250 069A     		ldr	r2, [sp, #24]
 1620 0252 079B     		ldr	r3, [sp, #28]
 1621 0254 0092     		str	r2, [sp]
 1622 0256 0193     		str	r3, [sp, #4]
 1623 0258 4346     		mov	r3, r8
 1624 025a 0E9A     		ldr	r2, [sp, #56]
 1625 025c 4946     		mov	r1, r9
 1626 025e 5046     		mov	r0, r10
 1627 0260 FFF7FEFF 		bl	_ftoa
 1628              	.LVL184:
 1629              	.L81:
 519:Core/Src/printf.c ****       }
 520:Core/Src/printf.c ****       else {
ARM GAS  /tmp/cca6dLeK.s 			page 40


 521:Core/Src/printf.c ****         prec = 0;
 522:Core/Src/printf.c ****       }
 523:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 524:Core/Src/printf.c ****       // no characters in exponent
 525:Core/Src/printf.c ****       minwidth = 0U;
 526:Core/Src/printf.c ****       expval   = 0;
 527:Core/Src/printf.c ****     }
 528:Core/Src/printf.c ****     else {
 529:Core/Src/printf.c ****       // we use one sigfig for the whole part
 530:Core/Src/printf.c ****       if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 531:Core/Src/printf.c ****         --prec;
 532:Core/Src/printf.c ****       }
 533:Core/Src/printf.c ****     }
 534:Core/Src/printf.c ****   }
 535:Core/Src/printf.c **** 
 536:Core/Src/printf.c ****   // will everything fit?
 537:Core/Src/printf.c ****   unsigned int fwidth = width;
 538:Core/Src/printf.c ****   if (width > minwidth) {
 539:Core/Src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 540:Core/Src/printf.c ****     fwidth -= minwidth;
 541:Core/Src/printf.c ****   } else {
 542:Core/Src/printf.c ****     // not enough characters, so go back to default sizing
 543:Core/Src/printf.c ****     fwidth = 0U;
 544:Core/Src/printf.c ****   }
 545:Core/Src/printf.c ****   if ((flags & FLAGS_LEFT) && minwidth) {
 546:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 547:Core/Src/printf.c ****     fwidth = 0U;
 548:Core/Src/printf.c ****   }
 549:Core/Src/printf.c **** 
 550:Core/Src/printf.c ****   // rescale the float value
 551:Core/Src/printf.c ****   if (expval) {
 552:Core/Src/printf.c ****     value /= conv.F;
 553:Core/Src/printf.c ****   }
 554:Core/Src/printf.c **** 
 555:Core/Src/printf.c ****   // output the floating part
 556:Core/Src/printf.c ****   const size_t start_idx = idx;
 557:Core/Src/printf.c ****   idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADA
 558:Core/Src/printf.c **** 
 559:Core/Src/printf.c ****   // output the exponent part
 560:Core/Src/printf.c ****   if (minwidth) {
 561:Core/Src/printf.c ****     // output the exponential symbol
 562:Core/Src/printf.c ****     out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 563:Core/Src/printf.c ****     // output the exponent value
 564:Core/Src/printf.c ****     idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, 
 565:Core/Src/printf.c ****     // might need to right-pad spaces
 566:Core/Src/printf.c ****     if (flags & FLAGS_LEFT) {
 567:Core/Src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 568:Core/Src/printf.c ****     }
 569:Core/Src/printf.c ****   }
 570:Core/Src/printf.c ****   return idx;
 571:Core/Src/printf.c **** }
 1630              		.loc 1 571 1 view .LVU375
 1631 0264 11B0     		add	sp, sp, #68
 1632              		@ sp needed
 1633              	.LVL185:
 1634              	.LVL186:
 1635              	.LVL187:
ARM GAS  /tmp/cca6dLeK.s 			page 41


 1636              		.loc 1 571 1 view .LVU376
 1637 0266 F0BC     		pop	{r4, r5, r6, r7}
 1638 0268 BB46     		mov	fp, r7
 1639 026a B246     		mov	r10, r6
 1640 026c A946     		mov	r9, r5
 1641 026e A046     		mov	r8, r4
 1642 0270 F0BD     		pop	{r4, r5, r6, r7, pc}
 1643              	.LVL188:
 1644              	.L116:
 477:Core/Src/printf.c ****   }
 1645              		.loc 1 477 5 is_stmt 1 view .LVU377
 477:Core/Src/printf.c ****   }
 1646              		.loc 1 477 11 is_stmt 0 view .LVU378
 1647 0272 0995     		str	r5, [sp, #36]
 1648 0274 8023     		movs	r3, #128
 1649 0276 1B06     		lsls	r3, r3, #24
 1650 0278 9C46     		mov	ip, r3
 1651 027a 6444     		add	r4, r4, ip
 1652              	.LVL189:
 477:Core/Src/printf.c ****   }
 1653              		.loc 1 477 11 view .LVU379
 1654 027c 0894     		str	r4, [sp, #32]
 1655              	.LVL190:
 477:Core/Src/printf.c ****   }
 1656              		.loc 1 477 11 view .LVU380
 1657 027e FAE6     		b	.L82
 1658              	.LVL191:
 1659              	.L103:
 511:Core/Src/printf.c **** 
 1660              		.loc 1 511 68 view .LVU381
 1661 0280 0524     		movs	r4, #5
 1662 0282 C2E7     		b	.L87
 1663              	.LVL192:
 1664              	.L104:
 521:Core/Src/printf.c ****       }
 1665              		.loc 1 521 14 view .LVU382
 1666 0284 0023     		movs	r3, #0
 1667 0286 1C93     		str	r3, [sp, #112]
 1668              	.LVL193:
 1669              	.L92:
 523:Core/Src/printf.c ****       // no characters in exponent
 1670              		.loc 1 523 7 is_stmt 1 view .LVU383
 523:Core/Src/printf.c ****       // no characters in exponent
 1671              		.loc 1 523 13 is_stmt 0 view .LVU384
 1672 0288 8023     		movs	r3, #128
 1673 028a DB00     		lsls	r3, r3, #3
 1674 028c 1E9A     		ldr	r2, [sp, #120]
 1675 028e 1A43     		orrs	r2, r3
 1676 0290 1E92     		str	r2, [sp, #120]
 1677              	.LVL194:
 525:Core/Src/printf.c ****       expval   = 0;
 1678              		.loc 1 525 7 is_stmt 1 view .LVU385
 526:Core/Src/printf.c ****     }
 1679              		.loc 1 526 7 view .LVU386
 525:Core/Src/printf.c ****       expval   = 0;
 1680              		.loc 1 525 16 is_stmt 0 view .LVU387
 1681 0292 0024     		movs	r4, #0
ARM GAS  /tmp/cca6dLeK.s 			page 42


 526:Core/Src/printf.c ****     }
 1682              		.loc 1 526 16 view .LVU388
 1683 0294 0023     		movs	r3, #0
 1684 0296 9B46     		mov	fp, r3
 1685              	.LVL195:
 1686              	.L88:
 537:Core/Src/printf.c ****   if (width > minwidth) {
 1687              		.loc 1 537 3 is_stmt 1 view .LVU389
 538:Core/Src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 1688              		.loc 1 538 3 view .LVU390
 538:Core/Src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 1689              		.loc 1 538 6 is_stmt 0 view .LVU391
 1690 0298 1D9B     		ldr	r3, [sp, #116]
 1691 029a 9C42     		cmp	r4, r3
 1692 029c 0BD2     		bcs	.L105
 540:Core/Src/printf.c ****   } else {
 1693              		.loc 1 540 5 is_stmt 1 view .LVU392
 540:Core/Src/printf.c ****   } else {
 1694              		.loc 1 540 12 is_stmt 0 view .LVU393
 1695 029e 1D1B     		subs	r5, r3, r4
 1696              	.LVL196:
 540:Core/Src/printf.c ****   } else {
 1697              		.loc 1 540 12 view .LVU394
 1698 02a0 0AE0     		b	.L93
 1699              	.LVL197:
 1700              	.L89:
 530:Core/Src/printf.c ****         --prec;
 1701              		.loc 1 530 7 is_stmt 1 view .LVU395
 530:Core/Src/printf.c ****         --prec;
 1702              		.loc 1 530 10 is_stmt 0 view .LVU396
 1703 02a2 1C9B     		ldr	r3, [sp, #112]
 1704 02a4 002B     		cmp	r3, #0
 1705 02a6 F7D0     		beq	.L88
 530:Core/Src/printf.c ****         --prec;
 1706              		.loc 1 530 22 discriminator 1 view .LVU397
 1707 02a8 0F9B     		ldr	r3, [sp, #60]
 1708 02aa 002B     		cmp	r3, #0
 1709 02ac F4D0     		beq	.L88
 531:Core/Src/printf.c ****       }
 1710              		.loc 1 531 9 is_stmt 1 view .LVU398
 1711 02ae 1C9B     		ldr	r3, [sp, #112]
 1712 02b0 013B     		subs	r3, r3, #1
 1713 02b2 1C93     		str	r3, [sp, #112]
 1714              	.LVL198:
 531:Core/Src/printf.c ****       }
 1715              		.loc 1 531 9 is_stmt 0 view .LVU399
 1716 02b4 F0E7     		b	.L88
 1717              	.LVL199:
 1718              	.L105:
 543:Core/Src/printf.c ****   }
 1719              		.loc 1 543 12 view .LVU400
 1720 02b6 0025     		movs	r5, #0
 1721              	.LVL200:
 1722              	.L93:
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 1723              		.loc 1 545 3 is_stmt 1 view .LVU401
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
ARM GAS  /tmp/cca6dLeK.s 			page 43


 1724              		.loc 1 545 14 is_stmt 0 view .LVU402
 1725 02b8 0223     		movs	r3, #2
 1726 02ba 1E9E     		ldr	r6, [sp, #120]
 1727 02bc 1E40     		ands	r6, r3
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 1728              		.loc 1 545 6 view .LVU403
 1729 02be 1E9A     		ldr	r2, [sp, #120]
 1730 02c0 1342     		tst	r3, r2
 1731 02c2 02D0     		beq	.L94
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 1732              		.loc 1 545 28 discriminator 1 view .LVU404
 1733 02c4 002C     		cmp	r4, #0
 1734 02c6 00D0     		beq	.L94
 547:Core/Src/printf.c ****   }
 1735              		.loc 1 547 12 view .LVU405
 1736 02c8 0025     		movs	r5, #0
 1737              	.LVL201:
 1738              	.L94:
 551:Core/Src/printf.c ****     value /= conv.F;
 1739              		.loc 1 551 3 is_stmt 1 view .LVU406
 551:Core/Src/printf.c ****     value /= conv.F;
 1740              		.loc 1 551 6 is_stmt 0 view .LVU407
 1741 02ca 5B46     		mov	r3, fp
 1742 02cc 002B     		cmp	r3, #0
 1743 02ce 07D0     		beq	.L95
 1744              	.LVL202:
 552:Core/Src/printf.c ****   }
 1745              		.loc 1 552 5 is_stmt 1 view .LVU408
 552:Core/Src/printf.c ****   }
 1746              		.loc 1 552 18 is_stmt 0 view .LVU409
 1747 02d0 0A9A     		ldr	r2, [sp, #40]
 1748 02d2 0B9B     		ldr	r3, [sp, #44]
 552:Core/Src/printf.c ****   }
 1749              		.loc 1 552 11 view .LVU410
 1750 02d4 0998     		ldr	r0, [sp, #36]
 1751 02d6 0899     		ldr	r1, [sp, #32]
 1752 02d8 FFF7FEFF 		bl	__aeabi_ddiv
 1753              	.LVL203:
 552:Core/Src/printf.c ****   }
 1754              		.loc 1 552 11 view .LVU411
 1755 02dc 0990     		str	r0, [sp, #36]
 1756              	.LVL204:
 552:Core/Src/printf.c ****   }
 1757              		.loc 1 552 11 view .LVU412
 1758 02de 0891     		str	r1, [sp, #32]
 1759              	.LVL205:
 1760              	.L95:
 556:Core/Src/printf.c ****   idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADA
 1761              		.loc 1 556 3 is_stmt 1 view .LVU413
 557:Core/Src/printf.c **** 
 1762              		.loc 1 557 3 view .LVU414
 557:Core/Src/printf.c **** 
 1763              		.loc 1 557 9 is_stmt 0 view .LVU415
 1764 02e0 0022     		movs	r2, #0
 1765 02e2 0023     		movs	r3, #0
 1766 02e4 0698     		ldr	r0, [sp, #24]
 1767 02e6 0799     		ldr	r1, [sp, #28]
ARM GAS  /tmp/cca6dLeK.s 			page 44


 1768 02e8 FFF7FEFF 		bl	__aeabi_dcmplt
 1769              	.LVL206:
 1770 02ec 0028     		cmp	r0, #0
 1771 02ee 3AD1     		bne	.L117
 1772              	.LVL207:
 1773              	.L96:
 557:Core/Src/printf.c **** 
 1774              		.loc 1 557 9 discriminator 4 view .LVU416
 1775 02f0 404B     		ldr	r3, .L118+100
 1776 02f2 1E9A     		ldr	r2, [sp, #120]
 1777 02f4 1340     		ands	r3, r2
 1778 02f6 0493     		str	r3, [sp, #16]
 1779 02f8 0395     		str	r5, [sp, #12]
 1780 02fa 1C9B     		ldr	r3, [sp, #112]
 1781 02fc 0293     		str	r3, [sp, #8]
 1782 02fe 099A     		ldr	r2, [sp, #36]
 1783 0300 089B     		ldr	r3, [sp, #32]
 1784 0302 0092     		str	r2, [sp]
 1785 0304 0193     		str	r3, [sp, #4]
 1786 0306 4346     		mov	r3, r8
 1787 0308 0E9A     		ldr	r2, [sp, #56]
 1788 030a 4946     		mov	r1, r9
 1789 030c 5046     		mov	r0, r10
 1790 030e FFF7FEFF 		bl	_ftoa
 1791              	.LVL208:
 560:Core/Src/printf.c ****     // output the exponential symbol
 1792              		.loc 1 560 3 is_stmt 1 discriminator 4 view .LVU417
 560:Core/Src/printf.c ****     // output the exponential symbol
 1793              		.loc 1 560 6 is_stmt 0 discriminator 4 view .LVU418
 1794 0312 002C     		cmp	r4, #0
 1795 0314 A6D0     		beq	.L81
 562:Core/Src/printf.c ****     // output the exponent value
 1796              		.loc 1 562 5 is_stmt 1 view .LVU419
 1797 0316 1E9B     		ldr	r3, [sp, #120]
 1798 0318 9B06     		lsls	r3, r3, #26
 1799 031a 2BD5     		bpl	.L107
 1800 031c 4527     		movs	r7, #69
 1801              	.L98:
 562:Core/Src/printf.c ****     // output the exponent value
 1802              		.loc 1 562 5 is_stmt 0 discriminator 4 view .LVU420
 1803 031e 451C     		adds	r5, r0, #1
 1804              	.LVL209:
 562:Core/Src/printf.c ****     // output the exponent value
 1805              		.loc 1 562 5 discriminator 4 view .LVU421
 1806 0320 4346     		mov	r3, r8
 1807 0322 0200     		movs	r2, r0
 1808 0324 4946     		mov	r1, r9
 1809 0326 3800     		movs	r0, r7
 1810 0328 D047     		blx	r10
 1811              	.LVL210:
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1812              		.loc 1 564 5 is_stmt 1 discriminator 4 view .LVU422
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1813              		.loc 1 564 71 is_stmt 0 discriminator 4 view .LVU423
 1814 032a 5B46     		mov	r3, fp
 1815 032c DA17     		asrs	r2, r3, #31
 1816 032e 9B18     		adds	r3, r3, r2
ARM GAS  /tmp/cca6dLeK.s 			page 45


 1817 0330 5340     		eors	r3, r2
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1818              		.loc 1 564 11 discriminator 4 view .LVU424
 1819 0332 0522     		movs	r2, #5
 1820 0334 0592     		str	r2, [sp, #20]
 1821 0336 013C     		subs	r4, r4, #1
 1822              	.LVL211:
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1823              		.loc 1 564 11 discriminator 4 view .LVU425
 1824 0338 0494     		str	r4, [sp, #16]
 1825 033a 0022     		movs	r2, #0
 1826 033c 0392     		str	r2, [sp, #12]
 1827 033e 0A32     		adds	r2, r2, #10
 1828 0340 0292     		str	r2, [sp, #8]
 1829 0342 5A46     		mov	r2, fp
 1830 0344 D00F     		lsrs	r0, r2, #31
 1831 0346 0190     		str	r0, [sp, #4]
 1832 0348 0093     		str	r3, [sp]
 1833 034a 4346     		mov	r3, r8
 1834 034c 2A00     		movs	r2, r5
 1835 034e 4946     		mov	r1, r9
 1836 0350 5046     		mov	r0, r10
 1837 0352 FFF7FEFF 		bl	_ntoa_long
 1838              	.LVL212:
 566:Core/Src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 1839              		.loc 1 566 5 is_stmt 1 discriminator 4 view .LVU426
 566:Core/Src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 1840              		.loc 1 566 8 is_stmt 0 discriminator 4 view .LVU427
 1841 0356 002E     		cmp	r6, #0
 1842 0358 00D1     		bne	.LCB1857
 1843 035a 83E7     		b	.L81	@long jump
 1844              	.LCB1857:
 1845 035c 0200     		movs	r2, r0
 1846 035e 5646     		mov	r6, r10
 1847 0360 4F46     		mov	r7, r9
 1848 0362 0E9D     		ldr	r5, [sp, #56]
 1849 0364 0EE0     		b	.L99
 1850              	.LVL213:
 1851              	.L117:
 557:Core/Src/printf.c **** 
 1852              		.loc 1 557 9 discriminator 1 view .LVU428
 1853 0366 0899     		ldr	r1, [sp, #32]
 1854 0368 8020     		movs	r0, #128
 1855 036a 0006     		lsls	r0, r0, #24
 1856 036c 8446     		mov	ip, r0
 1857 036e 6144     		add	r1, r1, ip
 1858 0370 0891     		str	r1, [sp, #32]
 1859              	.LVL214:
 557:Core/Src/printf.c **** 
 1860              		.loc 1 557 9 discriminator 1 view .LVU429
 1861 0372 BDE7     		b	.L96
 1862              	.LVL215:
 1863              	.L107:
 562:Core/Src/printf.c ****     // output the exponent value
 1864              		.loc 1 562 5 view .LVU430
 1865 0374 6527     		movs	r7, #101
 1866 0376 D2E7     		b	.L98
ARM GAS  /tmp/cca6dLeK.s 			page 46


 1867              	.LVL216:
 1868              	.L100:
 567:Core/Src/printf.c ****     }
 1869              		.loc 1 567 39 is_stmt 1 discriminator 2 view .LVU431
 1870 0378 541C     		adds	r4, r2, #1
 1871              	.LVL217:
 567:Core/Src/printf.c ****     }
 1872              		.loc 1 567 39 is_stmt 0 discriminator 2 view .LVU432
 1873 037a 4346     		mov	r3, r8
 1874 037c 3900     		movs	r1, r7
 1875 037e 2020     		movs	r0, #32
 1876 0380 B047     		blx	r6
 1877              	.LVL218:
 1878 0382 2200     		movs	r2, r4
 1879              	.LVL219:
 1880              	.L99:
 567:Core/Src/printf.c ****     }
 1881              		.loc 1 567 13 is_stmt 1 discriminator 1 view .LVU433
 567:Core/Src/printf.c ****     }
 1882              		.loc 1 567 18 is_stmt 0 discriminator 1 view .LVU434
 1883 0384 531B     		subs	r3, r2, r5
 567:Core/Src/printf.c ****     }
 1884              		.loc 1 567 13 discriminator 1 view .LVU435
 1885 0386 1D99     		ldr	r1, [sp, #116]
 1886 0388 8B42     		cmp	r3, r1
 1887 038a F5D3     		bcc	.L100
 567:Core/Src/printf.c ****     }
 1888              		.loc 1 567 13 discriminator 1 view .LVU436
 1889 038c 1000     		movs	r0, r2
 1890 038e 69E7     		b	.L81
 1891              	.L119:
 1892              		.align	2
 1893              	.L118:
 1894 0390 FFFFEF7F 		.word	2146435071
 1895 0394 FFFFEFFF 		.word	-1048577
 1896 0398 01FCFFFF 		.word	-1023
 1897 039c 0000F03F 		.word	1072693248
 1898 03a0 FB799F50 		.word	1352628731
 1899 03a4 1344D33F 		.word	1070810131
 1900 03a8 B3C8608B 		.word	-1956591437
 1901 03ac 288AC63F 		.word	1069976104
 1902 03b0 0000F83F 		.word	1073217536
 1903 03b4 61436F63 		.word	1668236129
 1904 03b8 A787D23F 		.word	1070761895
 1905 03bc 71A37909 		.word	158966641
 1906 03c0 4F930A40 		.word	1074434895
 1907 03c4 0000E03F 		.word	1071644672
 1908 03c8 1655B5BB 		.word	-1145744106
 1909 03cc B16B0240 		.word	1073900465
 1910 03d0 EF39FAFE 		.word	-17155601
 1911 03d4 422EE63F 		.word	1072049730
 1912 03d8 FF030000 		.word	1023
 1913 03dc 00002C40 		.word	1076625408
 1914 03e0 00002440 		.word	1076101120
 1915 03e4 00001840 		.word	1075314688
 1916 03e8 2D431CEB 		.word	-350469331
 1917 03ec E2361A3F 		.word	1058682594
ARM GAS  /tmp/cca6dLeK.s 			page 47


 1918 03f0 80842E41 		.word	1093567616
 1919 03f4 FFF7FFFF 		.word	-2049
 1920              		.cfi_endproc
 1921              	.LFE12:
 1923              		.section	.rodata._ftoa.str1.4,"aMS",%progbits,1
 1924              		.align	2
 1925              	.LC0:
 1926 0000 666E6900 		.ascii	"fni\000"
 1927              		.align	2
 1928              	.LC2:
 1929 0004 666E692B 		.ascii	"fni+\000"
 1929      00
 1930 0009 000000   		.align	2
 1931              	.LC4:
 1932 000c 6E616E00 		.ascii	"nan\000"
 1933              		.align	2
 1934              	.LC6:
 1935 0010 666E692D 		.ascii	"fni-\000"
 1935      00
 1936              		.global	__aeabi_d2uiz
 1937              		.global	__aeabi_ui2d
 1938              		.global	__aeabi_dcmple
 1939              		.global	__aeabi_idivmod
 1940              		.global	__aeabi_idiv
 1941              		.section	.text._ftoa,"ax",%progbits
 1942              		.align	1
 1943              		.syntax unified
 1944              		.code	16
 1945              		.thumb_func
 1946              		.fpu softvfp
 1948              	_ftoa:
 1949              	.LVL220:
 1950              	.LFB11:
 340:Core/Src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 1951              		.loc 1 340 1 is_stmt 1 view -0
 1952              		.cfi_startproc
 1953              		@ args = 20, pretend = 0, frame = 56
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
 340:Core/Src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 1955              		.loc 1 340 1 is_stmt 0 view .LVU438
 1956 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1957              	.LCFI16:
 1958              		.cfi_def_cfa_offset 20
 1959              		.cfi_offset 4, -20
 1960              		.cfi_offset 5, -16
 1961              		.cfi_offset 6, -12
 1962              		.cfi_offset 7, -8
 1963              		.cfi_offset 14, -4
 1964 0002 DE46     		mov	lr, fp
 1965 0004 5746     		mov	r7, r10
 1966 0006 4E46     		mov	r6, r9
 1967 0008 4546     		mov	r5, r8
 1968 000a E0B5     		push	{r5, r6, r7, lr}
 1969              	.LCFI17:
 1970              		.cfi_def_cfa_offset 36
 1971              		.cfi_offset 8, -36
 1972              		.cfi_offset 9, -32
ARM GAS  /tmp/cca6dLeK.s 			page 48


 1973              		.cfi_offset 10, -28
 1974              		.cfi_offset 11, -24
 1975 000c 95B0     		sub	sp, sp, #84
 1976              	.LCFI18:
 1977              		.cfi_def_cfa_offset 120
 1978 000e 0890     		str	r0, [sp, #32]
 1979 0010 8946     		mov	r9, r1
 1980 0012 9246     		mov	r10, r2
 1981 0014 9B46     		mov	fp, r3
 1982 0016 209D     		ldr	r5, [sp, #128]
 341:Core/Src/printf.c ****   size_t len  = 0U;
 1983              		.loc 1 341 3 is_stmt 1 view .LVU439
 342:Core/Src/printf.c ****   double diff = 0.0;
 1984              		.loc 1 342 3 view .LVU440
 1985              	.LVL221:
 343:Core/Src/printf.c **** 
 1986              		.loc 1 343 3 view .LVU441
 346:Core/Src/printf.c **** 
 1987              		.loc 1 346 3 view .LVU442
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1988              		.loc 1 349 3 view .LVU443
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1989              		.loc 1 349 6 is_stmt 0 view .LVU444
 1990 0018 1E9A     		ldr	r2, [sp, #120]
 1991 001a 1F9B     		ldr	r3, [sp, #124]
 1992              	.LVL222:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1993              		.loc 1 349 6 view .LVU445
 1994 001c 1000     		movs	r0, r2
 1995              	.LVL223:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1996              		.loc 1 349 6 view .LVU446
 1997 001e 1900     		movs	r1, r3
 1998              	.LVL224:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1999              		.loc 1 349 6 view .LVU447
 2000 0020 FFF7FEFF 		bl	__aeabi_dcmpeq
 2001              	.LVL225:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 2002              		.loc 1 349 6 view .LVU448
 2003 0024 0028     		cmp	r0, #0
 2004 0026 39D0     		beq	.L192
 351:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 2005              		.loc 1 351 3 is_stmt 1 view .LVU449
 351:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 2006              		.loc 1 351 6 is_stmt 0 view .LVU450
 2007 0028 0122     		movs	r2, #1
 2008 002a 5242     		rsbs	r2, r2, #0
 2009 002c BD4B     		ldr	r3, .L198
 2010 002e 1E98     		ldr	r0, [sp, #120]
 2011 0030 1F99     		ldr	r1, [sp, #124]
 2012 0032 FFF7FEFF 		bl	__aeabi_dcmplt
 2013              	.LVL226:
 2014 0036 0028     		cmp	r0, #0
 2015 0038 3FD1     		bne	.L193
 353:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 2016              		.loc 1 353 3 is_stmt 1 view .LVU451
ARM GAS  /tmp/cca6dLeK.s 			page 49


 353:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 2017              		.loc 1 353 6 is_stmt 0 view .LVU452
 2018 003a 0122     		movs	r2, #1
 2019 003c 5242     		rsbs	r2, r2, #0
 2020 003e BA4B     		ldr	r3, .L198+4
 2021 0040 1E98     		ldr	r0, [sp, #120]
 2022 0042 1F99     		ldr	r1, [sp, #124]
 2023 0044 FFF7FEFF 		bl	__aeabi_dcmpgt
 2024              	.LVL227:
 2025 0048 0028     		cmp	r0, #0
 2026 004a 45D1     		bne	.L194
 358:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 2027              		.loc 1 358 3 is_stmt 1 view .LVU453
 358:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 2028              		.loc 1 358 6 is_stmt 0 view .LVU454
 2029 004c 0022     		movs	r2, #0
 2030 004e B74B     		ldr	r3, .L198+8
 2031 0050 1E98     		ldr	r0, [sp, #120]
 2032 0052 1F99     		ldr	r1, [sp, #124]
 2033 0054 FFF7FEFF 		bl	__aeabi_dcmpgt
 2034              	.LVL228:
 2035 0058 0028     		cmp	r0, #0
 2036 005a 58D1     		bne	.L130
 358:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 2037              		.loc 1 358 34 discriminator 1 view .LVU455
 2038 005c 0022     		movs	r2, #0
 2039 005e B44B     		ldr	r3, .L198+12
 2040 0060 1E98     		ldr	r0, [sp, #120]
 2041 0062 1F99     		ldr	r1, [sp, #124]
 2042 0064 FFF7FEFF 		bl	__aeabi_dcmplt
 2043              	.LVL229:
 2044 0068 0028     		cmp	r0, #0
 2045 006a 50D1     		bne	.L130
 367:Core/Src/printf.c ****   if (value < 0) {
 2046              		.loc 1 367 3 is_stmt 1 view .LVU456
 2047              	.LVL230:
 368:Core/Src/printf.c ****     negative = true;
 2048              		.loc 1 368 3 view .LVU457
 368:Core/Src/printf.c ****     negative = true;
 2049              		.loc 1 368 6 is_stmt 0 view .LVU458
 2050 006c 0022     		movs	r2, #0
 2051 006e 0023     		movs	r3, #0
 2052 0070 1E98     		ldr	r0, [sp, #120]
 2053 0072 1F99     		ldr	r1, [sp, #124]
 2054 0074 FFF7FEFF 		bl	__aeabi_dcmplt
 2055              	.LVL231:
 2056 0078 0028     		cmp	r0, #0
 2057 007a 58D1     		bne	.L195
 367:Core/Src/printf.c ****   if (value < 0) {
 2058              		.loc 1 367 8 view .LVU459
 2059 007c 0023     		movs	r3, #0
 2060 007e 0993     		str	r3, [sp, #36]
 2061              	.LVL232:
 2062              	.L133:
 374:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 2063              		.loc 1 374 3 is_stmt 1 view .LVU460
 374:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
ARM GAS  /tmp/cca6dLeK.s 			page 50


 2064              		.loc 1 374 6 is_stmt 0 view .LVU461
 2065 0080 229B     		ldr	r3, [sp, #136]
 2066 0082 5B05     		lsls	r3, r3, #21
 2067 0084 5ED5     		bpl	.L169
 2068              	.L135:
 2069              	.LVL233:
 375:Core/Src/printf.c ****   }
 2070              		.loc 1 375 10 view .LVU462
 2071 0086 0024     		movs	r4, #0
 2072              	.LVL234:
 2073              	.L137:
 378:Core/Src/printf.c ****     buf[len++] = '0';
 2074              		.loc 1 378 9 is_stmt 1 view .LVU463
 2075 0088 1F2C     		cmp	r4, #31
 2076 008a 5DD8     		bhi	.L138
 378:Core/Src/printf.c ****     buf[len++] = '0';
 2077              		.loc 1 378 42 is_stmt 0 discriminator 1 view .LVU464
 2078 008c 092D     		cmp	r5, #9
 2079 008e 5BD9     		bls	.L138
 379:Core/Src/printf.c ****     prec--;
 2080              		.loc 1 379 5 is_stmt 1 view .LVU465
 2081              	.LVL235:
 379:Core/Src/printf.c ****     prec--;
 2082              		.loc 1 379 16 is_stmt 0 view .LVU466
 2083 0090 0CAB     		add	r3, sp, #48
 2084 0092 3022     		movs	r2, #48
 2085 0094 1A55     		strb	r2, [r3, r4]
 380:Core/Src/printf.c ****   }
 2086              		.loc 1 380 5 is_stmt 1 view .LVU467
 380:Core/Src/printf.c ****   }
 2087              		.loc 1 380 9 is_stmt 0 view .LVU468
 2088 0096 013D     		subs	r5, r5, #1
 2089              	.LVL236:
 379:Core/Src/printf.c ****     prec--;
 2090              		.loc 1 379 12 view .LVU469
 2091 0098 0134     		adds	r4, r4, #1
 2092              	.LVL237:
 379:Core/Src/printf.c ****     prec--;
 2093              		.loc 1 379 12 view .LVU470
 2094 009a F5E7     		b	.L137
 2095              	.LVL238:
 2096              	.L192:
 350:Core/Src/printf.c ****   if (value < -DBL_MAX)
 2097              		.loc 1 350 5 is_stmt 1 view .LVU471
 350:Core/Src/printf.c ****   if (value < -DBL_MAX)
 2098              		.loc 1 350 12 is_stmt 0 view .LVU472
 2099 009c 229B     		ldr	r3, [sp, #136]
 2100 009e 0393     		str	r3, [sp, #12]
 2101 00a0 219B     		ldr	r3, [sp, #132]
 2102 00a2 0293     		str	r3, [sp, #8]
 2103 00a4 0323     		movs	r3, #3
 2104 00a6 0193     		str	r3, [sp, #4]
 2105 00a8 A24B     		ldr	r3, .L198+16
 2106 00aa 0093     		str	r3, [sp]
 2107 00ac 5B46     		mov	r3, fp
 2108 00ae 5246     		mov	r2, r10
 2109 00b0 4946     		mov	r1, r9
ARM GAS  /tmp/cca6dLeK.s 			page 51


 2110 00b2 0898     		ldr	r0, [sp, #32]
 2111 00b4 FFF7FEFF 		bl	_out_rev
 2112              	.LVL239:
 2113 00b8 05E1     		b	.L120
 2114              	.L193:
 352:Core/Src/printf.c ****   if (value > DBL_MAX)
 2115              		.loc 1 352 5 is_stmt 1 view .LVU473
 352:Core/Src/printf.c ****   if (value > DBL_MAX)
 2116              		.loc 1 352 12 is_stmt 0 view .LVU474
 2117 00ba 229B     		ldr	r3, [sp, #136]
 2118 00bc 0393     		str	r3, [sp, #12]
 2119 00be 219B     		ldr	r3, [sp, #132]
 2120 00c0 0293     		str	r3, [sp, #8]
 2121 00c2 0423     		movs	r3, #4
 2122 00c4 0193     		str	r3, [sp, #4]
 2123 00c6 9C4B     		ldr	r3, .L198+20
 2124 00c8 0093     		str	r3, [sp]
 2125 00ca 5B46     		mov	r3, fp
 2126 00cc 5246     		mov	r2, r10
 2127 00ce 4946     		mov	r1, r9
 2128 00d0 0898     		ldr	r0, [sp, #32]
 2129 00d2 FFF7FEFF 		bl	_out_rev
 2130              	.LVL240:
 2131 00d6 F6E0     		b	.L120
 2132              	.L194:
 354:Core/Src/printf.c **** 
 2133              		.loc 1 354 5 is_stmt 1 view .LVU475
 354:Core/Src/printf.c **** 
 2134              		.loc 1 354 54 is_stmt 0 view .LVU476
 2135 00d8 0423     		movs	r3, #4
 2136 00da 229A     		ldr	r2, [sp, #136]
 2137 00dc 1A40     		ands	r2, r3
 354:Core/Src/printf.c **** 
 2138              		.loc 1 354 12 view .LVU477
 2139 00de 2299     		ldr	r1, [sp, #136]
 2140 00e0 0B42     		tst	r3, r1
 2141 00e2 10D0     		beq	.L166
 2142 00e4 954B     		ldr	r3, .L198+24
 2143              	.L128:
 354:Core/Src/printf.c **** 
 2144              		.loc 1 354 12 discriminator 4 view .LVU478
 2145 00e6 002A     		cmp	r2, #0
 2146 00e8 0FD0     		beq	.L167
 354:Core/Src/printf.c **** 
 2147              		.loc 1 354 12 view .LVU479
 2148 00ea 0422     		movs	r2, #4
 2149              	.L129:
 354:Core/Src/printf.c **** 
 2150              		.loc 1 354 12 discriminator 8 view .LVU480
 2151 00ec 2299     		ldr	r1, [sp, #136]
 2152 00ee 0391     		str	r1, [sp, #12]
 2153 00f0 2199     		ldr	r1, [sp, #132]
 2154 00f2 0291     		str	r1, [sp, #8]
 2155 00f4 0192     		str	r2, [sp, #4]
 2156 00f6 0093     		str	r3, [sp]
 2157 00f8 5B46     		mov	r3, fp
 2158 00fa 5246     		mov	r2, r10
ARM GAS  /tmp/cca6dLeK.s 			page 52


 2159 00fc 4946     		mov	r1, r9
 2160 00fe 0898     		ldr	r0, [sp, #32]
 2161 0100 FFF7FEFF 		bl	_out_rev
 2162              	.LVL241:
 2163 0104 DFE0     		b	.L120
 2164              	.L166:
 354:Core/Src/printf.c **** 
 2165              		.loc 1 354 12 view .LVU481
 2166 0106 8E4B     		ldr	r3, .L198+28
 2167 0108 EDE7     		b	.L128
 2168              	.L167:
 2169 010a 0322     		movs	r2, #3
 2170 010c EEE7     		b	.L129
 2171              	.L130:
 360:Core/Src/printf.c **** #else
 2172              		.loc 1 360 5 is_stmt 1 view .LVU482
 360:Core/Src/printf.c **** #else
 2173              		.loc 1 360 12 is_stmt 0 view .LVU483
 2174 010e 229B     		ldr	r3, [sp, #136]
 2175 0110 0493     		str	r3, [sp, #16]
 2176 0112 219B     		ldr	r3, [sp, #132]
 2177 0114 0393     		str	r3, [sp, #12]
 2178 0116 0295     		str	r5, [sp, #8]
 2179 0118 1E9B     		ldr	r3, [sp, #120]
 2180 011a 1F9C     		ldr	r4, [sp, #124]
 2181 011c 0093     		str	r3, [sp]
 2182 011e 0194     		str	r4, [sp, #4]
 2183 0120 5B46     		mov	r3, fp
 2184 0122 5246     		mov	r2, r10
 2185 0124 4946     		mov	r1, r9
 2186 0126 0898     		ldr	r0, [sp, #32]
 2187 0128 FFF7FEFF 		bl	_etoa
 2188              	.LVL242:
 2189 012c CBE0     		b	.L120
 2190              	.LVL243:
 2191              	.L195:
 369:Core/Src/printf.c ****     value = 0 - value;
 2192              		.loc 1 369 5 is_stmt 1 view .LVU484
 370:Core/Src/printf.c ****   }
 2193              		.loc 1 370 5 view .LVU485
 370:Core/Src/printf.c ****   }
 2194              		.loc 1 370 11 is_stmt 0 view .LVU486
 2195 012e 1E9A     		ldr	r2, [sp, #120]
 2196 0130 1F9B     		ldr	r3, [sp, #124]
 2197 0132 0020     		movs	r0, #0
 2198 0134 0021     		movs	r1, #0
 2199 0136 FFF7FEFF 		bl	__aeabi_dsub
 2200              	.LVL244:
 2201 013a 1E90     		str	r0, [sp, #120]
 2202 013c 1F91     		str	r1, [sp, #124]
 2203              	.LVL245:
 369:Core/Src/printf.c ****     value = 0 - value;
 2204              		.loc 1 369 14 view .LVU487
 2205 013e 0123     		movs	r3, #1
 2206 0140 0993     		str	r3, [sp, #36]
 2207 0142 9DE7     		b	.L133
 2208              	.LVL246:
ARM GAS  /tmp/cca6dLeK.s 			page 53


 2209              	.L169:
 375:Core/Src/printf.c ****   }
 2210              		.loc 1 375 10 view .LVU488
 2211 0144 0625     		movs	r5, #6
 2212 0146 9EE7     		b	.L135
 2213              	.LVL247:
 2214              	.L138:
 383:Core/Src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 2215              		.loc 1 383 3 is_stmt 1 view .LVU489
 383:Core/Src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 2216              		.loc 1 383 7 is_stmt 0 view .LVU490
 2217 0148 1E98     		ldr	r0, [sp, #120]
 2218 014a 1F99     		ldr	r1, [sp, #124]
 2219 014c FFF7FEFF 		bl	__aeabi_d2iz
 2220              	.LVL248:
 2221 0150 0700     		movs	r7, r0
 2222              	.LVL249:
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 2223              		.loc 1 384 3 is_stmt 1 view .LVU491
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 2224              		.loc 1 384 23 is_stmt 0 view .LVU492
 2225 0152 FFF7FEFF 		bl	__aeabi_i2d
 2226              	.LVL250:
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 2227              		.loc 1 384 23 view .LVU493
 2228 0156 0200     		movs	r2, r0
 2229 0158 0B00     		movs	r3, r1
 2230 015a 1E98     		ldr	r0, [sp, #120]
 2231 015c 1F99     		ldr	r1, [sp, #124]
 2232 015e FFF7FEFF 		bl	__aeabi_dsub
 2233              	.LVL251:
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 2234              		.loc 1 384 39 view .LVU494
 2235 0162 EA00     		lsls	r2, r5, #3
 2236 0164 774B     		ldr	r3, .L198+32
 2237 0166 9B18     		adds	r3, r3, r2
 2238 0168 1A68     		ldr	r2, [r3]
 2239 016a 5B68     		ldr	r3, [r3, #4]
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 2240              		.loc 1 384 10 view .LVU495
 2241 016c 0A92     		str	r2, [sp, #40]
 2242 016e 0B93     		str	r3, [sp, #44]
 2243 0170 FFF7FEFF 		bl	__aeabi_dmul
 2244              	.LVL252:
 385:Core/Src/printf.c ****   diff = tmp - frac;
 2245              		.loc 1 385 3 is_stmt 1 view .LVU496
 385:Core/Src/printf.c ****   diff = tmp - frac;
 2246              		.loc 1 385 17 is_stmt 0 view .LVU497
 2247 0174 0690     		str	r0, [sp, #24]
 2248 0176 0791     		str	r1, [sp, #28]
 2249 0178 FFF7FEFF 		bl	__aeabi_d2uiz
 2250              	.LVL253:
 385:Core/Src/printf.c ****   diff = tmp - frac;
 2251              		.loc 1 385 17 view .LVU498
 2252 017c 0600     		movs	r6, r0
 2253              	.LVL254:
 386:Core/Src/printf.c **** 
ARM GAS  /tmp/cca6dLeK.s 			page 54


 2254              		.loc 1 386 3 is_stmt 1 view .LVU499
 386:Core/Src/printf.c **** 
 2255              		.loc 1 386 14 is_stmt 0 view .LVU500
 2256 017e FFF7FEFF 		bl	__aeabi_ui2d
 2257              	.LVL255:
 386:Core/Src/printf.c **** 
 2258              		.loc 1 386 14 view .LVU501
 2259 0182 0200     		movs	r2, r0
 2260 0184 0B00     		movs	r3, r1
 386:Core/Src/printf.c **** 
 2261              		.loc 1 386 8 view .LVU502
 2262 0186 0698     		ldr	r0, [sp, #24]
 2263 0188 0799     		ldr	r1, [sp, #28]
 2264 018a FFF7FEFF 		bl	__aeabi_dsub
 2265              	.LVL256:
 2266 018e 0690     		str	r0, [sp, #24]
 2267 0190 0791     		str	r1, [sp, #28]
 2268              	.LVL257:
 388:Core/Src/printf.c ****     ++frac;
 2269              		.loc 1 388 3 is_stmt 1 view .LVU503
 388:Core/Src/printf.c ****     ++frac;
 2270              		.loc 1 388 6 is_stmt 0 view .LVU504
 2271 0192 0022     		movs	r2, #0
 2272 0194 6C4B     		ldr	r3, .L198+36
 2273 0196 FFF7FEFF 		bl	__aeabi_dcmpgt
 2274              	.LVL258:
 388:Core/Src/printf.c ****     ++frac;
 2275              		.loc 1 388 6 view .LVU505
 2276 019a 0028     		cmp	r0, #0
 2277 019c 2CD0     		beq	.L184
 389:Core/Src/printf.c ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 2278              		.loc 1 389 5 is_stmt 1 view .LVU506
 2279 019e 0136     		adds	r6, r6, #1
 2280              	.LVL259:
 391:Core/Src/printf.c ****       frac = 0;
 2281              		.loc 1 391 5 view .LVU507
 391:Core/Src/printf.c ****       frac = 0;
 2282              		.loc 1 391 14 is_stmt 0 view .LVU508
 2283 01a0 3000     		movs	r0, r6
 2284 01a2 FFF7FEFF 		bl	__aeabi_ui2d
 2285              	.LVL260:
 2286 01a6 0200     		movs	r2, r0
 2287 01a8 0B00     		movs	r3, r1
 391:Core/Src/printf.c ****       frac = 0;
 2288              		.loc 1 391 8 view .LVU509
 2289 01aa 0A98     		ldr	r0, [sp, #40]
 2290 01ac 0B99     		ldr	r1, [sp, #44]
 2291 01ae FFF7FEFF 		bl	__aeabi_dcmple
 2292              	.LVL261:
 2293 01b2 0028     		cmp	r0, #0
 2294 01b4 01D0     		beq	.L142
 392:Core/Src/printf.c ****       ++whole;
 2295              		.loc 1 392 7 is_stmt 1 view .LVU510
 2296              	.LVL262:
 393:Core/Src/printf.c ****     }
 2297              		.loc 1 393 7 view .LVU511
 2298 01b6 0137     		adds	r7, r7, #1
ARM GAS  /tmp/cca6dLeK.s 			page 55


 2299              	.LVL263:
 392:Core/Src/printf.c ****       ++whole;
 2300              		.loc 1 392 12 is_stmt 0 view .LVU512
 2301 01b8 0026     		movs	r6, #0
 2302              	.LVL264:
 2303              	.L142:
 403:Core/Src/printf.c ****     diff = value - (double)whole;
 2304              		.loc 1 403 3 is_stmt 1 view .LVU513
 403:Core/Src/printf.c ****     diff = value - (double)whole;
 2305              		.loc 1 403 6 is_stmt 0 view .LVU514
 2306 01ba 002D     		cmp	r5, #0
 2307 01bc 2AD1     		bne	.L185
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2308              		.loc 1 404 5 is_stmt 1 view .LVU515
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2309              		.loc 1 404 20 is_stmt 0 view .LVU516
 2310 01be 3800     		movs	r0, r7
 2311 01c0 FFF7FEFF 		bl	__aeabi_i2d
 2312              	.LVL265:
 2313 01c4 0200     		movs	r2, r0
 2314 01c6 0B00     		movs	r3, r1
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2315              		.loc 1 404 10 view .LVU517
 2316 01c8 1E98     		ldr	r0, [sp, #120]
 2317 01ca 1F99     		ldr	r1, [sp, #124]
 2318 01cc FFF7FEFF 		bl	__aeabi_dsub
 2319              	.LVL266:
 2320 01d0 0500     		movs	r5, r0
 2321              	.LVL267:
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2322              		.loc 1 404 10 view .LVU518
 2323 01d2 0E00     		movs	r6, r1
 2324              	.LVL268:
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2325              		.loc 1 405 5 is_stmt 1 view .LVU519
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2326              		.loc 1 405 8 is_stmt 0 view .LVU520
 2327 01d4 0022     		movs	r2, #0
 2328 01d6 5C4B     		ldr	r3, .L198+36
 2329 01d8 FFF7FEFF 		bl	__aeabi_dcmplt
 2330              	.LVL269:
 2331 01dc 0028     		cmp	r0, #0
 2332 01de 07D0     		beq	.L146
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2333              		.loc 1 405 24 discriminator 2 view .LVU521
 2334 01e0 0022     		movs	r2, #0
 2335 01e2 594B     		ldr	r3, .L198+36
 2336 01e4 2800     		movs	r0, r5
 2337 01e6 3100     		movs	r1, r6
 2338 01e8 FFF7FEFF 		bl	__aeabi_dcmpgt
 2339              	.LVL270:
 2340 01ec 0028     		cmp	r0, #0
 2341 01ee 3CD0     		beq	.L156
 2342              	.L146:
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2343              		.loc 1 405 41 discriminator 3 view .LVU522
 2344 01f0 FB07     		lsls	r3, r7, #31
ARM GAS  /tmp/cca6dLeK.s 			page 56


 2345 01f2 3AD5     		bpl	.L156
 408:Core/Src/printf.c ****     }
 2346              		.loc 1 408 7 is_stmt 1 view .LVU523
 2347 01f4 0137     		adds	r7, r7, #1
 2348              	.LVL271:
 408:Core/Src/printf.c ****     }
 2349              		.loc 1 408 7 is_stmt 0 view .LVU524
 2350 01f6 38E0     		b	.L156
 2351              	.LVL272:
 2352              	.L184:
 396:Core/Src/printf.c ****   }
 2353              		.loc 1 396 8 is_stmt 1 view .LVU525
 396:Core/Src/printf.c ****   }
 2354              		.loc 1 396 11 is_stmt 0 view .LVU526
 2355 01f8 0022     		movs	r2, #0
 2356 01fa 534B     		ldr	r3, .L198+36
 2357 01fc 0698     		ldr	r0, [sp, #24]
 2358 01fe 0799     		ldr	r1, [sp, #28]
 2359 0200 FFF7FEFF 		bl	__aeabi_dcmplt
 2360              	.LVL273:
 2361 0204 0028     		cmp	r0, #0
 2362 0206 D8D1     		bne	.L142
 398:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 2363              		.loc 1 398 8 is_stmt 1 view .LVU527
 398:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 2364              		.loc 1 398 11 is_stmt 0 view .LVU528
 2365 0208 002E     		cmp	r6, #0
 2366 020a 01D0     		beq	.L144
 398:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 2367              		.loc 1 398 25 discriminator 1 view .LVU529
 2368 020c F307     		lsls	r3, r6, #31
 2369 020e D4D5     		bpl	.L142
 2370              	.L144:
 400:Core/Src/printf.c ****   }
 2371              		.loc 1 400 5 is_stmt 1 view .LVU530
 2372 0210 0136     		adds	r6, r6, #1
 2373              	.LVL274:
 400:Core/Src/printf.c ****   }
 2374              		.loc 1 400 5 is_stmt 0 view .LVU531
 2375 0212 D2E7     		b	.L142
 2376              	.L185:
 400:Core/Src/printf.c ****   }
 2377              		.loc 1 400 5 view .LVU532
 2378 0214 B846     		mov	r8, r7
 2379              	.LVL275:
 2380              	.L145:
 2381              	.LBB29:
 414:Core/Src/printf.c ****       --count;
 2382              		.loc 1 414 11 is_stmt 1 view .LVU533
 2383 0216 1F2C     		cmp	r4, #31
 2384 0218 11D8     		bhi	.L196
 415:Core/Src/printf.c ****       buf[len++] = (char)(48U + (frac % 10U));
 2385              		.loc 1 415 7 view .LVU534
 2386 021a 013D     		subs	r5, r5, #1
 2387              	.LVL276:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2388              		.loc 1 416 7 view .LVU535
ARM GAS  /tmp/cca6dLeK.s 			page 57


 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2389              		.loc 1 416 39 is_stmt 0 view .LVU536
 2390 021c 0A21     		movs	r1, #10
 2391 021e 3000     		movs	r0, r6
 2392 0220 FFF7FEFF 		bl	__aeabi_uidivmod
 2393              	.LVL277:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2394              		.loc 1 416 14 view .LVU537
 2395 0224 671C     		adds	r7, r4, #1
 2396              	.LVL278:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2397              		.loc 1 416 20 view .LVU538
 2398 0226 3031     		adds	r1, r1, #48
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2399              		.loc 1 416 18 view .LVU539
 2400 0228 0CAB     		add	r3, sp, #48
 2401 022a 1955     		strb	r1, [r3, r4]
 417:Core/Src/printf.c ****         break;
 2402              		.loc 1 417 7 is_stmt 1 view .LVU540
 417:Core/Src/printf.c ****         break;
 2403              		.loc 1 417 18 is_stmt 0 view .LVU541
 2404 022c 0A21     		movs	r1, #10
 2405 022e 3000     		movs	r0, r6
 2406 0230 FFF7FEFF 		bl	__aeabi_uidiv
 2407              	.LVL279:
 417:Core/Src/printf.c ****         break;
 2408              		.loc 1 417 10 view .LVU542
 2409 0234 092E     		cmp	r6, #9
 2410 0236 0ED9     		bls	.L170
 417:Core/Src/printf.c ****         break;
 2411              		.loc 1 417 18 view .LVU543
 2412 0238 0600     		movs	r6, r0
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2413              		.loc 1 416 14 view .LVU544
 2414 023a 3C00     		movs	r4, r7
 2415 023c EBE7     		b	.L145
 2416              	.LVL280:
 2417              	.L196:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2418              		.loc 1 416 14 view .LVU545
 2419 023e 4746     		mov	r7, r8
 2420              	.LVL281:
 2421              	.L152:
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2422              		.loc 1 422 11 is_stmt 1 view .LVU546
 2423 0240 1F2C     		cmp	r4, #31
 2424 0242 0CD8     		bhi	.L153
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2425              		.loc 1 422 53 is_stmt 0 discriminator 1 view .LVU547
 2426 0244 6B1E     		subs	r3, r5, #1
 2427              	.LVL282:
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2428              		.loc 1 422 44 discriminator 1 view .LVU548
 2429 0246 002D     		cmp	r5, #0
 2430 0248 09D0     		beq	.L153
 423:Core/Src/printf.c ****     }
 2431              		.loc 1 423 7 is_stmt 1 view .LVU549
ARM GAS  /tmp/cca6dLeK.s 			page 58


 2432              	.LVL283:
 423:Core/Src/printf.c ****     }
 2433              		.loc 1 423 18 is_stmt 0 view .LVU550
 2434 024a 0CAA     		add	r2, sp, #48
 2435 024c 3021     		movs	r1, #48
 2436 024e 1155     		strb	r1, [r2, r4]
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2437              		.loc 1 422 53 view .LVU551
 2438 0250 1D00     		movs	r5, r3
 423:Core/Src/printf.c ****     }
 2439              		.loc 1 423 14 view .LVU552
 2440 0252 0134     		adds	r4, r4, #1
 2441              	.LVL284:
 423:Core/Src/printf.c ****     }
 2442              		.loc 1 423 14 view .LVU553
 2443 0254 F4E7     		b	.L152
 2444              	.LVL285:
 2445              	.L170:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2446              		.loc 1 416 14 view .LVU554
 2447 0256 3B00     		movs	r3, r7
 2448 0258 4746     		mov	r7, r8
 2449              	.LVL286:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2450              		.loc 1 416 14 view .LVU555
 2451 025a 1C00     		movs	r4, r3
 2452 025c F0E7     		b	.L152
 2453              	.LVL287:
 2454              	.L153:
 425:Core/Src/printf.c ****       // add decimal
 2455              		.loc 1 425 5 is_stmt 1 view .LVU556
 425:Core/Src/printf.c ****       // add decimal
 2456              		.loc 1 425 8 is_stmt 0 view .LVU557
 2457 025e 1F2C     		cmp	r4, #31
 2458 0260 03D8     		bhi	.L156
 427:Core/Src/printf.c ****     }
 2459              		.loc 1 427 7 is_stmt 1 view .LVU558
 2460              	.LVL288:
 427:Core/Src/printf.c ****     }
 2461              		.loc 1 427 18 is_stmt 0 view .LVU559
 2462 0262 0CAB     		add	r3, sp, #48
 2463 0264 2E22     		movs	r2, #46
 2464 0266 1A55     		strb	r2, [r3, r4]
 427:Core/Src/printf.c ****     }
 2465              		.loc 1 427 14 view .LVU560
 2466 0268 0134     		adds	r4, r4, #1
 2467              	.LVL289:
 2468              	.L156:
 427:Core/Src/printf.c ****     }
 2469              		.loc 1 427 14 view .LVU561
 2470              	.LBE29:
 432:Core/Src/printf.c ****     buf[len++] = (char)(48 + (whole % 10));
 2471              		.loc 1 432 9 is_stmt 1 view .LVU562
 2472 026a 1F2C     		cmp	r4, #31
 2473 026c 10D8     		bhi	.L155
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2474              		.loc 1 433 5 view .LVU563
ARM GAS  /tmp/cca6dLeK.s 			page 59


 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2475              		.loc 1 433 37 is_stmt 0 view .LVU564
 2476 026e 0A21     		movs	r1, #10
 2477 0270 3800     		movs	r0, r7
 2478 0272 FFF7FEFF 		bl	__aeabi_idivmod
 2479              	.LVL290:
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2480              		.loc 1 433 12 view .LVU565
 2481 0276 651C     		adds	r5, r4, #1
 2482              	.LVL291:
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2483              		.loc 1 433 18 view .LVU566
 2484 0278 3031     		adds	r1, r1, #48
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2485              		.loc 1 433 16 view .LVU567
 2486 027a 0CAB     		add	r3, sp, #48
 2487 027c 1955     		strb	r1, [r3, r4]
 434:Core/Src/printf.c ****       break;
 2488              		.loc 1 434 5 is_stmt 1 view .LVU568
 434:Core/Src/printf.c ****       break;
 2489              		.loc 1 434 17 is_stmt 0 view .LVU569
 2490 027e 0A21     		movs	r1, #10
 2491 0280 3800     		movs	r0, r7
 2492 0282 FFF7FEFF 		bl	__aeabi_idiv
 2493              	.LVL292:
 2494 0286 071E     		subs	r7, r0, #0
 2495              	.LVL293:
 434:Core/Src/printf.c ****       break;
 2496              		.loc 1 434 8 view .LVU570
 2497 0288 01D0     		beq	.L171
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2498              		.loc 1 433 12 view .LVU571
 2499 028a 2C00     		movs	r4, r5
 2500 028c EDE7     		b	.L156
 2501              	.L171:
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2502              		.loc 1 433 12 view .LVU572
 2503 028e 2C00     		movs	r4, r5
 2504              	.LVL294:
 2505              	.L155:
 440:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2506              		.loc 1 440 3 is_stmt 1 view .LVU573
 440:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2507              		.loc 1 440 29 is_stmt 0 view .LVU574
 2508 0290 0323     		movs	r3, #3
 2509 0292 229A     		ldr	r2, [sp, #136]
 2510 0294 1340     		ands	r3, r2
 440:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2511              		.loc 1 440 6 view .LVU575
 2512 0296 012B     		cmp	r3, #1
 2513 0298 1CD0     		beq	.L197
 2514              	.L158:
 449:Core/Src/printf.c ****     if (negative) {
 2515              		.loc 1 449 3 is_stmt 1 view .LVU576
 449:Core/Src/printf.c ****     if (negative) {
 2516              		.loc 1 449 6 is_stmt 0 view .LVU577
 2517 029a 1F2C     		cmp	r4, #31
ARM GAS  /tmp/cca6dLeK.s 			page 60


 2518 029c 06D8     		bhi	.L163
 450:Core/Src/printf.c ****       buf[len++] = '-';
 2519              		.loc 1 450 5 is_stmt 1 view .LVU578
 450:Core/Src/printf.c ****       buf[len++] = '-';
 2520              		.loc 1 450 8 is_stmt 0 view .LVU579
 2521 029e 099B     		ldr	r3, [sp, #36]
 2522 02a0 002B     		cmp	r3, #0
 2523 02a2 2ED0     		beq	.L164
 451:Core/Src/printf.c ****     }
 2524              		.loc 1 451 7 is_stmt 1 view .LVU580
 2525              	.LVL295:
 451:Core/Src/printf.c ****     }
 2526              		.loc 1 451 18 is_stmt 0 view .LVU581
 2527 02a4 0CAB     		add	r3, sp, #48
 2528 02a6 2D22     		movs	r2, #45
 2529 02a8 1A55     		strb	r2, [r3, r4]
 451:Core/Src/printf.c ****     }
 2530              		.loc 1 451 14 view .LVU582
 2531 02aa 0134     		adds	r4, r4, #1
 2532              	.LVL296:
 2533              	.L163:
 461:Core/Src/printf.c **** }
 2534              		.loc 1 461 3 is_stmt 1 view .LVU583
 461:Core/Src/printf.c **** }
 2535              		.loc 1 461 10 is_stmt 0 view .LVU584
 2536 02ac 229B     		ldr	r3, [sp, #136]
 2537 02ae 0393     		str	r3, [sp, #12]
 2538 02b0 219B     		ldr	r3, [sp, #132]
 2539 02b2 0293     		str	r3, [sp, #8]
 2540 02b4 0194     		str	r4, [sp, #4]
 2541 02b6 0CAB     		add	r3, sp, #48
 2542 02b8 0093     		str	r3, [sp]
 2543 02ba 5B46     		mov	r3, fp
 2544 02bc 5246     		mov	r2, r10
 2545 02be 4946     		mov	r1, r9
 2546 02c0 0898     		ldr	r0, [sp, #32]
 2547 02c2 FFF7FEFF 		bl	_out_rev
 2548              	.LVL297:
 2549              	.L120:
 462:Core/Src/printf.c **** 
 2550              		.loc 1 462 1 view .LVU585
 2551 02c6 15B0     		add	sp, sp, #84
 2552              		@ sp needed
 2553              	.LVL298:
 2554              	.LVL299:
 2555              	.LVL300:
 462:Core/Src/printf.c **** 
 2556              		.loc 1 462 1 view .LVU586
 2557 02c8 F0BC     		pop	{r4, r5, r6, r7}
 2558 02ca BB46     		mov	fp, r7
 2559 02cc B246     		mov	r10, r6
 2560 02ce A946     		mov	r9, r5
 2561 02d0 A046     		mov	r8, r4
 2562 02d2 F0BD     		pop	{r4, r5, r6, r7, pc}
 2563              	.LVL301:
 2564              	.L197:
 441:Core/Src/printf.c ****       width--;
ARM GAS  /tmp/cca6dLeK.s 			page 61


 2565              		.loc 1 441 5 is_stmt 1 view .LVU587
 441:Core/Src/printf.c ****       width--;
 2566              		.loc 1 441 8 is_stmt 0 view .LVU588
 2567 02d4 219B     		ldr	r3, [sp, #132]
 2568 02d6 002B     		cmp	r3, #0
 2569 02d8 0DD0     		beq	.L161
 441:Core/Src/printf.c ****       width--;
 2570              		.loc 1 441 15 discriminator 1 view .LVU589
 2571 02da 099B     		ldr	r3, [sp, #36]
 2572 02dc 002B     		cmp	r3, #0
 2573 02de 02D1     		bne	.L160
 441:Core/Src/printf.c ****       width--;
 2574              		.loc 1 441 38 discriminator 2 view .LVU590
 2575 02e0 0C33     		adds	r3, r3, #12
 441:Core/Src/printf.c ****       width--;
 2576              		.loc 1 441 28 discriminator 2 view .LVU591
 2577 02e2 1342     		tst	r3, r2
 2578 02e4 07D0     		beq	.L161
 2579              	.L160:
 442:Core/Src/printf.c ****     }
 2580              		.loc 1 442 7 is_stmt 1 view .LVU592
 442:Core/Src/printf.c ****     }
 2581              		.loc 1 442 12 is_stmt 0 view .LVU593
 2582 02e6 219B     		ldr	r3, [sp, #132]
 2583 02e8 013B     		subs	r3, r3, #1
 2584 02ea 2193     		str	r3, [sp, #132]
 2585              	.LVL302:
 442:Core/Src/printf.c ****     }
 2586              		.loc 1 442 12 view .LVU594
 2587 02ec 03E0     		b	.L161
 2588              	.L162:
 445:Core/Src/printf.c ****     }
 2589              		.loc 1 445 7 is_stmt 1 view .LVU595
 2590              	.LVL303:
 445:Core/Src/printf.c ****     }
 2591              		.loc 1 445 18 is_stmt 0 view .LVU596
 2592 02ee 0CAB     		add	r3, sp, #48
 2593              	.LVL304:
 445:Core/Src/printf.c ****     }
 2594              		.loc 1 445 18 view .LVU597
 2595 02f0 3022     		movs	r2, #48
 2596 02f2 1A55     		strb	r2, [r3, r4]
 445:Core/Src/printf.c ****     }
 2597              		.loc 1 445 14 view .LVU598
 2598 02f4 0134     		adds	r4, r4, #1
 2599              	.LVL305:
 2600              	.L161:
 444:Core/Src/printf.c ****       buf[len++] = '0';
 2601              		.loc 1 444 11 is_stmt 1 view .LVU599
 2602 02f6 219B     		ldr	r3, [sp, #132]
 2603 02f8 9C42     		cmp	r4, r3
 2604 02fa CED2     		bcs	.L158
 444:Core/Src/printf.c ****       buf[len++] = '0';
 2605              		.loc 1 444 26 is_stmt 0 discriminator 1 view .LVU600
 2606 02fc 1F2C     		cmp	r4, #31
 2607 02fe F6D9     		bls	.L162
 2608 0300 CBE7     		b	.L158
ARM GAS  /tmp/cca6dLeK.s 			page 62


 2609              	.L164:
 453:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2610              		.loc 1 453 10 is_stmt 1 view .LVU601
 453:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2611              		.loc 1 453 13 is_stmt 0 view .LVU602
 2612 0302 229B     		ldr	r3, [sp, #136]
 2613 0304 5B07     		lsls	r3, r3, #29
 2614 0306 04D5     		bpl	.L165
 454:Core/Src/printf.c ****     }
 2615              		.loc 1 454 7 is_stmt 1 view .LVU603
 2616              	.LVL306:
 454:Core/Src/printf.c ****     }
 2617              		.loc 1 454 18 is_stmt 0 view .LVU604
 2618 0308 0CAB     		add	r3, sp, #48
 2619 030a 2B22     		movs	r2, #43
 2620 030c 1A55     		strb	r2, [r3, r4]
 454:Core/Src/printf.c ****     }
 2621              		.loc 1 454 14 view .LVU605
 2622 030e 0134     		adds	r4, r4, #1
 2623              	.LVL307:
 454:Core/Src/printf.c ****     }
 2624              		.loc 1 454 14 view .LVU606
 2625 0310 CCE7     		b	.L163
 2626              	.L165:
 456:Core/Src/printf.c ****       buf[len++] = ' ';
 2627              		.loc 1 456 10 is_stmt 1 view .LVU607
 456:Core/Src/printf.c ****       buf[len++] = ' ';
 2628              		.loc 1 456 13 is_stmt 0 view .LVU608
 2629 0312 229B     		ldr	r3, [sp, #136]
 2630 0314 1B07     		lsls	r3, r3, #28
 2631 0316 C9D5     		bpl	.L163
 457:Core/Src/printf.c ****     }
 2632              		.loc 1 457 7 is_stmt 1 view .LVU609
 2633              	.LVL308:
 457:Core/Src/printf.c ****     }
 2634              		.loc 1 457 18 is_stmt 0 view .LVU610
 2635 0318 0CAB     		add	r3, sp, #48
 2636 031a 2022     		movs	r2, #32
 2637 031c 1A55     		strb	r2, [r3, r4]
 457:Core/Src/printf.c ****     }
 2638              		.loc 1 457 14 view .LVU611
 2639 031e 0134     		adds	r4, r4, #1
 2640              	.LVL309:
 457:Core/Src/printf.c ****     }
 2641              		.loc 1 457 14 view .LVU612
 2642 0320 C4E7     		b	.L163
 2643              	.L199:
 2644 0322 C046     		.align	2
 2645              	.L198:
 2646 0324 FFFFEFFF 		.word	-1048577
 2647 0328 FFFFEF7F 		.word	2146435071
 2648 032c 65CDCD41 		.word	1104006501
 2649 0330 65CDCDC1 		.word	-1043477147
 2650 0334 0C000000 		.word	.LC4
 2651 0338 10000000 		.word	.LC6
 2652 033c 04000000 		.word	.LC2
 2653 0340 00000000 		.word	.LC0
ARM GAS  /tmp/cca6dLeK.s 			page 63


 2654 0344 00000000 		.word	.LANCHOR0
 2655 0348 0000E03F 		.word	1071644672
 2656              		.cfi_endproc
 2657              	.LFE11:
 2659              		.section	.text._vsnprintf,"ax",%progbits
 2660              		.align	1
 2661              		.syntax unified
 2662              		.code	16
 2663              		.thumb_func
 2664              		.fpu softvfp
 2666              	_vsnprintf:
 2667              	.LVL310:
 2668              	.LFB13:
 572:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 573:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 574:Core/Src/printf.c **** 
 575:Core/Src/printf.c **** 
 576:Core/Src/printf.c **** // internal vsnprintf
 577:Core/Src/printf.c **** static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_l
 578:Core/Src/printf.c **** {
 2669              		.loc 1 578 1 is_stmt 1 view -0
 2670              		.cfi_startproc
 2671              		@ args = 4, pretend = 0, frame = 32
 2672              		@ frame_needed = 0, uses_anonymous_args = 0
 2673              		.loc 1 578 1 is_stmt 0 view .LVU614
 2674 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2675              	.LCFI19:
 2676              		.cfi_def_cfa_offset 20
 2677              		.cfi_offset 4, -20
 2678              		.cfi_offset 5, -16
 2679              		.cfi_offset 6, -12
 2680              		.cfi_offset 7, -8
 2681              		.cfi_offset 14, -4
 2682 0002 DE46     		mov	lr, fp
 2683 0004 5746     		mov	r7, r10
 2684 0006 4E46     		mov	r6, r9
 2685 0008 4546     		mov	r5, r8
 2686 000a E0B5     		push	{r5, r6, r7, lr}
 2687              	.LCFI20:
 2688              		.cfi_def_cfa_offset 36
 2689              		.cfi_offset 8, -36
 2690              		.cfi_offset 9, -32
 2691              		.cfi_offset 10, -28
 2692              		.cfi_offset 11, -24
 2693 000c 93B0     		sub	sp, sp, #76
 2694              	.LCFI21:
 2695              		.cfi_def_cfa_offset 112
 2696 000e 8246     		mov	r10, r0
 2697 0010 8B46     		mov	fp, r1
 2698 0012 9046     		mov	r8, r2
 2699 0014 1193     		str	r3, [sp, #68]
 579:Core/Src/printf.c ****   unsigned int flags, width, precision, n;
 2700              		.loc 1 579 3 is_stmt 1 view .LVU615
 580:Core/Src/printf.c ****   size_t idx = 0U;
 2701              		.loc 1 580 3 view .LVU616
 2702              	.LVL311:
 581:Core/Src/printf.c **** 
ARM GAS  /tmp/cca6dLeK.s 			page 64


 582:Core/Src/printf.c ****   if (!buffer) {
 2703              		.loc 1 582 3 view .LVU617
 2704              		.loc 1 582 6 is_stmt 0 view .LVU618
 2705 0016 0029     		cmp	r1, #0
 2706 0018 00D1     		bne	.LCB2762
 2707 001a EBE2     		b	.L300	@long jump
 2708              	.LCB2762:
 2709              	.LVL312:
 2710              	.L201:
 2711              	.LBB30:
 583:Core/Src/printf.c ****     // use null output function
 584:Core/Src/printf.c ****     out = _out_null;
 585:Core/Src/printf.c ****   }
 586:Core/Src/printf.c **** 
 587:Core/Src/printf.c ****   while (*format)
 588:Core/Src/printf.c ****   {
 589:Core/Src/printf.c ****     // format specifier?  %[flags][width][.precision][length]
 590:Core/Src/printf.c ****     if (*format != '%') {
 591:Core/Src/printf.c ****       // no
 592:Core/Src/printf.c ****       out(*format, buffer, idx++, maxlen);
 593:Core/Src/printf.c ****       format++;
 594:Core/Src/printf.c ****       continue;
 595:Core/Src/printf.c ****     }
 596:Core/Src/printf.c ****     else {
 597:Core/Src/printf.c ****       // yes, evaluate it
 598:Core/Src/printf.c ****       format++;
 599:Core/Src/printf.c ****     }
 600:Core/Src/printf.c **** 
 601:Core/Src/printf.c ****     // evaluate flags
 602:Core/Src/printf.c ****     flags = 0U;
 603:Core/Src/printf.c ****     do {
 604:Core/Src/printf.c ****       switch (*format) {
 605:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 606:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 607:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 608:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 609:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 610:Core/Src/printf.c ****         default :                                   n = 0U; break;
 611:Core/Src/printf.c ****       }
 612:Core/Src/printf.c ****     } while (n);
 613:Core/Src/printf.c **** 
 614:Core/Src/printf.c ****     // evaluate width field
 615:Core/Src/printf.c ****     width = 0U;
 616:Core/Src/printf.c ****     if (_is_digit(*format)) {
 617:Core/Src/printf.c ****       width = _atoi(&format);
 618:Core/Src/printf.c ****     }
 619:Core/Src/printf.c ****     else if (*format == '*') {
 620:Core/Src/printf.c ****       const int w = va_arg(va, int);
 621:Core/Src/printf.c ****       if (w < 0) {
 622:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 623:Core/Src/printf.c ****         width = (unsigned int)-w;
 624:Core/Src/printf.c ****       }
 625:Core/Src/printf.c ****       else {
 626:Core/Src/printf.c ****         width = (unsigned int)w;
 627:Core/Src/printf.c ****       }
 628:Core/Src/printf.c ****       format++;
 629:Core/Src/printf.c ****     }
ARM GAS  /tmp/cca6dLeK.s 			page 65


 630:Core/Src/printf.c **** 
 631:Core/Src/printf.c ****     // evaluate precision field
 632:Core/Src/printf.c ****     precision = 0U;
 633:Core/Src/printf.c ****     if (*format == '.') {
 634:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 635:Core/Src/printf.c ****       format++;
 636:Core/Src/printf.c ****       if (_is_digit(*format)) {
 637:Core/Src/printf.c ****         precision = _atoi(&format);
 638:Core/Src/printf.c ****       }
 639:Core/Src/printf.c ****       else if (*format == '*') {
 640:Core/Src/printf.c ****         const int prec = (int)va_arg(va, int);
 641:Core/Src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 642:Core/Src/printf.c ****         format++;
 643:Core/Src/printf.c ****       }
 644:Core/Src/printf.c ****     }
 645:Core/Src/printf.c **** 
 646:Core/Src/printf.c ****     // evaluate length field
 647:Core/Src/printf.c ****     switch (*format) {
 648:Core/Src/printf.c ****       case 'l' :
 649:Core/Src/printf.c ****         flags |= FLAGS_LONG;
 650:Core/Src/printf.c ****         format++;
 651:Core/Src/printf.c ****         if (*format == 'l') {
 652:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 653:Core/Src/printf.c ****           format++;
 654:Core/Src/printf.c ****         }
 655:Core/Src/printf.c ****         break;
 656:Core/Src/printf.c ****       case 'h' :
 657:Core/Src/printf.c ****         flags |= FLAGS_SHORT;
 658:Core/Src/printf.c ****         format++;
 659:Core/Src/printf.c ****         if (*format == 'h') {
 660:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 661:Core/Src/printf.c ****           format++;
 662:Core/Src/printf.c ****         }
 663:Core/Src/printf.c ****         break;
 664:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_PTRDIFF_T)
 665:Core/Src/printf.c ****       case 't' :
 666:Core/Src/printf.c ****         flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 667:Core/Src/printf.c ****         format++;
 668:Core/Src/printf.c ****         break;
 669:Core/Src/printf.c **** #endif
 670:Core/Src/printf.c ****       case 'j' :
 671:Core/Src/printf.c ****         flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 672:Core/Src/printf.c ****         format++;
 673:Core/Src/printf.c ****         break;
 674:Core/Src/printf.c ****       case 'z' :
 675:Core/Src/printf.c ****         flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 676:Core/Src/printf.c ****         format++;
 677:Core/Src/printf.c ****         break;
 678:Core/Src/printf.c ****       default :
 679:Core/Src/printf.c ****         break;
 680:Core/Src/printf.c ****     }
 681:Core/Src/printf.c **** 
 682:Core/Src/printf.c ****     // evaluate specifier
 683:Core/Src/printf.c ****     switch (*format) {
 684:Core/Src/printf.c ****       case 'd' :
 685:Core/Src/printf.c ****       case 'i' :
 686:Core/Src/printf.c ****       case 'u' :
ARM GAS  /tmp/cca6dLeK.s 			page 66


 687:Core/Src/printf.c ****       case 'x' :
 688:Core/Src/printf.c ****       case 'X' :
 689:Core/Src/printf.c ****       case 'o' :
 690:Core/Src/printf.c ****       case 'b' : {
 691:Core/Src/printf.c ****         // set the base
 692:Core/Src/printf.c ****         unsigned int base;
 693:Core/Src/printf.c ****         if (*format == 'x' || *format == 'X') {
 694:Core/Src/printf.c ****           base = 16U;
 695:Core/Src/printf.c ****         }
 696:Core/Src/printf.c ****         else if (*format == 'o') {
 697:Core/Src/printf.c ****           base =  8U;
 698:Core/Src/printf.c ****         }
 699:Core/Src/printf.c ****         else if (*format == 'b') {
 700:Core/Src/printf.c ****           base =  2U;
 701:Core/Src/printf.c ****         }
 702:Core/Src/printf.c ****         else {
 703:Core/Src/printf.c ****           base = 10U;
 704:Core/Src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 705:Core/Src/printf.c ****         }
 706:Core/Src/printf.c ****         // uppercase
 707:Core/Src/printf.c ****         if (*format == 'X') {
 708:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 709:Core/Src/printf.c ****         }
 710:Core/Src/printf.c **** 
 711:Core/Src/printf.c ****         // no plus or space flag for u, x, X, o, b
 712:Core/Src/printf.c ****         if ((*format != 'i') && (*format != 'd')) {
 713:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 714:Core/Src/printf.c ****         }
 715:Core/Src/printf.c **** 
 716:Core/Src/printf.c ****         // ignore '0' flag when precision is given
 717:Core/Src/printf.c ****         if (flags & FLAGS_PRECISION) {
 718:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 719:Core/Src/printf.c ****         }
 720:Core/Src/printf.c **** 
 721:Core/Src/printf.c ****         // convert the integer
 722:Core/Src/printf.c ****         if ((*format == 'i') || (*format == 'd')) {
 723:Core/Src/printf.c ****           // signed
 724:Core/Src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 725:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 726:Core/Src/printf.c ****             const long long value = va_arg(va, long long);
 727:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 728:Core/Src/printf.c **** #endif
 729:Core/Src/printf.c ****           }
 730:Core/Src/printf.c ****           else if (flags & FLAGS_LONG) {
 731:Core/Src/printf.c ****             const long value = va_arg(va, long);
 732:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 733:Core/Src/printf.c ****           }
 734:Core/Src/printf.c ****           else {
 735:Core/Src/printf.c ****             const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) 
 736:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 737:Core/Src/printf.c ****           }
 738:Core/Src/printf.c ****         }
 739:Core/Src/printf.c ****         else {
 740:Core/Src/printf.c ****           // unsigned
 741:Core/Src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 742:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 743:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, 
ARM GAS  /tmp/cca6dLeK.s 			page 67


 744:Core/Src/printf.c **** #endif
 745:Core/Src/printf.c ****           }
 746:Core/Src/printf.c ****           else if (flags & FLAGS_LONG) {
 747:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 748:Core/Src/printf.c ****           }
 749:Core/Src/printf.c ****           else {
 750:Core/Src/printf.c ****             const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned in
 751:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 752:Core/Src/printf.c ****           }
 753:Core/Src/printf.c ****         }
 754:Core/Src/printf.c ****         format++;
 755:Core/Src/printf.c ****         break;
 756:Core/Src/printf.c ****       }
 757:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 758:Core/Src/printf.c ****       case 'f' :
 759:Core/Src/printf.c ****       case 'F' :
 760:Core/Src/printf.c ****         if (*format == 'F') flags |= FLAGS_UPPERCASE;
 761:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 762:Core/Src/printf.c ****         format++;
 763:Core/Src/printf.c ****         break;
 764:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 765:Core/Src/printf.c ****       case 'e':
 766:Core/Src/printf.c ****       case 'E':
 767:Core/Src/printf.c ****       case 'g':
 768:Core/Src/printf.c ****       case 'G':
 769:Core/Src/printf.c ****         if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 770:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 771:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 772:Core/Src/printf.c ****         format++;
 773:Core/Src/printf.c ****         break;
 774:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 775:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 776:Core/Src/printf.c ****       case 'c' : {
 777:Core/Src/printf.c ****         unsigned int l = 1U;
 778:Core/Src/printf.c ****         // pre padding
 779:Core/Src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
 780:Core/Src/printf.c ****           while (l++ < width) {
 781:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 782:Core/Src/printf.c ****           }
 783:Core/Src/printf.c ****         }
 784:Core/Src/printf.c ****         // char output
 785:Core/Src/printf.c ****         out((char)va_arg(va, int), buffer, idx++, maxlen);
 786:Core/Src/printf.c ****         // post padding
 787:Core/Src/printf.c ****         if (flags & FLAGS_LEFT) {
 788:Core/Src/printf.c ****           while (l++ < width) {
 789:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 790:Core/Src/printf.c ****           }
 791:Core/Src/printf.c ****         }
 792:Core/Src/printf.c ****         format++;
 793:Core/Src/printf.c ****         break;
 2712              		.loc 1 793 9 view .LVU619
 2713 001c 0027     		movs	r7, #0
 2714 001e 5546     		mov	r5, r10
 2715              	.LVL313:
 2716              	.L282:
 2717              		.loc 1 793 9 view .LVU620
 2718              	.LBE30:
ARM GAS  /tmp/cca6dLeK.s 			page 68


 587:Core/Src/printf.c ****   {
 2719              		.loc 1 587 9 is_stmt 1 view .LVU621
 587:Core/Src/printf.c ****   {
 2720              		.loc 1 587 10 is_stmt 0 view .LVU622
 2721 0020 119B     		ldr	r3, [sp, #68]
 2722 0022 1878     		ldrb	r0, [r3]
 587:Core/Src/printf.c ****   {
 2723              		.loc 1 587 9 view .LVU623
 2724 0024 0028     		cmp	r0, #0
 2725 0026 00D1     		bne	.LCB2783
 2726 0028 E7E2     		b	.L301	@long jump
 2727              	.LCB2783:
 590:Core/Src/printf.c ****       // no
 2728              		.loc 1 590 5 is_stmt 1 view .LVU624
 590:Core/Src/printf.c ****       // no
 2729              		.loc 1 590 8 is_stmt 0 view .LVU625
 2730 002a 2528     		cmp	r0, #37
 2731 002c 09D0     		beq	.L203
 592:Core/Src/printf.c ****       format++;
 2732              		.loc 1 592 7 is_stmt 1 view .LVU626
 2733 002e 7C1C     		adds	r4, r7, #1
 2734              	.LVL314:
 592:Core/Src/printf.c ****       format++;
 2735              		.loc 1 592 7 is_stmt 0 view .LVU627
 2736 0030 4346     		mov	r3, r8
 2737 0032 3A00     		movs	r2, r7
 2738 0034 5946     		mov	r1, fp
 2739 0036 A847     		blx	r5
 2740              	.LVL315:
 593:Core/Src/printf.c ****       continue;
 2741              		.loc 1 593 7 is_stmt 1 view .LVU628
 593:Core/Src/printf.c ****       continue;
 2742              		.loc 1 593 13 is_stmt 0 view .LVU629
 2743 0038 119B     		ldr	r3, [sp, #68]
 2744 003a 0133     		adds	r3, r3, #1
 2745 003c 1193     		str	r3, [sp, #68]
 594:Core/Src/printf.c ****     }
 2746              		.loc 1 594 7 is_stmt 1 view .LVU630
 592:Core/Src/printf.c ****       format++;
 2747              		.loc 1 592 7 is_stmt 0 view .LVU631
 2748 003e 2700     		movs	r7, r4
 594:Core/Src/printf.c ****     }
 2749              		.loc 1 594 7 view .LVU632
 2750 0040 EEE7     		b	.L282
 2751              	.LVL316:
 2752              	.L203:
 598:Core/Src/printf.c ****     }
 2753              		.loc 1 598 7 is_stmt 1 view .LVU633
 598:Core/Src/printf.c ****     }
 2754              		.loc 1 598 13 is_stmt 0 view .LVU634
 2755 0042 0133     		adds	r3, r3, #1
 2756 0044 1193     		str	r3, [sp, #68]
 602:Core/Src/printf.c ****     do {
 2757              		.loc 1 602 5 is_stmt 1 view .LVU635
 2758              	.LVL317:
 602:Core/Src/printf.c ****     do {
 2759              		.loc 1 602 11 is_stmt 0 view .LVU636
ARM GAS  /tmp/cca6dLeK.s 			page 69


 2760 0046 0024     		movs	r4, #0
 2761              	.LVL318:
 2762              	.L205:
 603:Core/Src/printf.c ****       switch (*format) {
 2763              		.loc 1 603 5 is_stmt 1 view .LVU637
 604:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2764              		.loc 1 604 7 view .LVU638
 604:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2765              		.loc 1 604 15 is_stmt 0 view .LVU639
 2766 0048 119A     		ldr	r2, [sp, #68]
 2767 004a 1178     		ldrb	r1, [r2]
 604:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2768              		.loc 1 604 7 view .LVU640
 2769 004c 0B00     		movs	r3, r1
 2770 004e 203B     		subs	r3, r3, #32
 2771 0050 D8B2     		uxtb	r0, r3
 2772 0052 1028     		cmp	r0, #16
 2773 0054 03D8     		bhi	.L206
 2774 0056 8300     		lsls	r3, r0, #2
 2775 0058 D048     		ldr	r0, .L320
 2776 005a C358     		ldr	r3, [r0, r3]
 2777 005c 9F46     		mov	pc, r3
 2778              		.section	.rodata._vsnprintf,"a",%progbits
 2779              		.align	2
 2780              	.L208:
 2781 0000 AE000000 		.word	.L212
 2782 0004 5E000000 		.word	.L206
 2783 0008 5E000000 		.word	.L206
 2784 000c B8000000 		.word	.L211
 2785 0010 5E000000 		.word	.L206
 2786 0014 5E000000 		.word	.L206
 2787 0018 5E000000 		.word	.L206
 2788 001c 5E000000 		.word	.L206
 2789 0020 5E000000 		.word	.L206
 2790 0024 5E000000 		.word	.L206
 2791 0028 5E000000 		.word	.L206
 2792 002c A4000000 		.word	.L210
 2793 0030 5E000000 		.word	.L206
 2794 0034 9A000000 		.word	.L209
 2795 0038 5E000000 		.word	.L206
 2796 003c 5E000000 		.word	.L206
 2797 0040 90000000 		.word	.L207
 2798              		.section	.text._vsnprintf
 2799              	.L206:
 2800              	.LVL319:
 612:Core/Src/printf.c **** 
 2801              		.loc 1 612 13 is_stmt 1 view .LVU641
 615:Core/Src/printf.c ****     if (_is_digit(*format)) {
 2802              		.loc 1 615 5 view .LVU642
 616:Core/Src/printf.c ****       width = _atoi(&format);
 2803              		.loc 1 616 5 view .LVU643
 2804              	.LBB31:
 2805              	.LBI31:
 181:Core/Src/printf.c **** {
 2806              		.loc 1 181 20 view .LVU644
 2807              	.LBB32:
 183:Core/Src/printf.c **** }
ARM GAS  /tmp/cca6dLeK.s 			page 70


 2808              		.loc 1 183 3 view .LVU645
 183:Core/Src/printf.c **** }
 2809              		.loc 1 183 22 is_stmt 0 view .LVU646
 2810 005e 0B00     		movs	r3, r1
 2811 0060 303B     		subs	r3, r3, #48
 2812 0062 DBB2     		uxtb	r3, r3
 2813              	.LVL320:
 183:Core/Src/printf.c **** }
 2814              		.loc 1 183 22 view .LVU647
 2815              	.LBE32:
 2816              	.LBE31:
 616:Core/Src/printf.c ****       width = _atoi(&format);
 2817              		.loc 1 616 8 view .LVU648
 2818 0064 092B     		cmp	r3, #9
 2819 0066 2CD9     		bls	.L302
 619:Core/Src/printf.c ****       const int w = va_arg(va, int);
 2820              		.loc 1 619 10 is_stmt 1 view .LVU649
 619:Core/Src/printf.c ****       const int w = va_arg(va, int);
 2821              		.loc 1 619 13 is_stmt 0 view .LVU650
 2822 0068 2A29     		cmp	r1, #42
 2823 006a 2FD0     		beq	.L303
 615:Core/Src/printf.c ****     if (_is_digit(*format)) {
 2824              		.loc 1 615 11 view .LVU651
 2825 006c 0023     		movs	r3, #0
 2826 006e 0A93     		str	r3, [sp, #40]
 2827              	.LVL321:
 2828              	.L216:
 632:Core/Src/printf.c ****     if (*format == '.') {
 2829              		.loc 1 632 5 is_stmt 1 view .LVU652
 633:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 2830              		.loc 1 633 5 view .LVU653
 633:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 2831              		.loc 1 633 9 is_stmt 0 view .LVU654
 2832 0070 119B     		ldr	r3, [sp, #68]
 2833 0072 1A78     		ldrb	r2, [r3]
 633:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 2834              		.loc 1 633 8 view .LVU655
 2835 0074 2E2A     		cmp	r2, #46
 2836 0076 39D0     		beq	.L304
 632:Core/Src/printf.c ****     if (*format == '.') {
 2837              		.loc 1 632 15 view .LVU656
 2838 0078 0023     		movs	r3, #0
 2839 007a 9A46     		mov	r10, r3
 2840              	.LVL322:
 2841              	.L219:
 647:Core/Src/printf.c ****       case 'l' :
 2842              		.loc 1 647 5 is_stmt 1 view .LVU657
 647:Core/Src/printf.c ****       case 'l' :
 2843              		.loc 1 647 13 is_stmt 0 view .LVU658
 2844 007c 119A     		ldr	r2, [sp, #68]
 2845 007e 1378     		ldrb	r3, [r2]
 647:Core/Src/printf.c ****       case 'l' :
 2846              		.loc 1 647 5 view .LVU659
 2847 0080 683B     		subs	r3, r3, #104
 2848 0082 D9B2     		uxtb	r1, r3
 2849 0084 1229     		cmp	r1, #18
 2850 0086 76D8     		bhi	.L222
ARM GAS  /tmp/cca6dLeK.s 			page 71


 647:Core/Src/printf.c ****       case 'l' :
 2851              		.loc 1 647 5 view .LVU660
 2852 0088 8B00     		lsls	r3, r1, #2
 2853 008a C549     		ldr	r1, .L320+4
 2854 008c CB58     		ldr	r3, [r1, r3]
 2855 008e 9F46     		mov	pc, r3
 2856              		.section	.rodata._vsnprintf
 2857              		.align	2
 2858              	.L224:
 2859 0044 50010000 		.word	.L228
 2860 0048 76010000 		.word	.L222
 2861 004c 8E010000 		.word	.L227
 2862 0050 76010000 		.word	.L222
 2863 0054 30010000 		.word	.L226
 2864 0058 76010000 		.word	.L222
 2865 005c 76010000 		.word	.L222
 2866 0060 76010000 		.word	.L222
 2867 0064 76010000 		.word	.L222
 2868 0068 76010000 		.word	.L222
 2869 006c 76010000 		.word	.L222
 2870 0070 76010000 		.word	.L222
 2871 0074 6C010000 		.word	.L225
 2872 0078 76010000 		.word	.L222
 2873 007c 76010000 		.word	.L222
 2874 0080 76010000 		.word	.L222
 2875 0084 76010000 		.word	.L222
 2876 0088 76010000 		.word	.L222
 2877 008c 9A010000 		.word	.L223
 2878              		.section	.text._vsnprintf
 2879              	.LVL323:
 2880              	.L207:
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2881              		.loc 1 605 19 is_stmt 1 view .LVU661
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2882              		.loc 1 605 25 is_stmt 0 view .LVU662
 2883 0090 0123     		movs	r3, #1
 2884 0092 1C43     		orrs	r4, r3
 2885              	.LVL324:
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2886              		.loc 1 605 43 is_stmt 1 view .LVU663
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2887              		.loc 1 605 49 is_stmt 0 view .LVU664
 2888 0094 0132     		adds	r2, r2, #1
 2889 0096 1192     		str	r2, [sp, #68]
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2890              		.loc 1 605 53 is_stmt 1 view .LVU665
 2891              	.LVL325:
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2892              		.loc 1 605 61 view .LVU666
 612:Core/Src/printf.c **** 
 2893              		.loc 1 612 13 view .LVU667
 2894 0098 D6E7     		b	.L205
 2895              	.LVL326:
 2896              	.L209:
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2897              		.loc 1 606 19 view .LVU668
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
ARM GAS  /tmp/cca6dLeK.s 			page 72


 2898              		.loc 1 606 25 is_stmt 0 view .LVU669
 2899 009a 0223     		movs	r3, #2
 2900 009c 1C43     		orrs	r4, r3
 2901              	.LVL327:
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2902              		.loc 1 606 43 is_stmt 1 view .LVU670
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2903              		.loc 1 606 49 is_stmt 0 view .LVU671
 2904 009e 0132     		adds	r2, r2, #1
 2905 00a0 1192     		str	r2, [sp, #68]
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2906              		.loc 1 606 53 is_stmt 1 view .LVU672
 2907              	.LVL328:
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2908              		.loc 1 606 61 view .LVU673
 612:Core/Src/printf.c **** 
 2909              		.loc 1 612 13 view .LVU674
 2910 00a2 D1E7     		b	.L205
 2911              	.LVL329:
 2912              	.L210:
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2913              		.loc 1 607 19 view .LVU675
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2914              		.loc 1 607 25 is_stmt 0 view .LVU676
 2915 00a4 0423     		movs	r3, #4
 2916 00a6 1C43     		orrs	r4, r3
 2917              	.LVL330:
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2918              		.loc 1 607 43 is_stmt 1 view .LVU677
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2919              		.loc 1 607 49 is_stmt 0 view .LVU678
 2920 00a8 0132     		adds	r2, r2, #1
 2921 00aa 1192     		str	r2, [sp, #68]
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2922              		.loc 1 607 53 is_stmt 1 view .LVU679
 2923              	.LVL331:
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2924              		.loc 1 607 61 view .LVU680
 612:Core/Src/printf.c **** 
 2925              		.loc 1 612 13 view .LVU681
 2926 00ac CCE7     		b	.L205
 2927              	.LVL332:
 2928              	.L212:
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2929              		.loc 1 608 19 view .LVU682
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2930              		.loc 1 608 25 is_stmt 0 view .LVU683
 2931 00ae 0823     		movs	r3, #8
 2932 00b0 1C43     		orrs	r4, r3
 2933              	.LVL333:
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2934              		.loc 1 608 43 is_stmt 1 view .LVU684
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2935              		.loc 1 608 49 is_stmt 0 view .LVU685
 2936 00b2 0132     		adds	r2, r2, #1
 2937 00b4 1192     		str	r2, [sp, #68]
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
ARM GAS  /tmp/cca6dLeK.s 			page 73


 2938              		.loc 1 608 53 is_stmt 1 view .LVU686
 2939              	.LVL334:
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2940              		.loc 1 608 61 view .LVU687
 612:Core/Src/printf.c **** 
 2941              		.loc 1 612 13 view .LVU688
 2942 00b6 C7E7     		b	.L205
 2943              	.LVL335:
 2944              	.L211:
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2945              		.loc 1 609 19 view .LVU689
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2946              		.loc 1 609 25 is_stmt 0 view .LVU690
 2947 00b8 1023     		movs	r3, #16
 2948 00ba 1C43     		orrs	r4, r3
 2949              	.LVL336:
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2950              		.loc 1 609 43 is_stmt 1 view .LVU691
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2951              		.loc 1 609 49 is_stmt 0 view .LVU692
 2952 00bc 0132     		adds	r2, r2, #1
 2953 00be 1192     		str	r2, [sp, #68]
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2954              		.loc 1 609 53 is_stmt 1 view .LVU693
 2955              	.LVL337:
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2956              		.loc 1 609 61 view .LVU694
 612:Core/Src/printf.c **** 
 2957              		.loc 1 612 13 view .LVU695
 2958 00c0 C2E7     		b	.L205
 2959              	.LVL338:
 2960              	.L302:
 617:Core/Src/printf.c ****     }
 2961              		.loc 1 617 7 view .LVU696
 617:Core/Src/printf.c ****     }
 2962              		.loc 1 617 15 is_stmt 0 view .LVU697
 2963 00c2 11A8     		add	r0, sp, #68
 2964 00c4 FFF7FEFF 		bl	_atoi
 2965              	.LVL339:
 2966 00c8 0A90     		str	r0, [sp, #40]
 2967              	.LVL340:
 617:Core/Src/printf.c ****     }
 2968              		.loc 1 617 15 view .LVU698
 2969 00ca D1E7     		b	.L216
 2970              	.LVL341:
 2971              	.L303:
 2972              	.LBB33:
 620:Core/Src/printf.c ****       if (w < 0) {
 2973              		.loc 1 620 7 is_stmt 1 view .LVU699
 620:Core/Src/printf.c ****       if (w < 0) {
 2974              		.loc 1 620 17 is_stmt 0 view .LVU700
 2975 00cc 1C9B     		ldr	r3, [sp, #112]
 2976 00ce 1A1D     		adds	r2, r3, #4
 2977 00d0 1C92     		str	r2, [sp, #112]
 2978 00d2 1868     		ldr	r0, [r3]
 621:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 2979              		.loc 1 621 7 is_stmt 1 view .LVU701
ARM GAS  /tmp/cca6dLeK.s 			page 74


 621:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 2980              		.loc 1 621 10 is_stmt 0 view .LVU702
 2981 00d4 0028     		cmp	r0, #0
 2982 00d6 04DB     		blt	.L305
 626:Core/Src/printf.c ****       }
 2983              		.loc 1 626 9 is_stmt 1 view .LVU703
 626:Core/Src/printf.c ****       }
 2984              		.loc 1 626 15 is_stmt 0 view .LVU704
 2985 00d8 0A90     		str	r0, [sp, #40]
 2986              	.LVL342:
 2987              	.L218:
 628:Core/Src/printf.c ****     }
 2988              		.loc 1 628 7 is_stmt 1 view .LVU705
 628:Core/Src/printf.c ****     }
 2989              		.loc 1 628 13 is_stmt 0 view .LVU706
 2990 00da 119B     		ldr	r3, [sp, #68]
 2991 00dc 0133     		adds	r3, r3, #1
 2992 00de 1193     		str	r3, [sp, #68]
 2993 00e0 C6E7     		b	.L216
 2994              	.LVL343:
 2995              	.L305:
 622:Core/Src/printf.c ****         width = (unsigned int)-w;
 2996              		.loc 1 622 9 is_stmt 1 view .LVU707
 622:Core/Src/printf.c ****         width = (unsigned int)-w;
 2997              		.loc 1 622 15 is_stmt 0 view .LVU708
 2998 00e2 0223     		movs	r3, #2
 2999 00e4 1C43     		orrs	r4, r3
 3000              	.LVL344:
 623:Core/Src/printf.c ****       }
 3001              		.loc 1 623 9 is_stmt 1 view .LVU709
 623:Core/Src/printf.c ****       }
 3002              		.loc 1 623 31 is_stmt 0 view .LVU710
 3003 00e6 4342     		rsbs	r3, r0, #0
 3004 00e8 0A93     		str	r3, [sp, #40]
 3005              	.LVL345:
 623:Core/Src/printf.c ****       }
 3006              		.loc 1 623 31 view .LVU711
 3007 00ea F6E7     		b	.L218
 3008              	.LVL346:
 3009              	.L304:
 623:Core/Src/printf.c ****       }
 3010              		.loc 1 623 31 view .LVU712
 3011              	.LBE33:
 634:Core/Src/printf.c ****       format++;
 3012              		.loc 1 634 7 is_stmt 1 view .LVU713
 634:Core/Src/printf.c ****       format++;
 3013              		.loc 1 634 13 is_stmt 0 view .LVU714
 3014 00ec 8022     		movs	r2, #128
 3015 00ee D200     		lsls	r2, r2, #3
 3016 00f0 1443     		orrs	r4, r2
 3017              	.LVL347:
 635:Core/Src/printf.c ****       if (_is_digit(*format)) {
 3018              		.loc 1 635 7 is_stmt 1 view .LVU715
 635:Core/Src/printf.c ****       if (_is_digit(*format)) {
 3019              		.loc 1 635 13 is_stmt 0 view .LVU716
 3020 00f2 5A1C     		adds	r2, r3, #1
 3021 00f4 1192     		str	r2, [sp, #68]
ARM GAS  /tmp/cca6dLeK.s 			page 75


 636:Core/Src/printf.c ****         precision = _atoi(&format);
 3022              		.loc 1 636 7 is_stmt 1 view .LVU717
 636:Core/Src/printf.c ****         precision = _atoi(&format);
 3023              		.loc 1 636 11 is_stmt 0 view .LVU718
 3024 00f6 5A78     		ldrb	r2, [r3, #1]
 3025              	.LVL348:
 3026              	.LBB34:
 3027              	.LBI34:
 181:Core/Src/printf.c **** {
 3028              		.loc 1 181 20 is_stmt 1 view .LVU719
 3029              	.LBB35:
 183:Core/Src/printf.c **** }
 3030              		.loc 1 183 3 view .LVU720
 183:Core/Src/printf.c **** }
 3031              		.loc 1 183 22 is_stmt 0 view .LVU721
 3032 00f8 1300     		movs	r3, r2
 3033 00fa 303B     		subs	r3, r3, #48
 3034 00fc DBB2     		uxtb	r3, r3
 3035              	.LVL349:
 183:Core/Src/printf.c **** }
 3036              		.loc 1 183 22 view .LVU722
 3037              	.LBE35:
 3038              	.LBE34:
 636:Core/Src/printf.c ****         precision = _atoi(&format);
 3039              		.loc 1 636 10 view .LVU723
 3040 00fe 092B     		cmp	r3, #9
 3041 0100 04D9     		bls	.L306
 639:Core/Src/printf.c ****         const int prec = (int)va_arg(va, int);
 3042              		.loc 1 639 12 is_stmt 1 view .LVU724
 639:Core/Src/printf.c ****         const int prec = (int)va_arg(va, int);
 3043              		.loc 1 639 15 is_stmt 0 view .LVU725
 3044 0102 2A2A     		cmp	r2, #42
 3045 0104 07D0     		beq	.L307
 632:Core/Src/printf.c ****     if (*format == '.') {
 3046              		.loc 1 632 15 view .LVU726
 3047 0106 0023     		movs	r3, #0
 3048 0108 9A46     		mov	r10, r3
 3049 010a B7E7     		b	.L219
 3050              	.L306:
 637:Core/Src/printf.c ****       }
 3051              		.loc 1 637 9 is_stmt 1 view .LVU727
 637:Core/Src/printf.c ****       }
 3052              		.loc 1 637 21 is_stmt 0 view .LVU728
 3053 010c 11A8     		add	r0, sp, #68
 3054 010e FFF7FEFF 		bl	_atoi
 3055              	.LVL350:
 3056 0112 8246     		mov	r10, r0
 3057              	.LVL351:
 637:Core/Src/printf.c ****       }
 3058              		.loc 1 637 21 view .LVU729
 3059 0114 B2E7     		b	.L219
 3060              	.LVL352:
 3061              	.L307:
 3062              	.LBB36:
 640:Core/Src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 3063              		.loc 1 640 9 is_stmt 1 view .LVU730
 640:Core/Src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
ARM GAS  /tmp/cca6dLeK.s 			page 76


 3064              		.loc 1 640 19 is_stmt 0 view .LVU731
 3065 0116 1C9B     		ldr	r3, [sp, #112]
 3066 0118 1A1D     		adds	r2, r3, #4
 3067 011a 1C92     		str	r2, [sp, #112]
 3068 011c 1868     		ldr	r0, [r3]
 641:Core/Src/printf.c ****         format++;
 3069              		.loc 1 641 9 is_stmt 1 view .LVU732
 641:Core/Src/printf.c ****         format++;
 3070              		.loc 1 641 51 is_stmt 0 view .LVU733
 3071 011e 0028     		cmp	r0, #0
 3072 0120 04DB     		blt	.L308
 3073              	.L221:
 641:Core/Src/printf.c ****         format++;
 3074              		.loc 1 641 19 view .LVU734
 3075 0122 8246     		mov	r10, r0
 3076              	.LVL353:
 642:Core/Src/printf.c ****       }
 3077              		.loc 1 642 9 is_stmt 1 view .LVU735
 642:Core/Src/printf.c ****       }
 3078              		.loc 1 642 15 is_stmt 0 view .LVU736
 3079 0124 119B     		ldr	r3, [sp, #68]
 3080 0126 0133     		adds	r3, r3, #1
 3081 0128 1193     		str	r3, [sp, #68]
 3082 012a A7E7     		b	.L219
 3083              	.LVL354:
 3084              	.L308:
 641:Core/Src/printf.c ****         format++;
 3085              		.loc 1 641 51 view .LVU737
 3086 012c 0020     		movs	r0, #0
 3087 012e F8E7     		b	.L221
 3088              	.LVL355:
 3089              	.L226:
 641:Core/Src/printf.c ****         format++;
 3090              		.loc 1 641 51 view .LVU738
 3091              	.LBE36:
 649:Core/Src/printf.c ****         format++;
 3092              		.loc 1 649 9 is_stmt 1 view .LVU739
 649:Core/Src/printf.c ****         format++;
 3093              		.loc 1 649 15 is_stmt 0 view .LVU740
 3094 0130 8023     		movs	r3, #128
 3095 0132 5B00     		lsls	r3, r3, #1
 3096 0134 2343     		orrs	r3, r4
 3097              	.LVL356:
 650:Core/Src/printf.c ****         if (*format == 'l') {
 3098              		.loc 1 650 9 is_stmt 1 view .LVU741
 650:Core/Src/printf.c ****         if (*format == 'l') {
 3099              		.loc 1 650 15 is_stmt 0 view .LVU742
 3100 0136 511C     		adds	r1, r2, #1
 3101 0138 1191     		str	r1, [sp, #68]
 651:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 3102              		.loc 1 651 9 is_stmt 1 view .LVU743
 651:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 3103              		.loc 1 651 13 is_stmt 0 view .LVU744
 3104 013a 5278     		ldrb	r2, [r2, #1]
 651:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 3105              		.loc 1 651 12 view .LVU745
 3106 013c 6C2A     		cmp	r2, #108
ARM GAS  /tmp/cca6dLeK.s 			page 77


 3107 013e 01D0     		beq	.L309
 649:Core/Src/printf.c ****         format++;
 3108              		.loc 1 649 15 view .LVU746
 3109 0140 1C00     		movs	r4, r3
 3110 0142 18E0     		b	.L222
 3111              	.L309:
 652:Core/Src/printf.c ****           format++;
 3112              		.loc 1 652 11 is_stmt 1 view .LVU747
 652:Core/Src/printf.c ****           format++;
 3113              		.loc 1 652 17 is_stmt 0 view .LVU748
 3114 0144 C023     		movs	r3, #192
 3115              	.LVL357:
 652:Core/Src/printf.c ****           format++;
 3116              		.loc 1 652 17 view .LVU749
 3117 0146 9B00     		lsls	r3, r3, #2
 3118 0148 1C43     		orrs	r4, r3
 3119              	.LVL358:
 653:Core/Src/printf.c ****         }
 3120              		.loc 1 653 11 is_stmt 1 view .LVU750
 653:Core/Src/printf.c ****         }
 3121              		.loc 1 653 17 is_stmt 0 view .LVU751
 3122 014a 0131     		adds	r1, r1, #1
 3123 014c 1191     		str	r1, [sp, #68]
 3124 014e 12E0     		b	.L222
 3125              	.L228:
 657:Core/Src/printf.c ****         format++;
 3126              		.loc 1 657 9 is_stmt 1 view .LVU752
 657:Core/Src/printf.c ****         format++;
 3127              		.loc 1 657 15 is_stmt 0 view .LVU753
 3128 0150 8023     		movs	r3, #128
 3129 0152 2343     		orrs	r3, r4
 3130              	.LVL359:
 658:Core/Src/printf.c ****         if (*format == 'h') {
 3131              		.loc 1 658 9 is_stmt 1 view .LVU754
 658:Core/Src/printf.c ****         if (*format == 'h') {
 3132              		.loc 1 658 15 is_stmt 0 view .LVU755
 3133 0154 511C     		adds	r1, r2, #1
 3134 0156 1191     		str	r1, [sp, #68]
 659:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 3135              		.loc 1 659 9 is_stmt 1 view .LVU756
 659:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 3136              		.loc 1 659 13 is_stmt 0 view .LVU757
 3137 0158 5278     		ldrb	r2, [r2, #1]
 659:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 3138              		.loc 1 659 12 view .LVU758
 3139 015a 682A     		cmp	r2, #104
 3140 015c 01D0     		beq	.L310
 657:Core/Src/printf.c ****         format++;
 3141              		.loc 1 657 15 view .LVU759
 3142 015e 1C00     		movs	r4, r3
 3143 0160 09E0     		b	.L222
 3144              	.L310:
 660:Core/Src/printf.c ****           format++;
 3145              		.loc 1 660 11 is_stmt 1 view .LVU760
 660:Core/Src/printf.c ****           format++;
 3146              		.loc 1 660 17 is_stmt 0 view .LVU761
 3147 0162 C023     		movs	r3, #192
ARM GAS  /tmp/cca6dLeK.s 			page 78


 3148              	.LVL360:
 660:Core/Src/printf.c ****           format++;
 3149              		.loc 1 660 17 view .LVU762
 3150 0164 1C43     		orrs	r4, r3
 3151              	.LVL361:
 661:Core/Src/printf.c ****         }
 3152              		.loc 1 661 11 is_stmt 1 view .LVU763
 661:Core/Src/printf.c ****         }
 3153              		.loc 1 661 17 is_stmt 0 view .LVU764
 3154 0166 0131     		adds	r1, r1, #1
 3155 0168 1191     		str	r1, [sp, #68]
 3156 016a 04E0     		b	.L222
 3157              	.L225:
 666:Core/Src/printf.c ****         format++;
 3158              		.loc 1 666 9 is_stmt 1 view .LVU765
 666:Core/Src/printf.c ****         format++;
 3159              		.loc 1 666 15 is_stmt 0 view .LVU766
 3160 016c 8023     		movs	r3, #128
 3161 016e 5B00     		lsls	r3, r3, #1
 3162 0170 1C43     		orrs	r4, r3
 3163              	.LVL362:
 667:Core/Src/printf.c ****         break;
 3164              		.loc 1 667 9 is_stmt 1 view .LVU767
 667:Core/Src/printf.c ****         break;
 3165              		.loc 1 667 15 is_stmt 0 view .LVU768
 3166 0172 0132     		adds	r2, r2, #1
 3167 0174 1192     		str	r2, [sp, #68]
 668:Core/Src/printf.c **** #endif
 3168              		.loc 1 668 9 is_stmt 1 view .LVU769
 3169              	.L222:
 683:Core/Src/printf.c ****       case 'd' :
 3170              		.loc 1 683 5 view .LVU770
 683:Core/Src/printf.c ****       case 'd' :
 3171              		.loc 1 683 13 is_stmt 0 view .LVU771
 3172 0176 119B     		ldr	r3, [sp, #68]
 3173 0178 1878     		ldrb	r0, [r3]
 683:Core/Src/printf.c ****       case 'd' :
 3174              		.loc 1 683 5 view .LVU772
 3175 017a 0300     		movs	r3, r0
 3176 017c 253B     		subs	r3, r3, #37
 3177 017e DAB2     		uxtb	r2, r3
 3178 0180 532A     		cmp	r2, #83
 3179 0182 00D9     		bls	.LCB3224
 3180 0184 2CE2     		b	.L229	@long jump
 3181              	.LCB3224:
 683:Core/Src/printf.c ****       case 'd' :
 3182              		.loc 1 683 5 view .LVU773
 3183 0186 9300     		lsls	r3, r2, #2
 3184 0188 864A     		ldr	r2, .L320+8
 3185 018a D358     		ldr	r3, [r2, r3]
 3186 018c 9F46     		mov	pc, r3
 3187              		.section	.rodata._vsnprintf
 3188              		.align	2
 3189              	.L231:
 3190 0090 CA050000 		.word	.L237
 3191 0094 E0050000 		.word	.L229
 3192 0098 E0050000 		.word	.L229
ARM GAS  /tmp/cca6dLeK.s 			page 79


 3193 009c E0050000 		.word	.L229
 3194 00a0 E0050000 		.word	.L229
 3195 00a4 E0050000 		.word	.L229
 3196 00a8 E0050000 		.word	.L229
 3197 00ac E0050000 		.word	.L229
 3198 00b0 E0050000 		.word	.L229
 3199 00b4 E0050000 		.word	.L229
 3200 00b8 E0050000 		.word	.L229
 3201 00bc E0050000 		.word	.L229
 3202 00c0 E0050000 		.word	.L229
 3203 00c4 E0050000 		.word	.L229
 3204 00c8 E0050000 		.word	.L229
 3205 00cc E0050000 		.word	.L229
 3206 00d0 E0050000 		.word	.L229
 3207 00d4 E0050000 		.word	.L229
 3208 00d8 E0050000 		.word	.L229
 3209 00dc E0050000 		.word	.L229
 3210 00e0 E0050000 		.word	.L229
 3211 00e4 E0050000 		.word	.L229
 3212 00e8 E0050000 		.word	.L229
 3213 00ec E0050000 		.word	.L229
 3214 00f0 E0050000 		.word	.L229
 3215 00f4 E0050000 		.word	.L229
 3216 00f8 E0050000 		.word	.L229
 3217 00fc E0050000 		.word	.L229
 3218 0100 E0050000 		.word	.L229
 3219 0104 E0050000 		.word	.L229
 3220 0108 E0050000 		.word	.L229
 3221 010c E0050000 		.word	.L229
 3222 0110 F2030000 		.word	.L234
 3223 0114 B2030000 		.word	.L235
 3224 0118 F2030000 		.word	.L234
 3225 011c E0050000 		.word	.L229
 3226 0120 E0050000 		.word	.L229
 3227 0124 E0050000 		.word	.L229
 3228 0128 E0050000 		.word	.L229
 3229 012c E0050000 		.word	.L229
 3230 0130 E0050000 		.word	.L229
 3231 0134 E0050000 		.word	.L229
 3232 0138 E0050000 		.word	.L229
 3233 013c E0050000 		.word	.L229
 3234 0140 E0050000 		.word	.L229
 3235 0144 E0050000 		.word	.L229
 3236 0148 E0050000 		.word	.L229
 3237 014c E0050000 		.word	.L229
 3238 0150 E0050000 		.word	.L229
 3239 0154 E0050000 		.word	.L229
 3240 0158 E0050000 		.word	.L229
 3241 015c A6010000 		.word	.L230
 3242 0160 E0050000 		.word	.L229
 3243 0164 E0050000 		.word	.L229
 3244 0168 E0050000 		.word	.L229
 3245 016c E0050000 		.word	.L229
 3246 0170 E0050000 		.word	.L229
 3247 0174 E0050000 		.word	.L229
 3248 0178 E0050000 		.word	.L229
 3249 017c E0050000 		.word	.L229
ARM GAS  /tmp/cca6dLeK.s 			page 80


 3250 0180 E0050000 		.word	.L229
 3251 0184 A6010000 		.word	.L230
 3252 0188 42040000 		.word	.L236
 3253 018c A6010000 		.word	.L230
 3254 0190 F2030000 		.word	.L234
 3255 0194 B2030000 		.word	.L235
 3256 0198 F2030000 		.word	.L234
 3257 019c E0050000 		.word	.L229
 3258 01a0 A6010000 		.word	.L230
 3259 01a4 E0050000 		.word	.L229
 3260 01a8 E0050000 		.word	.L229
 3261 01ac E0050000 		.word	.L229
 3262 01b0 E0050000 		.word	.L229
 3263 01b4 E0050000 		.word	.L229
 3264 01b8 A6010000 		.word	.L230
 3265 01bc 94050000 		.word	.L233
 3266 01c0 E0050000 		.word	.L229
 3267 01c4 E0050000 		.word	.L229
 3268 01c8 BA040000 		.word	.L232
 3269 01cc E0050000 		.word	.L229
 3270 01d0 A6010000 		.word	.L230
 3271 01d4 E0050000 		.word	.L229
 3272 01d8 E0050000 		.word	.L229
 3273 01dc A6010000 		.word	.L230
 3274              		.section	.text._vsnprintf
 3275              	.L227:
 671:Core/Src/printf.c ****         format++;
 3276              		.loc 1 671 9 is_stmt 1 view .LVU774
 671:Core/Src/printf.c ****         format++;
 3277              		.loc 1 671 15 is_stmt 0 view .LVU775
 3278 018e 8023     		movs	r3, #128
 3279 0190 9B00     		lsls	r3, r3, #2
 3280 0192 1C43     		orrs	r4, r3
 3281              	.LVL363:
 672:Core/Src/printf.c ****         break;
 3282              		.loc 1 672 9 is_stmt 1 view .LVU776
 672:Core/Src/printf.c ****         break;
 3283              		.loc 1 672 15 is_stmt 0 view .LVU777
 3284 0194 0132     		adds	r2, r2, #1
 3285 0196 1192     		str	r2, [sp, #68]
 673:Core/Src/printf.c ****       case 'z' :
 3286              		.loc 1 673 9 is_stmt 1 view .LVU778
 3287 0198 EDE7     		b	.L222
 3288              	.L223:
 675:Core/Src/printf.c ****         format++;
 3289              		.loc 1 675 9 view .LVU779
 675:Core/Src/printf.c ****         format++;
 3290              		.loc 1 675 15 is_stmt 0 view .LVU780
 3291 019a 8023     		movs	r3, #128
 3292 019c 5B00     		lsls	r3, r3, #1
 3293 019e 1C43     		orrs	r4, r3
 3294              	.LVL364:
 676:Core/Src/printf.c ****         break;
 3295              		.loc 1 676 9 is_stmt 1 view .LVU781
 676:Core/Src/printf.c ****         break;
 3296              		.loc 1 676 15 is_stmt 0 view .LVU782
 3297 01a0 0132     		adds	r2, r2, #1
ARM GAS  /tmp/cca6dLeK.s 			page 81


 3298 01a2 1192     		str	r2, [sp, #68]
 677:Core/Src/printf.c ****       default :
 3299              		.loc 1 677 9 is_stmt 1 view .LVU783
 3300 01a4 E7E7     		b	.L222
 3301              	.L230:
 3302              	.LBB37:
 692:Core/Src/printf.c ****         if (*format == 'x' || *format == 'X') {
 3303              		.loc 1 692 9 view .LVU784
 693:Core/Src/printf.c ****           base = 16U;
 3304              		.loc 1 693 9 view .LVU785
 693:Core/Src/printf.c ****           base = 16U;
 3305              		.loc 1 693 12 is_stmt 0 view .LVU786
 3306 01a6 7828     		cmp	r0, #120
 3307 01a8 09D0     		beq	.L291
 693:Core/Src/printf.c ****           base = 16U;
 3308              		.loc 1 693 28 discriminator 1 view .LVU787
 3309 01aa 5828     		cmp	r0, #88
 3310 01ac 38D0     		beq	.L292
 696:Core/Src/printf.c ****           base =  8U;
 3311              		.loc 1 696 14 is_stmt 1 view .LVU788
 696:Core/Src/printf.c ****           base =  8U;
 3312              		.loc 1 696 17 is_stmt 0 view .LVU789
 3313 01ae 6F28     		cmp	r0, #111
 3314 01b0 38D0     		beq	.L293
 699:Core/Src/printf.c ****           base =  2U;
 3315              		.loc 1 699 14 is_stmt 1 view .LVU790
 699:Core/Src/printf.c ****           base =  2U;
 3316              		.loc 1 699 17 is_stmt 0 view .LVU791
 3317 01b2 6228     		cmp	r0, #98
 3318 01b4 38D0     		beq	.L294
 703:Core/Src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 3319              		.loc 1 703 11 is_stmt 1 view .LVU792
 3320              	.LVL365:
 704:Core/Src/printf.c ****         }
 3321              		.loc 1 704 11 view .LVU793
 704:Core/Src/printf.c ****         }
 3322              		.loc 1 704 17 is_stmt 0 view .LVU794
 3323 01b6 1023     		movs	r3, #16
 3324 01b8 9C43     		bics	r4, r3
 3325              	.LVL366:
 703:Core/Src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 3326              		.loc 1 703 16 view .LVU795
 3327 01ba 0A26     		movs	r6, #10
 3328 01bc 00E0     		b	.L238
 3329              	.LVL367:
 3330              	.L291:
 694:Core/Src/printf.c ****         }
 3331              		.loc 1 694 16 view .LVU796
 3332 01be 1026     		movs	r6, #16
 3333              	.L238:
 3334              	.LVL368:
 707:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 3335              		.loc 1 707 9 is_stmt 1 view .LVU797
 707:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 3336              		.loc 1 707 12 is_stmt 0 view .LVU798
 3337 01c0 5828     		cmp	r0, #88
 3338 01c2 33D0     		beq	.L311
ARM GAS  /tmp/cca6dLeK.s 			page 82


 3339              	.L239:
 712:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3340              		.loc 1 712 9 is_stmt 1 view .LVU799
 712:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3341              		.loc 1 712 12 is_stmt 0 view .LVU800
 3342 01c4 6928     		cmp	r0, #105
 3343 01c6 03D0     		beq	.L240
 712:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 3344              		.loc 1 712 30 discriminator 1 view .LVU801
 3345 01c8 6428     		cmp	r0, #100
 3346 01ca 01D0     		beq	.L240
 713:Core/Src/printf.c ****         }
 3347              		.loc 1 713 11 is_stmt 1 view .LVU802
 713:Core/Src/printf.c ****         }
 3348              		.loc 1 713 17 is_stmt 0 view .LVU803
 3349 01cc 0C22     		movs	r2, #12
 3350 01ce 9443     		bics	r4, r2
 3351              	.LVL369:
 3352              	.L240:
 717:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 3353              		.loc 1 717 9 is_stmt 1 view .LVU804
 717:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 3354              		.loc 1 717 12 is_stmt 0 view .LVU805
 3355 01d0 6305     		lsls	r3, r4, #21
 3356 01d2 01D5     		bpl	.L241
 718:Core/Src/printf.c ****         }
 3357              		.loc 1 718 11 is_stmt 1 view .LVU806
 718:Core/Src/printf.c ****         }
 3358              		.loc 1 718 17 is_stmt 0 view .LVU807
 3359 01d4 0122     		movs	r2, #1
 3360 01d6 9443     		bics	r4, r2
 3361              	.LVL370:
 3362              	.L241:
 722:Core/Src/printf.c ****           // signed
 3363              		.loc 1 722 9 is_stmt 1 view .LVU808
 722:Core/Src/printf.c ****           // signed
 3364              		.loc 1 722 12 is_stmt 0 view .LVU809
 3365 01d8 6928     		cmp	r0, #105
 3366 01da 2AD0     		beq	.L242
 722:Core/Src/printf.c ****           // signed
 3367              		.loc 1 722 30 discriminator 1 view .LVU810
 3368 01dc 6428     		cmp	r0, #100
 3369 01de 28D0     		beq	.L242
 741:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3370              		.loc 1 741 11 is_stmt 1 view .LVU811
 741:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3371              		.loc 1 741 14 is_stmt 0 view .LVU812
 3372 01e0 A305     		lsls	r3, r4, #22
 3373 01e2 00D5     		bpl	.LCB3347
 3374 01e4 9FE0     		b	.L312	@long jump
 3375              	.LCB3347:
 746:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 3376              		.loc 1 746 16 is_stmt 1 view .LVU813
 746:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 3377              		.loc 1 746 19 is_stmt 0 view .LVU814
 3378 01e6 E305     		lsls	r3, r4, #23
 3379 01e8 00D5     		bpl	.LCB3352
ARM GAS  /tmp/cca6dLeK.s 			page 83


 3380 01ea B8E0     		b	.L313	@long jump
 3381              	.LCB3352:
 3382              	.LBB38:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3383              		.loc 1 750 13 is_stmt 1 view .LVU815
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3384              		.loc 1 750 103 is_stmt 0 view .LVU816
 3385 01ec 6306     		lsls	r3, r4, #25
 3386 01ee 00D4     		bmi	.LCB3358
 3387 01f0 CAE0     		b	.L252	@long jump
 3388              	.LCB3358:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3389              		.loc 1 750 78 view .LVU817
 3390 01f2 1C9A     		ldr	r2, [sp, #112]
 3391 01f4 111D     		adds	r1, r2, #4
 3392 01f6 1C91     		str	r1, [sp, #112]
 3393 01f8 1168     		ldr	r1, [r2]
 3394 01fa FF22     		movs	r2, #255
 3395 01fc 0A40     		ands	r2, r1
 3396              	.L253:
 3397              	.LVL371:
 751:Core/Src/printf.c ****           }
 3398              		.loc 1 751 13 is_stmt 1 discriminator 8 view .LVU818
 751:Core/Src/printf.c ****           }
 3399              		.loc 1 751 19 is_stmt 0 discriminator 8 view .LVU819
 3400 01fe 0594     		str	r4, [sp, #20]
 3401 0200 0A9B     		ldr	r3, [sp, #40]
 3402 0202 0493     		str	r3, [sp, #16]
 3403 0204 5346     		mov	r3, r10
 3404 0206 0393     		str	r3, [sp, #12]
 3405 0208 0296     		str	r6, [sp, #8]
 3406 020a 0023     		movs	r3, #0
 3407 020c 0193     		str	r3, [sp, #4]
 3408 020e 0092     		str	r2, [sp]
 3409 0210 4346     		mov	r3, r8
 3410 0212 3A00     		movs	r2, r7
 3411              	.LVL372:
 751:Core/Src/printf.c ****           }
 3412              		.loc 1 751 19 discriminator 8 view .LVU820
 3413 0214 5946     		mov	r1, fp
 3414 0216 2800     		movs	r0, r5
 3415 0218 FFF7FEFF 		bl	_ntoa_long
 3416              	.LVL373:
 751:Core/Src/printf.c ****           }
 3417              		.loc 1 751 19 discriminator 8 view .LVU821
 3418 021c 0700     		movs	r7, r0
 3419              	.LVL374:
 751:Core/Src/printf.c ****           }
 3420              		.loc 1 751 19 discriminator 8 view .LVU822
 3421 021e 27E0     		b	.L245
 3422              	.LVL375:
 3423              	.L292:
 751:Core/Src/printf.c ****           }
 3424              		.loc 1 751 19 discriminator 8 view .LVU823
 3425              	.LBE38:
 694:Core/Src/printf.c ****         }
 3426              		.loc 1 694 16 view .LVU824
ARM GAS  /tmp/cca6dLeK.s 			page 84


 3427 0220 1026     		movs	r6, #16
 3428 0222 CDE7     		b	.L238
 3429              	.L293:
 697:Core/Src/printf.c ****         }
 3430              		.loc 1 697 16 view .LVU825
 3431 0224 0826     		movs	r6, #8
 3432 0226 CBE7     		b	.L238
 3433              	.L294:
 700:Core/Src/printf.c ****         }
 3434              		.loc 1 700 16 view .LVU826
 3435 0228 0226     		movs	r6, #2
 3436 022a C9E7     		b	.L238
 3437              	.LVL376:
 3438              	.L311:
 708:Core/Src/printf.c ****         }
 3439              		.loc 1 708 11 is_stmt 1 view .LVU827
 708:Core/Src/printf.c ****         }
 3440              		.loc 1 708 17 is_stmt 0 view .LVU828
 3441 022c 2022     		movs	r2, #32
 3442 022e 1443     		orrs	r4, r2
 3443              	.LVL377:
 708:Core/Src/printf.c ****         }
 3444              		.loc 1 708 17 view .LVU829
 3445 0230 C8E7     		b	.L239
 3446              	.L242:
 724:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3447              		.loc 1 724 11 is_stmt 1 view .LVU830
 724:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3448              		.loc 1 724 14 is_stmt 0 view .LVU831
 3449 0232 A305     		lsls	r3, r4, #22
 3450 0234 20D4     		bmi	.L314
 730:Core/Src/printf.c ****             const long value = va_arg(va, long);
 3451              		.loc 1 730 16 is_stmt 1 view .LVU832
 730:Core/Src/printf.c ****             const long value = va_arg(va, long);
 3452              		.loc 1 730 19 is_stmt 0 view .LVU833
 3453 0236 E305     		lsls	r3, r4, #23
 3454 0238 50D4     		bmi	.L315
 3455              	.LBB39:
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3456              		.loc 1 735 13 is_stmt 1 view .LVU834
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3457              		.loc 1 735 76 is_stmt 0 view .LVU835
 3458 023a 6306     		lsls	r3, r4, #25
 3459 023c 66D5     		bpl	.L247
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3460              		.loc 1 735 60 view .LVU836
 3461 023e 1C9A     		ldr	r2, [sp, #112]
 3462 0240 111D     		adds	r1, r2, #4
 3463 0242 1C91     		str	r1, [sp, #112]
 3464 0244 1168     		ldr	r1, [r2]
 3465 0246 FF22     		movs	r2, #255
 3466 0248 0A40     		ands	r2, r1
 3467              	.L248:
 3468              	.LVL378:
 736:Core/Src/printf.c ****           }
 3469              		.loc 1 736 13 is_stmt 1 discriminator 8 view .LVU837
 736:Core/Src/printf.c ****           }
ARM GAS  /tmp/cca6dLeK.s 			page 85


 3470              		.loc 1 736 56 is_stmt 0 discriminator 8 view .LVU838
 3471 024a D317     		asrs	r3, r2, #31
 3472 024c D118     		adds	r1, r2, r3
 3473 024e 5940     		eors	r1, r3
 736:Core/Src/printf.c ****           }
 3474              		.loc 1 736 19 discriminator 8 view .LVU839
 3475 0250 0594     		str	r4, [sp, #20]
 3476 0252 0A9B     		ldr	r3, [sp, #40]
 3477 0254 0493     		str	r3, [sp, #16]
 3478 0256 5346     		mov	r3, r10
 3479 0258 0393     		str	r3, [sp, #12]
 3480 025a 0296     		str	r6, [sp, #8]
 3481 025c D20F     		lsrs	r2, r2, #31
 3482              	.LVL379:
 736:Core/Src/printf.c ****           }
 3483              		.loc 1 736 19 discriminator 8 view .LVU840
 3484 025e 0192     		str	r2, [sp, #4]
 3485 0260 0091     		str	r1, [sp]
 3486 0262 4346     		mov	r3, r8
 3487 0264 3A00     		movs	r2, r7
 3488 0266 5946     		mov	r1, fp
 3489 0268 2800     		movs	r0, r5
 3490 026a FFF7FEFF 		bl	_ntoa_long
 3491              	.LVL380:
 3492 026e 0700     		movs	r7, r0
 3493              	.LVL381:
 3494              	.L245:
 736:Core/Src/printf.c ****           }
 3495              		.loc 1 736 19 discriminator 8 view .LVU841
 3496              	.LBE39:
 754:Core/Src/printf.c ****         break;
 3497              		.loc 1 754 9 is_stmt 1 view .LVU842
 754:Core/Src/printf.c ****         break;
 3498              		.loc 1 754 15 is_stmt 0 view .LVU843
 3499 0270 119B     		ldr	r3, [sp, #68]
 3500 0272 0133     		adds	r3, r3, #1
 3501 0274 1193     		str	r3, [sp, #68]
 755:Core/Src/printf.c ****       }
 3502              		.loc 1 755 9 is_stmt 1 view .LVU844
 3503 0276 D3E6     		b	.L282
 3504              	.LVL382:
 3505              	.L314:
 3506              	.LBB40:
 726:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3507              		.loc 1 726 13 view .LVU845
 726:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3508              		.loc 1 726 29 is_stmt 0 view .LVU846
 3509 0278 1C9B     		ldr	r3, [sp, #112]
 3510 027a DA1D     		adds	r2, r3, #7
 3511 027c 0721     		movs	r1, #7
 3512 027e 8A43     		bics	r2, r1
 3513 0280 1100     		movs	r1, r2
 3514 0282 0831     		adds	r1, r1, #8
 3515 0284 1C91     		str	r1, [sp, #112]
 3516 0286 1168     		ldr	r1, [r2]
 3517 0288 5368     		ldr	r3, [r2, #4]
 3518 028a 9C46     		mov	ip, r3
ARM GAS  /tmp/cca6dLeK.s 			page 86


 727:Core/Src/printf.c **** #endif
 3519              		.loc 1 727 13 is_stmt 1 view .LVU847
 727:Core/Src/printf.c **** #endif
 3520              		.loc 1 727 61 is_stmt 0 view .LVU848
 3521 028c DB17     		asrs	r3, r3, #31
 3522 028e 0C93     		str	r3, [sp, #48]
 3523 0290 0D93     		str	r3, [sp, #52]
 3524 0292 0C9A     		ldr	r2, [sp, #48]
 3525 0294 0D9B     		ldr	r3, [sp, #52]
 3526 0296 1000     		movs	r0, r2
 3527 0298 4840     		eors	r0, r1
 3528 029a 0E90     		str	r0, [sp, #56]
 3529 029c 6246     		mov	r2, ip
 3530 029e 5340     		eors	r3, r2
 3531 02a0 0F93     		str	r3, [sp, #60]
 3532 02a2 0E98     		ldr	r0, [sp, #56]
 3533 02a4 0F99     		ldr	r1, [sp, #60]
 3534 02a6 0C9A     		ldr	r2, [sp, #48]
 3535 02a8 0D9B     		ldr	r3, [sp, #52]
 3536 02aa 801A     		subs	r0, r0, r2
 3537 02ac 9941     		sbcs	r1, r1, r3
 3538 02ae 0E90     		str	r0, [sp, #56]
 3539 02b0 0F91     		str	r1, [sp, #60]
 727:Core/Src/printf.c **** #endif
 3540              		.loc 1 727 19 view .LVU849
 3541 02b2 0894     		str	r4, [sp, #32]
 3542 02b4 0A9B     		ldr	r3, [sp, #40]
 3543 02b6 0793     		str	r3, [sp, #28]
 3544 02b8 5346     		mov	r3, r10
 3545 02ba 0693     		str	r3, [sp, #24]
 3546 02bc 0496     		str	r6, [sp, #16]
 3547 02be 0023     		movs	r3, #0
 3548 02c0 0593     		str	r3, [sp, #20]
 3549 02c2 6346     		mov	r3, ip
 3550 02c4 DA0F     		lsrs	r2, r3, #31
 3551 02c6 0292     		str	r2, [sp, #8]
 3552 02c8 0090     		str	r0, [sp]
 3553 02ca 0191     		str	r1, [sp, #4]
 3554 02cc 4346     		mov	r3, r8
 3555 02ce 3A00     		movs	r2, r7
 3556 02d0 5946     		mov	r1, fp
 3557 02d2 2800     		movs	r0, r5
 3558 02d4 FFF7FEFF 		bl	_ntoa_long_long
 3559              	.LVL383:
 3560 02d8 0700     		movs	r7, r0
 3561              	.LVL384:
 727:Core/Src/printf.c **** #endif
 3562              		.loc 1 727 19 view .LVU850
 3563              	.LBE40:
 3564 02da C9E7     		b	.L245
 3565              	.LVL385:
 3566              	.L315:
 3567              	.LBB41:
 731:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3568              		.loc 1 731 13 is_stmt 1 view .LVU851
 731:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3569              		.loc 1 731 24 is_stmt 0 view .LVU852
ARM GAS  /tmp/cca6dLeK.s 			page 87


 3570 02dc 1C9A     		ldr	r2, [sp, #112]
 3571 02de 111D     		adds	r1, r2, #4
 3572 02e0 1C91     		str	r1, [sp, #112]
 3573 02e2 1268     		ldr	r2, [r2]
 732:Core/Src/printf.c ****           }
 3574              		.loc 1 732 13 is_stmt 1 view .LVU853
 732:Core/Src/printf.c ****           }
 3575              		.loc 1 732 56 is_stmt 0 view .LVU854
 3576 02e4 D317     		asrs	r3, r2, #31
 3577 02e6 D118     		adds	r1, r2, r3
 3578 02e8 5940     		eors	r1, r3
 732:Core/Src/printf.c ****           }
 3579              		.loc 1 732 19 view .LVU855
 3580 02ea 0594     		str	r4, [sp, #20]
 3581 02ec 0A9B     		ldr	r3, [sp, #40]
 3582 02ee 0493     		str	r3, [sp, #16]
 3583 02f0 5346     		mov	r3, r10
 3584 02f2 0393     		str	r3, [sp, #12]
 3585 02f4 0296     		str	r6, [sp, #8]
 3586 02f6 D20F     		lsrs	r2, r2, #31
 3587 02f8 0192     		str	r2, [sp, #4]
 3588 02fa 0091     		str	r1, [sp]
 3589 02fc 4346     		mov	r3, r8
 3590 02fe 3A00     		movs	r2, r7
 3591 0300 5946     		mov	r1, fp
 3592 0302 2800     		movs	r0, r5
 3593 0304 FFF7FEFF 		bl	_ntoa_long
 3594              	.LVL386:
 3595 0308 0700     		movs	r7, r0
 3596              	.LVL387:
 732:Core/Src/printf.c ****           }
 3597              		.loc 1 732 19 view .LVU856
 3598              	.LBE41:
 3599 030a B1E7     		b	.L245
 3600              	.LVL388:
 3601              	.L247:
 3602              	.LBB42:
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3603              		.loc 1 735 129 discriminator 2 view .LVU857
 3604 030c 2306     		lsls	r3, r4, #24
 3605 030e 05D5     		bpl	.L249
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3606              		.loc 1 735 113 view .LVU858
 3607 0310 1C9A     		ldr	r2, [sp, #112]
 3608 0312 111D     		adds	r1, r2, #4
 3609 0314 1C91     		str	r1, [sp, #112]
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3610              		.loc 1 735 129 view .LVU859
 3611 0316 0023     		movs	r3, #0
 3612 0318 D25E     		ldrsh	r2, [r2, r3]
 3613 031a 96E7     		b	.L248
 3614              	.L249:
 3615 031c 1C9A     		ldr	r2, [sp, #112]
 3616 031e 111D     		adds	r1, r2, #4
 3617 0320 1C91     		str	r1, [sp, #112]
 3618 0322 1268     		ldr	r2, [r2]
 3619 0324 91E7     		b	.L248
ARM GAS  /tmp/cca6dLeK.s 			page 88


 3620              	.L312:
 3621              	.LBE42:
 743:Core/Src/printf.c **** #endif
 3622              		.loc 1 743 13 is_stmt 1 view .LVU860
 743:Core/Src/printf.c **** #endif
 3623              		.loc 1 743 19 is_stmt 0 view .LVU861
 3624 0326 1C9B     		ldr	r3, [sp, #112]
 3625 0328 DA1D     		adds	r2, r3, #7
 3626 032a 0721     		movs	r1, #7
 3627 032c 8A43     		bics	r2, r1
 3628 032e 1100     		movs	r1, r2
 3629 0330 0831     		adds	r1, r1, #8
 3630 0332 1C91     		str	r1, [sp, #112]
 3631 0334 0894     		str	r4, [sp, #32]
 3632 0336 0A9B     		ldr	r3, [sp, #40]
 3633 0338 0793     		str	r3, [sp, #28]
 3634 033a 5346     		mov	r3, r10
 3635 033c 0693     		str	r3, [sp, #24]
 3636 033e 0496     		str	r6, [sp, #16]
 3637 0340 0023     		movs	r3, #0
 3638 0342 0593     		str	r3, [sp, #20]
 3639 0344 0293     		str	r3, [sp, #8]
 3640 0346 1368     		ldr	r3, [r2]
 3641 0348 5468     		ldr	r4, [r2, #4]
 3642 034a 0093     		str	r3, [sp]
 3643 034c 0194     		str	r4, [sp, #4]
 3644 034e 4346     		mov	r3, r8
 3645 0350 3A00     		movs	r2, r7
 3646 0352 5946     		mov	r1, fp
 3647 0354 2800     		movs	r0, r5
 3648 0356 FFF7FEFF 		bl	_ntoa_long_long
 3649              	.LVL389:
 3650 035a 0700     		movs	r7, r0
 3651              	.LVL390:
 743:Core/Src/printf.c **** #endif
 3652              		.loc 1 743 19 view .LVU862
 3653 035c 88E7     		b	.L245
 3654              	.LVL391:
 3655              	.L313:
 747:Core/Src/printf.c ****           }
 3656              		.loc 1 747 13 is_stmt 1 view .LVU863
 747:Core/Src/printf.c ****           }
 3657              		.loc 1 747 19 is_stmt 0 view .LVU864
 3658 035e 1C9A     		ldr	r2, [sp, #112]
 3659 0360 111D     		adds	r1, r2, #4
 3660 0362 1C91     		str	r1, [sp, #112]
 3661 0364 0594     		str	r4, [sp, #20]
 3662 0366 0A9B     		ldr	r3, [sp, #40]
 3663 0368 0493     		str	r3, [sp, #16]
 3664 036a 5346     		mov	r3, r10
 3665 036c 0393     		str	r3, [sp, #12]
 3666 036e 0296     		str	r6, [sp, #8]
 3667 0370 0023     		movs	r3, #0
 3668 0372 0193     		str	r3, [sp, #4]
 3669 0374 1368     		ldr	r3, [r2]
 3670 0376 0093     		str	r3, [sp]
 3671 0378 4346     		mov	r3, r8
ARM GAS  /tmp/cca6dLeK.s 			page 89


 3672 037a 3A00     		movs	r2, r7
 3673 037c 5946     		mov	r1, fp
 3674 037e 2800     		movs	r0, r5
 3675 0380 FFF7FEFF 		bl	_ntoa_long
 3676              	.LVL392:
 3677 0384 0700     		movs	r7, r0
 3678              	.LVL393:
 747:Core/Src/printf.c ****           }
 3679              		.loc 1 747 19 view .LVU865
 3680 0386 73E7     		b	.L245
 3681              	.LVL394:
 3682              	.L252:
 3683              	.LBB43:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3684              		.loc 1 750 174 discriminator 2 view .LVU866
 3685 0388 2306     		lsls	r3, r4, #24
 3686 038a 0DD5     		bpl	.L254
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3687              		.loc 1 750 149 view .LVU867
 3688 038c 1C9A     		ldr	r2, [sp, #112]
 3689 038e 111D     		adds	r1, r2, #4
 3690 0390 1C91     		str	r1, [sp, #112]
 3691 0392 1268     		ldr	r2, [r2]
 3692 0394 1204     		lsls	r2, r2, #16
 3693 0396 120C     		lsrs	r2, r2, #16
 3694 0398 31E7     		b	.L253
 3695              	.L321:
 3696 039a C046     		.align	2
 3697              	.L320:
 3698 039c 00000000 		.word	.L208
 3699 03a0 44000000 		.word	.L224
 3700 03a4 90000000 		.word	.L231
 3701              	.L254:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3702              		.loc 1 750 174 view .LVU868
 3703 03a8 1C9A     		ldr	r2, [sp, #112]
 3704 03aa 111D     		adds	r1, r2, #4
 3705 03ac 1C91     		str	r1, [sp, #112]
 3706 03ae 1268     		ldr	r2, [r2]
 3707 03b0 25E7     		b	.L253
 3708              	.LVL395:
 3709              	.L235:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3710              		.loc 1 750 174 view .LVU869
 3711              	.LBE43:
 3712              	.LBE37:
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3713              		.loc 1 760 9 is_stmt 1 view .LVU870
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3714              		.loc 1 760 12 is_stmt 0 view .LVU871
 3715 03b2 4628     		cmp	r0, #70
 3716 03b4 1AD0     		beq	.L316
 3717              	.L255:
 761:Core/Src/printf.c ****         format++;
 3718              		.loc 1 761 9 is_stmt 1 view .LVU872
 761:Core/Src/printf.c ****         format++;
 3719              		.loc 1 761 15 is_stmt 0 view .LVU873
ARM GAS  /tmp/cca6dLeK.s 			page 90


 3720 03b6 1C9B     		ldr	r3, [sp, #112]
 3721 03b8 0733     		adds	r3, r3, #7
 3722 03ba 0722     		movs	r2, #7
 3723 03bc 9343     		bics	r3, r2
 3724 03be 1A00     		movs	r2, r3
 3725 03c0 0832     		adds	r2, r2, #8
 3726 03c2 1C92     		str	r2, [sp, #112]
 3727 03c4 0494     		str	r4, [sp, #16]
 3728 03c6 0A9A     		ldr	r2, [sp, #40]
 3729 03c8 0392     		str	r2, [sp, #12]
 3730 03ca 5246     		mov	r2, r10
 3731 03cc 0292     		str	r2, [sp, #8]
 3732 03ce 5C68     		ldr	r4, [r3, #4]
 3733 03d0 1B68     		ldr	r3, [r3]
 3734 03d2 0093     		str	r3, [sp]
 3735 03d4 0194     		str	r4, [sp, #4]
 3736 03d6 4346     		mov	r3, r8
 3737 03d8 3A00     		movs	r2, r7
 3738 03da 5946     		mov	r1, fp
 3739 03dc 2800     		movs	r0, r5
 3740 03de FFF7FEFF 		bl	_ftoa
 3741              	.LVL396:
 3742 03e2 0700     		movs	r7, r0
 3743              	.LVL397:
 762:Core/Src/printf.c ****         break;
 3744              		.loc 1 762 9 is_stmt 1 view .LVU874
 762:Core/Src/printf.c ****         break;
 3745              		.loc 1 762 15 is_stmt 0 view .LVU875
 3746 03e4 119B     		ldr	r3, [sp, #68]
 3747 03e6 0133     		adds	r3, r3, #1
 3748 03e8 1193     		str	r3, [sp, #68]
 763:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 3749              		.loc 1 763 9 is_stmt 1 view .LVU876
 3750 03ea 19E6     		b	.L282
 3751              	.LVL398:
 3752              	.L316:
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3753              		.loc 1 760 29 discriminator 1 view .LVU877
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3754              		.loc 1 760 35 is_stmt 0 discriminator 1 view .LVU878
 3755 03ec 2023     		movs	r3, #32
 3756 03ee 1C43     		orrs	r4, r3
 3757              	.LVL399:
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3758              		.loc 1 760 35 discriminator 1 view .LVU879
 3759 03f0 E1E7     		b	.L255
 3760              	.L234:
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3761              		.loc 1 769 9 is_stmt 1 view .LVU880
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3762              		.loc 1 769 12 is_stmt 0 view .LVU881
 3763 03f2 6728     		cmp	r0, #103
 3764 03f4 01D0     		beq	.L256
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3765              		.loc 1 769 29 discriminator 2 view .LVU882
 3766 03f6 4728     		cmp	r0, #71
 3767 03f8 02D1     		bne	.L257
ARM GAS  /tmp/cca6dLeK.s 			page 91


 3768              	.L256:
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3769              		.loc 1 769 49 is_stmt 1 discriminator 3 view .LVU883
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3770              		.loc 1 769 55 is_stmt 0 discriminator 3 view .LVU884
 3771 03fa 8023     		movs	r3, #128
 3772 03fc 1B01     		lsls	r3, r3, #4
 3773 03fe 1C43     		orrs	r4, r3
 3774              	.LVL400:
 3775              	.L257:
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3776              		.loc 1 770 9 is_stmt 1 view .LVU885
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3777              		.loc 1 770 12 is_stmt 0 view .LVU886
 3778 0400 4528     		cmp	r0, #69
 3779 0402 01D0     		beq	.L258
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3780              		.loc 1 770 29 discriminator 2 view .LVU887
 3781 0404 4728     		cmp	r0, #71
 3782 0406 01D1     		bne	.L259
 3783              	.L258:
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3784              		.loc 1 770 49 is_stmt 1 discriminator 3 view .LVU888
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3785              		.loc 1 770 55 is_stmt 0 discriminator 3 view .LVU889
 3786 0408 2023     		movs	r3, #32
 3787 040a 1C43     		orrs	r4, r3
 3788              	.LVL401:
 3789              	.L259:
 771:Core/Src/printf.c ****         format++;
 3790              		.loc 1 771 9 is_stmt 1 view .LVU890
 771:Core/Src/printf.c ****         format++;
 3791              		.loc 1 771 15 is_stmt 0 view .LVU891
 3792 040c 1C9B     		ldr	r3, [sp, #112]
 3793 040e 0733     		adds	r3, r3, #7
 3794 0410 0722     		movs	r2, #7
 3795 0412 9343     		bics	r3, r2
 3796 0414 1A00     		movs	r2, r3
 3797 0416 0832     		adds	r2, r2, #8
 3798 0418 1C92     		str	r2, [sp, #112]
 3799 041a 0494     		str	r4, [sp, #16]
 3800 041c 0A9A     		ldr	r2, [sp, #40]
 3801 041e 0392     		str	r2, [sp, #12]
 3802 0420 5246     		mov	r2, r10
 3803 0422 0292     		str	r2, [sp, #8]
 3804 0424 5C68     		ldr	r4, [r3, #4]
 3805 0426 1B68     		ldr	r3, [r3]
 3806 0428 0093     		str	r3, [sp]
 3807 042a 0194     		str	r4, [sp, #4]
 3808 042c 4346     		mov	r3, r8
 3809 042e 3A00     		movs	r2, r7
 3810 0430 5946     		mov	r1, fp
 3811 0432 2800     		movs	r0, r5
 3812 0434 FFF7FEFF 		bl	_etoa
 3813              	.LVL402:
 3814 0438 0700     		movs	r7, r0
 3815              	.LVL403:
ARM GAS  /tmp/cca6dLeK.s 			page 92


 772:Core/Src/printf.c ****         break;
 3816              		.loc 1 772 9 is_stmt 1 view .LVU892
 772:Core/Src/printf.c ****         break;
 3817              		.loc 1 772 15 is_stmt 0 view .LVU893
 3818 043a 119B     		ldr	r3, [sp, #68]
 3819 043c 0133     		adds	r3, r3, #1
 3820 043e 1193     		str	r3, [sp, #68]
 773:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 3821              		.loc 1 773 9 is_stmt 1 view .LVU894
 3822 0440 EEE5     		b	.L282
 3823              	.LVL404:
 3824              	.L236:
 3825              	.LBB44:
 777:Core/Src/printf.c ****         // pre padding
 3826              		.loc 1 777 9 view .LVU895
 779:Core/Src/printf.c ****           while (l++ < width) {
 3827              		.loc 1 779 9 view .LVU896
 779:Core/Src/printf.c ****           while (l++ < width) {
 3828              		.loc 1 779 21 is_stmt 0 view .LVU897
 3829 0442 0223     		movs	r3, #2
 3830 0444 1A00     		movs	r2, r3
 3831 0446 2240     		ands	r2, r4
 3832 0448 9246     		mov	r10, r2
 3833              	.LVL405:
 779:Core/Src/printf.c ****           while (l++ < width) {
 3834              		.loc 1 779 12 view .LVU898
 3835 044a 2342     		tst	r3, r4
 3836 044c 1FD0     		beq	.L295
 777:Core/Src/printf.c ****         // pre padding
 3837              		.loc 1 777 22 view .LVU899
 3838 044e 0124     		movs	r4, #1
 3839              	.LVL406:
 3840              	.L261:
 785:Core/Src/printf.c ****         // post padding
 3841              		.loc 1 785 9 is_stmt 1 view .LVU900
 785:Core/Src/printf.c ****         // post padding
 3842              		.loc 1 785 19 is_stmt 0 view .LVU901
 3843 0450 1C9B     		ldr	r3, [sp, #112]
 3844 0452 1A1D     		adds	r2, r3, #4
 3845 0454 1C92     		str	r2, [sp, #112]
 785:Core/Src/printf.c ****         // post padding
 3846              		.loc 1 785 9 view .LVU902
 3847 0456 7A1C     		adds	r2, r7, #1
 3848 0458 9146     		mov	r9, r2
 3849              	.LVL407:
 785:Core/Src/printf.c ****         // post padding
 3850              		.loc 1 785 9 view .LVU903
 3851 045a 1878     		ldrb	r0, [r3]
 3852 045c 4346     		mov	r3, r8
 3853 045e 3A00     		movs	r2, r7
 3854              	.LVL408:
 785:Core/Src/printf.c ****         // post padding
 3855              		.loc 1 785 9 view .LVU904
 3856 0460 5946     		mov	r1, fp
 3857 0462 A847     		blx	r5
 3858              	.LVL409:
 787:Core/Src/printf.c ****           while (l++ < width) {
ARM GAS  /tmp/cca6dLeK.s 			page 93


 3859              		.loc 1 787 9 is_stmt 1 view .LVU905
 787:Core/Src/printf.c ****           while (l++ < width) {
 3860              		.loc 1 787 12 is_stmt 0 view .LVU906
 3861 0464 5346     		mov	r3, r10
 3862 0466 002B     		cmp	r3, #0
 3863 0468 16D1     		bne	.L317
 3864              	.LVL410:
 3865              	.L264:
 792:Core/Src/printf.c ****         break;
 3866              		.loc 1 792 9 is_stmt 1 view .LVU907
 792:Core/Src/printf.c ****         break;
 3867              		.loc 1 792 15 is_stmt 0 view .LVU908
 3868 046a 119B     		ldr	r3, [sp, #68]
 3869 046c 0133     		adds	r3, r3, #1
 3870 046e 1193     		str	r3, [sp, #68]
 3871              		.loc 1 793 9 is_stmt 1 view .LVU909
 3872 0470 4F46     		mov	r7, r9
 3873 0472 D5E5     		b	.L282
 3874              	.LVL411:
 3875              	.L262:
 781:Core/Src/printf.c ****           }
 3876              		.loc 1 781 13 view .LVU910
 3877 0474 561C     		adds	r6, r2, #1
 3878              	.LVL412:
 781:Core/Src/printf.c ****           }
 3879              		.loc 1 781 13 is_stmt 0 view .LVU911
 3880 0476 4346     		mov	r3, r8
 3881 0478 5946     		mov	r1, fp
 3882 047a 2020     		movs	r0, #32
 3883 047c B847     		blx	r7
 3884              	.LVL413:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3885              		.loc 1 780 19 view .LVU912
 3886 047e 2300     		movs	r3, r4
 781:Core/Src/printf.c ****           }
 3887              		.loc 1 781 13 view .LVU913
 3888 0480 3200     		movs	r2, r6
 3889              	.LVL414:
 3890              	.L260:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3891              		.loc 1 780 17 is_stmt 1 view .LVU914
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3892              		.loc 1 780 19 is_stmt 0 view .LVU915
 3893 0482 5C1C     		adds	r4, r3, #1
 3894              	.LVL415:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3895              		.loc 1 780 17 view .LVU916
 3896 0484 9D42     		cmp	r5, r3
 3897 0486 F5D8     		bhi	.L262
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3898              		.loc 1 780 17 view .LVU917
 3899 0488 3D00     		movs	r5, r7
 3900 048a 1700     		movs	r7, r2
 3901              	.LVL416:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3902              		.loc 1 780 17 view .LVU918
 3903 048c E0E7     		b	.L261
ARM GAS  /tmp/cca6dLeK.s 			page 94


 3904              	.LVL417:
 3905              	.L295:
 777:Core/Src/printf.c ****         // pre padding
 3906              		.loc 1 777 22 view .LVU919
 3907 048e 0123     		movs	r3, #1
 3908 0490 3A00     		movs	r2, r7
 3909 0492 2F00     		movs	r7, r5
 3910              	.LVL418:
 777:Core/Src/printf.c ****         // pre padding
 3911              		.loc 1 777 22 view .LVU920
 3912 0494 0A9D     		ldr	r5, [sp, #40]
 3913              	.LVL419:
 777:Core/Src/printf.c ****         // pre padding
 3914              		.loc 1 777 22 view .LVU921
 3915 0496 F4E7     		b	.L260
 3916              	.LVL420:
 3917              	.L317:
 777:Core/Src/printf.c ****         // pre padding
 3918              		.loc 1 777 22 view .LVU922
 3919 0498 4A46     		mov	r2, r9
 3920 049a A946     		mov	r9, r5
 3921              	.LVL421:
 777:Core/Src/printf.c ****         // pre padding
 3922              		.loc 1 777 22 view .LVU923
 3923 049c 0A9D     		ldr	r5, [sp, #40]
 3924              	.LVL422:
 777:Core/Src/printf.c ****         // pre padding
 3925              		.loc 1 777 22 view .LVU924
 3926 049e 06E0     		b	.L263
 3927              	.LVL423:
 3928              	.L265:
 789:Core/Src/printf.c ****           }
 3929              		.loc 1 789 13 is_stmt 1 view .LVU925
 3930 04a0 571C     		adds	r7, r2, #1
 3931              	.LVL424:
 789:Core/Src/printf.c ****           }
 3932              		.loc 1 789 13 is_stmt 0 view .LVU926
 3933 04a2 4346     		mov	r3, r8
 3934 04a4 5946     		mov	r1, fp
 3935 04a6 2020     		movs	r0, #32
 3936 04a8 C847     		blx	r9
 3937              	.LVL425:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3938              		.loc 1 788 19 view .LVU927
 3939 04aa 3400     		movs	r4, r6
 789:Core/Src/printf.c ****           }
 3940              		.loc 1 789 13 view .LVU928
 3941 04ac 3A00     		movs	r2, r7
 3942              	.LVL426:
 3943              	.L263:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3944              		.loc 1 788 17 is_stmt 1 view .LVU929
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3945              		.loc 1 788 19 is_stmt 0 view .LVU930
 3946 04ae 661C     		adds	r6, r4, #1
 3947              	.LVL427:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
ARM GAS  /tmp/cca6dLeK.s 			page 95


 3948              		.loc 1 788 17 view .LVU931
 3949 04b0 A542     		cmp	r5, r4
 3950 04b2 F5D8     		bhi	.L265
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3951              		.loc 1 788 17 view .LVU932
 3952 04b4 4D46     		mov	r5, r9
 3953 04b6 9146     		mov	r9, r2
 3954              	.LVL428:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3955              		.loc 1 788 17 view .LVU933
 3956 04b8 D7E7     		b	.L264
 3957              	.LVL429:
 3958              	.L232:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3959              		.loc 1 788 17 view .LVU934
 3960              	.LBE44:
 3961              	.LBB45:
 794:Core/Src/printf.c ****       }
 795:Core/Src/printf.c **** 
 796:Core/Src/printf.c ****       case 's' : {
 797:Core/Src/printf.c ****         const char* p = va_arg(va, char*);
 3962              		.loc 1 797 9 is_stmt 1 view .LVU935
 3963              		.loc 1 797 21 is_stmt 0 view .LVU936
 3964 04ba 1C9B     		ldr	r3, [sp, #112]
 3965 04bc 1A1D     		adds	r2, r3, #4
 3966 04be 1C92     		str	r2, [sp, #112]
 3967 04c0 1B68     		ldr	r3, [r3]
 3968 04c2 9946     		mov	r9, r3
 798:Core/Src/printf.c ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 3969              		.loc 1 798 9 is_stmt 1 view .LVU937
 3970              		.loc 1 798 26 is_stmt 0 view .LVU938
 3971 04c4 5346     		mov	r3, r10
 3972 04c6 002B     		cmp	r3, #0
 3973 04c8 00D1     		bne	.L267
 3974              	.LVL430:
 3975              		.loc 1 798 26 view .LVU939
 3976 04ca 013B     		subs	r3, r3, #1
 3977              	.LVL431:
 3978              	.L267:
 3979              		.loc 1 798 26 view .LVU940
 3980 04cc 4E46     		mov	r6, r9
 3981 04ce 01E0     		b	.L268
 3982              	.LVL432:
 3983              	.L270:
 3984              	.LBB46:
 3985              	.LBB47:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3986              		.loc 1 174 38 is_stmt 1 view .LVU941
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3987              		.loc 1 174 34 view .LVU942
 3988 04d0 0136     		adds	r6, r6, #1
 3989              	.LVL433:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3990              		.loc 1 174 30 is_stmt 0 view .LVU943
 3991 04d2 1300     		movs	r3, r2
 3992              	.LVL434:
 3993              	.L268:
ARM GAS  /tmp/cca6dLeK.s 			page 96


 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3994              		.loc 1 174 17 is_stmt 1 view .LVU944
 3995 04d4 3278     		ldrb	r2, [r6]
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3996              		.loc 1 174 3 is_stmt 0 view .LVU945
 3997 04d6 002A     		cmp	r2, #0
 3998 04d8 02D0     		beq	.L269
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3999              		.loc 1 174 30 view .LVU946
 4000 04da 5A1E     		subs	r2, r3, #1
 4001              	.LVL435:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 4002              		.loc 1 174 20 view .LVU947
 4003 04dc 002B     		cmp	r3, #0
 4004 04de F7D1     		bne	.L270
 4005              	.LVL436:
 4006              	.L269:
 175:Core/Src/printf.c **** }
 4007              		.loc 1 175 3 is_stmt 1 view .LVU948
 175:Core/Src/printf.c **** }
 4008              		.loc 1 175 27 is_stmt 0 view .LVU949
 4009 04e0 4B46     		mov	r3, r9
 4010 04e2 F21A     		subs	r2, r6, r3
 4011 04e4 1092     		str	r2, [sp, #64]
 4012              	.LVL437:
 175:Core/Src/printf.c **** }
 4013              		.loc 1 175 27 view .LVU950
 4014              	.LBE47:
 4015              	.LBE46:
 799:Core/Src/printf.c ****         // pre padding
 800:Core/Src/printf.c ****         if (flags & FLAGS_PRECISION) {
 4016              		.loc 1 800 9 is_stmt 1 view .LVU951
 4017              		.loc 1 800 19 is_stmt 0 view .LVU952
 4018 04e6 8023     		movs	r3, #128
 4019 04e8 DB00     		lsls	r3, r3, #3
 4020 04ea 2600     		movs	r6, r4
 4021 04ec 1E40     		ands	r6, r3
 4022              		.loc 1 800 12 view .LVU953
 4023 04ee 1C42     		tst	r4, r3
 4024 04f0 03D0     		beq	.L271
 801:Core/Src/printf.c ****           l = (l < precision ? l : precision);
 4025              		.loc 1 801 11 is_stmt 1 view .LVU954
 4026              		.loc 1 801 13 is_stmt 0 view .LVU955
 4027 04f2 5245     		cmp	r2, r10
 4028 04f4 01D9     		bls	.L271
 4029 04f6 5346     		mov	r3, r10
 4030 04f8 1093     		str	r3, [sp, #64]
 4031              	.LVL438:
 4032              	.L271:
 802:Core/Src/printf.c ****         }
 803:Core/Src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
 4033              		.loc 1 803 9 is_stmt 1 view .LVU956
 4034              		.loc 1 803 21 is_stmt 0 view .LVU957
 4035 04fa 0223     		movs	r3, #2
 4036 04fc 1A00     		movs	r2, r3
 4037 04fe 2240     		ands	r2, r4
 4038 0500 0B92     		str	r2, [sp, #44]
ARM GAS  /tmp/cca6dLeK.s 			page 97


 4039              		.loc 1 803 12 view .LVU958
 4040 0502 2342     		tst	r3, r4
 4041 0504 05D0     		beq	.L318
 4042 0506 3A00     		movs	r2, r7
 4043 0508 3700     		movs	r7, r6
 4044              	.LVL439:
 4045              		.loc 1 803 12 view .LVU959
 4046 050a 4C46     		mov	r4, r9
 4047              	.LVL440:
 4048              		.loc 1 803 12 view .LVU960
 4049 050c A946     		mov	r9, r5
 4050 050e 5546     		mov	r5, r10
 4051              	.LVL441:
 4052              		.loc 1 803 12 view .LVU961
 4053 0510 20E0     		b	.L276
 4054              	.LVL442:
 4055              	.L318:
 4056              		.loc 1 803 12 view .LVU962
 4057 0512 3A00     		movs	r2, r7
 4058 0514 109B     		ldr	r3, [sp, #64]
 4059 0516 5F46     		mov	r7, fp
 4060              	.LVL443:
 4061              		.loc 1 803 12 view .LVU963
 4062 0518 B346     		mov	fp, r6
 4063              	.LVL444:
 4064              		.loc 1 803 12 view .LVU964
 4065 051a 2E00     		movs	r6, r5
 4066 051c 06E0     		b	.L273
 4067              	.LVL445:
 4068              	.L275:
 804:Core/Src/printf.c ****           while (l++ < width) {
 805:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 4069              		.loc 1 805 13 is_stmt 1 view .LVU965
 4070 051e 551C     		adds	r5, r2, #1
 4071              	.LVL446:
 4072              		.loc 1 805 13 is_stmt 0 view .LVU966
 4073 0520 4346     		mov	r3, r8
 4074 0522 3900     		movs	r1, r7
 4075 0524 2020     		movs	r0, #32
 4076 0526 B047     		blx	r6
 4077              	.LVL447:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4078              		.loc 1 804 19 view .LVU967
 4079 0528 2300     		movs	r3, r4
 4080              		.loc 1 805 13 view .LVU968
 4081 052a 2A00     		movs	r2, r5
 4082              	.LVL448:
 4083              	.L273:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4084              		.loc 1 804 17 is_stmt 1 view .LVU969
 804:Core/Src/printf.c ****           while (l++ < width) {
 4085              		.loc 1 804 19 is_stmt 0 view .LVU970
 4086 052c 5C1C     		adds	r4, r3, #1
 4087              	.LVL449:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4088              		.loc 1 804 17 view .LVU971
 4089 052e 0A99     		ldr	r1, [sp, #40]
ARM GAS  /tmp/cca6dLeK.s 			page 98


 4090 0530 9942     		cmp	r1, r3
 4091 0532 F4D8     		bhi	.L275
 804:Core/Src/printf.c ****           while (l++ < width) {
 4092              		.loc 1 804 19 view .LVU972
 4093 0534 3500     		movs	r5, r6
 4094 0536 5E46     		mov	r6, fp
 4095              	.LVL450:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4096              		.loc 1 804 19 view .LVU973
 4097 0538 BB46     		mov	fp, r7
 4098 053a 1094     		str	r4, [sp, #64]
 4099 053c 3700     		movs	r7, r6
 4100              	.LVL451:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4101              		.loc 1 804 19 view .LVU974
 4102 053e 4C46     		mov	r4, r9
 4103              	.LVL452:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4104              		.loc 1 804 19 view .LVU975
 4105 0540 A946     		mov	r9, r5
 4106 0542 5546     		mov	r5, r10
 4107              	.LVL453:
 804:Core/Src/printf.c ****           while (l++ < width) {
 4108              		.loc 1 804 19 view .LVU976
 4109 0544 06E0     		b	.L276
 4110              	.LVL454:
 4111              	.L296:
 806:Core/Src/printf.c ****           }
 807:Core/Src/printf.c ****         }
 808:Core/Src/printf.c ****         // string output
 809:Core/Src/printf.c ****         while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 4112              		.loc 1 809 69 view .LVU977
 4113 0546 1D00     		movs	r5, r3
 4114              	.LVL455:
 4115              	.L278:
 810:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 4116              		.loc 1 810 11 is_stmt 1 view .LVU978
 4117              		.loc 1 810 18 is_stmt 0 view .LVU979
 4118 0548 0134     		adds	r4, r4, #1
 4119              	.LVL456:
 4120              		.loc 1 810 11 view .LVU980
 4121 054a 561C     		adds	r6, r2, #1
 4122              	.LVL457:
 4123              		.loc 1 810 11 view .LVU981
 4124 054c 4346     		mov	r3, r8
 4125 054e 5946     		mov	r1, fp
 4126 0550 C847     		blx	r9
 4127              	.LVL458:
 4128 0552 3200     		movs	r2, r6
 4129              	.LVL459:
 4130              	.L276:
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 4131              		.loc 1 809 15 is_stmt 1 view .LVU982
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 4132              		.loc 1 809 17 is_stmt 0 view .LVU983
 4133 0554 2078     		ldrb	r0, [r4]
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
ARM GAS  /tmp/cca6dLeK.s 			page 99


 4134              		.loc 1 809 15 view .LVU984
 4135 0556 0028     		cmp	r0, #0
 4136 0558 04D0     		beq	.L277
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 4137              		.loc 1 809 26 discriminator 1 view .LVU985
 4138 055a 002F     		cmp	r7, #0
 4139 055c F4D0     		beq	.L278
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 4140              		.loc 1 809 69 discriminator 2 view .LVU986
 4141 055e 6B1E     		subs	r3, r5, #1
 4142              	.LVL460:
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 4143              		.loc 1 809 57 discriminator 2 view .LVU987
 4144 0560 002D     		cmp	r5, #0
 4145 0562 F0D1     		bne	.L296
 4146              	.LVL461:
 4147              	.L277:
 811:Core/Src/printf.c ****         }
 812:Core/Src/printf.c ****         // post padding
 813:Core/Src/printf.c ****         if (flags & FLAGS_LEFT) {
 4148              		.loc 1 813 12 view .LVU988
 4149 0564 1700     		movs	r7, r2
 4150 0566 4D46     		mov	r5, r9
 4151              		.loc 1 813 9 is_stmt 1 view .LVU989
 4152              		.loc 1 813 12 is_stmt 0 view .LVU990
 4153 0568 0B9B     		ldr	r3, [sp, #44]
 4154 056a 002B     		cmp	r3, #0
 4155 056c 03D1     		bne	.L319
 4156              	.LVL462:
 4157              	.L280:
 814:Core/Src/printf.c ****           while (l++ < width) {
 815:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 816:Core/Src/printf.c ****           }
 817:Core/Src/printf.c ****         }
 818:Core/Src/printf.c ****         format++;
 4158              		.loc 1 818 9 is_stmt 1 view .LVU991
 4159              		.loc 1 818 15 is_stmt 0 view .LVU992
 4160 056e 119B     		ldr	r3, [sp, #68]
 4161 0570 0133     		adds	r3, r3, #1
 4162 0572 1193     		str	r3, [sp, #68]
 819:Core/Src/printf.c ****         break;
 4163              		.loc 1 819 9 is_stmt 1 view .LVU993
 4164 0574 54E5     		b	.L282
 4165              	.LVL463:
 4166              	.L319:
 4167              		.loc 1 819 9 is_stmt 0 view .LVU994
 4168 0576 0A9F     		ldr	r7, [sp, #40]
 4169 0578 109B     		ldr	r3, [sp, #64]
 4170 057a 06E0     		b	.L279
 4171              	.LVL464:
 4172              	.L281:
 815:Core/Src/printf.c ****           }
 4173              		.loc 1 815 13 is_stmt 1 view .LVU995
 4174 057c 561C     		adds	r6, r2, #1
 4175              	.LVL465:
 815:Core/Src/printf.c ****           }
 4176              		.loc 1 815 13 is_stmt 0 view .LVU996
ARM GAS  /tmp/cca6dLeK.s 			page 100


 4177 057e 4346     		mov	r3, r8
 4178 0580 5946     		mov	r1, fp
 4179 0582 2020     		movs	r0, #32
 4180 0584 A847     		blx	r5
 4181              	.LVL466:
 814:Core/Src/printf.c ****           while (l++ < width) {
 4182              		.loc 1 814 19 view .LVU997
 4183 0586 2300     		movs	r3, r4
 815:Core/Src/printf.c ****           }
 4184              		.loc 1 815 13 view .LVU998
 4185 0588 3200     		movs	r2, r6
 4186              	.LVL467:
 4187              	.L279:
 814:Core/Src/printf.c ****           while (l++ < width) {
 4188              		.loc 1 814 17 is_stmt 1 view .LVU999
 814:Core/Src/printf.c ****           while (l++ < width) {
 4189              		.loc 1 814 19 is_stmt 0 view .LVU1000
 4190 058a 5C1C     		adds	r4, r3, #1
 4191              	.LVL468:
 814:Core/Src/printf.c ****           while (l++ < width) {
 4192              		.loc 1 814 17 view .LVU1001
 4193 058c 9F42     		cmp	r7, r3
 4194 058e F5D8     		bhi	.L281
 814:Core/Src/printf.c ****           while (l++ < width) {
 4195              		.loc 1 814 17 view .LVU1002
 4196 0590 1700     		movs	r7, r2
 4197 0592 ECE7     		b	.L280
 4198              	.LVL469:
 4199              	.L233:
 814:Core/Src/printf.c ****           while (l++ < width) {
 4200              		.loc 1 814 17 view .LVU1003
 4201              	.LBE45:
 4202              	.LBB48:
 820:Core/Src/printf.c ****       }
 821:Core/Src/printf.c **** 
 822:Core/Src/printf.c ****       case 'p' : {
 823:Core/Src/printf.c ****         width = sizeof(void*) * 2U;
 4203              		.loc 1 823 9 is_stmt 1 view .LVU1004
 824:Core/Src/printf.c ****         flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 4204              		.loc 1 824 9 view .LVU1005
 4205              		.loc 1 824 15 is_stmt 0 view .LVU1006
 4206 0594 2123     		movs	r3, #33
 4207 0596 1C43     		orrs	r4, r3
 4208              	.LVL470:
 825:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 826:Core/Src/printf.c ****         const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 4209              		.loc 1 826 9 is_stmt 1 view .LVU1007
 827:Core/Src/printf.c ****         if (is_ll) {
 4210              		.loc 1 827 9 view .LVU1008
 828:Core/Src/printf.c ****           idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U,
 829:Core/Src/printf.c ****         }
 830:Core/Src/printf.c ****         else {
 831:Core/Src/printf.c **** #endif
 832:Core/Src/printf.c ****           idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)),
 4211              		.loc 1 832 11 view .LVU1009
 4212              		.loc 1 832 81 is_stmt 0 view .LVU1010
 4213 0598 1C9B     		ldr	r3, [sp, #112]
ARM GAS  /tmp/cca6dLeK.s 			page 101


 4214 059a 1A1D     		adds	r2, r3, #4
 4215 059c 1C92     		str	r2, [sp, #112]
 4216 059e 1B68     		ldr	r3, [r3]
 4217 05a0 0093     		str	r3, [sp]
 4218              		.loc 1 832 17 view .LVU1011
 4219 05a2 0594     		str	r4, [sp, #20]
 4220 05a4 0823     		movs	r3, #8
 4221 05a6 0493     		str	r3, [sp, #16]
 4222 05a8 5346     		mov	r3, r10
 4223 05aa 0393     		str	r3, [sp, #12]
 4224 05ac 1023     		movs	r3, #16
 4225 05ae 0293     		str	r3, [sp, #8]
 4226 05b0 0023     		movs	r3, #0
 4227 05b2 0193     		str	r3, [sp, #4]
 4228 05b4 4346     		mov	r3, r8
 4229 05b6 3A00     		movs	r2, r7
 4230 05b8 5946     		mov	r1, fp
 4231 05ba 2800     		movs	r0, r5
 4232 05bc FFF7FEFF 		bl	_ntoa_long
 4233              	.LVL471:
 4234 05c0 0700     		movs	r7, r0
 4235              	.LVL472:
 833:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 834:Core/Src/printf.c ****         }
 835:Core/Src/printf.c **** #endif
 836:Core/Src/printf.c ****         format++;
 4236              		.loc 1 836 9 is_stmt 1 view .LVU1012
 4237              		.loc 1 836 15 is_stmt 0 view .LVU1013
 4238 05c2 119B     		ldr	r3, [sp, #68]
 4239 05c4 0133     		adds	r3, r3, #1
 4240 05c6 1193     		str	r3, [sp, #68]
 837:Core/Src/printf.c ****         break;
 4241              		.loc 1 837 9 is_stmt 1 view .LVU1014
 4242 05c8 2AE5     		b	.L282
 4243              	.LVL473:
 4244              	.L237:
 4245              		.loc 1 837 9 is_stmt 0 view .LVU1015
 4246              	.LBE48:
 838:Core/Src/printf.c ****       }
 839:Core/Src/printf.c **** 
 840:Core/Src/printf.c ****       case '%' :
 841:Core/Src/printf.c ****         out('%', buffer, idx++, maxlen);
 4247              		.loc 1 841 9 is_stmt 1 view .LVU1016
 4248 05ca 7C1C     		adds	r4, r7, #1
 4249              	.LVL474:
 4250              		.loc 1 841 9 is_stmt 0 view .LVU1017
 4251 05cc 4346     		mov	r3, r8
 4252 05ce 3A00     		movs	r2, r7
 4253 05d0 5946     		mov	r1, fp
 4254 05d2 2520     		movs	r0, #37
 4255 05d4 A847     		blx	r5
 4256              	.LVL475:
 842:Core/Src/printf.c ****         format++;
 4257              		.loc 1 842 9 is_stmt 1 view .LVU1018
 4258              		.loc 1 842 15 is_stmt 0 view .LVU1019
 4259 05d6 119B     		ldr	r3, [sp, #68]
 4260 05d8 0133     		adds	r3, r3, #1
ARM GAS  /tmp/cca6dLeK.s 			page 102


 4261 05da 1193     		str	r3, [sp, #68]
 843:Core/Src/printf.c ****         break;
 4262              		.loc 1 843 9 is_stmt 1 view .LVU1020
 841:Core/Src/printf.c ****         format++;
 4263              		.loc 1 841 9 is_stmt 0 view .LVU1021
 4264 05dc 2700     		movs	r7, r4
 4265              		.loc 1 843 9 view .LVU1022
 4266 05de 1FE5     		b	.L282
 4267              	.LVL476:
 4268              	.L229:
 844:Core/Src/printf.c **** 
 845:Core/Src/printf.c ****       default :
 846:Core/Src/printf.c ****         out(*format, buffer, idx++, maxlen);
 4269              		.loc 1 846 9 is_stmt 1 view .LVU1023
 4270 05e0 7C1C     		adds	r4, r7, #1
 4271              	.LVL477:
 4272              		.loc 1 846 9 is_stmt 0 view .LVU1024
 4273 05e2 4346     		mov	r3, r8
 4274 05e4 3A00     		movs	r2, r7
 4275 05e6 5946     		mov	r1, fp
 4276 05e8 A847     		blx	r5
 4277              	.LVL478:
 847:Core/Src/printf.c ****         format++;
 4278              		.loc 1 847 9 is_stmt 1 view .LVU1025
 4279              		.loc 1 847 15 is_stmt 0 view .LVU1026
 4280 05ea 119B     		ldr	r3, [sp, #68]
 4281 05ec 0133     		adds	r3, r3, #1
 4282 05ee 1193     		str	r3, [sp, #68]
 848:Core/Src/printf.c ****         break;
 4283              		.loc 1 848 9 is_stmt 1 view .LVU1027
 846:Core/Src/printf.c ****         format++;
 4284              		.loc 1 846 9 is_stmt 0 view .LVU1028
 4285 05f0 2700     		movs	r7, r4
 4286              		.loc 1 848 9 view .LVU1029
 4287 05f2 15E5     		b	.L282
 4288              	.LVL479:
 4289              	.L300:
 584:Core/Src/printf.c ****   }
 4290              		.loc 1 584 9 view .LVU1030
 4291 05f4 0A4B     		ldr	r3, .L322
 4292              	.LVL480:
 584:Core/Src/printf.c ****   }
 4293              		.loc 1 584 9 view .LVU1031
 4294 05f6 9A46     		mov	r10, r3
 4295 05f8 10E5     		b	.L201
 4296              	.LVL481:
 4297              	.L301:
 849:Core/Src/printf.c ****     }
 850:Core/Src/printf.c ****   }
 851:Core/Src/printf.c **** 
 852:Core/Src/printf.c ****   // termination
 853:Core/Src/printf.c ****   out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 4298              		.loc 1 853 3 view .LVU1032
 4299 05fa AA46     		mov	r10, r5
 4300              		.loc 1 853 3 is_stmt 1 view .LVU1033
 4301 05fc 4745     		cmp	r7, r8
 4302 05fe 02D3     		bcc	.L297
ARM GAS  /tmp/cca6dLeK.s 			page 103


 4303              		.loc 1 853 3 is_stmt 0 discriminator 1 view .LVU1034
 4304 0600 4346     		mov	r3, r8
 4305 0602 5A1E     		subs	r2, r3, #1
 4306 0604 00E0     		b	.L284
 4307              	.L297:
 4308              		.loc 1 853 3 view .LVU1035
 4309 0606 3A00     		movs	r2, r7
 4310              	.L284:
 4311              		.loc 1 853 3 discriminator 4 view .LVU1036
 4312 0608 4346     		mov	r3, r8
 4313 060a 5946     		mov	r1, fp
 4314 060c 0020     		movs	r0, #0
 4315 060e D047     		blx	r10
 4316              	.LVL482:
 854:Core/Src/printf.c **** 
 855:Core/Src/printf.c ****   // return written chars without terminating \0
 856:Core/Src/printf.c ****   return (int)idx;
 4317              		.loc 1 856 3 is_stmt 1 discriminator 4 view .LVU1037
 857:Core/Src/printf.c **** }
 4318              		.loc 1 857 1 is_stmt 0 discriminator 4 view .LVU1038
 4319 0610 3800     		movs	r0, r7
 4320 0612 13B0     		add	sp, sp, #76
 4321              		@ sp needed
 4322              	.LVL483:
 4323              	.LVL484:
 4324              	.LVL485:
 4325              	.LVL486:
 4326              	.LVL487:
 4327              		.loc 1 857 1 discriminator 4 view .LVU1039
 4328 0614 F0BC     		pop	{r4, r5, r6, r7}
 4329 0616 BB46     		mov	fp, r7
 4330 0618 B246     		mov	r10, r6
 4331 061a A946     		mov	r9, r5
 4332 061c A046     		mov	r8, r4
 4333 061e F0BD     		pop	{r4, r5, r6, r7, pc}
 4334              	.L323:
 4335              		.align	2
 4336              	.L322:
 4337 0620 00000000 		.word	_out_null
 4338              		.cfi_endproc
 4339              	.LFE13:
 4341              		.section	.text.printf_,"ax",%progbits
 4342              		.align	1
 4343              		.global	printf_
 4344              		.syntax unified
 4345              		.code	16
 4346              		.thumb_func
 4347              		.fpu softvfp
 4349              	printf_:
 4350              	.LVL488:
 4351              	.LFB14:
 858:Core/Src/printf.c **** 
 859:Core/Src/printf.c **** 
 860:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
 861:Core/Src/printf.c **** 
 862:Core/Src/printf.c **** int printf_(const char* format, ...)
 863:Core/Src/printf.c **** {
ARM GAS  /tmp/cca6dLeK.s 			page 104


 4352              		.loc 1 863 1 is_stmt 1 view -0
 4353              		.cfi_startproc
 4354              		@ args = 4, pretend = 16, frame = 8
 4355              		@ frame_needed = 0, uses_anonymous_args = 1
 4356              		.loc 1 863 1 is_stmt 0 view .LVU1041
 4357 0000 0FB4     		push	{r0, r1, r2, r3}
 4358              	.LCFI22:
 4359              		.cfi_def_cfa_offset 16
 4360 0002 00B5     		push	{lr}
 4361              	.LCFI23:
 4362              		.cfi_def_cfa_offset 20
 4363              		.cfi_offset 14, -20
 4364 0004 85B0     		sub	sp, sp, #20
 4365              	.LCFI24:
 4366              		.cfi_def_cfa_offset 40
 4367 0006 06A9     		add	r1, sp, #24
 4368 0008 08C9     		ldmia	r1!, {r3}
 864:Core/Src/printf.c ****   va_list va;
 4369              		.loc 1 864 3 is_stmt 1 view .LVU1042
 865:Core/Src/printf.c ****   va_start(va, format);
 4370              		.loc 1 865 3 view .LVU1043
 4371 000a 0391     		str	r1, [sp, #12]
 866:Core/Src/printf.c ****   char buffer[1];
 4372              		.loc 1 866 3 view .LVU1044
 867:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 4373              		.loc 1 867 3 view .LVU1045
 4374              		.loc 1 867 19 is_stmt 0 view .LVU1046
 4375 000c 0122     		movs	r2, #1
 4376 000e 0091     		str	r1, [sp]
 4377 0010 5242     		rsbs	r2, r2, #0
 4378 0012 02A9     		add	r1, sp, #8
 4379 0014 0348     		ldr	r0, .L325
 4380 0016 FFF7FEFF 		bl	_vsnprintf
 4381              	.LVL489:
 868:Core/Src/printf.c ****   va_end(va);
 4382              		.loc 1 868 3 is_stmt 1 view .LVU1047
 869:Core/Src/printf.c ****   return ret;
 4383              		.loc 1 869 3 view .LVU1048
 870:Core/Src/printf.c **** }
 4384              		.loc 1 870 1 is_stmt 0 view .LVU1049
 4385 001a 05B0     		add	sp, sp, #20
 4386              		@ sp needed
 4387 001c 08BC     		pop	{r3}
 4388 001e 04B0     		add	sp, sp, #16
 4389 0020 1847     		bx	r3
 4390              	.L326:
 4391 0022 C046     		.align	2
 4392              	.L325:
 4393 0024 00000000 		.word	_out_char
 4394              		.cfi_endproc
 4395              	.LFE14:
 4397              		.section	.text.sprintf_,"ax",%progbits
 4398              		.align	1
 4399              		.global	sprintf_
 4400              		.syntax unified
 4401              		.code	16
 4402              		.thumb_func
ARM GAS  /tmp/cca6dLeK.s 			page 105


 4403              		.fpu softvfp
 4405              	sprintf_:
 4406              	.LVL490:
 4407              	.LFB15:
 871:Core/Src/printf.c **** 
 872:Core/Src/printf.c **** 
 873:Core/Src/printf.c **** int sprintf_(char* buffer, const char* format, ...)
 874:Core/Src/printf.c **** {
 4408              		.loc 1 874 1 is_stmt 1 view -0
 4409              		.cfi_startproc
 4410              		@ args = 4, pretend = 12, frame = 8
 4411              		@ frame_needed = 0, uses_anonymous_args = 1
 4412              		.loc 1 874 1 is_stmt 0 view .LVU1051
 4413 0000 0EB4     		push	{r1, r2, r3}
 4414              	.LCFI25:
 4415              		.cfi_def_cfa_offset 12
 4416 0002 10B5     		push	{r4, lr}
 4417              	.LCFI26:
 4418              		.cfi_def_cfa_offset 20
 4419              		.cfi_offset 4, -20
 4420              		.cfi_offset 14, -16
 4421 0004 85B0     		sub	sp, sp, #20
 4422              	.LCFI27:
 4423              		.cfi_def_cfa_offset 40
 4424 0006 0100     		movs	r1, r0
 4425 0008 07AC     		add	r4, sp, #28
 4426 000a 08CC     		ldmia	r4!, {r3}
 875:Core/Src/printf.c ****   va_list va;
 4427              		.loc 1 875 3 is_stmt 1 view .LVU1052
 876:Core/Src/printf.c ****   va_start(va, format);
 4428              		.loc 1 876 3 view .LVU1053
 4429 000c 0394     		str	r4, [sp, #12]
 877:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 4430              		.loc 1 877 3 view .LVU1054
 4431              		.loc 1 877 19 is_stmt 0 view .LVU1055
 4432 000e 0122     		movs	r2, #1
 4433 0010 0094     		str	r4, [sp]
 4434 0012 5242     		rsbs	r2, r2, #0
 4435 0014 0348     		ldr	r0, .L328
 4436              	.LVL491:
 4437              		.loc 1 877 19 view .LVU1056
 4438 0016 FFF7FEFF 		bl	_vsnprintf
 4439              	.LVL492:
 878:Core/Src/printf.c ****   va_end(va);
 4440              		.loc 1 878 3 is_stmt 1 view .LVU1057
 879:Core/Src/printf.c ****   return ret;
 4441              		.loc 1 879 3 view .LVU1058
 880:Core/Src/printf.c **** }
 4442              		.loc 1 880 1 is_stmt 0 view .LVU1059
 4443 001a 05B0     		add	sp, sp, #20
 4444              		@ sp needed
 4445 001c 10BC     		pop	{r4}
 4446 001e 08BC     		pop	{r3}
 4447 0020 03B0     		add	sp, sp, #12
 4448 0022 1847     		bx	r3
 4449              	.L329:
 4450              		.align	2
ARM GAS  /tmp/cca6dLeK.s 			page 106


 4451              	.L328:
 4452 0024 00000000 		.word	_out_buffer
 4453              		.cfi_endproc
 4454              	.LFE15:
 4456              		.section	.text.snprintf_,"ax",%progbits
 4457              		.align	1
 4458              		.global	snprintf_
 4459              		.syntax unified
 4460              		.code	16
 4461              		.thumb_func
 4462              		.fpu softvfp
 4464              	snprintf_:
 4465              	.LVL493:
 4466              	.LFB16:
 881:Core/Src/printf.c **** 
 882:Core/Src/printf.c **** 
 883:Core/Src/printf.c **** int snprintf_(char* buffer, size_t count, const char* format, ...)
 884:Core/Src/printf.c **** {
 4467              		.loc 1 884 1 is_stmt 1 view -0
 4468              		.cfi_startproc
 4469              		@ args = 4, pretend = 8, frame = 8
 4470              		@ frame_needed = 0, uses_anonymous_args = 1
 4471              		.loc 1 884 1 is_stmt 0 view .LVU1061
 4472 0000 0CB4     		push	{r2, r3}
 4473              	.LCFI28:
 4474              		.cfi_def_cfa_offset 8
 4475 0002 10B5     		push	{r4, lr}
 4476              	.LCFI29:
 4477              		.cfi_def_cfa_offset 16
 4478              		.cfi_offset 4, -16
 4479              		.cfi_offset 14, -12
 4480 0004 84B0     		sub	sp, sp, #16
 4481              	.LCFI30:
 4482              		.cfi_def_cfa_offset 32
 4483 0006 0A00     		movs	r2, r1
 4484 0008 06AC     		add	r4, sp, #24
 4485 000a 08CC     		ldmia	r4!, {r3}
 885:Core/Src/printf.c ****   va_list va;
 4486              		.loc 1 885 3 is_stmt 1 view .LVU1062
 886:Core/Src/printf.c ****   va_start(va, format);
 4487              		.loc 1 886 3 view .LVU1063
 4488 000c 0394     		str	r4, [sp, #12]
 887:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 4489              		.loc 1 887 3 view .LVU1064
 4490              		.loc 1 887 19 is_stmt 0 view .LVU1065
 4491 000e 0094     		str	r4, [sp]
 4492 0010 0100     		movs	r1, r0
 4493              	.LVL494:
 4494              		.loc 1 887 19 view .LVU1066
 4495 0012 0448     		ldr	r0, .L331
 4496              	.LVL495:
 4497              		.loc 1 887 19 view .LVU1067
 4498 0014 FFF7FEFF 		bl	_vsnprintf
 4499              	.LVL496:
 888:Core/Src/printf.c ****   va_end(va);
 4500              		.loc 1 888 3 is_stmt 1 view .LVU1068
 889:Core/Src/printf.c ****   return ret;
ARM GAS  /tmp/cca6dLeK.s 			page 107


 4501              		.loc 1 889 3 view .LVU1069
 890:Core/Src/printf.c **** }
 4502              		.loc 1 890 1 is_stmt 0 view .LVU1070
 4503 0018 04B0     		add	sp, sp, #16
 4504              		@ sp needed
 4505 001a 10BC     		pop	{r4}
 4506 001c 08BC     		pop	{r3}
 4507 001e 02B0     		add	sp, sp, #8
 4508 0020 1847     		bx	r3
 4509              	.L332:
 4510 0022 C046     		.align	2
 4511              	.L331:
 4512 0024 00000000 		.word	_out_buffer
 4513              		.cfi_endproc
 4514              	.LFE16:
 4516              		.section	.text.vprintf_,"ax",%progbits
 4517              		.align	1
 4518              		.global	vprintf_
 4519              		.syntax unified
 4520              		.code	16
 4521              		.thumb_func
 4522              		.fpu softvfp
 4524              	vprintf_:
 4525              	.LVL497:
 4526              	.LFB17:
 891:Core/Src/printf.c **** 
 892:Core/Src/printf.c **** 
 893:Core/Src/printf.c **** int vprintf_(const char* format, va_list va)
 894:Core/Src/printf.c **** {
 4527              		.loc 1 894 1 is_stmt 1 view -0
 4528              		.cfi_startproc
 4529              		@ args = 0, pretend = 0, frame = 8
 4530              		@ frame_needed = 0, uses_anonymous_args = 0
 4531              		.loc 1 894 1 is_stmt 0 view .LVU1072
 4532 0000 00B5     		push	{lr}
 4533              	.LCFI31:
 4534              		.cfi_def_cfa_offset 4
 4535              		.cfi_offset 14, -4
 4536 0002 85B0     		sub	sp, sp, #20
 4537              	.LCFI32:
 4538              		.cfi_def_cfa_offset 24
 4539 0004 0300     		movs	r3, r0
 895:Core/Src/printf.c ****   char buffer[1];
 4540              		.loc 1 895 3 is_stmt 1 view .LVU1073
 896:Core/Src/printf.c ****   return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 4541              		.loc 1 896 3 view .LVU1074
 4542              		.loc 1 896 10 is_stmt 0 view .LVU1075
 4543 0006 0122     		movs	r2, #1
 4544 0008 0091     		str	r1, [sp]
 4545 000a 5242     		rsbs	r2, r2, #0
 4546 000c 03A9     		add	r1, sp, #12
 4547              	.LVL498:
 4548              		.loc 1 896 10 view .LVU1076
 4549 000e 0248     		ldr	r0, .L334
 4550              	.LVL499:
 4551              		.loc 1 896 10 view .LVU1077
 4552 0010 FFF7FEFF 		bl	_vsnprintf
ARM GAS  /tmp/cca6dLeK.s 			page 108


 4553              	.LVL500:
 897:Core/Src/printf.c **** }
 4554              		.loc 1 897 1 view .LVU1078
 4555 0014 05B0     		add	sp, sp, #20
 4556              		@ sp needed
 4557 0016 00BD     		pop	{pc}
 4558              	.L335:
 4559              		.align	2
 4560              	.L334:
 4561 0018 00000000 		.word	_out_char
 4562              		.cfi_endproc
 4563              	.LFE17:
 4565              		.section	.text.vsnprintf_,"ax",%progbits
 4566              		.align	1
 4567              		.global	vsnprintf_
 4568              		.syntax unified
 4569              		.code	16
 4570              		.thumb_func
 4571              		.fpu softvfp
 4573              	vsnprintf_:
 4574              	.LVL501:
 4575              	.LFB18:
 898:Core/Src/printf.c **** 
 899:Core/Src/printf.c **** 
 900:Core/Src/printf.c **** int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
 901:Core/Src/printf.c **** {
 4576              		.loc 1 901 1 is_stmt 1 view -0
 4577              		.cfi_startproc
 4578              		@ args = 0, pretend = 0, frame = 0
 4579              		@ frame_needed = 0, uses_anonymous_args = 0
 4580              		.loc 1 901 1 is_stmt 0 view .LVU1080
 4581 0000 00B5     		push	{lr}
 4582              	.LCFI33:
 4583              		.cfi_def_cfa_offset 4
 4584              		.cfi_offset 14, -4
 4585 0002 83B0     		sub	sp, sp, #12
 4586              	.LCFI34:
 4587              		.cfi_def_cfa_offset 16
 902:Core/Src/printf.c ****   return _vsnprintf(_out_buffer, buffer, count, format, va);
 4588              		.loc 1 902 3 is_stmt 1 view .LVU1081
 4589              		.loc 1 902 10 is_stmt 0 view .LVU1082
 4590 0004 0093     		str	r3, [sp]
 4591 0006 1300     		movs	r3, r2
 4592              	.LVL502:
 4593              		.loc 1 902 10 view .LVU1083
 4594 0008 0A00     		movs	r2, r1
 4595              	.LVL503:
 4596              		.loc 1 902 10 view .LVU1084
 4597 000a 0100     		movs	r1, r0
 4598              	.LVL504:
 4599              		.loc 1 902 10 view .LVU1085
 4600 000c 0248     		ldr	r0, .L337
 4601              	.LVL505:
 4602              		.loc 1 902 10 view .LVU1086
 4603 000e FFF7FEFF 		bl	_vsnprintf
 4604              	.LVL506:
 903:Core/Src/printf.c **** }
ARM GAS  /tmp/cca6dLeK.s 			page 109


 4605              		.loc 1 903 1 view .LVU1087
 4606 0012 03B0     		add	sp, sp, #12
 4607              		@ sp needed
 4608 0014 00BD     		pop	{pc}
 4609              	.L338:
 4610 0016 C046     		.align	2
 4611              	.L337:
 4612 0018 00000000 		.word	_out_buffer
 4613              		.cfi_endproc
 4614              	.LFE18:
 4616              		.section	.text.fctprintf,"ax",%progbits
 4617              		.align	1
 4618              		.global	fctprintf
 4619              		.syntax unified
 4620              		.code	16
 4621              		.thumb_func
 4622              		.fpu softvfp
 4624              	fctprintf:
 4625              	.LVL507:
 4626              	.LFB19:
 904:Core/Src/printf.c **** 
 905:Core/Src/printf.c **** 
 906:Core/Src/printf.c **** int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
 907:Core/Src/printf.c **** {
 4627              		.loc 1 907 1 is_stmt 1 view -0
 4628              		.cfi_startproc
 4629              		@ args = 4, pretend = 8, frame = 16
 4630              		@ frame_needed = 0, uses_anonymous_args = 1
 4631              		.loc 1 907 1 is_stmt 0 view .LVU1089
 4632 0000 0CB4     		push	{r2, r3}
 4633              	.LCFI35:
 4634              		.cfi_def_cfa_offset 8
 4635 0002 10B5     		push	{r4, lr}
 4636              	.LCFI36:
 4637              		.cfi_def_cfa_offset 16
 4638              		.cfi_offset 4, -16
 4639              		.cfi_offset 14, -12
 4640 0004 86B0     		sub	sp, sp, #24
 4641              	.LCFI37:
 4642              		.cfi_def_cfa_offset 40
 4643 0006 08AC     		add	r4, sp, #32
 4644 0008 08CC     		ldmia	r4!, {r3}
 908:Core/Src/printf.c ****   va_list va;
 4645              		.loc 1 908 3 is_stmt 1 view .LVU1090
 909:Core/Src/printf.c ****   va_start(va, format);
 4646              		.loc 1 909 3 view .LVU1091
 4647 000a 0594     		str	r4, [sp, #20]
 910:Core/Src/printf.c ****   const out_fct_wrap_type out_fct_wrap = { out, arg };
 4648              		.loc 1 910 3 view .LVU1092
 4649              		.loc 1 910 27 is_stmt 0 view .LVU1093
 4650 000c 0390     		str	r0, [sp, #12]
 4651 000e 0491     		str	r1, [sp, #16]
 911:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 4652              		.loc 1 911 3 is_stmt 1 view .LVU1094
 4653              		.loc 1 911 19 is_stmt 0 view .LVU1095
 4654 0010 0122     		movs	r2, #1
 4655 0012 0094     		str	r4, [sp]
ARM GAS  /tmp/cca6dLeK.s 			page 110


 4656 0014 5242     		rsbs	r2, r2, #0
 4657 0016 03A9     		add	r1, sp, #12
 4658 0018 0348     		ldr	r0, .L340
 4659              	.LVL508:
 4660              		.loc 1 911 19 view .LVU1096
 4661 001a FFF7FEFF 		bl	_vsnprintf
 4662              	.LVL509:
 912:Core/Src/printf.c ****   va_end(va);
 4663              		.loc 1 912 3 is_stmt 1 view .LVU1097
 913:Core/Src/printf.c ****   return ret;
 4664              		.loc 1 913 3 view .LVU1098
 914:Core/Src/printf.c **** }
 4665              		.loc 1 914 1 is_stmt 0 view .LVU1099
 4666 001e 06B0     		add	sp, sp, #24
 4667              		@ sp needed
 4668 0020 10BC     		pop	{r4}
 4669 0022 08BC     		pop	{r3}
 4670 0024 02B0     		add	sp, sp, #8
 4671 0026 1847     		bx	r3
 4672              	.L341:
 4673              		.align	2
 4674              	.L340:
 4675 0028 00000000 		.word	_out_fct
 4676              		.cfi_endproc
 4677              	.LFE19:
 4679              		.section	.text._putchar,"ax",%progbits
 4680              		.align	1
 4681              		.global	_putchar
 4682              		.syntax unified
 4683              		.code	16
 4684              		.thumb_func
 4685              		.fpu softvfp
 4687              	_putchar:
 4688              	.LVL510:
 4689              	.LFB20:
 915:Core/Src/printf.c **** 
 916:Core/Src/printf.c **** // self defined _putchar
 917:Core/Src/printf.c **** void _putchar(char character){
 4690              		.loc 1 917 30 is_stmt 1 view -0
 4691              		.cfi_startproc
 4692              		@ args = 0, pretend = 0, frame = 0
 4693              		@ frame_needed = 0, uses_anonymous_args = 0
 4694              		@ link register save eliminated.
 918:Core/Src/printf.c ****   return;
 4695              		.loc 1 918 3 view .LVU1101
 919:Core/Src/printf.c **** }...
 4696              		.loc 1 919 1 is_stmt 0 view .LVU1102
 4697              		@ sp needed
 4698 0000 7047     		bx	lr
 4699              		.cfi_endproc
 4700              	.LFE20:
 4702              		.section	.rodata.pow10.0,"a"
 4703              		.align	3
 4704              		.set	.LANCHOR0,. + 0
 4707              	pow10.0:
 4708 0000 00000000 		.word	0
 4709 0004 0000F03F 		.word	1072693248
ARM GAS  /tmp/cca6dLeK.s 			page 111


 4710 0008 00000000 		.word	0
 4711 000c 00002440 		.word	1076101120
 4712 0010 00000000 		.word	0
 4713 0014 00005940 		.word	1079574528
 4714 0018 00000000 		.word	0
 4715 001c 00408F40 		.word	1083129856
 4716 0020 00000000 		.word	0
 4717 0024 0088C340 		.word	1086556160
 4718 0028 00000000 		.word	0
 4719 002c 006AF840 		.word	1090021888
 4720 0030 00000000 		.word	0
 4721 0034 80842E41 		.word	1093567616
 4722 0038 00000000 		.word	0
 4723 003c D0126341 		.word	1097011920
 4724 0040 00000000 		.word	0
 4725 0044 84D79741 		.word	1100470148
 4726 0048 00000000 		.word	0
 4727 004c 65CDCD41 		.word	1104006501
 4728              		.text
 4729              	.Letext0:
 4730              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 4731              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4732              		.file 4 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4733              		.file 5 "<built-in>"
ARM GAS  /tmp/cca6dLeK.s 			page 112


DEFINED SYMBOLS
                            *ABS*:0000000000000000 printf.c
     /tmp/cca6dLeK.s:16     .text._out_buffer:0000000000000000 $t
     /tmp/cca6dLeK.s:23     .text._out_buffer:0000000000000000 _out_buffer
     /tmp/cca6dLeK.s:47     .text._out_null:0000000000000000 $t
     /tmp/cca6dLeK.s:53     .text._out_null:0000000000000000 _out_null
     /tmp/cca6dLeK.s:72     .text._out_char:0000000000000000 $t
     /tmp/cca6dLeK.s:78     .text._out_char:0000000000000000 _out_char
     /tmp/cca6dLeK.s:97     .text._out_fct:0000000000000000 $t
     /tmp/cca6dLeK.s:103    .text._out_fct:0000000000000000 _out_fct
     /tmp/cca6dLeK.s:140    .text._atoi:0000000000000000 $t
     /tmp/cca6dLeK.s:146    .text._atoi:0000000000000000 _atoi
     /tmp/cca6dLeK.s:215    .text._out_rev:0000000000000000 $t
     /tmp/cca6dLeK.s:221    .text._out_rev:0000000000000000 _out_rev
     /tmp/cca6dLeK.s:413    .text._ntoa_format:0000000000000000 $t
     /tmp/cca6dLeK.s:419    .text._ntoa_format:0000000000000000 _ntoa_format
     /tmp/cca6dLeK.s:729    .text._ntoa_long:0000000000000000 $t
     /tmp/cca6dLeK.s:735    .text._ntoa_long:0000000000000000 _ntoa_long
     /tmp/cca6dLeK.s:934    .text._ntoa_long_long:0000000000000000 $t
     /tmp/cca6dLeK.s:940    .text._ntoa_long_long:0000000000000000 _ntoa_long_long
     /tmp/cca6dLeK.s:1170   .text._etoa:0000000000000000 $t
     /tmp/cca6dLeK.s:1176   .text._etoa:0000000000000000 _etoa
     /tmp/cca6dLeK.s:1948   .text._ftoa:0000000000000000 _ftoa
     /tmp/cca6dLeK.s:1894   .text._etoa:0000000000000390 $d
     /tmp/cca6dLeK.s:1924   .rodata._ftoa.str1.4:0000000000000000 $d
     /tmp/cca6dLeK.s:1942   .text._ftoa:0000000000000000 $t
     /tmp/cca6dLeK.s:2646   .text._ftoa:0000000000000324 $d
     /tmp/cca6dLeK.s:2660   .text._vsnprintf:0000000000000000 $t
     /tmp/cca6dLeK.s:2666   .text._vsnprintf:0000000000000000 _vsnprintf
     /tmp/cca6dLeK.s:2779   .rodata._vsnprintf:0000000000000000 $d
     /tmp/cca6dLeK.s:3698   .text._vsnprintf:000000000000039c $d
     /tmp/cca6dLeK.s:3703   .text._vsnprintf:00000000000003a8 $t
     /tmp/cca6dLeK.s:4337   .text._vsnprintf:0000000000000620 $d
     /tmp/cca6dLeK.s:4342   .text.printf_:0000000000000000 $t
     /tmp/cca6dLeK.s:4349   .text.printf_:0000000000000000 printf_
     /tmp/cca6dLeK.s:4393   .text.printf_:0000000000000024 $d
     /tmp/cca6dLeK.s:4398   .text.sprintf_:0000000000000000 $t
     /tmp/cca6dLeK.s:4405   .text.sprintf_:0000000000000000 sprintf_
     /tmp/cca6dLeK.s:4452   .text.sprintf_:0000000000000024 $d
     /tmp/cca6dLeK.s:4457   .text.snprintf_:0000000000000000 $t
     /tmp/cca6dLeK.s:4464   .text.snprintf_:0000000000000000 snprintf_
     /tmp/cca6dLeK.s:4512   .text.snprintf_:0000000000000024 $d
     /tmp/cca6dLeK.s:4517   .text.vprintf_:0000000000000000 $t
     /tmp/cca6dLeK.s:4524   .text.vprintf_:0000000000000000 vprintf_
     /tmp/cca6dLeK.s:4561   .text.vprintf_:0000000000000018 $d
     /tmp/cca6dLeK.s:4566   .text.vsnprintf_:0000000000000000 $t
     /tmp/cca6dLeK.s:4573   .text.vsnprintf_:0000000000000000 vsnprintf_
     /tmp/cca6dLeK.s:4612   .text.vsnprintf_:0000000000000018 $d
     /tmp/cca6dLeK.s:4617   .text.fctprintf:0000000000000000 $t
     /tmp/cca6dLeK.s:4624   .text.fctprintf:0000000000000000 fctprintf
     /tmp/cca6dLeK.s:4675   .text.fctprintf:0000000000000028 $d
     /tmp/cca6dLeK.s:4680   .text._putchar:0000000000000000 $t
     /tmp/cca6dLeK.s:4687   .text._putchar:0000000000000000 _putchar
     /tmp/cca6dLeK.s:4703   .rodata.pow10.0:0000000000000000 $d
     /tmp/cca6dLeK.s:4707   .rodata.pow10.0:0000000000000000 pow10.0

UNDEFINED SYMBOLS
ARM GAS  /tmp/cca6dLeK.s 			page 113


__aeabi_uidivmod
__aeabi_uidiv
__aeabi_uldivmod
__aeabi_dcmpeq
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
__aeabi_d2iz
__aeabi_ddiv
__aeabi_dcmpge
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dcmple
__aeabi_idivmod
__aeabi_idiv

ARM GAS  /tmp/ccHlrfTi.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"FusionAhrs.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FusionAhrsReset,"ax",%progbits
  18              		.align	1
  19              		.global	FusionAhrsReset
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	FusionAhrsReset:
  27              	.LVL0:
  28              	.LFB22:
  29              		.file 1 "Core/Src/Fusion/FusionAhrs.c"
   1:Core/Src/Fusion/FusionAhrs.c **** /**
   2:Core/Src/Fusion/FusionAhrs.c ****  * @file FusionAhrs.c
   3:Core/Src/Fusion/FusionAhrs.c ****  * @author Seb Madgwick
   4:Core/Src/Fusion/FusionAhrs.c ****  * @brief AHRS algorithm to combine gyroscope, accelerometer, and magnetometer
   5:Core/Src/Fusion/FusionAhrs.c ****  * measurements into a single measurement of orientation relative to the Earth.
   6:Core/Src/Fusion/FusionAhrs.c ****  */
   7:Core/Src/Fusion/FusionAhrs.c **** 
   8:Core/Src/Fusion/FusionAhrs.c **** //------------------------------------------------------------------------------
   9:Core/Src/Fusion/FusionAhrs.c **** // Includes
  10:Core/Src/Fusion/FusionAhrs.c **** 
  11:Core/Src/Fusion/FusionAhrs.c **** #include <float.h> // FLT_MAX
  12:Core/Src/Fusion/FusionAhrs.c **** #include "FusionAhrs.h"
  13:Core/Src/Fusion/FusionAhrs.c **** #include "FusionCompass.h"
  14:Core/Src/Fusion/FusionAhrs.c **** #include <math.h> // atan2f, cosf, powf, sinf
  15:Core/Src/Fusion/FusionAhrs.c **** 
  16:Core/Src/Fusion/FusionAhrs.c **** //------------------------------------------------------------------------------
  17:Core/Src/Fusion/FusionAhrs.c **** // Definitions
  18:Core/Src/Fusion/FusionAhrs.c **** 
  19:Core/Src/Fusion/FusionAhrs.c **** /**
  20:Core/Src/Fusion/FusionAhrs.c ****  * @brief Initial gain used during the initialisation.
  21:Core/Src/Fusion/FusionAhrs.c ****  */
  22:Core/Src/Fusion/FusionAhrs.c **** #define INITIAL_GAIN (10.0f)
  23:Core/Src/Fusion/FusionAhrs.c **** 
  24:Core/Src/Fusion/FusionAhrs.c **** /**
  25:Core/Src/Fusion/FusionAhrs.c ****  * @brief Initialisation period in seconds.
  26:Core/Src/Fusion/FusionAhrs.c ****  */
  27:Core/Src/Fusion/FusionAhrs.c **** #define INITIALISATION_PERIOD (3.0f)
  28:Core/Src/Fusion/FusionAhrs.c **** 
  29:Core/Src/Fusion/FusionAhrs.c **** //------------------------------------------------------------------------------
ARM GAS  /tmp/ccHlrfTi.s 			page 2


  30:Core/Src/Fusion/FusionAhrs.c **** // Functions
  31:Core/Src/Fusion/FusionAhrs.c **** 
  32:Core/Src/Fusion/FusionAhrs.c **** /**
  33:Core/Src/Fusion/FusionAhrs.c ****  * @brief Initialises the AHRS algorithm structure.
  34:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  35:Core/Src/Fusion/FusionAhrs.c ****  */
  36:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  37:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsSettings settings = {
  38:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
  39:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejection = 90.0f,
  40:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejection = 90.0f,
  41:Core/Src/Fusion/FusionAhrs.c ****             .rejectionTimeout = 0,
  42:Core/Src/Fusion/FusionAhrs.c ****     };
  43:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsSetSettings(ahrs, &settings);
  44:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsReset(ahrs);
  45:Core/Src/Fusion/FusionAhrs.c **** }
  46:Core/Src/Fusion/FusionAhrs.c **** 
  47:Core/Src/Fusion/FusionAhrs.c **** /**
  48:Core/Src/Fusion/FusionAhrs.c ****  * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
  49:Core/Src/Fusion/FusionAhrs.c ****  * algorithm while maintaining the current settings.
  50:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  51:Core/Src/Fusion/FusionAhrs.c ****  */
  52:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsReset(FusionAhrs *const ahrs) {
  30              		.loc 1 52 46 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  53:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  35              		.loc 1 53 5 view .LVU1
  36              		.loc 1 53 22 is_stmt 0 view .LVU2
  37 0000 4FF07E53 		mov	r3, #1065353216
  38 0004 0361     		str	r3, [r0, #16]	@ float
  39 0006 0023     		movs	r3, #0
  40 0008 4361     		str	r3, [r0, #20]	@ float
  41 000a 8361     		str	r3, [r0, #24]	@ float
  42 000c C361     		str	r3, [r0, #28]	@ float
  54:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometer = FUSION_VECTOR_ZERO;
  43              		.loc 1 54 5 is_stmt 1 view .LVU3
  44              		.loc 1 54 25 is_stmt 0 view .LVU4
  45 000e 0362     		str	r3, [r0, #32]	@ float
  46 0010 4362     		str	r3, [r0, #36]	@ float
  47 0012 8362     		str	r3, [r0, #40]	@ float
  55:Core/Src/Fusion/FusionAhrs.c ****     ahrs->initialising = true;
  48              		.loc 1 55 5 is_stmt 1 view .LVU5
  49              		.loc 1 55 24 is_stmt 0 view .LVU6
  50 0014 0122     		movs	r2, #1
  51 0016 80F82C20 		strb	r2, [r0, #44]
  56:Core/Src/Fusion/FusionAhrs.c ****     ahrs->rampedGain = INITIAL_GAIN;
  52              		.loc 1 56 5 is_stmt 1 view .LVU7
  53              		.loc 1 56 22 is_stmt 0 view .LVU8
  54 001a 0A4A     		ldr	r2, .L2
  55 001c 0263     		str	r2, [r0, #48]	@ float
  57:Core/Src/Fusion/FusionAhrs.c ****     ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  56              		.loc 1 57 5 is_stmt 1 view .LVU9
  57              		.loc 1 57 37 is_stmt 0 view .LVU10
  58 001e 8363     		str	r3, [r0, #56]	@ float
ARM GAS  /tmp/ccHlrfTi.s 			page 3


  59 0020 C363     		str	r3, [r0, #60]	@ float
  60 0022 0364     		str	r3, [r0, #64]	@ float
  58:Core/Src/Fusion/FusionAhrs.c ****     ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  61              		.loc 1 58 5 is_stmt 1 view .LVU11
  62              		.loc 1 58 36 is_stmt 0 view .LVU12
  63 0024 4364     		str	r3, [r0, #68]	@ float
  64 0026 8364     		str	r3, [r0, #72]	@ float
  65 0028 C364     		str	r3, [r0, #76]	@ float
  59:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = false;
  66              		.loc 1 59 5 is_stmt 1 view .LVU13
  67              		.loc 1 59 32 is_stmt 0 view .LVU14
  68 002a 0023     		movs	r3, #0
  69 002c 80F85030 		strb	r3, [r0, #80]
  60:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerationRejectionTimer = 0;
  70              		.loc 1 60 5 is_stmt 1 view .LVU15
  71              		.loc 1 60 38 is_stmt 0 view .LVU16
  72 0030 4365     		str	r3, [r0, #84]
  61:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerationRejectionTimeout = false;
  73              		.loc 1 61 5 is_stmt 1 view .LVU17
  74              		.loc 1 61 40 is_stmt 0 view .LVU18
  75 0032 80F85830 		strb	r3, [r0, #88]
  62:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = false;
  76              		.loc 1 62 5 is_stmt 1 view .LVU19
  77              		.loc 1 62 31 is_stmt 0 view .LVU20
  78 0036 80F85930 		strb	r3, [r0, #89]
  63:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magneticRejectionTimer = 0;
  79              		.loc 1 63 5 is_stmt 1 view .LVU21
  80              		.loc 1 63 34 is_stmt 0 view .LVU22
  81 003a C365     		str	r3, [r0, #92]
  64:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magneticRejectionTimeout = false;
  82              		.loc 1 64 5 is_stmt 1 view .LVU23
  83              		.loc 1 64 36 is_stmt 0 view .LVU24
  84 003c 80F86030 		strb	r3, [r0, #96]
  65:Core/Src/Fusion/FusionAhrs.c **** }
  85              		.loc 1 65 1 view .LVU25
  86 0040 7047     		bx	lr
  87              	.L3:
  88 0042 00BF     		.align	2
  89              	.L2:
  90 0044 00002041 		.word	1092616192
  91              		.cfi_endproc
  92              	.LFE22:
  94              		.section	.text.FusionAhrsSetSettings,"ax",%progbits
  95              		.align	1
  96              		.global	FusionAhrsSetSettings
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	FusionAhrsSetSettings:
 103              	.LVL1:
 104              	.LFB23:
  66:Core/Src/Fusion/FusionAhrs.c **** 
  67:Core/Src/Fusion/FusionAhrs.c **** /**
  68:Core/Src/Fusion/FusionAhrs.c ****  * @brief Sets the AHRS algorithm settings.
  69:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  70:Core/Src/Fusion/FusionAhrs.c ****  * @param settings Settings.
ARM GAS  /tmp/ccHlrfTi.s 			page 4


  71:Core/Src/Fusion/FusionAhrs.c ****  */
  72:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 105              		.loc 1 72 94 is_stmt 1 view -0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		.loc 1 72 94 is_stmt 0 view .LVU27
 110 0000 38B5     		push	{r3, r4, r5, lr}
 111              	.LCFI0:
 112              		.cfi_def_cfa_offset 16
 113              		.cfi_offset 3, -16
 114              		.cfi_offset 4, -12
 115              		.cfi_offset 5, -8
 116              		.cfi_offset 14, -4
 117 0002 0446     		mov	r4, r0
 118 0004 0D46     		mov	r5, r1
  73:Core/Src/Fusion/FusionAhrs.c ****     ahrs->settings.gain = settings->gain;
 119              		.loc 1 73 5 is_stmt 1 view .LVU28
 120              		.loc 1 73 35 is_stmt 0 view .LVU29
 121 0006 0B68     		ldr	r3, [r1]	@ float
 122              		.loc 1 73 25 view .LVU30
 123 0008 0360     		str	r3, [r0]	@ float
  74:Core/Src/Fusion/FusionAhrs.c ****     if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 124              		.loc 1 74 5 is_stmt 1 view .LVU31
 125              		.loc 1 74 18 is_stmt 0 view .LVU32
 126 000a D1ED017A 		vldr.32	s15, [r1, #4]
 127              		.loc 1 74 8 view .LVU33
 128 000e F5EE407A 		vcmp.f32	s15, #0
 129 0012 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 130 0016 01D0     		beq	.L5
 131              		.loc 1 74 63 discriminator 1 view .LVU34
 132 0018 CB68     		ldr	r3, [r1, #12]
 133              		.loc 1 74 51 discriminator 1 view .LVU35
 134 001a 03BB     		cbnz	r3, .L6
 135              	.L5:
  75:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 136              		.loc 1 75 9 is_stmt 1 view .LVU36
 137              		.loc 1 75 46 is_stmt 0 view .LVU37
 138 001c 214B     		ldr	r3, .L13
 139 001e 6360     		str	r3, [r4, #4]	@ float
 140              	.LVL2:
 141              	.L7:
  76:Core/Src/Fusion/FusionAhrs.c ****     } else {
  77:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->ac
  78:Core/Src/Fusion/FusionAhrs.c ****     }
  79:Core/Src/Fusion/FusionAhrs.c ****     if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 142              		.loc 1 79 5 is_stmt 1 view .LVU38
 143              		.loc 1 79 18 is_stmt 0 view .LVU39
 144 0020 D5ED027A 		vldr.32	s15, [r5, #8]
 145              		.loc 1 79 8 view .LVU40
 146 0024 F5EE407A 		vcmp.f32	s15, #0
 147 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 148 002c 01D0     		beq	.L8
 149              		.loc 1 79 59 discriminator 1 view .LVU41
 150 002e EB68     		ldr	r3, [r5, #12]
 151              		.loc 1 79 47 discriminator 1 view .LVU42
 152 0030 33BB     		cbnz	r3, .L9
ARM GAS  /tmp/ccHlrfTi.s 			page 5


 153              	.L8:
  80:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.magneticRejection = FLT_MAX;
 154              		.loc 1 80 9 is_stmt 1 view .LVU43
 155              		.loc 1 80 42 is_stmt 0 view .LVU44
 156 0032 1C4B     		ldr	r3, .L13
 157 0034 A360     		str	r3, [r4, #8]	@ float
 158              	.L10:
  81:Core/Src/Fusion/FusionAhrs.c ****     } else {
  82:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magnet
  83:Core/Src/Fusion/FusionAhrs.c ****     }
  84:Core/Src/Fusion/FusionAhrs.c ****     ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 159              		.loc 1 84 5 is_stmt 1 view .LVU45
 160              		.loc 1 84 47 is_stmt 0 view .LVU46
 161 0036 EB68     		ldr	r3, [r5, #12]
 162              		.loc 1 84 37 view .LVU47
 163 0038 E360     		str	r3, [r4, #12]
  85:Core/Src/Fusion/FusionAhrs.c ****     if (ahrs->initialising == false) {
 164              		.loc 1 85 5 is_stmt 1 view .LVU48
 165              		.loc 1 85 13 is_stmt 0 view .LVU49
 166 003a 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 167              		.loc 1 85 8 view .LVU50
 168 003e 0BB9     		cbnz	r3, .L11
  86:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain = ahrs->settings.gain;
 169              		.loc 1 86 9 is_stmt 1 view .LVU51
 170              		.loc 1 86 42 is_stmt 0 view .LVU52
 171 0040 2368     		ldr	r3, [r4]	@ float
 172              		.loc 1 86 26 view .LVU53
 173 0042 2363     		str	r3, [r4, #48]	@ float
 174              	.L11:
  87:Core/Src/Fusion/FusionAhrs.c ****     }
  88:Core/Src/Fusion/FusionAhrs.c ****     ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 175              		.loc 1 88 5 is_stmt 1 view .LVU54
 176              		.loc 1 88 58 is_stmt 0 view .LVU55
 177 0044 94ED007A 		vldr.32	s14, [r4]
 178              		.loc 1 88 42 view .LVU56
 179 0048 F2EE047A 		vmov.f32	s15, #1.0e+1
 180 004c 77EEC77A 		vsub.f32	s15, s15, s14
 181              		.loc 1 88 65 view .LVU57
 182 0050 F0EE086A 		vmov.f32	s13, #3.0e+0
 183 0054 87EEA67A 		vdiv.f32	s14, s15, s13
 184              		.loc 1 88 26 view .LVU58
 185 0058 84ED0D7A 		vstr.32	s14, [r4, #52]
  89:Core/Src/Fusion/FusionAhrs.c **** }
 186              		.loc 1 89 1 view .LVU59
 187 005c 38BD     		pop	{r3, r4, r5, pc}
 188              	.LVL3:
 189              	.L6:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 190              		.loc 1 77 9 is_stmt 1 view .LVU60
 191              	.LBB46:
 192              	.LBI46:
 193              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
ARM GAS  /tmp/ccHlrfTi.s 			page 6


   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
ARM GAS  /tmp/ccHlrfTi.s 			page 7


  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
ARM GAS  /tmp/ccHlrfTi.s 			page 8


 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 194              		.loc 2 127 21 view .LVU61
 195              	.LBB47:
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 196              		.loc 2 128 5 view .LVU62
 197              		.loc 2 128 5 is_stmt 0 view .LVU63
 198              	.LBE47:
 199              	.LBE46:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 200              		.loc 1 77 60 view .LVU64
 201 005e 9FED120A 		vldr.32	s0, .L13+4
 202 0062 27EE800A 		vmul.f32	s0, s15, s0
 203 0066 FFF7FEFF 		bl	sinf
 204              	.LVL4:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 205              		.loc 1 77 48 view .LVU65
 206 006a F0EE000A 		vmov.f32	s1, #2.0e+0
 207 006e F6EE007A 		vmov.f32	s15, #5.0e-1
 208 0072 20EE270A 		vmul.f32	s0, s0, s15
 209 0076 FFF7FEFF 		bl	powf
 210              	.LVL5:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 211              		.loc 1 77 46 view .LVU66
 212 007a 84ED010A 		vstr.32	s0, [r4, #4]
 213 007e CFE7     		b	.L7
 214              	.L9:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 215              		.loc 1 82 9 is_stmt 1 view .LVU67
 216              	.LVL6:
 217              	.LBB48:
 218              	.LBI48:
 127:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 219              		.loc 2 127 21 view .LVU68
 220              	.LBB49:
 221              		.loc 2 128 5 view .LVU69
 222              		.loc 2 128 5 is_stmt 0 view .LVU70
 223              	.LBE49:
 224              	.LBE48:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 225              		.loc 1 82 56 view .LVU71
 226 0080 9FED090A 		vldr.32	s0, .L13+4
 227 0084 27EE800A 		vmul.f32	s0, s15, s0
 228 0088 FFF7FEFF 		bl	sinf
 229              	.LVL7:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 230              		.loc 1 82 44 view .LVU72
 231 008c F0EE000A 		vmov.f32	s1, #2.0e+0
 232 0090 F6EE007A 		vmov.f32	s15, #5.0e-1
 233 0094 20EE270A 		vmul.f32	s0, s0, s15
 234 0098 FFF7FEFF 		bl	powf
ARM GAS  /tmp/ccHlrfTi.s 			page 9


 235              	.LVL8:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 236              		.loc 1 82 42 view .LVU73
 237 009c 84ED020A 		vstr.32	s0, [r4, #8]
 238 00a0 C9E7     		b	.L10
 239              	.L14:
 240 00a2 00BF     		.align	2
 241              	.L13:
 242 00a4 FFFF7F7F 		.word	2139095039
 243 00a8 35FA8E3C 		.word	1016003125
 244              		.cfi_endproc
 245              	.LFE23:
 247              		.section	.text.FusionAhrsInitialise,"ax",%progbits
 248              		.align	1
 249              		.global	FusionAhrsInitialise
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	FusionAhrsInitialise:
 256              	.LVL9:
 257              	.LFB21:
  36:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsSettings settings = {
 258              		.loc 1 36 51 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 16
 261              		@ frame_needed = 0, uses_anonymous_args = 0
  36:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsSettings settings = {
 262              		.loc 1 36 51 is_stmt 0 view .LVU75
 263 0000 10B5     		push	{r4, lr}
 264              	.LCFI1:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 14, -4
 268 0002 84B0     		sub	sp, sp, #16
 269              	.LCFI2:
 270              		.cfi_def_cfa_offset 24
 271 0004 0446     		mov	r4, r0
  37:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
 272              		.loc 1 37 5 is_stmt 1 view .LVU76
  37:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
 273              		.loc 1 37 30 is_stmt 0 view .LVU77
 274 0006 074B     		ldr	r3, .L17
 275 0008 EC46     		mov	ip, sp
 276 000a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 277              	.LVL10:
  37:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
 278              		.loc 1 37 30 view .LVU78
 279 000c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
  43:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsReset(ahrs);
 280              		.loc 1 43 5 is_stmt 1 view .LVU79
 281 0010 6146     		mov	r1, ip
 282 0012 2046     		mov	r0, r4
 283 0014 FFF7FEFF 		bl	FusionAhrsSetSettings
 284              	.LVL11:
  44:Core/Src/Fusion/FusionAhrs.c **** }
 285              		.loc 1 44 5 view .LVU80
ARM GAS  /tmp/ccHlrfTi.s 			page 10


 286 0018 2046     		mov	r0, r4
 287 001a FFF7FEFF 		bl	FusionAhrsReset
 288              	.LVL12:
  45:Core/Src/Fusion/FusionAhrs.c **** 
 289              		.loc 1 45 1 is_stmt 0 view .LVU81
 290 001e 04B0     		add	sp, sp, #16
 291              	.LCFI3:
 292              		.cfi_def_cfa_offset 8
 293              		@ sp needed
 294 0020 10BD     		pop	{r4, pc}
 295              	.LVL13:
 296              	.L18:
  45:Core/Src/Fusion/FusionAhrs.c **** 
 297              		.loc 1 45 1 view .LVU82
 298 0022 00BF     		.align	2
 299              	.L17:
 300 0024 00000000 		.word	.LANCHOR0
 301              		.cfi_endproc
 302              	.LFE21:
 304              		.section	.text.FusionAhrsGetQuaternion,"ax",%progbits
 305              		.align	1
 306              		.global	FusionAhrsGetQuaternion
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu fpv4-sp-d16
 312              	FusionAhrsGetQuaternion:
 313              	.LVL14:
 314              	.LFB27:
  90:Core/Src/Fusion/FusionAhrs.c **** 
  91:Core/Src/Fusion/FusionAhrs.c **** /**
  92:Core/Src/Fusion/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope, accelerometer, and
  93:Core/Src/Fusion/FusionAhrs.c ****  * magnetometer measurements.
  94:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  95:Core/Src/Fusion/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
  96:Core/Src/Fusion/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
  97:Core/Src/Fusion/FusionAhrs.c ****  * @param magnetometer Magnetometer measurement in arbitrary units.
  98:Core/Src/Fusion/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
  99:Core/Src/Fusion/FusionAhrs.c ****  */
 100:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector acce
 101:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 102:Core/Src/Fusion/FusionAhrs.c **** 
 103:Core/Src/Fusion/FusionAhrs.c ****     // Store accelerometer
 104:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometer = accelerometer;
 105:Core/Src/Fusion/FusionAhrs.c **** 
 106:Core/Src/Fusion/FusionAhrs.c ****     // Ramp down gain during initialisation
 107:Core/Src/Fusion/FusionAhrs.c ****     if (ahrs->initialising == true) {
 108:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 109:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 110:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 111:Core/Src/Fusion/FusionAhrs.c ****             ahrs->initialising = false;
 112:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = false;
 113:Core/Src/Fusion/FusionAhrs.c ****         }
 114:Core/Src/Fusion/FusionAhrs.c ****     }
 115:Core/Src/Fusion/FusionAhrs.c **** 
 116:Core/Src/Fusion/FusionAhrs.c ****     // Calculate direction of gravity indicated by algorithm
 117:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector halfGravity = {
ARM GAS  /tmp/ccHlrfTi.s 			page 11


 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 120:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 121:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 122:Core/Src/Fusion/FusionAhrs.c **** 
 123:Core/Src/Fusion/FusionAhrs.c ****     // Calculate accelerometer feedback
 124:Core/Src/Fusion/FusionAhrs.c ****     FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 125:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 126:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 127:Core/Src/Fusion/FusionAhrs.c **** 
 128:Core/Src/Fusion/FusionAhrs.c ****         // Enter acceleration recovery state if acceleration rejection times out
 129:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 130:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 131:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsReset(ahrs);
 132:Core/Src/Fusion/FusionAhrs.c ****             ahrs->quaternion = quaternion;
 133:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer = 0;
 134:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = true;
 135:Core/Src/Fusion/FusionAhrs.c ****         }
 136:Core/Src/Fusion/FusionAhrs.c **** 
 137:Core/Src/Fusion/FusionAhrs.c ****         // Calculate accelerometer feedback scaled by 0.5
 138:Core/Src/Fusion/FusionAhrs.c ****         ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerome
 139:Core/Src/Fusion/FusionAhrs.c **** 
 140:Core/Src/Fusion/FusionAhrs.c ****         // Ignore accelerometer if acceleration distortion detected
 141:Core/Src/Fusion/FusionAhrs.c ****         if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFe
 142:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 143:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 144:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 145:Core/Src/Fusion/FusionAhrs.c ****         } else {
 146:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer++;
 147:Core/Src/Fusion/FusionAhrs.c ****         }
 148:Core/Src/Fusion/FusionAhrs.c ****     }
 149:Core/Src/Fusion/FusionAhrs.c **** 
 150:Core/Src/Fusion/FusionAhrs.c ****     // Calculate magnetometer feedback
 151:Core/Src/Fusion/FusionAhrs.c ****     FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 152:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 153:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 154:Core/Src/Fusion/FusionAhrs.c **** 
 155:Core/Src/Fusion/FusionAhrs.c ****         // Set to compass heading if magnetic rejection times out
 156:Core/Src/Fusion/FusionAhrs.c ****         ahrs->magneticRejectionTimeout = false;
 157:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 158:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 159:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer = 0;
 160:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimeout = true;
 161:Core/Src/Fusion/FusionAhrs.c ****         }
 162:Core/Src/Fusion/FusionAhrs.c **** 
 163:Core/Src/Fusion/FusionAhrs.c ****         // Compute direction of west indicated by algorithm
 164:Core/Src/Fusion/FusionAhrs.c ****         const FusionVector halfWest = {
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 167:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 168:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 169:Core/Src/Fusion/FusionAhrs.c **** 
 170:Core/Src/Fusion/FusionAhrs.c ****         // Calculate magnetometer feedback scaled by 0.5
 171:Core/Src/Fusion/FusionAhrs.c ****         ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVecto
 172:Core/Src/Fusion/FusionAhrs.c **** 
 173:Core/Src/Fusion/FusionAhrs.c ****         // Ignore magnetometer if magnetic distortion detected
 174:Core/Src/Fusion/FusionAhrs.c ****         if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFee
ARM GAS  /tmp/ccHlrfTi.s 			page 12


 175:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 176:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 177:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 178:Core/Src/Fusion/FusionAhrs.c ****         } else {
 179:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer++;
 180:Core/Src/Fusion/FusionAhrs.c ****         }
 181:Core/Src/Fusion/FusionAhrs.c ****     }
 182:Core/Src/Fusion/FusionAhrs.c **** 
 183:Core/Src/Fusion/FusionAhrs.c ****     // Convert gyroscope to radians per second scaled by 0.5
 184:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians
 185:Core/Src/Fusion/FusionAhrs.c **** 
 186:Core/Src/Fusion/FusionAhrs.c ****     // Apply feedback to gyroscope
 187:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyS
 188:Core/Src/Fusion/FusionAhrs.c **** 
 189:Core/Src/Fusion/FusionAhrs.c ****     // Integrate rate of change of quaternion
 190:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->q
 191:Core/Src/Fusion/FusionAhrs.c **** 
 192:Core/Src/Fusion/FusionAhrs.c ****     // Normalise quaternion
 193:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 194:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 195:Core/Src/Fusion/FusionAhrs.c **** }
 196:Core/Src/Fusion/FusionAhrs.c **** 
 197:Core/Src/Fusion/FusionAhrs.c **** /**
 198:Core/Src/Fusion/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope and accelerometer
 199:Core/Src/Fusion/FusionAhrs.c ****  * measurements only.
 200:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 201:Core/Src/Fusion/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 202:Core/Src/Fusion/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 203:Core/Src/Fusion/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 204:Core/Src/Fusion/FusionAhrs.c ****  */
 205:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const Fus
 206:Core/Src/Fusion/FusionAhrs.c **** 
 207:Core/Src/Fusion/FusionAhrs.c ****     // Update AHRS algorithm
 208:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 209:Core/Src/Fusion/FusionAhrs.c **** 
 210:Core/Src/Fusion/FusionAhrs.c ****     // Zero heading during initialisation
 211:Core/Src/Fusion/FusionAhrs.c ****     if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
 212:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 213:Core/Src/Fusion/FusionAhrs.c ****     }
 214:Core/Src/Fusion/FusionAhrs.c **** }
 215:Core/Src/Fusion/FusionAhrs.c **** 
 216:Core/Src/Fusion/FusionAhrs.c **** /**
 217:Core/Src/Fusion/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope, accelerometer, and
 218:Core/Src/Fusion/FusionAhrs.c ****  * heading measurements.
 219:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 220:Core/Src/Fusion/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 221:Core/Src/Fusion/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 222:Core/Src/Fusion/FusionAhrs.c ****  * @param heading Heading measurement in degrees.
 223:Core/Src/Fusion/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 224:Core/Src/Fusion/FusionAhrs.c ****  */
 225:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsUpdateExternalHeading(FusionAhrs *const ahrs, const FusionVector gyroscope, const Fu
 226:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 227:Core/Src/Fusion/FusionAhrs.c **** 
 228:Core/Src/Fusion/FusionAhrs.c ****     // Calculate roll
 229:Core/Src/Fusion/FusionAhrs.c ****     const float roll = atan2f(Q.w * Q.x + Q.y * Q.z, 0.5f - Q.y * Q.y - Q.x * Q.x);
 230:Core/Src/Fusion/FusionAhrs.c **** 
 231:Core/Src/Fusion/FusionAhrs.c ****     // Calculate magnetometer
ARM GAS  /tmp/ccHlrfTi.s 			page 13


 232:Core/Src/Fusion/FusionAhrs.c ****     const float headingRadians = FusionDegreesToRadians(heading);
 233:Core/Src/Fusion/FusionAhrs.c ****     const float sinHeadingRadians = sinf(headingRadians);
 234:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 235:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = -1.0f * cosf(roll) * sinHeadingRadians,
 237:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 238:Core/Src/Fusion/FusionAhrs.c ****     };
 239:Core/Src/Fusion/FusionAhrs.c **** 
 240:Core/Src/Fusion/FusionAhrs.c ****     // Update AHRS algorithm
 241:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsUpdate(ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 242:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 243:Core/Src/Fusion/FusionAhrs.c **** }
 244:Core/Src/Fusion/FusionAhrs.c **** 
 245:Core/Src/Fusion/FusionAhrs.c **** /**
 246:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the quaternion describing the sensor relative to the Earth.
 247:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 248:Core/Src/Fusion/FusionAhrs.c ****  * @return Quaternion describing the sensor relative to the Earth.
 249:Core/Src/Fusion/FusionAhrs.c ****  */
 250:Core/Src/Fusion/FusionAhrs.c **** FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 315              		.loc 1 250 72 is_stmt 1 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 32
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319              		@ link register save eliminated.
 320              		.loc 1 250 72 is_stmt 0 view .LVU84
 321 0000 88B0     		sub	sp, sp, #32
 322              	.LCFI4:
 323              		.cfi_def_cfa_offset 32
 251:Core/Src/Fusion/FusionAhrs.c ****     return ahrs->quaternion;
 324              		.loc 1 251 5 is_stmt 1 view .LVU85
 325              		.loc 1 251 16 is_stmt 0 view .LVU86
 326 0002 1030     		adds	r0, r0, #16
 327              	.LVL15:
 328              		.loc 1 251 16 view .LVU87
 329 0004 0FC8     		ldm	r0, {r0, r1, r2, r3}
 330              	.LVL16:
 331              		.loc 1 251 16 view .LVU88
 332 0006 0DF1200C 		add	ip, sp, #32
 333 000a 0CE90F00 		stmdb	ip, {r0, r1, r2, r3}
 252:Core/Src/Fusion/FusionAhrs.c **** }
 334              		.loc 1 252 1 view .LVU89
 335 000e 9DED040A 		vldr.32	s0, [sp, #16]
 336 0012 DDED050A 		vldr.32	s1, [sp, #20]
 337 0016 9DED061A 		vldr.32	s2, [sp, #24]
 338 001a DDED071A 		vldr.32	s3, [sp, #28]
 339 001e 08B0     		add	sp, sp, #32
 340              	.LCFI5:
 341              		.cfi_def_cfa_offset 0
 342              		@ sp needed
 343 0020 7047     		bx	lr
 344              		.cfi_endproc
 345              	.LFE27:
 347              		.section	.text.FusionAhrsGetLinearAcceleration,"ax",%progbits
 348              		.align	1
 349              		.global	FusionAhrsGetLinearAcceleration
 350              		.syntax unified
 351              		.thumb
ARM GAS  /tmp/ccHlrfTi.s 			page 14


 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	FusionAhrsGetLinearAcceleration:
 356              	.LVL17:
 357              	.LFB28:
 253:Core/Src/Fusion/FusionAhrs.c **** 
 254:Core/Src/Fusion/FusionAhrs.c **** /**
 255:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the linear acceleration measurement equal to the accelerometer
 256:Core/Src/Fusion/FusionAhrs.c ****  * measurement with the 1 g of gravity removed.
 257:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 258:Core/Src/Fusion/FusionAhrs.c ****  * @return Linear acceleration measurement in g.
 259:Core/Src/Fusion/FusionAhrs.c ****  */
 260:Core/Src/Fusion/FusionAhrs.c **** FusionVector FusionAhrsGetLinearAcceleration(const FusionAhrs *const ahrs) {
 358              		.loc 1 260 76 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 104
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 363              		.loc 1 260 76 is_stmt 0 view .LVU91
 364 0000 9AB0     		sub	sp, sp, #104
 365              	.LCFI6:
 366              		.cfi_def_cfa_offset 104
 261:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 262:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector gravity = {
 367              		.loc 1 262 5 is_stmt 1 view .LVU92
 263:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 368              		.loc 1 263 32 is_stmt 0 view .LVU93
 369 0002 D0ED055A 		vldr.32	s11, [r0, #20]
 370              		.loc 1 263 38 view .LVU94
 371 0006 90ED076A 		vldr.32	s12, [r0, #28]
 372              		.loc 1 263 35 view .LVU95
 373 000a 65EE866A 		vmul.f32	s13, s11, s12
 374              		.loc 1 263 44 view .LVU96
 375 000e D0ED047A 		vldr.32	s15, [r0, #16]
 376              		.loc 1 263 50 view .LVU97
 377 0012 90ED067A 		vldr.32	s14, [r0, #24]
 378              		.loc 1 263 47 view .LVU98
 379 0016 27EE875A 		vmul.f32	s10, s15, s14
 380              		.loc 1 263 41 view .LVU99
 381 001a 76EEC56A 		vsub.f32	s13, s13, s10
 382              		.loc 1 263 28 view .LVU100
 383 001e 76EEA66A 		vadd.f32	s13, s13, s13
 262:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 384              		.loc 1 262 24 view .LVU101
 385 0022 CDED116A 		vstr.32	s13, [sp, #68]
 264:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = 2.0f * (Q.y * Q.z + Q.w * Q.x),
 386              		.loc 1 264 35 view .LVU102
 387 0026 26EE077A 		vmul.f32	s14, s12, s14
 388              		.loc 1 264 47 view .LVU103
 389 002a 65EEA75A 		vmul.f32	s11, s11, s15
 390              		.loc 1 264 41 view .LVU104
 391 002e 37EE257A 		vadd.f32	s14, s14, s11
 392              		.loc 1 264 28 view .LVU105
 393 0032 37EE077A 		vadd.f32	s14, s14, s14
 262:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 394              		.loc 1 262 24 view .LVU106
 395 0036 8DED127A 		vstr.32	s14, [sp, #72]
ARM GAS  /tmp/ccHlrfTi.s 			page 15


 265:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 396              		.loc 1 265 35 view .LVU107
 397 003a 67EEA77A 		vmul.f32	s15, s15, s15
 398              		.loc 1 265 41 view .LVU108
 399 003e F6EE005A 		vmov.f32	s11, #5.0e-1
 400 0042 77EEE57A 		vsub.f32	s15, s15, s11
 401              		.loc 1 265 54 view .LVU109
 402 0046 26EE066A 		vmul.f32	s12, s12, s12
 403              		.loc 1 265 48 view .LVU110
 404 004a 77EE867A 		vadd.f32	s15, s15, s12
 405              		.loc 1 265 28 view .LVU111
 406 004e 77EEA77A 		vadd.f32	s15, s15, s15
 262:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 407              		.loc 1 262 24 view .LVU112
 408 0052 CDED137A 		vstr.32	s15, [sp, #76]
 266:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix
 267:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector linearAcceleration = FusionVectorSubtract(ahrs->accelerometer, gravity);
 409              		.loc 1 267 5 is_stmt 1 view .LVU113
 410 0056 05AB     		add	r3, sp, #20
 411 0058 2030     		adds	r0, r0, #32
 412              	.LVL18:
 413              		.loc 1 267 5 is_stmt 0 view .LVU114
 414 005a 07C8     		ldm	r0, {r0, r1, r2}
 415              	.LVL19:
 416              		.loc 1 267 5 view .LVU115
 417 005c 83E80700 		stm	r3, {r0, r1, r2}
 418 0060 08AB     		add	r3, sp, #32
 419 0062 11AA     		add	r2, sp, #68
 420 0064 07CA     		ldm	r2, {r0, r1, r2}
 421 0066 83E80700 		stm	r3, {r0, r1, r2}
 422              	.LBB50:
 423              	.LBI50:
 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
ARM GAS  /tmp/ccHlrfTi.s 			page 16


 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
ARM GAS  /tmp/ccHlrfTi.s 			page 17


 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 424              		.loc 2 215 28 is_stmt 1 view .LVU116
 425              	.LBB51:
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 426              		.loc 2 216 5 view .LVU117
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 427              		.loc 2 217 5 view .LVU118
 428              		.loc 2 217 33 is_stmt 0 view .LVU119
 429 006a 9DED056A 		vldr.32	s12, [sp, #20]
 430              		.loc 2 217 36 view .LVU120
 431 006e 76EE666A 		vsub.f32	s13, s12, s13
 432              		.loc 2 217 19 view .LVU121
 433 0072 CDED0B6A 		vstr.32	s13, [sp, #44]
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 434              		.loc 2 218 5 is_stmt 1 view .LVU122
 435              		.loc 2 218 33 is_stmt 0 view .LVU123
 436 0076 DDED066A 		vldr.32	s13, [sp, #24]
 437              		.loc 2 218 36 view .LVU124
 438 007a 36EEC77A 		vsub.f32	s14, s13, s14
 439              		.loc 2 218 19 view .LVU125
 440 007e 8DED0C7A 		vstr.32	s14, [sp, #48]
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 441              		.loc 2 219 5 is_stmt 1 view .LVU126
 442              		.loc 2 219 33 is_stmt 0 view .LVU127
 443 0082 9DED077A 		vldr.32	s14, [sp, #28]
 444              		.loc 2 219 36 view .LVU128
 445 0086 77EE677A 		vsub.f32	s15, s14, s15
 446              		.loc 2 219 19 view .LVU129
 447 008a CDED0D7A 		vstr.32	s15, [sp, #52]
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
 448              		.loc 2 220 5 is_stmt 1 view .LVU130
 449              		.loc 2 220 12 is_stmt 0 view .LVU131
 450 008e 0DF15C0C 		add	ip, sp, #92
 451 0092 0BAB     		add	r3, sp, #44
 452 0094 93E80700 		ldm	r3, {r0, r1, r2}
 453 0098 8CE80700 		stm	ip, {r0, r1, r2}
 454 009c 0EAB     		add	r3, sp, #56
 455 009e 83E80700 		stm	r3, {r0, r1, r2}
 456              	.LBE51:
 457              	.LBE50:
 268:Core/Src/Fusion/FusionAhrs.c ****     return linearAcceleration;
 458              		.loc 1 268 5 is_stmt 1 view .LVU132
 459              		.loc 1 268 12 is_stmt 0 view .LVU133
 460 00a2 0DF1500C 		add	ip, sp, #80
 461 00a6 8CE80700 		stm	ip, {r0, r1, r2}
 269:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 270:Core/Src/Fusion/FusionAhrs.c **** }
 462              		.loc 1 270 1 view .LVU134
 463 00aa 9DED140A 		vldr.32	s0, [sp, #80]
 464 00ae DDED150A 		vldr.32	s1, [sp, #84]
 465 00b2 9DED161A 		vldr.32	s2, [sp, #88]
 466 00b6 1AB0     		add	sp, sp, #104
 467              	.LCFI7:
ARM GAS  /tmp/ccHlrfTi.s 			page 18


 468              		.cfi_def_cfa_offset 0
 469              		@ sp needed
 470 00b8 7047     		bx	lr
 471              		.cfi_endproc
 472              	.LFE28:
 474              		.section	.text.FusionAhrsGetEarthAcceleration,"ax",%progbits
 475              		.align	1
 476              		.global	FusionAhrsGetEarthAcceleration
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	FusionAhrsGetEarthAcceleration:
 483              	.LVL20:
 484              	.LFB29:
 271:Core/Src/Fusion/FusionAhrs.c **** 
 272:Core/Src/Fusion/FusionAhrs.c **** /**
 273:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the Earth acceleration measurement equal to accelerometer
 274:Core/Src/Fusion/FusionAhrs.c ****  * measurement in the Earth coordinate frame with the 1 g of gravity removed.
 275:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 276:Core/Src/Fusion/FusionAhrs.c ****  * @return Earth acceleration measurement in g.
 277:Core/Src/Fusion/FusionAhrs.c ****  */
 278:Core/Src/Fusion/FusionAhrs.c **** FusionVector FusionAhrsGetEarthAcceleration(const FusionAhrs *const ahrs) {
 485              		.loc 1 278 75 is_stmt 1 view -0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 40
 488              		@ frame_needed = 0, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490              		.loc 1 278 75 is_stmt 0 view .LVU136
 491 0000 8AB0     		sub	sp, sp, #40
 492              	.LCFI8:
 493              		.cfi_def_cfa_offset 40
 279:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 280:Core/Src/Fusion/FusionAhrs.c **** #define A ahrs->accelerometer.axis
 281:Core/Src/Fusion/FusionAhrs.c ****     const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 494              		.loc 1 281 5 is_stmt 1 view .LVU137
 495              		.loc 1 281 25 is_stmt 0 view .LVU138
 496 0002 D0ED047A 		vldr.32	s15, [r0, #16]
 497              		.loc 1 281 17 view .LVU139
 498 0006 67EEA75A 		vmul.f32	s11, s15, s15
 499              	.LVL21:
 282:Core/Src/Fusion/FusionAhrs.c ****     const float qwqx = Q.w * Q.x;
 500              		.loc 1 282 5 is_stmt 1 view .LVU140
 501              		.loc 1 282 31 is_stmt 0 view .LVU141
 502 000a 90ED057A 		vldr.32	s14, [r0, #20]
 503              		.loc 1 282 17 view .LVU142
 504 000e 67EE873A 		vmul.f32	s7, s15, s14
 505              	.LVL22:
 283:Core/Src/Fusion/FusionAhrs.c ****     const float qwqy = Q.w * Q.y;
 506              		.loc 1 283 5 is_stmt 1 view .LVU143
 507              		.loc 1 283 31 is_stmt 0 view .LVU144
 508 0012 90ED066A 		vldr.32	s12, [r0, #24]
 509              		.loc 1 283 17 view .LVU145
 510 0016 67EE861A 		vmul.f32	s3, s15, s12
 511              	.LVL23:
 284:Core/Src/Fusion/FusionAhrs.c ****     const float qwqz = Q.w * Q.z;
 512              		.loc 1 284 5 is_stmt 1 view .LVU146
ARM GAS  /tmp/ccHlrfTi.s 			page 19


 513              		.loc 1 284 31 is_stmt 0 view .LVU147
 514 001a D0ED074A 		vldr.32	s9, [r0, #28]
 515              		.loc 1 284 17 view .LVU148
 516 001e 67EEA47A 		vmul.f32	s15, s15, s9
 517              	.LVL24:
 285:Core/Src/Fusion/FusionAhrs.c ****     const float qxqy = Q.x * Q.y;
 518              		.loc 1 285 5 is_stmt 1 view .LVU149
 519              		.loc 1 285 17 is_stmt 0 view .LVU150
 520 0022 27EE061A 		vmul.f32	s2, s14, s12
 521              	.LVL25:
 286:Core/Src/Fusion/FusionAhrs.c ****     const float qxqz = Q.x * Q.z;
 522              		.loc 1 286 5 is_stmt 1 view .LVU151
 523              		.loc 1 286 17 is_stmt 0 view .LVU152
 524 0026 27EE243A 		vmul.f32	s6, s14, s9
 525              	.LVL26:
 287:Core/Src/Fusion/FusionAhrs.c ****     const float qyqz = Q.y * Q.z;
 526              		.loc 1 287 5 is_stmt 1 view .LVU153
 527              		.loc 1 287 17 is_stmt 0 view .LVU154
 528 002a 26EE242A 		vmul.f32	s4, s12, s9
 529              	.LVL27:
 288:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector earthAcceleration = {
 530              		.loc 1 288 5 is_stmt 1 view .LVU155
 289:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy)
 531              		.loc 1 289 37 is_stmt 0 view .LVU156
 532 002e F6EE006A 		vmov.f32	s13, #5.0e-1
 533 0032 75EEE65A 		vsub.f32	s11, s11, s13
 534              	.LVL28:
 535              		.loc 1 289 50 view .LVU157
 536 0036 27EE077A 		vmul.f32	s14, s14, s14
 537              		.loc 1 289 44 view .LVU158
 538 003a 35EE877A 		vadd.f32	s14, s11, s14
 539              		.loc 1 289 60 view .LVU159
 540 003e D0ED086A 		vldr.32	s13, [r0, #32]
 541              		.loc 1 289 57 view .LVU160
 542 0042 27EE267A 		vmul.f32	s14, s14, s13
 543              		.loc 1 289 71 view .LVU161
 544 0046 31EE675A 		vsub.f32	s10, s2, s15
 545              		.loc 1 289 82 view .LVU162
 546 004a 90ED094A 		vldr.32	s8, [r0, #36]
 547              		.loc 1 289 79 view .LVU163
 548 004e 25EE045A 		vmul.f32	s10, s10, s8
 549              		.loc 1 289 63 view .LVU164
 550 0052 37EE057A 		vadd.f32	s14, s14, s10
 551              		.loc 1 289 93 view .LVU165
 552 0056 71EE832A 		vadd.f32	s5, s3, s6
 553              		.loc 1 289 104 view .LVU166
 554 005a 90ED0A5A 		vldr.32	s10, [r0, #40]
 555              		.loc 1 289 101 view .LVU167
 556 005e 62EE852A 		vmul.f32	s5, s5, s10
 557              		.loc 1 289 85 view .LVU168
 558 0062 37EE227A 		vadd.f32	s14, s14, s5
 559              		.loc 1 289 28 view .LVU169
 560 0066 37EE077A 		vadd.f32	s14, s14, s14
 288:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector earthAcceleration = {
 561              		.loc 1 288 24 view .LVU170
 562 006a 8DED047A 		vstr.32	s14, [sp, #16]
 290:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = 2.0f * ((qxqy + qwqz) * A.x + (qwqw - 0.5f + Q.y * Q.y) * A.y + (qyqz - qwqx)
ARM GAS  /tmp/ccHlrfTi.s 			page 20


 563              		.loc 1 290 37 view .LVU171
 564 006e 77EE817A 		vadd.f32	s15, s15, s2
 565              	.LVL29:
 566              		.loc 1 290 45 view .LVU172
 567 0072 66EEA77A 		vmul.f32	s15, s13, s15
 568              		.loc 1 290 72 view .LVU173
 569 0076 26EE066A 		vmul.f32	s12, s12, s12
 570              		.loc 1 290 66 view .LVU174
 571 007a 35EE866A 		vadd.f32	s12, s11, s12
 572              		.loc 1 290 79 view .LVU175
 573 007e 24EE066A 		vmul.f32	s12, s8, s12
 574              		.loc 1 290 51 view .LVU176
 575 0082 77EE867A 		vadd.f32	s15, s15, s12
 576              		.loc 1 290 93 view .LVU177
 577 0086 32EE637A 		vsub.f32	s14, s4, s7
 578              		.loc 1 290 101 view .LVU178
 579 008a 25EE077A 		vmul.f32	s14, s10, s14
 580              		.loc 1 290 85 view .LVU179
 581 008e 77EE877A 		vadd.f32	s15, s15, s14
 582              		.loc 1 290 28 view .LVU180
 583 0092 77EEA77A 		vadd.f32	s15, s15, s15
 288:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector earthAcceleration = {
 584              		.loc 1 288 24 view .LVU181
 585 0096 CDED057A 		vstr.32	s15, [sp, #20]
 291:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = (2.0f * ((qxqz - qwqy) * A.x + (qyqz + qwqx) * A.y + (qwqw - 0.5f + Q.z * Q.z
 586              		.loc 1 291 38 view .LVU182
 587 009a 33EE613A 		vsub.f32	s6, s6, s3
 588              	.LVL30:
 589              		.loc 1 291 46 view .LVU183
 590 009e 66EE836A 		vmul.f32	s13, s13, s6
 591              		.loc 1 291 60 view .LVU184
 592 00a2 73EE823A 		vadd.f32	s7, s7, s4
 593              	.LVL31:
 594              		.loc 1 291 68 view .LVU185
 595 00a6 24EE234A 		vmul.f32	s8, s8, s7
 596              		.loc 1 291 52 view .LVU186
 597 00aa 76EE846A 		vadd.f32	s13, s13, s8
 598              		.loc 1 291 95 view .LVU187
 599 00ae 64EEA47A 		vmul.f32	s15, s9, s9
 600              		.loc 1 291 89 view .LVU188
 601 00b2 75EEA77A 		vadd.f32	s15, s11, s15
 602              		.loc 1 291 102 view .LVU189
 603 00b6 25EE275A 		vmul.f32	s10, s10, s15
 604              		.loc 1 291 74 view .LVU190
 605 00ba 76EE856A 		vadd.f32	s13, s13, s10
 606              		.loc 1 291 29 view .LVU191
 607 00be 76EEA66A 		vadd.f32	s13, s13, s13
 608              		.loc 1 291 110 view .LVU192
 609 00c2 F7EE007A 		vmov.f32	s15, #1.0e+0
 610 00c6 76EEE76A 		vsub.f32	s13, s13, s15
 288:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy)
 611              		.loc 1 288 24 view .LVU193
 612 00ca CDED066A 		vstr.32	s13, [sp, #24]
 292:Core/Src/Fusion/FusionAhrs.c ****     }; // rotation matrix multiplied with the accelerometer, with 1 g subtracted
 293:Core/Src/Fusion/FusionAhrs.c ****     return earthAcceleration;
 613              		.loc 1 293 5 is_stmt 1 view .LVU194
 614              		.loc 1 293 12 is_stmt 0 view .LVU195
ARM GAS  /tmp/ccHlrfTi.s 			page 21


 615 00ce 04AB     		add	r3, sp, #16
 616 00d0 93E80700 		ldm	r3, {r0, r1, r2}
 617              	.LVL32:
 618              		.loc 1 293 12 view .LVU196
 619 00d4 0AAB     		add	r3, sp, #40
 620 00d6 03E90700 		stmdb	r3, {r0, r1, r2}
 294:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 295:Core/Src/Fusion/FusionAhrs.c **** #undef A
 296:Core/Src/Fusion/FusionAhrs.c **** }
 621              		.loc 1 296 1 view .LVU197
 622 00da 9DED070A 		vldr.32	s0, [sp, #28]
 623 00de DDED080A 		vldr.32	s1, [sp, #32]
 624 00e2 9DED091A 		vldr.32	s2, [sp, #36]
 625              	.LVL33:
 626              		.loc 1 296 1 view .LVU198
 627 00e6 0AB0     		add	sp, sp, #40
 628              	.LCFI9:
 629              		.cfi_def_cfa_offset 0
 630              		@ sp needed
 631 00e8 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE29:
 635              		.section	.text.FusionAhrsGetInternalStates,"ax",%progbits
 636              		.align	1
 637              		.global	FusionAhrsGetInternalStates
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu fpv4-sp-d16
 643              	FusionAhrsGetInternalStates:
 644              	.LVL34:
 645              	.LFB30:
 297:Core/Src/Fusion/FusionAhrs.c **** 
 298:Core/Src/Fusion/FusionAhrs.c **** /**
 299:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the AHRS algorithm internal states.
 300:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 301:Core/Src/Fusion/FusionAhrs.c ****  * @return AHRS algorithm internal states.
 302:Core/Src/Fusion/FusionAhrs.c ****  */
 303:Core/Src/Fusion/FusionAhrs.c **** FusionAhrsInternalStates FusionAhrsGetInternalStates(const FusionAhrs *const ahrs) {
 646              		.loc 1 303 84 is_stmt 1 view -0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 112
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		.loc 1 303 84 is_stmt 0 view .LVU200
 651 0000 30B5     		push	{r4, r5, lr}
 652              	.LCFI10:
 653              		.cfi_def_cfa_offset 12
 654              		.cfi_offset 4, -12
 655              		.cfi_offset 5, -8
 656              		.cfi_offset 14, -4
 657 0002 9DB0     		sub	sp, sp, #116
 658              	.LCFI11:
 659              		.cfi_def_cfa_offset 128
 660 0004 0446     		mov	r4, r0
 661 0006 0D46     		mov	r5, r1
 304:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsInternalStates internalStates = {
 662              		.loc 1 304 5 is_stmt 1 view .LVU201
ARM GAS  /tmp/ccHlrfTi.s 			page 22


 663 0008 0DF1040C 		add	ip, sp, #4
 664 000c 01F13803 		add	r3, r1, #56
 665 0010 93E80700 		ldm	r3, {r0, r1, r2}
 666              	.LVL35:
 667              		.loc 1 304 5 is_stmt 0 view .LVU202
 668 0014 8CE80700 		stm	ip, {r0, r1, r2}
 669              	.LBB76:
 670              	.LBI76:
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 244:Core/Inc/Fusion/FusionMath.h **** }
 245:Core/Inc/Fusion/FusionMath.h **** 
 246:Core/Inc/Fusion/FusionMath.h **** /**
 247:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 248:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 249:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 250:Core/Inc/Fusion/FusionMath.h ****  * @return Hadamard product.
 251:Core/Inc/Fusion/FusionMath.h ****  */
 252:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 253:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 256:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 257:Core/Inc/Fusion/FusionMath.h ****     return result;
 258:Core/Inc/Fusion/FusionMath.h **** }
 259:Core/Inc/Fusion/FusionMath.h **** 
 260:Core/Inc/Fusion/FusionMath.h **** /**
 261:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the cross product.
 262:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 263:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 264:Core/Inc/Fusion/FusionMath.h ****  * @return Cross product.
 265:Core/Inc/Fusion/FusionMath.h ****  */
 266:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
 267:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 268:Core/Inc/Fusion/FusionMath.h **** #define B vectorB.axis
 269:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
ARM GAS  /tmp/ccHlrfTi.s 			page 23


 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 272:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 273:Core/Inc/Fusion/FusionMath.h ****     return result;
 274:Core/Inc/Fusion/FusionMath.h **** #undef A
 275:Core/Inc/Fusion/FusionMath.h **** #undef B
 276:Core/Inc/Fusion/FusionMath.h **** }
 277:Core/Inc/Fusion/FusionMath.h **** 
 278:Core/Inc/Fusion/FusionMath.h **** /**
 279:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 280:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 281:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude squared.
 282:Core/Inc/Fusion/FusionMath.h ****  */
 283:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 284:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 285:Core/Inc/Fusion/FusionMath.h **** }
 286:Core/Inc/Fusion/FusionMath.h **** 
 287:Core/Inc/Fusion/FusionMath.h **** /**
 288:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude.
 289:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 290:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude.
 291:Core/Inc/Fusion/FusionMath.h ****  */
 292:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 671              		.loc 2 292 21 is_stmt 1 view .LVU203
 672              	.LBB77:
 293:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 673              		.loc 2 293 5 view .LVU204
 674 0018 04AB     		add	r3, sp, #16
 675 001a 83E80700 		stm	r3, {r0, r1, r2}
 676              	.LBB78:
 677              	.LBI78:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 678              		.loc 2 283 21 view .LVU205
 679              	.LBB79:
 284:Core/Inc/Fusion/FusionMath.h **** }
 680              		.loc 2 284 5 view .LVU206
 681 001e 0DF1280C 		add	ip, sp, #40
 682 0022 8CE80700 		stm	ip, {r0, r1, r2}
 683 0026 0DF11C0C 		add	ip, sp, #28
 684 002a 8CE80700 		stm	ip, {r0, r1, r2}
 685              	.LBB80:
 686              	.LBI80:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 687              		.loc 2 252 28 view .LVU207
 688              	.LBB81:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 689              		.loc 2 253 5 view .LVU208
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 690              		.loc 2 254 5 view .LVU209
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 691              		.loc 2 254 36 is_stmt 0 view .LVU210
 692 002e DDED0A7A 		vldr.32	s15, [sp, #40]
 693 0032 9DED070A 		vldr.32	s0, [sp, #28]
 694 0036 67EE807A 		vmul.f32	s15, s15, s0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 695              		.loc 2 254 19 view .LVU211
 696 003a CDED0D7A 		vstr.32	s15, [sp, #52]
ARM GAS  /tmp/ccHlrfTi.s 			page 24


 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 697              		.loc 2 255 5 is_stmt 1 view .LVU212
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 698              		.loc 2 255 36 is_stmt 0 view .LVU213
 699 003e 9DED0B7A 		vldr.32	s14, [sp, #44]
 700 0042 9DED080A 		vldr.32	s0, [sp, #32]
 701 0046 27EE007A 		vmul.f32	s14, s14, s0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 702              		.loc 2 255 19 view .LVU214
 703 004a 8DED0E7A 		vstr.32	s14, [sp, #56]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 704              		.loc 2 256 5 is_stmt 1 view .LVU215
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 705              		.loc 2 256 36 is_stmt 0 view .LVU216
 706 004e 9DED0C0A 		vldr.32	s0, [sp, #48]
 707 0052 DDED096A 		vldr.32	s13, [sp, #36]
 708 0056 20EE260A 		vmul.f32	s0, s0, s13
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 709              		.loc 2 256 19 view .LVU217
 710 005a 8DED0F0A 		vstr.32	s0, [sp, #60]
 257:Core/Inc/Fusion/FusionMath.h **** }
 711              		.loc 2 257 5 is_stmt 1 view .LVU218
 257:Core/Inc/Fusion/FusionMath.h **** }
 712              		.loc 2 257 12 is_stmt 0 view .LVU219
 713 005e 0DF1400E 		add	lr, sp, #64
 714 0062 0DAB     		add	r3, sp, #52
 715 0064 93E80700 		ldm	r3, {r0, r1, r2}
 716 0068 8EE80700 		stm	lr, {r0, r1, r2}
 717 006c 0DF14C0C 		add	ip, sp, #76
 718 0070 8CE80700 		stm	ip, {r0, r1, r2}
 719              	.LBE81:
 720              	.LBE80:
 721              	.LBB82:
 722              	.LBI82:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 723              		.loc 2 228 21 is_stmt 1 view .LVU220
 724              	.LBB83:
 229:Core/Inc/Fusion/FusionMath.h **** }
 725              		.loc 2 229 5 view .LVU221
 229:Core/Inc/Fusion/FusionMath.h **** }
 726              		.loc 2 229 26 is_stmt 0 view .LVU222
 727 0074 77EE877A 		vadd.f32	s15, s15, s14
 728              	.LBE83:
 729              	.LBE82:
 730              	.LBE79:
 731              	.LBE78:
 732              		.loc 2 293 12 view .LVU223
 733 0078 30EE270A 		vadd.f32	s0, s0, s15
 734 007c FFF7FEFF 		bl	sqrtf
 735              	.LVL36:
 736              	.LBE77:
 737              	.LBE76:
 305:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 738              		.loc 1 305 34 view .LVU224
 739 0080 30EE000A 		vadd.f32	s0, s0, s0
 740              	.LVL37:
 741              	.LBB84:
ARM GAS  /tmp/ccHlrfTi.s 			page 25


 742              	.LBI84:
 148:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 743              		.loc 2 148 21 is_stmt 1 view .LVU225
 744              	.LBB85:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 745              		.loc 2 149 5 view .LVU226
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 746              		.loc 2 149 8 is_stmt 0 view .LVU227
 747 0084 FFEE007A 		vmov.f32	s15, #-1.0e+0
 748 0088 B4EEE70A 		vcmpe.f32	s0, s15
 749 008c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 750 0090 40F28D80 		bls	.L30
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 751              		.loc 2 152 5 is_stmt 1 view .LVU228
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 752              		.loc 2 152 8 is_stmt 0 view .LVU229
 753 0094 F7EE007A 		vmov.f32	s15, #1.0e+0
 754 0098 B4EEE70A 		vcmpe.f32	s0, s15
 755 009c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 756 00a0 C0F28280 		blt	.L37
 153:Core/Inc/Fusion/FusionMath.h ****     }
 757              		.loc 2 153 29 view .LVU230
 758 00a4 9FED490A 		vldr.32	s0, .L39
 759              	.LVL38:
 760              	.L26:
 153:Core/Inc/Fusion/FusionMath.h ****     }
 761              		.loc 2 153 29 view .LVU231
 762              	.LBE85:
 763              	.LBE84:
 764              	.LBB87:
 765              	.LBI87:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 766              		.loc 2 136 21 is_stmt 1 view .LVU232
 767              	.LBB88:
 137:Core/Inc/Fusion/FusionMath.h **** }
 768              		.loc 2 137 5 view .LVU233
 137:Core/Inc/Fusion/FusionMath.h **** }
 769              		.loc 2 137 20 is_stmt 0 view .LVU234
 770 00a8 DFED497A 		vldr.32	s15, .L39+4
 771 00ac 20EE270A 		vmul.f32	s0, s0, s15
 772              	.LVL39:
 137:Core/Inc/Fusion/FusionMath.h **** }
 773              		.loc 2 137 20 view .LVU235
 774              	.LBE88:
 775              	.LBE87:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 776              		.loc 1 304 36 view .LVU236
 777 00b0 84ED000A 		vstr.32	s0, [r4]
 306:Core/Src/Fusion/FusionAhrs.c ****             .accelerometerIgnored = ahrs->accelerometerIgnored,
 778              		.loc 1 306 41 view .LVU237
 779 00b4 95F85030 		ldrb	r3, [r5, #80]	@ zero_extendqisi2
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 780              		.loc 1 304 36 view .LVU238
 781 00b8 2371     		strb	r3, [r4, #4]
 307:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejectionTimer = ahrs->settings.rejectionTimeout == 0 ? 0.0f : (float) ahr
 782              		.loc 1 307 57 view .LVU239
 783 00ba EB68     		ldr	r3, [r5, #12]
ARM GAS  /tmp/ccHlrfTi.s 			page 26


 784              		.loc 1 307 87 view .LVU240
 785 00bc 002B     		cmp	r3, #0
 786 00be 79D0     		beq	.L32
 787              		.loc 1 307 89 discriminator 1 view .LVU241
 788 00c0 D5ED157A 		vldr.32	s15, [r5, #84]	@ int
 789 00c4 F8EE676A 		vcvt.f32.u32	s13, s15
 790              		.loc 1 307 132 discriminator 1 view .LVU242
 791 00c8 07EE903A 		vmov	s15, r3	@ int
 792 00cc F8EE677A 		vcvt.f32.u32	s15, s15
 793              		.loc 1 307 87 discriminator 1 view .LVU243
 794 00d0 86EEA77A 		vdiv.f32	s14, s13, s15
 795              	.L27:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 796              		.loc 1 304 36 view .LVU244
 797 00d4 84ED027A 		vstr.32	s14, [r4, #8]
 798 00d8 0DF1040C 		add	ip, sp, #4
 799 00dc 05F14403 		add	r3, r5, #68
 800 00e0 93E80700 		ldm	r3, {r0, r1, r2}
 801 00e4 8CE80700 		stm	ip, {r0, r1, r2}
 802              	.LBB89:
 803              	.LBI89:
 292:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 804              		.loc 2 292 21 is_stmt 1 view .LVU245
 805              	.LBB90:
 806              		.loc 2 293 5 view .LVU246
 807 00e8 04AB     		add	r3, sp, #16
 808 00ea 83E80700 		stm	r3, {r0, r1, r2}
 809              	.LBB91:
 810              	.LBI91:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 811              		.loc 2 283 21 view .LVU247
 812              	.LBB92:
 284:Core/Inc/Fusion/FusionMath.h **** }
 813              		.loc 2 284 5 view .LVU248
 814 00ee 0DF1280C 		add	ip, sp, #40
 815 00f2 8CE80700 		stm	ip, {r0, r1, r2}
 816 00f6 0DF11C0C 		add	ip, sp, #28
 817 00fa 8CE80700 		stm	ip, {r0, r1, r2}
 818              	.LBB93:
 819              	.LBI93:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 820              		.loc 2 252 28 view .LVU249
 821              	.LBB94:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 822              		.loc 2 253 5 view .LVU250
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 823              		.loc 2 254 5 view .LVU251
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 824              		.loc 2 254 36 is_stmt 0 view .LVU252
 825 00fe DDED0A7A 		vldr.32	s15, [sp, #40]
 826 0102 9DED070A 		vldr.32	s0, [sp, #28]
 827 0106 67EE807A 		vmul.f32	s15, s15, s0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 828              		.loc 2 254 19 view .LVU253
 829 010a CDED0D7A 		vstr.32	s15, [sp, #52]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 830              		.loc 2 255 5 is_stmt 1 view .LVU254
ARM GAS  /tmp/ccHlrfTi.s 			page 27


 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 831              		.loc 2 255 36 is_stmt 0 view .LVU255
 832 010e 9DED0B7A 		vldr.32	s14, [sp, #44]
 833 0112 9DED080A 		vldr.32	s0, [sp, #32]
 834 0116 27EE007A 		vmul.f32	s14, s14, s0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 835              		.loc 2 255 19 view .LVU256
 836 011a 8DED0E7A 		vstr.32	s14, [sp, #56]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 837              		.loc 2 256 5 is_stmt 1 view .LVU257
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 838              		.loc 2 256 36 is_stmt 0 view .LVU258
 839 011e 9DED0C0A 		vldr.32	s0, [sp, #48]
 840 0122 DDED096A 		vldr.32	s13, [sp, #36]
 841 0126 20EE260A 		vmul.f32	s0, s0, s13
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 842              		.loc 2 256 19 view .LVU259
 843 012a 8DED0F0A 		vstr.32	s0, [sp, #60]
 257:Core/Inc/Fusion/FusionMath.h **** }
 844              		.loc 2 257 5 is_stmt 1 view .LVU260
 257:Core/Inc/Fusion/FusionMath.h **** }
 845              		.loc 2 257 12 is_stmt 0 view .LVU261
 846 012e 0DF1580E 		add	lr, sp, #88
 847 0132 0DAB     		add	r3, sp, #52
 848 0134 93E80700 		ldm	r3, {r0, r1, r2}
 849 0138 8EE80700 		stm	lr, {r0, r1, r2}
 850 013c 0DF1640C 		add	ip, sp, #100
 851 0140 8CE80700 		stm	ip, {r0, r1, r2}
 852              	.LBE94:
 853              	.LBE93:
 854              	.LBB95:
 855              	.LBI95:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 856              		.loc 2 228 21 is_stmt 1 view .LVU262
 857              	.LBB96:
 229:Core/Inc/Fusion/FusionMath.h **** }
 858              		.loc 2 229 5 view .LVU263
 229:Core/Inc/Fusion/FusionMath.h **** }
 859              		.loc 2 229 26 is_stmt 0 view .LVU264
 860 0144 77EE877A 		vadd.f32	s15, s15, s14
 861              	.LBE96:
 862              	.LBE95:
 863              	.LBE92:
 864              	.LBE91:
 865              		.loc 2 293 12 view .LVU265
 866 0148 30EE270A 		vadd.f32	s0, s0, s15
 867 014c FFF7FEFF 		bl	sqrtf
 868              	.LVL40:
 869              	.LBE90:
 870              	.LBE89:
 308:Core/Src/Fusion/FusionAhrs.c ****             .magneticError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahrs->h
 871              		.loc 1 308 30 view .LVU266
 872 0150 30EE000A 		vadd.f32	s0, s0, s0
 873              	.LVL41:
 874              	.LBB97:
 875              	.LBI97:
 148:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
ARM GAS  /tmp/ccHlrfTi.s 			page 28


 876              		.loc 2 148 21 is_stmt 1 view .LVU267
 877              	.LBB98:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 878              		.loc 2 149 5 view .LVU268
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 879              		.loc 2 149 8 is_stmt 0 view .LVU269
 880 0154 FFEE007A 		vmov.f32	s15, #-1.0e+0
 881 0158 B4EEE70A 		vcmpe.f32	s0, s15
 882 015c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 883 0160 2ED9     		bls	.L33
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 884              		.loc 2 152 5 is_stmt 1 view .LVU270
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 885              		.loc 2 152 8 is_stmt 0 view .LVU271
 886 0162 F7EE007A 		vmov.f32	s15, #1.0e+0
 887 0166 B4EEE70A 		vcmpe.f32	s0, s15
 888 016a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 889 016e 24DB     		blt	.L38
 153:Core/Inc/Fusion/FusionMath.h ****     }
 890              		.loc 2 153 29 view .LVU272
 891 0170 9FED160A 		vldr.32	s0, .L39
 892              	.LVL42:
 893              	.L28:
 153:Core/Inc/Fusion/FusionMath.h ****     }
 894              		.loc 2 153 29 view .LVU273
 895              	.LBE98:
 896              	.LBE97:
 897              	.LBB100:
 898              	.LBI100:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 899              		.loc 2 136 21 is_stmt 1 view .LVU274
 900              	.LBB101:
 137:Core/Inc/Fusion/FusionMath.h **** }
 901              		.loc 2 137 5 view .LVU275
 137:Core/Inc/Fusion/FusionMath.h **** }
 902              		.loc 2 137 20 is_stmt 0 view .LVU276
 903 0174 DFED167A 		vldr.32	s15, .L39+4
 904 0178 20EE270A 		vmul.f32	s0, s0, s15
 905              	.LVL43:
 137:Core/Inc/Fusion/FusionMath.h **** }
 906              		.loc 2 137 20 view .LVU277
 907              	.LBE101:
 908              	.LBE100:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 909              		.loc 1 304 36 view .LVU278
 910 017c 84ED030A 		vstr.32	s0, [r4, #12]
 309:Core/Src/Fusion/FusionAhrs.c ****             .magnetometerIgnored = ahrs->magnetometerIgnored,
 911              		.loc 1 309 40 view .LVU279
 912 0180 95F85930 		ldrb	r3, [r5, #89]	@ zero_extendqisi2
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 913              		.loc 1 304 36 view .LVU280
 914 0184 2374     		strb	r3, [r4, #16]
 310:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejectionTimer = ahrs->settings.rejectionTimeout == 0 ? 0.0f : (float) ahrs->m
 915              		.loc 1 310 53 view .LVU281
 916 0186 EB68     		ldr	r3, [r5, #12]
 917              		.loc 1 310 83 view .LVU282
 918 0188 EBB1     		cbz	r3, .L35
ARM GAS  /tmp/ccHlrfTi.s 			page 29


 919              		.loc 1 310 97 discriminator 1 view .LVU283
 920 018a D5ED176A 		vldr.32	s13, [r5, #92]	@ int
 921              		.loc 1 310 85 discriminator 1 view .LVU284
 922 018e F8EE666A 		vcvt.f32.u32	s13, s13
 923              		.loc 1 310 124 discriminator 1 view .LVU285
 924 0192 07EE903A 		vmov	s15, r3	@ int
 925 0196 F8EE677A 		vcvt.f32.u32	s15, s15
 926              		.loc 1 310 83 discriminator 1 view .LVU286
 927 019a 86EEA77A 		vdiv.f32	s14, s13, s15
 928              	.L29:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 929              		.loc 1 304 36 view .LVU287
 930 019e 84ED057A 		vstr.32	s14, [r4, #20]
 311:Core/Src/Fusion/FusionAhrs.c ****     };
 312:Core/Src/Fusion/FusionAhrs.c ****     return internalStates;
 931              		.loc 1 312 5 is_stmt 1 view .LVU288
 313:Core/Src/Fusion/FusionAhrs.c **** }
 932              		.loc 1 313 1 is_stmt 0 view .LVU289
 933 01a2 2046     		mov	r0, r4
 934 01a4 1DB0     		add	sp, sp, #116
 935              	.LCFI12:
 936              		.cfi_remember_state
 937              		.cfi_def_cfa_offset 12
 938              		@ sp needed
 939 01a6 30BD     		pop	{r4, r5, pc}
 940              	.LVL44:
 941              	.L37:
 942              	.LCFI13:
 943              		.cfi_restore_state
 944              	.LBB102:
 945              	.LBB86:
 155:Core/Inc/Fusion/FusionMath.h **** }
 946              		.loc 2 155 5 is_stmt 1 view .LVU290
 155:Core/Inc/Fusion/FusionMath.h **** }
 947              		.loc 2 155 12 is_stmt 0 view .LVU291
 948 01a8 FFF7FEFF 		bl	asinf
 949              	.LVL45:
 155:Core/Inc/Fusion/FusionMath.h **** }
 950              		.loc 2 155 12 view .LVU292
 951 01ac 7CE7     		b	.L26
 952              	.LVL46:
 953              	.L30:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 954              		.loc 2 150 29 view .LVU293
 955 01ae 9FED090A 		vldr.32	s0, .L39+8
 956              	.LVL47:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 957              		.loc 2 150 29 view .LVU294
 958 01b2 79E7     		b	.L26
 959              	.L32:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 960              		.loc 2 150 29 view .LVU295
 961              	.LBE86:
 962              	.LBE102:
 307:Core/Src/Fusion/FusionAhrs.c ****             .magneticError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahrs->h
 963              		.loc 1 307 87 view .LVU296
 964 01b4 9FED087A 		vldr.32	s14, .L39+12
ARM GAS  /tmp/ccHlrfTi.s 			page 30


 965 01b8 8CE7     		b	.L27
 966              	.LVL48:
 967              	.L38:
 968              	.LBB103:
 969              	.LBB99:
 155:Core/Inc/Fusion/FusionMath.h **** }
 970              		.loc 2 155 5 is_stmt 1 view .LVU297
 155:Core/Inc/Fusion/FusionMath.h **** }
 971              		.loc 2 155 12 is_stmt 0 view .LVU298
 972 01ba FFF7FEFF 		bl	asinf
 973              	.LVL49:
 155:Core/Inc/Fusion/FusionMath.h **** }
 974              		.loc 2 155 12 view .LVU299
 975 01be D9E7     		b	.L28
 976              	.LVL50:
 977              	.L33:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 978              		.loc 2 150 29 view .LVU300
 979 01c0 9FED040A 		vldr.32	s0, .L39+8
 980              	.LVL51:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 981              		.loc 2 150 29 view .LVU301
 982 01c4 D6E7     		b	.L28
 983              	.L35:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 984              		.loc 2 150 29 view .LVU302
 985              	.LBE99:
 986              	.LBE103:
 310:Core/Src/Fusion/FusionAhrs.c ****     };
 987              		.loc 1 310 83 view .LVU303
 988 01c6 9FED047A 		vldr.32	s14, .L39+12
 989 01ca E8E7     		b	.L29
 990              	.L40:
 991              		.align	2
 992              	.L39:
 993 01cc DB0FC93F 		.word	1070141403
 994 01d0 E02E6542 		.word	1113927392
 995 01d4 DB0FC9BF 		.word	-1077342245
 996 01d8 00000000 		.word	0
 997              		.cfi_endproc
 998              	.LFE30:
 1000              		.section	.text.FusionAhrsGetFlags,"ax",%progbits
 1001              		.align	1
 1002              		.global	FusionAhrsGetFlags
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv4-sp-d16
 1008              	FusionAhrsGetFlags:
 1009              	.LVL52:
 1010              	.LFB31:
 314:Core/Src/Fusion/FusionAhrs.c **** 
 315:Core/Src/Fusion/FusionAhrs.c **** /**
 316:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the AHRS algorithm flags.
 317:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 318:Core/Src/Fusion/FusionAhrs.c ****  * @return AHRS algorithm flags.
 319:Core/Src/Fusion/FusionAhrs.c ****  */
ARM GAS  /tmp/ccHlrfTi.s 			page 31


 320:Core/Src/Fusion/FusionAhrs.c **** FusionAhrsFlags FusionAhrsGetFlags(FusionAhrs *const ahrs) {
 1011              		.loc 1 320 60 is_stmt 1 view -0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015              		@ link register save eliminated.
 1016              		.loc 1 320 60 is_stmt 0 view .LVU305
 1017 0000 10B4     		push	{r4}
 1018              	.LCFI14:
 1019              		.cfi_def_cfa_offset 4
 1020              		.cfi_offset 4, -4
 321:Core/Src/Fusion/FusionAhrs.c ****     const unsigned int warningTimeout = ahrs->settings.rejectionTimeout / 4;
 1021              		.loc 1 321 5 is_stmt 1 view .LVU306
 1022              		.loc 1 321 55 is_stmt 0 view .LVU307
 1023 0002 CA68     		ldr	r2, [r1, #12]
 1024              	.LVL53:
 322:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 1025              		.loc 1 322 5 is_stmt 1 view .LVU308
 323:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1026              		.loc 1 323 33 is_stmt 0 view .LVU309
 1027 0004 91F82CC0 		ldrb	ip, [r1, #44]	@ zero_extendqisi2
 322:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 1028              		.loc 1 322 27 view .LVU310
 1029 0008 80F800C0 		strb	ip, [r0]
 324:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejectionWarning = ahrs->accelerationRejectionTimer > warningTimeout,
 1030              		.loc 1 324 78 view .LVU311
 1031 000c 4C6D     		ldr	r4, [r1, #84]
 1032 000e B4EB920F 		cmp	r4, r2, lsr #2
 1033 0012 8CBF     		ite	hi
 1034 0014 4FF0010C 		movhi	ip, #1
 1035 0018 4FF0000C 		movls	ip, #0
 322:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 1036              		.loc 1 322 27 view .LVU312
 1037 001c 80F801C0 		strb	ip, [r0, #1]
 325:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejectionTimeout = ahrs->accelerationRejectionTimeout,
 1038              		.loc 1 325 49 view .LVU313
 1039 0020 91F858C0 		ldrb	ip, [r1, #88]	@ zero_extendqisi2
 322:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1040              		.loc 1 322 27 view .LVU314
 1041 0024 80F802C0 		strb	ip, [r0, #2]
 326:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejectionWarning = ahrs->magneticRejectionTimer > warningTimeout,
 1042              		.loc 1 326 70 view .LVU315
 1043 0028 CC6D     		ldr	r4, [r1, #92]
 1044 002a B4EB920F 		cmp	r4, r2, lsr #2
 1045 002e 8CBF     		ite	hi
 1046 0030 0122     		movhi	r2, #1
 1047              	.LVL54:
 1048              		.loc 1 326 70 view .LVU316
 1049 0032 0022     		movls	r2, #0
 322:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1050              		.loc 1 322 27 view .LVU317
 1051 0034 C270     		strb	r2, [r0, #3]
 327:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejectionTimeout = ahrs->magneticRejectionTimeout,
 1052              		.loc 1 327 45 view .LVU318
 1053 0036 91F86020 		ldrb	r2, [r1, #96]	@ zero_extendqisi2
 322:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1054              		.loc 1 322 27 view .LVU319
ARM GAS  /tmp/ccHlrfTi.s 			page 32


 1055 003a 0271     		strb	r2, [r0, #4]
 328:Core/Src/Fusion/FusionAhrs.c ****     };
 329:Core/Src/Fusion/FusionAhrs.c ****     return flags;
 1056              		.loc 1 329 5 is_stmt 1 view .LVU320
 330:Core/Src/Fusion/FusionAhrs.c **** }
 1057              		.loc 1 330 1 is_stmt 0 view .LVU321
 1058 003c 5DF8044B 		ldr	r4, [sp], #4
 1059              	.LCFI15:
 1060              		.cfi_restore 4
 1061              		.cfi_def_cfa_offset 0
 1062 0040 7047     		bx	lr
 1063              		.cfi_endproc
 1064              	.LFE31:
 1066              		.section	.text.FusionAhrsSetHeading,"ax",%progbits
 1067              		.align	1
 1068              		.global	FusionAhrsSetHeading
 1069              		.syntax unified
 1070              		.thumb
 1071              		.thumb_func
 1072              		.fpu fpv4-sp-d16
 1074              	FusionAhrsSetHeading:
 1075              	.LVL55:
 1076              	.LFB32:
 331:Core/Src/Fusion/FusionAhrs.c **** 
 332:Core/Src/Fusion/FusionAhrs.c **** /**
 333:Core/Src/Fusion/FusionAhrs.c ****  * @brief Sets the heading of the orientation measurement provided by the AHRS
 334:Core/Src/Fusion/FusionAhrs.c ****  * algorithm.  This function can be used to reset drift in heading when the AHRS
 335:Core/Src/Fusion/FusionAhrs.c ****  * algorithm is being used without a magnetometer.
 336:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 337:Core/Src/Fusion/FusionAhrs.c ****  * @param heading Heading angle in degrees.
 338:Core/Src/Fusion/FusionAhrs.c ****  */
 339:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 1077              		.loc 1 339 72 is_stmt 1 view -0
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 96
 1080              		@ frame_needed = 0, uses_anonymous_args = 0
 1081              		.loc 1 339 72 is_stmt 0 view .LVU323
 1082 0000 10B5     		push	{r4, lr}
 1083              	.LCFI16:
 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 4, -8
 1086              		.cfi_offset 14, -4
 1087 0002 2DED028B 		vpush.64	{d8}
 1088              	.LCFI17:
 1089              		.cfi_def_cfa_offset 16
 1090              		.cfi_offset 80, -16
 1091              		.cfi_offset 81, -12
 1092 0006 98B0     		sub	sp, sp, #96
 1093              	.LCFI18:
 1094              		.cfi_def_cfa_offset 112
 1095 0008 0446     		mov	r4, r0
 1096 000a B0EE408A 		vmov.f32	s16, s0
 340:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 341:Core/Src/Fusion/FusionAhrs.c ****     const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 1097              		.loc 1 341 5 is_stmt 1 view .LVU324
 1098              		.loc 1 341 31 is_stmt 0 view .LVU325
 1099 000e 90ED040A 		vldr.32	s0, [r0, #16]
ARM GAS  /tmp/ccHlrfTi.s 			page 33


 1100              	.LVL56:
 1101              		.loc 1 341 37 view .LVU326
 1102 0012 D0ED077A 		vldr.32	s15, [r0, #28]
 1103              		.loc 1 341 34 view .LVU327
 1104 0016 20EE270A 		vmul.f32	s0, s0, s15
 1105              		.loc 1 341 43 view .LVU328
 1106 001a 90ED057A 		vldr.32	s14, [r0, #20]
 1107              		.loc 1 341 49 view .LVU329
 1108 001e D0ED060A 		vldr.32	s1, [r0, #24]
 1109              		.loc 1 341 46 view .LVU330
 1110 0022 27EE207A 		vmul.f32	s14, s14, s1
 1111              		.loc 1 341 64 view .LVU331
 1112 0026 60EEA00A 		vmul.f32	s1, s1, s1
 1113              		.loc 1 341 58 view .LVU332
 1114 002a F6EE008A 		vmov.f32	s17, #5.0e-1
 1115 002e 78EEE00A 		vsub.f32	s1, s17, s1
 1116              		.loc 1 341 76 view .LVU333
 1117 0032 67EEA77A 		vmul.f32	s15, s15, s15
 1118              		.loc 1 341 23 view .LVU334
 1119 0036 70EEE70A 		vsub.f32	s1, s1, s15
 1120 003a 30EE070A 		vadd.f32	s0, s0, s14
 1121 003e FFF7FEFF 		bl	atan2f
 1122              	.LVL57:
 342:Core/Src/Fusion/FusionAhrs.c ****     const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 1123              		.loc 1 342 5 is_stmt 1 view .LVU335
 1124              	.LBB108:
 1125              	.LBI108:
 127:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 1126              		.loc 2 127 21 view .LVU336
 1127              	.LBB109:
 128:Core/Inc/Fusion/FusionMath.h **** }
 1128              		.loc 2 128 5 view .LVU337
 128:Core/Inc/Fusion/FusionMath.h **** }
 1129              		.loc 2 128 20 is_stmt 0 view .LVU338
 1130 0042 DFED427A 		vldr.32	s15, .L45
 1131 0046 28EE278A 		vmul.f32	s16, s16, s15
 1132              	.LVL58:
 128:Core/Inc/Fusion/FusionMath.h **** }
 1133              		.loc 2 128 20 view .LVU339
 1134              	.LBE109:
 1135              	.LBE108:
 1136              		.loc 1 342 51 view .LVU340
 1137 004a 30EE488A 		vsub.f32	s16, s0, s16
 1138              		.loc 1 342 17 view .LVU341
 1139 004e 28EE288A 		vmul.f32	s16, s16, s17
 1140              	.LVL59:
 343:Core/Src/Fusion/FusionAhrs.c ****     const FusionQuaternion rotation = {
 1141              		.loc 1 343 5 is_stmt 1 view .LVU342
 344:Core/Src/Fusion/FusionAhrs.c ****             .element.w = cosf(halfYawMinusHeading),
 1142              		.loc 1 344 26 is_stmt 0 view .LVU343
 1143 0052 B0EE480A 		vmov.f32	s0, s16
 1144              	.LVL60:
 1145              		.loc 1 344 26 view .LVU344
 1146 0056 FFF7FEFF 		bl	cosf
 1147              	.LVL61:
 343:Core/Src/Fusion/FusionAhrs.c ****     const FusionQuaternion rotation = {
 1148              		.loc 1 343 28 view .LVU345
ARM GAS  /tmp/ccHlrfTi.s 			page 34


 1149 005a 8DED0C0A 		vstr.32	s0, [sp, #48]
 1150 005e 0023     		movs	r3, #0
 1151 0060 0D93     		str	r3, [sp, #52]	@ float
 1152 0062 0E93     		str	r3, [sp, #56]	@ float
 345:Core/Src/Fusion/FusionAhrs.c ****             .element.x = 0.0f,
 346:Core/Src/Fusion/FusionAhrs.c ****             .element.y = 0.0f,
 347:Core/Src/Fusion/FusionAhrs.c ****             .element.z = -1.0f * sinf(halfYawMinusHeading),
 1153              		.loc 1 347 34 view .LVU346
 1154 0064 B0EE480A 		vmov.f32	s0, s16
 1155 0068 FFF7FEFF 		bl	sinf
 1156              	.LVL62:
 1157              		.loc 1 347 32 view .LVU347
 1158 006c B1EE400A 		vneg.f32	s0, s0
 343:Core/Src/Fusion/FusionAhrs.c ****             .element.w = cosf(halfYawMinusHeading),
 1159              		.loc 1 343 28 view .LVU348
 1160 0070 8DED0F0A 		vstr.32	s0, [sp, #60]
 348:Core/Src/Fusion/FusionAhrs.c ****     };
 349:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 1161              		.loc 1 349 5 is_stmt 1 view .LVU349
 1162 0074 EC46     		mov	ip, sp
 1163 0076 0CAB     		add	r3, sp, #48
 1164 0078 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1165 007a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 1166 007e 0DF1100E 		add	lr, sp, #16
 1167 0082 04F1100C 		add	ip, r4, #16
 1168 0086 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 1169 008a 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 1170              	.LBB110:
 1171              	.LBI110:
 294:Core/Inc/Fusion/FusionMath.h **** }
 295:Core/Inc/Fusion/FusionMath.h **** 
 296:Core/Inc/Fusion/FusionMath.h **** /**
 297:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised vector.
 298:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 299:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised vector.
 300:Core/Inc/Fusion/FusionMath.h ****  */
 301:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 302:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 303:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 304:Core/Inc/Fusion/FusionMath.h **** #else
 305:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 306:Core/Inc/Fusion/FusionMath.h **** #endif
 307:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 308:Core/Inc/Fusion/FusionMath.h **** }
 309:Core/Inc/Fusion/FusionMath.h **** 
 310:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 311:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Quaternion operations
 312:Core/Inc/Fusion/FusionMath.h **** 
 313:Core/Inc/Fusion/FusionMath.h **** /**
 314:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 315:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A.
 316:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B.
 317:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two quaternions.
 318:Core/Inc/Fusion/FusionMath.h ****  */
 319:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 320:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.w = quaternionA.element.w + quaternionB.element.w;
ARM GAS  /tmp/ccHlrfTi.s 			page 35


 322:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 324:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 325:Core/Inc/Fusion/FusionMath.h ****     return result;
 326:Core/Inc/Fusion/FusionMath.h **** }
 327:Core/Inc/Fusion/FusionMath.h **** 
 328:Core/Inc/Fusion/FusionMath.h **** /**
 329:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 330:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 331:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 332:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of two quaternions.
 333:Core/Inc/Fusion/FusionMath.h ****  */
 334:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 1172              		.loc 2 334 32 view .LVU350
 1173              	.LBB111:
 335:Core/Inc/Fusion/FusionMath.h **** #define A quaternionA.element
 336:Core/Inc/Fusion/FusionMath.h **** #define B quaternionB.element
 337:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 1174              		.loc 2 337 5 view .LVU351
 338:Core/Inc/Fusion/FusionMath.h ****     result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 1175              		.loc 2 338 5 view .LVU352
 1176              		.loc 2 338 25 is_stmt 0 view .LVU353
 1177 008e DDED007A 		vldr.32	s15, [sp]
 1178              		.loc 2 338 31 view .LVU354
 1179 0092 DDED046A 		vldr.32	s13, [sp, #16]
 1180              		.loc 2 338 28 view .LVU355
 1181 0096 27EEA67A 		vmul.f32	s14, s15, s13
 1182              		.loc 2 338 37 view .LVU356
 1183 009a DDED015A 		vldr.32	s11, [sp, #4]
 1184              		.loc 2 338 43 view .LVU357
 1185 009e 9DED056A 		vldr.32	s12, [sp, #20]
 1186              		.loc 2 338 40 view .LVU358
 1187 00a2 25EE865A 		vmul.f32	s10, s11, s12
 1188              		.loc 2 338 34 view .LVU359
 1189 00a6 37EE457A 		vsub.f32	s14, s14, s10
 1190              		.loc 2 338 49 view .LVU360
 1191 00aa DDED024A 		vldr.32	s9, [sp, #8]
 1192              		.loc 2 338 55 view .LVU361
 1193 00ae 9DED064A 		vldr.32	s8, [sp, #24]
 1194              		.loc 2 338 52 view .LVU362
 1195 00b2 24EE845A 		vmul.f32	s10, s9, s8
 1196              		.loc 2 338 46 view .LVU363
 1197 00b6 37EE457A 		vsub.f32	s14, s14, s10
 1198              		.loc 2 338 61 view .LVU364
 1199 00ba 9DED035A 		vldr.32	s10, [sp, #12]
 1200              		.loc 2 338 67 view .LVU365
 1201 00be DDED073A 		vldr.32	s7, [sp, #28]
 1202              		.loc 2 338 64 view .LVU366
 1203 00c2 25EE233A 		vmul.f32	s6, s10, s7
 1204              		.loc 2 338 58 view .LVU367
 1205 00c6 37EE437A 		vsub.f32	s14, s14, s6
 1206              		.loc 2 338 22 view .LVU368
 1207 00ca 8DED087A 		vstr.32	s14, [sp, #32]
 339:Core/Inc/Fusion/FusionMath.h ****     result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 1208              		.loc 2 339 5 is_stmt 1 view .LVU369
 1209              		.loc 2 339 28 is_stmt 0 view .LVU370
 1210 00ce 27EE867A 		vmul.f32	s14, s15, s12
ARM GAS  /tmp/ccHlrfTi.s 			page 36


 1211              		.loc 2 339 40 view .LVU371
 1212 00d2 26EEA53A 		vmul.f32	s6, s13, s11
 1213              		.loc 2 339 34 view .LVU372
 1214 00d6 37EE037A 		vadd.f32	s14, s14, s6
 1215              		.loc 2 339 52 view .LVU373
 1216 00da 24EEA33A 		vmul.f32	s6, s9, s7
 1217              		.loc 2 339 46 view .LVU374
 1218 00de 37EE037A 		vadd.f32	s14, s14, s6
 1219              		.loc 2 339 64 view .LVU375
 1220 00e2 24EE053A 		vmul.f32	s6, s8, s10
 1221              		.loc 2 339 58 view .LVU376
 1222 00e6 37EE437A 		vsub.f32	s14, s14, s6
 1223              		.loc 2 339 22 view .LVU377
 1224 00ea 8DED097A 		vstr.32	s14, [sp, #36]
 340:Core/Inc/Fusion/FusionMath.h ****     result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 1225              		.loc 2 340 5 is_stmt 1 view .LVU378
 1226              		.loc 2 340 28 is_stmt 0 view .LVU379
 1227 00ee 27EE847A 		vmul.f32	s14, s15, s8
 1228              		.loc 2 340 40 view .LVU380
 1229 00f2 25EEA33A 		vmul.f32	s6, s11, s7
 1230              		.loc 2 340 34 view .LVU381
 1231 00f6 37EE437A 		vsub.f32	s14, s14, s6
 1232              		.loc 2 340 52 view .LVU382
 1233 00fa 26EEA43A 		vmul.f32	s6, s13, s9
 1234              		.loc 2 340 46 view .LVU383
 1235 00fe 37EE037A 		vadd.f32	s14, s14, s6
 1236              		.loc 2 340 64 view .LVU384
 1237 0102 26EE053A 		vmul.f32	s6, s12, s10
 1238              		.loc 2 340 58 view .LVU385
 1239 0106 37EE037A 		vadd.f32	s14, s14, s6
 1240              		.loc 2 340 22 view .LVU386
 1241 010a 8DED0A7A 		vstr.32	s14, [sp, #40]
 341:Core/Inc/Fusion/FusionMath.h ****     result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 1242              		.loc 2 341 5 is_stmt 1 view .LVU387
 1243              		.loc 2 341 28 is_stmt 0 view .LVU388
 1244 010e 67EEA37A 		vmul.f32	s15, s15, s7
 1245              		.loc 2 341 40 view .LVU389
 1246 0112 65EE845A 		vmul.f32	s11, s11, s8
 1247              		.loc 2 341 34 view .LVU390
 1248 0116 77EEA57A 		vadd.f32	s15, s15, s11
 1249              		.loc 2 341 52 view .LVU391
 1250 011a 26EE246A 		vmul.f32	s12, s12, s9
 1251              		.loc 2 341 46 view .LVU392
 1252 011e 77EEC67A 		vsub.f32	s15, s15, s12
 1253              		.loc 2 341 64 view .LVU393
 1254 0122 66EE856A 		vmul.f32	s13, s13, s10
 1255              		.loc 2 341 58 view .LVU394
 1256 0126 77EEA67A 		vadd.f32	s15, s15, s13
 1257              		.loc 2 341 22 view .LVU395
 1258 012a CDED0B7A 		vstr.32	s15, [sp, #44]
 342:Core/Inc/Fusion/FusionMath.h ****     return result;
 1259              		.loc 2 342 5 is_stmt 1 view .LVU396
 1260              		.loc 2 342 12 is_stmt 0 view .LVU397
 1261 012e 0DF1500E 		add	lr, sp, #80
 1262 0132 08AB     		add	r3, sp, #32
 1263 0134 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1264 0136 8EE80F00 		stm	lr, {r0, r1, r2, r3}
ARM GAS  /tmp/ccHlrfTi.s 			page 37


 1265 013a 10AC     		add	r4, sp, #64
 1266              	.LVL63:
 1267              		.loc 2 342 12 view .LVU398
 1268 013c 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1269              	.LBE111:
 1270              	.LBE110:
 1271              		.loc 1 349 24 view .LVU399
 1272 0140 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 350:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 351:Core/Src/Fusion/FusionAhrs.c **** }
 1273              		.loc 1 351 1 view .LVU400
 1274 0144 18B0     		add	sp, sp, #96
 1275              	.LCFI19:
 1276              		.cfi_def_cfa_offset 16
 1277              		@ sp needed
 1278 0146 BDEC028B 		vldm	sp!, {d8}
 1279              	.LCFI20:
 1280              		.cfi_restore 80
 1281              		.cfi_restore 81
 1282              		.cfi_def_cfa_offset 8
 1283              	.LVL64:
 1284              		.loc 1 351 1 view .LVU401
 1285 014a 10BD     		pop	{r4, pc}
 1286              	.L46:
 1287              		.align	2
 1288              	.L45:
 1289 014c 35FA8E3C 		.word	1016003125
 1290              		.cfi_endproc
 1291              	.LFE32:
 1293              		.section	.text.FusionAhrsUpdate,"ax",%progbits
 1294              		.align	1
 1295              		.global	FusionAhrsUpdate
 1296              		.syntax unified
 1297              		.thumb
 1298              		.thumb_func
 1299              		.fpu fpv4-sp-d16
 1301              	FusionAhrsUpdate:
 1302              	.LVL65:
 1303              	.LFB24:
 100:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1304              		.loc 1 100 167 is_stmt 1 view -0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 616
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 100:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1308              		.loc 1 100 167 is_stmt 0 view .LVU403
 1309 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1310              	.LCFI21:
 1311              		.cfi_def_cfa_offset 24
 1312              		.cfi_offset 4, -24
 1313              		.cfi_offset 5, -20
 1314              		.cfi_offset 6, -16
 1315              		.cfi_offset 7, -12
 1316              		.cfi_offset 8, -8
 1317              		.cfi_offset 14, -4
 1318 0004 2DED028B 		vpush.64	{d8}
 1319              	.LCFI22:
ARM GAS  /tmp/ccHlrfTi.s 			page 38


 1320              		.cfi_def_cfa_offset 32
 1321              		.cfi_offset 80, -32
 1322              		.cfi_offset 81, -28
 1323 0008 ADF51A7D 		sub	sp, sp, #616
 1324              	.LCFI23:
 1325              		.cfi_def_cfa_offset 648
 1326 000c 0446     		mov	r4, r0
 1327 000e 04AB     		add	r3, sp, #16
 1328 0010 B0EE648A 		vmov.f32	s16, s9
 1329 0014 8DED070A 		vstr.32	s0, [sp, #28]
 1330 0018 CDED080A 		vstr.32	s1, [sp, #32]
 1331 001c 8DED091A 		vstr.32	s2, [sp, #36]
 1332 0020 CDED041A 		vstr.32	s3, [sp, #16]
 1333 0024 8DED052A 		vstr.32	s4, [sp, #20]
 1334 0028 CDED062A 		vstr.32	s5, [sp, #24]
 1335 002c 8DED013A 		vstr.32	s6, [sp, #4]
 1336 0030 CDED023A 		vstr.32	s7, [sp, #8]
 1337 0034 8DED034A 		vstr.32	s8, [sp, #12]
 104:Core/Src/Fusion/FusionAhrs.c **** 
 1338              		.loc 1 104 5 is_stmt 1 view .LVU404
 104:Core/Src/Fusion/FusionAhrs.c **** 
 1339              		.loc 1 104 25 is_stmt 0 view .LVU405
 1340 0038 00F12005 		add	r5, r0, #32
 1341 003c 93E80700 		ldm	r3, {r0, r1, r2}
 1342              	.LVL66:
 104:Core/Src/Fusion/FusionAhrs.c **** 
 1343              		.loc 1 104 25 view .LVU406
 1344 0040 85E80700 		stm	r5, {r0, r1, r2}
 107:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1345              		.loc 1 107 5 is_stmt 1 view .LVU407
 107:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1346              		.loc 1 107 13 is_stmt 0 view .LVU408
 1347 0044 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 107:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1348              		.loc 1 107 8 view .LVU409
 1349 0048 BBB1     		cbz	r3, .L48
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1350              		.loc 1 108 9 is_stmt 1 view .LVU410
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1351              		.loc 1 108 33 is_stmt 0 view .LVU411
 1352 004a D4ED0D7A 		vldr.32	s15, [r4, #52]
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1353              		.loc 1 108 50 view .LVU412
 1354 004e 27EEA47A 		vmul.f32	s14, s15, s9
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1355              		.loc 1 108 26 view .LVU413
 1356 0052 D4ED0C7A 		vldr.32	s15, [r4, #48]
 1357 0056 77EEC77A 		vsub.f32	s15, s15, s14
 1358 005a C4ED0C7A 		vstr.32	s15, [r4, #48]
 109:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1359              		.loc 1 109 9 is_stmt 1 view .LVU414
 109:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1360              		.loc 1 109 46 is_stmt 0 view .LVU415
 1361 005e 94ED007A 		vldr.32	s14, [r4]
 109:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1362              		.loc 1 109 12 view .LVU416
 1363 0062 F4EEC77A 		vcmpe.f32	s15, s14
ARM GAS  /tmp/ccHlrfTi.s 			page 39


 1364 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1365 006a 06D5     		bpl	.L48
 110:Core/Src/Fusion/FusionAhrs.c ****             ahrs->initialising = false;
 1366              		.loc 1 110 13 is_stmt 1 view .LVU417
 110:Core/Src/Fusion/FusionAhrs.c ****             ahrs->initialising = false;
 1367              		.loc 1 110 30 is_stmt 0 view .LVU418
 1368 006c 84ED0C7A 		vstr.32	s14, [r4, #48]
 111:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = false;
 1369              		.loc 1 111 13 is_stmt 1 view .LVU419
 111:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = false;
 1370              		.loc 1 111 32 is_stmt 0 view .LVU420
 1371 0070 0023     		movs	r3, #0
 1372 0072 84F82C30 		strb	r3, [r4, #44]
 112:Core/Src/Fusion/FusionAhrs.c ****         }
 1373              		.loc 1 112 13 is_stmt 1 view .LVU421
 112:Core/Src/Fusion/FusionAhrs.c ****         }
 1374              		.loc 1 112 48 is_stmt 0 view .LVU422
 1375 0076 84F85830 		strb	r3, [r4, #88]
 1376              	.L48:
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1377              		.loc 1 117 5 is_stmt 1 view .LVU423
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1378              		.loc 1 118 24 is_stmt 0 view .LVU424
 1379 007a 94ED056A 		vldr.32	s12, [r4, #20]
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1380              		.loc 1 118 30 view .LVU425
 1381 007e 94ED077A 		vldr.32	s14, [r4, #28]
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1382              		.loc 1 118 27 view .LVU426
 1383 0082 66EE075A 		vmul.f32	s11, s12, s14
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1384              		.loc 1 118 36 view .LVU427
 1385 0086 D4ED047A 		vldr.32	s15, [r4, #16]
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1386              		.loc 1 118 42 view .LVU428
 1387 008a D4ED066A 		vldr.32	s13, [r4, #24]
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1388              		.loc 1 118 39 view .LVU429
 1389 008e 27EEA65A 		vmul.f32	s10, s15, s13
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1390              		.loc 1 118 33 view .LVU430
 1391 0092 75EEC55A 		vsub.f32	s11, s11, s10
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1392              		.loc 1 117 24 view .LVU431
 1393 0096 CDED2B5A 		vstr.32	s11, [sp, #172]
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 1394              		.loc 1 119 27 view .LVU432
 1395 009a 67EE266A 		vmul.f32	s13, s14, s13
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 1396              		.loc 1 119 39 view .LVU433
 1397 009e 26EE276A 		vmul.f32	s12, s12, s15
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 1398              		.loc 1 119 33 view .LVU434
 1399 00a2 76EE866A 		vadd.f32	s13, s13, s12
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1400              		.loc 1 117 24 view .LVU435
 1401 00a6 CDED2C6A 		vstr.32	s13, [sp, #176]
ARM GAS  /tmp/ccHlrfTi.s 			page 40


 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1402              		.loc 1 120 27 view .LVU436
 1403 00aa 67EEA77A 		vmul.f32	s15, s15, s15
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1404              		.loc 1 120 33 view .LVU437
 1405 00ae F6EE006A 		vmov.f32	s13, #5.0e-1
 1406 00b2 77EEE67A 		vsub.f32	s15, s15, s13
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1407              		.loc 1 120 46 view .LVU438
 1408 00b6 27EE077A 		vmul.f32	s14, s14, s14
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1409              		.loc 1 120 40 view .LVU439
 1410 00ba 77EE877A 		vadd.f32	s15, s15, s14
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1411              		.loc 1 117 24 view .LVU440
 1412 00be CDED2D7A 		vstr.32	s15, [sp, #180]
 124:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 1413              		.loc 1 124 5 is_stmt 1 view .LVU441
 124:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 1414              		.loc 1 124 18 is_stmt 0 view .LVU442
 1415 00c2 0023     		movs	r3, #0
 1416 00c4 2893     		str	r3, [sp, #160]	@ float
 1417 00c6 2993     		str	r3, [sp, #164]	@ float
 1418 00c8 2A93     		str	r3, [sp, #168]	@ float
 125:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 1419              		.loc 1 125 5 is_stmt 1 view .LVU443
 125:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 1420              		.loc 1 125 32 is_stmt 0 view .LVU444
 1421 00ca 0123     		movs	r3, #1
 1422 00cc 84F85030 		strb	r3, [r4, #80]
 126:Core/Src/Fusion/FusionAhrs.c **** 
 1423              		.loc 1 126 5 is_stmt 1 view .LVU445
 1424 00d0 1BAB     		add	r3, sp, #108
 1425 00d2 04AA     		add	r2, sp, #16
 1426 00d4 07CA     		ldm	r2, {r0, r1, r2}
 1427 00d6 83E80700 		stm	r3, {r0, r1, r2}
 1428              	.LBB178:
 1429              	.LBI178:
 191:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 1430              		.loc 2 191 20 view .LVU446
 1431              	.LBB179:
 192:Core/Inc/Fusion/FusionMath.h **** }
 1432              		.loc 2 192 5 view .LVU447
 192:Core/Inc/Fusion/FusionMath.h **** }
 1433              		.loc 2 192 24 is_stmt 0 view .LVU448
 1434 00da D3ED007A 		vldr.32	s15, [r3]
 192:Core/Inc/Fusion/FusionMath.h **** }
 1435              		.loc 2 192 63 view .LVU449
 1436 00de F5EE407A 		vcmp.f32	s15, #0
 1437 00e2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1438 00e6 11D1     		bne	.L65
 192:Core/Inc/Fusion/FusionMath.h **** }
 1439              		.loc 2 192 51 view .LVU450
 1440 00e8 DDED1C7A 		vldr.32	s15, [sp, #112]
 192:Core/Inc/Fusion/FusionMath.h **** }
 1441              		.loc 2 192 36 view .LVU451
 1442 00ec F5EE407A 		vcmp.f32	s15, #0
ARM GAS  /tmp/ccHlrfTi.s 			page 41


 1443 00f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1444 00f4 40F02081 		bne	.L66
 192:Core/Inc/Fusion/FusionMath.h **** }
 1445              		.loc 2 192 78 view .LVU452
 1446 00f8 DDED1D7A 		vldr.32	s15, [sp, #116]
 192:Core/Inc/Fusion/FusionMath.h **** }
 1447              		.loc 2 192 63 view .LVU453
 1448 00fc F5EE407A 		vcmp.f32	s15, #0
 1449 0100 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1450 0104 00F01A81 		beq	.L67
 1451 0108 0023     		movs	r3, #0
 1452 010a 00E0     		b	.L50
 1453              	.L65:
 1454 010c 0023     		movs	r3, #0
 1455              	.L50:
 1456              	.LBE179:
 1457              	.LBE178:
 126:Core/Src/Fusion/FusionAhrs.c **** 
 1458              		.loc 1 126 8 view .LVU454
 1459 010e 002B     		cmp	r3, #0
 1460 0110 40F0ED80 		bne	.L51
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1461              		.loc 1 129 9 is_stmt 1 view .LVU455
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1462              		.loc 1 129 17 is_stmt 0 view .LVU456
 1463 0114 626D     		ldr	r2, [r4, #84]
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1464              		.loc 1 129 62 view .LVU457
 1465 0116 E368     		ldr	r3, [r4, #12]
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1466              		.loc 1 129 12 view .LVU458
 1467 0118 9A42     		cmp	r2, r3
 1468 011a 00F21181 		bhi	.L77
 1469              	.LVL67:
 1470              	.L52:
 138:Core/Src/Fusion/FusionAhrs.c **** 
 1471              		.loc 1 138 9 is_stmt 1 view .LVU459
 1472 011e 0DAF     		add	r7, sp, #52
 1473 0120 04AB     		add	r3, sp, #16
 1474 0122 93E80700 		ldm	r3, {r0, r1, r2}
 1475 0126 87E80700 		stm	r7, {r0, r1, r2}
 1476              	.LBB181:
 1477              	.LBI181:
 301:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 1478              		.loc 2 301 28 view .LVU460
 1479              	.LBB182:
 305:Core/Inc/Fusion/FusionMath.h **** #endif
 1480              		.loc 2 305 5 view .LVU461
 1481 012a 10AB     		add	r3, sp, #64
 1482 012c 83E80700 		stm	r3, {r0, r1, r2}
 1483              	.LBB183:
 1484              	.LBI183:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 1485              		.loc 2 283 21 view .LVU462
 1486              	.LBB184:
 284:Core/Inc/Fusion/FusionMath.h **** }
 1487              		.loc 2 284 5 view .LVU463
ARM GAS  /tmp/ccHlrfTi.s 			page 42


 1488 0130 17AD     		add	r5, sp, #92
 1489 0132 85E80700 		stm	r5, {r0, r1, r2}
 1490 0136 13AE     		add	r6, sp, #76
 1491 0138 86E80700 		stm	r6, {r0, r1, r2}
 1492              	.LBB185:
 1493              	.LBI185:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 1494              		.loc 2 252 28 view .LVU464
 1495              	.LBB186:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 1496              		.loc 2 253 5 view .LVU465
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1497              		.loc 2 254 5 view .LVU466
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1498              		.loc 2 254 33 is_stmt 0 view .LVU467
 1499 013c 95ED007A 		vldr.32	s14, [r5]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1500              		.loc 2 254 50 view .LVU468
 1501 0140 D6ED007A 		vldr.32	s15, [r6]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1502              		.loc 2 254 36 view .LVU469
 1503 0144 27EE277A 		vmul.f32	s14, s14, s15
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1504              		.loc 2 254 19 view .LVU470
 1505 0148 1BAB     		add	r3, sp, #108
 1506 014a 83ED007A 		vstr.32	s14, [r3]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1507              		.loc 2 255 5 is_stmt 1 view .LVU471
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1508              		.loc 2 255 33 is_stmt 0 view .LVU472
 1509 014e D5ED016A 		vldr.32	s13, [r5, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1510              		.loc 2 255 50 view .LVU473
 1511 0152 D6ED017A 		vldr.32	s15, [r6, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1512              		.loc 2 255 36 view .LVU474
 1513 0156 66EEA76A 		vmul.f32	s13, s13, s15
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1514              		.loc 2 255 19 view .LVU475
 1515 015a C3ED016A 		vstr.32	s13, [r3, #4]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1516              		.loc 2 256 5 is_stmt 1 view .LVU476
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1517              		.loc 2 256 33 is_stmt 0 view .LVU477
 1518 015e D5ED027A 		vldr.32	s15, [r5, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1519              		.loc 2 256 50 view .LVU478
 1520 0162 96ED026A 		vldr.32	s12, [r6, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1521              		.loc 2 256 36 view .LVU479
 1522 0166 67EE867A 		vmul.f32	s15, s15, s12
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1523              		.loc 2 256 19 view .LVU480
 1524 016a C3ED027A 		vstr.32	s15, [r3, #8]
 257:Core/Inc/Fusion/FusionMath.h **** }
 1525              		.loc 2 257 5 is_stmt 1 view .LVU481
 257:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/ccHlrfTi.s 			page 43


 1526              		.loc 2 257 12 is_stmt 0 view .LVU482
 1527 016e 0DF5CE7E 		add	lr, sp, #412
 1528 0172 93E80700 		ldm	r3, {r0, r1, r2}
 1529 0176 8EE80700 		stm	lr, {r0, r1, r2}
 1530 017a 0DF5D47C 		add	ip, sp, #424
 1531 017e 8CE80700 		stm	ip, {r0, r1, r2}
 1532              	.LBE186:
 1533              	.LBE185:
 1534              	.LBB187:
 1535              	.LBI187:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 1536              		.loc 2 228 21 is_stmt 1 view .LVU483
 1537              	.LBB188:
 229:Core/Inc/Fusion/FusionMath.h **** }
 1538              		.loc 2 229 5 view .LVU484
 229:Core/Inc/Fusion/FusionMath.h **** }
 1539              		.loc 2 229 26 is_stmt 0 view .LVU485
 1540 0182 37EE267A 		vadd.f32	s14, s14, s13
 229:Core/Inc/Fusion/FusionMath.h **** }
 1541              		.loc 2 229 42 view .LVU486
 1542 0186 77EE877A 		vadd.f32	s15, s15, s14
 1543              	.LVL68:
 229:Core/Inc/Fusion/FusionMath.h **** }
 1544              		.loc 2 229 42 view .LVU487
 1545              	.LBE188:
 1546              	.LBE187:
 1547              	.LBE184:
 1548              	.LBE183:
 1549              	.LBB189:
 1550              	.LBI189:
 169:Core/Inc/Fusion/FusionMath.h **** 
 1551              		.loc 2 169 21 is_stmt 1 view .LVU488
 1552              	.LBB190:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 1553              		.loc 2 171 5 view .LVU489
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 1554              		.loc 2 176 5 view .LVU490
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 1555              		.loc 2 177 5 view .LVU491
 178:Core/Inc/Fusion/FusionMath.h **** }
 1556              		.loc 2 178 5 view .LVU492
 1557 018a 7A4A     		ldr	r2, .L79
 1558 018c 17EE901A 		vmov	r1, s15	@ int
 1559 0190 A2EB6102 		sub	r2, r2, r1, asr #1
 1560 0194 07EE102A 		vmov	s14, r2	@ int
 178:Core/Inc/Fusion/FusionMath.h **** }
 1561              		.loc 2 178 52 is_stmt 0 view .LVU493
 1562 0198 DFED776A 		vldr.32	s13, .L79+4
 1563 019c 67EEA67A 		vmul.f32	s15, s15, s13
 1564              	.LVL69:
 178:Core/Inc/Fusion/FusionMath.h **** }
 1565              		.loc 2 178 56 view .LVU494
 1566 01a0 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 1567              		.loc 2 178 68 view .LVU495
 1568 01a4 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/ccHlrfTi.s 			page 44


 1569              		.loc 2 178 37 view .LVU496
 1570 01a8 DFED746A 		vldr.32	s13, .L79+8
 1571 01ac 76EEE77A 		vsub.f32	s15, s13, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 1572              		.loc 2 178 22 view .LVU497
 1573 01b0 67EE277A 		vmul.f32	s15, s14, s15
 1574              	.LVL70:
 178:Core/Inc/Fusion/FusionMath.h **** }
 1575              		.loc 2 178 22 view .LVU498
 1576              	.LBE190:
 1577              	.LBE189:
 307:Core/Inc/Fusion/FusionMath.h **** }
 1578              		.loc 2 307 5 is_stmt 1 view .LVU499
 1579              	.LBB191:
 1580              	.LBI191:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 1581              		.loc 2 238 28 view .LVU500
 1582              	.LBB192:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 1583              		.loc 2 239 5 view .LVU501
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 1584              		.loc 2 240 5 view .LVU502
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 1585              		.loc 2 240 32 is_stmt 0 view .LVU503
 1586 01b4 95ED007A 		vldr.32	s14, [r5]
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 1587              		.loc 2 240 35 view .LVU504
 1588 01b8 27EE877A 		vmul.f32	s14, s15, s14
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 1589              		.loc 2 240 19 view .LVU505
 1590 01bc 83ED007A 		vstr.32	s14, [r3]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 1591              		.loc 2 241 5 is_stmt 1 view .LVU506
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 1592              		.loc 2 241 32 is_stmt 0 view .LVU507
 1593 01c0 95ED017A 		vldr.32	s14, [r5, #4]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 1594              		.loc 2 241 35 view .LVU508
 1595 01c4 27EE877A 		vmul.f32	s14, s15, s14
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 1596              		.loc 2 241 19 view .LVU509
 1597 01c8 83ED017A 		vstr.32	s14, [r3, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 1598              		.loc 2 242 5 is_stmt 1 view .LVU510
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 1599              		.loc 2 242 32 is_stmt 0 view .LVU511
 1600 01cc 95ED027A 		vldr.32	s14, [r5, #8]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 1601              		.loc 2 242 35 view .LVU512
 1602 01d0 67EE877A 		vmul.f32	s15, s15, s14
 1603              	.LVL71:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 1604              		.loc 2 242 19 view .LVU513
 1605 01d4 C3ED027A 		vstr.32	s15, [r3, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 1606              		.loc 2 243 5 is_stmt 1 view .LVU514
 243:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/ccHlrfTi.s 			page 45


 1607              		.loc 2 243 12 is_stmt 0 view .LVU515
 1608 01d8 61AF     		add	r7, sp, #388
 1609 01da 93E80700 		ldm	r3, {r0, r1, r2}
 1610 01de 87E80700 		stm	r7, {r0, r1, r2}
 1611 01e2 0DF5C87C 		add	ip, sp, #400
 1612 01e6 8CE80700 		stm	ip, {r0, r1, r2}
 243:Core/Inc/Fusion/FusionMath.h **** }
 1613              		.loc 2 243 12 view .LVU516
 1614 01ea 2EAF     		add	r7, sp, #184
 1615 01ec 87E80700 		stm	r7, {r0, r1, r2}
 1616 01f0 86E80700 		stm	r6, {r0, r1, r2}
 1617 01f4 2BAA     		add	r2, sp, #172
 1618 01f6 07CA     		ldm	r2, {r0, r1, r2}
 1619 01f8 85E80700 		stm	r5, {r0, r1, r2}
 1620              	.LBE192:
 1621              	.LBE191:
 1622              	.LBE182:
 1623              	.LBE181:
 1624              	.LBB193:
 1625              	.LBI193:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 1626              		.loc 2 266 28 is_stmt 1 view .LVU517
 1627              	.LBB194:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 1628              		.loc 2 269 5 view .LVU518
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1629              		.loc 2 270 5 view .LVU519
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1630              		.loc 2 270 22 is_stmt 0 view .LVU520
 1631 01fc D6ED016A 		vldr.32	s13, [r6, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1632              		.loc 2 270 28 view .LVU521
 1633 0200 95ED026A 		vldr.32	s12, [r5, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1634              		.loc 2 270 25 view .LVU522
 1635 0204 66EE865A 		vmul.f32	s11, s13, s12
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1636              		.loc 2 270 34 view .LVU523
 1637 0208 96ED027A 		vldr.32	s14, [r6, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1638              		.loc 2 270 40 view .LVU524
 1639 020c D5ED017A 		vldr.32	s15, [r5, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1640              		.loc 2 270 37 view .LVU525
 1641 0210 27EE275A 		vmul.f32	s10, s14, s15
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1642              		.loc 2 270 31 view .LVU526
 1643 0214 75EEC55A 		vsub.f32	s11, s11, s10
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1644              		.loc 2 270 19 view .LVU527
 1645 0218 C3ED005A 		vstr.32	s11, [r3]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1646              		.loc 2 271 5 is_stmt 1 view .LVU528
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1647              		.loc 2 271 28 is_stmt 0 view .LVU529
 1648 021c D5ED005A 		vldr.32	s11, [r5]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
ARM GAS  /tmp/ccHlrfTi.s 			page 46


 1649              		.loc 2 271 25 view .LVU530
 1650 0220 27EE257A 		vmul.f32	s14, s14, s11
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1651              		.loc 2 271 34 view .LVU531
 1652 0224 96ED005A 		vldr.32	s10, [r6]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1653              		.loc 2 271 37 view .LVU532
 1654 0228 26EE056A 		vmul.f32	s12, s12, s10
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1655              		.loc 2 271 31 view .LVU533
 1656 022c 37EE467A 		vsub.f32	s14, s14, s12
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1657              		.loc 2 271 19 view .LVU534
 1658 0230 83ED017A 		vstr.32	s14, [r3, #4]
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1659              		.loc 2 272 5 is_stmt 1 view .LVU535
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1660              		.loc 2 272 25 is_stmt 0 view .LVU536
 1661 0234 67EE857A 		vmul.f32	s15, s15, s10
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1662              		.loc 2 272 37 view .LVU537
 1663 0238 66EEA56A 		vmul.f32	s13, s13, s11
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1664              		.loc 2 272 31 view .LVU538
 1665 023c 77EEE67A 		vsub.f32	s15, s15, s13
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1666              		.loc 2 272 19 view .LVU539
 1667 0240 C3ED027A 		vstr.32	s15, [r3, #8]
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 1668              		.loc 2 273 5 is_stmt 1 view .LVU540
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 1669              		.loc 2 273 12 is_stmt 0 view .LVU541
 1670 0244 5EAD     		add	r5, sp, #376
 1671 0246 93E80700 		ldm	r3, {r0, r1, r2}
 1672 024a 85E80700 		stm	r5, {r0, r1, r2}
 1673 024e 5BAB     		add	r3, sp, #364
 1674 0250 83E80700 		stm	r3, {r0, r1, r2}
 1675              	.LBE194:
 1676              	.LBE193:
 138:Core/Src/Fusion/FusionAhrs.c **** 
 1677              		.loc 1 138 43 view .LVU542
 1678 0254 04F13805 		add	r5, r4, #56
 1679 0258 85E80700 		stm	r5, {r0, r1, r2}
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1680              		.loc 1 141 9 is_stmt 1 view .LVU543
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1681              		.loc 1 141 18 is_stmt 0 view .LVU544
 1682 025c 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1683              		.loc 1 141 12 view .LVU545
 1684 0260 B3BB     		cbnz	r3, .L53
 1685 0262 10AB     		add	r3, sp, #64
 1686 0264 95E80700 		ldm	r5, {r0, r1, r2}
 1687 0268 83E80700 		stm	r3, {r0, r1, r2}
 1688              	.LBB195:
 1689              	.LBI195:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
ARM GAS  /tmp/ccHlrfTi.s 			page 47


 1690              		.loc 2 283 21 is_stmt 1 discriminator 1 view .LVU546
 1691              	.LBB196:
 284:Core/Inc/Fusion/FusionMath.h **** }
 1692              		.loc 2 284 5 discriminator 1 view .LVU547
 1693 026c 17AE     		add	r6, sp, #92
 1694 026e 86E80700 		stm	r6, {r0, r1, r2}
 1695 0272 13AD     		add	r5, sp, #76
 1696 0274 85E80700 		stm	r5, {r0, r1, r2}
 1697              	.LBB197:
 1698              	.LBI197:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 1699              		.loc 2 252 28 discriminator 1 view .LVU548
 1700              	.LBB198:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 1701              		.loc 2 253 5 discriminator 1 view .LVU549
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1702              		.loc 2 254 5 discriminator 1 view .LVU550
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1703              		.loc 2 254 33 is_stmt 0 discriminator 1 view .LVU551
 1704 0278 96ED007A 		vldr.32	s14, [r6]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1705              		.loc 2 254 50 discriminator 1 view .LVU552
 1706 027c D5ED007A 		vldr.32	s15, [r5]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1707              		.loc 2 254 36 discriminator 1 view .LVU553
 1708 0280 27EE277A 		vmul.f32	s14, s14, s15
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1709              		.loc 2 254 19 discriminator 1 view .LVU554
 1710 0284 1BAB     		add	r3, sp, #108
 1711 0286 8DED1B7A 		vstr.32	s14, [sp, #108]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1712              		.loc 2 255 5 is_stmt 1 discriminator 1 view .LVU555
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1713              		.loc 2 255 33 is_stmt 0 discriminator 1 view .LVU556
 1714 028a D6ED016A 		vldr.32	s13, [r6, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1715              		.loc 2 255 50 discriminator 1 view .LVU557
 1716 028e D5ED017A 		vldr.32	s15, [r5, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1717              		.loc 2 255 36 discriminator 1 view .LVU558
 1718 0292 66EEA76A 		vmul.f32	s13, s13, s15
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1719              		.loc 2 255 19 discriminator 1 view .LVU559
 1720 0296 CDED1C6A 		vstr.32	s13, [sp, #112]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1721              		.loc 2 256 5 is_stmt 1 discriminator 1 view .LVU560
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1722              		.loc 2 256 33 is_stmt 0 discriminator 1 view .LVU561
 1723 029a D6ED027A 		vldr.32	s15, [r6, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1724              		.loc 2 256 50 discriminator 1 view .LVU562
 1725 029e 95ED026A 		vldr.32	s12, [r5, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1726              		.loc 2 256 36 discriminator 1 view .LVU563
 1727 02a2 67EE867A 		vmul.f32	s15, s15, s12
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1728              		.loc 2 256 19 discriminator 1 view .LVU564
ARM GAS  /tmp/ccHlrfTi.s 			page 48


 1729 02a6 CDED1D7A 		vstr.32	s15, [sp, #116]
 257:Core/Inc/Fusion/FusionMath.h **** }
 1730              		.loc 2 257 5 is_stmt 1 discriminator 1 view .LVU565
 257:Core/Inc/Fusion/FusionMath.h **** }
 1731              		.loc 2 257 12 is_stmt 0 discriminator 1 view .LVU566
 1732 02aa 6DAE     		add	r6, sp, #436
 1733 02ac 93E80700 		ldm	r3, {r0, r1, r2}
 1734 02b0 86E80700 		stm	r6, {r0, r1, r2}
 1735 02b4 70AD     		add	r5, sp, #448
 1736 02b6 85E80700 		stm	r5, {r0, r1, r2}
 1737              	.LBE198:
 1738              	.LBE197:
 1739              	.LBB199:
 1740              	.LBI199:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 1741              		.loc 2 228 21 is_stmt 1 discriminator 1 view .LVU567
 1742              	.LBB200:
 229:Core/Inc/Fusion/FusionMath.h **** }
 1743              		.loc 2 229 5 discriminator 1 view .LVU568
 229:Core/Inc/Fusion/FusionMath.h **** }
 1744              		.loc 2 229 26 is_stmt 0 discriminator 1 view .LVU569
 1745 02ba 37EE267A 		vadd.f32	s14, s14, s13
 229:Core/Inc/Fusion/FusionMath.h **** }
 1746              		.loc 2 229 42 discriminator 1 view .LVU570
 1747 02be 77EE877A 		vadd.f32	s15, s15, s14
 1748              	.LBE200:
 1749              	.LBE199:
 1750              	.LBE196:
 1751              	.LBE195:
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1752              		.loc 1 141 125 discriminator 1 view .LVU571
 1753 02c2 94ED017A 		vldr.32	s14, [r4, #4]
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 1754              		.loc 1 141 42 discriminator 1 view .LVU572
 1755 02c6 B4EEE77A 		vcmpe.f32	s14, s15
 1756 02ca F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1757 02ce 4DDB     		blt	.L74
 1758              	.L53:
 142:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1759              		.loc 1 142 13 is_stmt 1 view .LVU573
 142:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 1760              		.loc 1 142 39 is_stmt 0 view .LVU574
 1761 02d0 28AB     		add	r3, sp, #160
 1762 02d2 04F13802 		add	r2, r4, #56
 1763 02d6 07CA     		ldm	r2, {r0, r1, r2}
 1764 02d8 83E80700 		stm	r3, {r0, r1, r2}
 143:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 1765              		.loc 1 143 13 is_stmt 1 view .LVU575
 143:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 1766              		.loc 1 143 40 is_stmt 0 view .LVU576
 1767 02dc 0023     		movs	r3, #0
 1768 02de 84F85030 		strb	r3, [r4, #80]
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 1769              		.loc 1 144 13 is_stmt 1 view .LVU577
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 1770              		.loc 1 144 46 is_stmt 0 view .LVU578
 1771 02e2 636D     		ldr	r3, [r4, #84]
ARM GAS  /tmp/ccHlrfTi.s 			page 49


 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 1772              		.loc 1 144 93 view .LVU579
 1773 02e4 092B     		cmp	r3, #9
 1774 02e6 3FD9     		bls	.L68
 1775 02e8 0A22     		movs	r2, #10
 1776              	.L56:
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 1777              		.loc 1 144 46 discriminator 4 view .LVU580
 1778 02ea 9B1A     		subs	r3, r3, r2
 1779 02ec 6365     		str	r3, [r4, #84]
 1780              	.L51:
 151:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 1781              		.loc 1 151 5 is_stmt 1 view .LVU581
 151:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 1782              		.loc 1 151 18 is_stmt 0 view .LVU582
 1783 02ee 0023     		movs	r3, #0
 1784 02f0 2593     		str	r3, [sp, #148]	@ float
 1785 02f2 2693     		str	r3, [sp, #152]	@ float
 1786 02f4 2793     		str	r3, [sp, #156]	@ float
 152:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 1787              		.loc 1 152 5 is_stmt 1 view .LVU583
 152:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 1788              		.loc 1 152 31 is_stmt 0 view .LVU584
 1789 02f6 0123     		movs	r3, #1
 1790 02f8 84F85930 		strb	r3, [r4, #89]
 153:Core/Src/Fusion/FusionAhrs.c **** 
 1791              		.loc 1 153 5 is_stmt 1 view .LVU585
 1792 02fc 1BAB     		add	r3, sp, #108
 1793 02fe 01AA     		add	r2, sp, #4
 1794 0300 07CA     		ldm	r2, {r0, r1, r2}
 1795 0302 83E80700 		stm	r3, {r0, r1, r2}
 1796              	.LBB201:
 1797              	.LBI201:
 191:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 1798              		.loc 2 191 20 view .LVU586
 1799              	.LBB202:
 192:Core/Inc/Fusion/FusionMath.h **** }
 1800              		.loc 2 192 5 view .LVU587
 192:Core/Inc/Fusion/FusionMath.h **** }
 1801              		.loc 2 192 24 is_stmt 0 view .LVU588
 1802 0306 D3ED007A 		vldr.32	s15, [r3]
 192:Core/Inc/Fusion/FusionMath.h **** }
 1803              		.loc 2 192 63 view .LVU589
 1804 030a F5EE407A 		vcmp.f32	s15, #0
 1805 030e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1806 0312 35D1     		bne	.L69
 192:Core/Inc/Fusion/FusionMath.h **** }
 1807              		.loc 2 192 51 view .LVU590
 1808 0314 DDED1C7A 		vldr.32	s15, [sp, #112]
 192:Core/Inc/Fusion/FusionMath.h **** }
 1809              		.loc 2 192 36 view .LVU591
 1810 0318 F5EE407A 		vcmp.f32	s15, #0
 1811 031c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1812 0320 40F0EC82 		bne	.L70
 192:Core/Inc/Fusion/FusionMath.h **** }
 1813              		.loc 2 192 78 view .LVU592
 1814 0324 DDED1D7A 		vldr.32	s15, [sp, #116]
ARM GAS  /tmp/ccHlrfTi.s 			page 50


 192:Core/Inc/Fusion/FusionMath.h **** }
 1815              		.loc 2 192 63 view .LVU593
 1816 0328 F5EE407A 		vcmp.f32	s15, #0
 1817 032c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1818 0330 00F0E682 		beq	.L71
 1819 0334 0023     		movs	r3, #0
 1820 0336 24E0     		b	.L57
 1821              	.LVL72:
 1822              	.L66:
 192:Core/Inc/Fusion/FusionMath.h **** }
 1823              		.loc 2 192 63 view .LVU594
 1824              	.LBE202:
 1825              	.LBE201:
 1826              	.LBB205:
 1827              	.LBB180:
 1828 0338 0023     		movs	r3, #0
 1829 033a E8E6     		b	.L50
 1830              	.L67:
 1831 033c 0123     		movs	r3, #1
 1832 033e E6E6     		b	.L50
 1833              	.L77:
 192:Core/Inc/Fusion/FusionMath.h **** }
 1834              		.loc 2 192 63 view .LVU595
 1835              	.LBE180:
 1836              	.LBE205:
 1837              	.LBB206:
 130:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsReset(ahrs);
 1838              		.loc 1 130 13 is_stmt 1 view .LVU596
 130:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsReset(ahrs);
 1839              		.loc 1 130 36 is_stmt 0 view .LVU597
 1840 0340 1BAE     		add	r6, sp, #108
 1841 0342 04F11005 		add	r5, r4, #16
 1842 0346 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1843 034a 86E80F00 		stm	r6, {r0, r1, r2, r3}
 131:Core/Src/Fusion/FusionAhrs.c ****             ahrs->quaternion = quaternion;
 1844              		.loc 1 131 13 is_stmt 1 view .LVU598
 1845 034e 2046     		mov	r0, r4
 1846 0350 FFF7FEFF 		bl	FusionAhrsReset
 1847              	.LVL73:
 132:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer = 0;
 1848              		.loc 1 132 13 view .LVU599
 132:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer = 0;
 1849              		.loc 1 132 30 is_stmt 0 view .LVU600
 1850 0354 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 1851 0358 85E80F00 		stm	r5, {r0, r1, r2, r3}
 133:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = true;
 1852              		.loc 1 133 13 is_stmt 1 view .LVU601
 133:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = true;
 1853              		.loc 1 133 46 is_stmt 0 view .LVU602
 1854 035c 0023     		movs	r3, #0
 1855 035e 6365     		str	r3, [r4, #84]
 134:Core/Src/Fusion/FusionAhrs.c ****         }
 1856              		.loc 1 134 13 is_stmt 1 view .LVU603
 134:Core/Src/Fusion/FusionAhrs.c ****         }
 1857              		.loc 1 134 48 is_stmt 0 view .LVU604
 1858 0360 0123     		movs	r3, #1
 1859 0362 84F85830 		strb	r3, [r4, #88]
ARM GAS  /tmp/ccHlrfTi.s 			page 51


 1860 0366 DAE6     		b	.L52
 1861              	.L68:
 134:Core/Src/Fusion/FusionAhrs.c ****         }
 1862              		.loc 1 134 48 view .LVU605
 1863              	.LBE206:
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 1864              		.loc 1 144 93 view .LVU606
 1865 0368 0022     		movs	r2, #0
 1866 036a BEE7     		b	.L56
 1867              	.L74:
 146:Core/Src/Fusion/FusionAhrs.c ****         }
 1868              		.loc 1 146 13 is_stmt 1 view .LVU607
 146:Core/Src/Fusion/FusionAhrs.c ****         }
 1869              		.loc 1 146 17 is_stmt 0 view .LVU608
 1870 036c 636D     		ldr	r3, [r4, #84]
 146:Core/Src/Fusion/FusionAhrs.c ****         }
 1871              		.loc 1 146 45 view .LVU609
 1872 036e 0133     		adds	r3, r3, #1
 1873 0370 6365     		str	r3, [r4, #84]
 1874 0372 BCE7     		b	.L51
 1875              	.L80:
 1876              		.align	2
 1877              	.L79:
 1878 0374 12141F5F 		.word	1595872274
 1879 0378 12D3363F 		.word	1060557586
 1880 037c FF51D83F 		.word	1071141375
 1881              	.L69:
 1882              	.LBB207:
 1883              	.LBB203:
 192:Core/Inc/Fusion/FusionMath.h **** }
 1884              		.loc 2 192 63 view .LVU610
 1885 0380 0023     		movs	r3, #0
 1886              	.L57:
 1887              	.LBE203:
 1888              	.LBE207:
 153:Core/Src/Fusion/FusionAhrs.c **** 
 1889              		.loc 1 153 8 view .LVU611
 1890 0382 002B     		cmp	r3, #0
 1891 0384 40F04881 		bne	.L58
 1892              	.LBB208:
 156:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 1893              		.loc 1 156 9 is_stmt 1 view .LVU612
 156:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 1894              		.loc 1 156 40 is_stmt 0 view .LVU613
 1895 0388 84F86030 		strb	r3, [r4, #96]
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 1896              		.loc 1 157 9 is_stmt 1 view .LVU614
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 1897              		.loc 1 157 17 is_stmt 0 view .LVU615
 1898 038c E26D     		ldr	r2, [r4, #92]
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 1899              		.loc 1 157 58 view .LVU616
 1900 038e E368     		ldr	r3, [r4, #12]
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 1901              		.loc 1 157 12 view .LVU617
 1902 0390 9A42     		cmp	r2, r3
 1903 0392 00F2B782 		bhi	.L78
ARM GAS  /tmp/ccHlrfTi.s 			page 52


 1904              	.L59:
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 1905              		.loc 1 164 9 is_stmt 1 view .LVU618
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1906              		.loc 1 165 28 is_stmt 0 view .LVU619
 1907 0396 D4ED056A 		vldr.32	s13, [r4, #20]
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1908              		.loc 1 165 34 view .LVU620
 1909 039a D4ED067A 		vldr.32	s15, [r4, #24]
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1910              		.loc 1 165 31 view .LVU621
 1911 039e 26EEA77A 		vmul.f32	s14, s13, s15
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1912              		.loc 1 165 40 view .LVU622
 1913 03a2 94ED046A 		vldr.32	s12, [r4, #16]
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1914              		.loc 1 165 46 view .LVU623
 1915 03a6 D4ED075A 		vldr.32	s11, [r4, #28]
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1916              		.loc 1 165 43 view .LVU624
 1917 03aa 26EE255A 		vmul.f32	s10, s12, s11
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 1918              		.loc 1 165 37 view .LVU625
 1919 03ae 37EE057A 		vadd.f32	s14, s14, s10
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 1920              		.loc 1 164 28 view .LVU626
 1921 03b2 0DF1280E 		add	lr, sp, #40
 1922 03b6 8DED0A7A 		vstr.32	s14, [sp, #40]
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 1923              		.loc 1 166 31 view .LVU627
 1924 03ba 26EE067A 		vmul.f32	s14, s12, s12
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 1925              		.loc 1 166 37 view .LVU628
 1926 03be B6EE005A 		vmov.f32	s10, #5.0e-1
 1927 03c2 37EE457A 		vsub.f32	s14, s14, s10
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 1928              		.loc 1 166 50 view .LVU629
 1929 03c6 27EEA75A 		vmul.f32	s10, s15, s15
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 1930              		.loc 1 166 44 view .LVU630
 1931 03ca 37EE057A 		vadd.f32	s14, s14, s10
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 1932              		.loc 1 164 28 view .LVU631
 1933 03ce 8DED0B7A 		vstr.32	s14, [sp, #44]
 167:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 1934              		.loc 1 167 31 view .LVU632
 1935 03d2 67EEA57A 		vmul.f32	s15, s15, s11
 167:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 1936              		.loc 1 167 43 view .LVU633
 1937 03d6 66EE866A 		vmul.f32	s13, s13, s12
 167:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 1938              		.loc 1 167 37 view .LVU634
 1939 03da 77EEE67A 		vsub.f32	s15, s15, s13
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 1940              		.loc 1 164 28 view .LVU635
 1941 03de CDED0C7A 		vstr.32	s15, [sp, #48]
 171:Core/Src/Fusion/FusionAhrs.c **** 
ARM GAS  /tmp/ccHlrfTi.s 			page 53


 1942              		.loc 1 171 9 is_stmt 1 view .LVU636
 1943 03e2 0DF14C0C 		add	ip, sp, #76
 1944 03e6 2BAB     		add	r3, sp, #172
 1945 03e8 93E80700 		ldm	r3, {r0, r1, r2}
 1946 03ec 8CE80700 		stm	ip, {r0, r1, r2}
 1947 03f0 17AD     		add	r5, sp, #92
 1948 03f2 01AB     		add	r3, sp, #4
 1949 03f4 93E80700 		ldm	r3, {r0, r1, r2}
 1950 03f8 85E80700 		stm	r5, {r0, r1, r2}
 1951              	.LBB209:
 1952              	.LBI209:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 1953              		.loc 2 266 28 view .LVU637
 1954              	.LBB210:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 1955              		.loc 2 269 5 view .LVU638
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1956              		.loc 2 270 5 view .LVU639
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1957              		.loc 2 270 22 is_stmt 0 view .LVU640
 1958 03fc DCED016A 		vldr.32	s13, [ip, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1959              		.loc 2 270 28 view .LVU641
 1960 0400 95ED026A 		vldr.32	s12, [r5, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1961              		.loc 2 270 25 view .LVU642
 1962 0404 66EE865A 		vmul.f32	s11, s13, s12
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1963              		.loc 2 270 34 view .LVU643
 1964 0408 9CED027A 		vldr.32	s14, [ip, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1965              		.loc 2 270 40 view .LVU644
 1966 040c D5ED017A 		vldr.32	s15, [r5, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1967              		.loc 2 270 37 view .LVU645
 1968 0410 27EE275A 		vmul.f32	s10, s14, s15
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1969              		.loc 2 270 31 view .LVU646
 1970 0414 75EEC55A 		vsub.f32	s11, s11, s10
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 1971              		.loc 2 270 19 view .LVU647
 1972 0418 1BAB     		add	r3, sp, #108
 1973 041a C3ED005A 		vstr.32	s11, [r3]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1974              		.loc 2 271 5 is_stmt 1 view .LVU648
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1975              		.loc 2 271 28 is_stmt 0 view .LVU649
 1976 041e D5ED005A 		vldr.32	s11, [r5]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1977              		.loc 2 271 25 view .LVU650
 1978 0422 27EE257A 		vmul.f32	s14, s14, s11
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1979              		.loc 2 271 34 view .LVU651
 1980 0426 9CED005A 		vldr.32	s10, [ip]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1981              		.loc 2 271 37 view .LVU652
 1982 042a 26EE056A 		vmul.f32	s12, s12, s10
ARM GAS  /tmp/ccHlrfTi.s 			page 54


 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1983              		.loc 2 271 31 view .LVU653
 1984 042e 37EE467A 		vsub.f32	s14, s14, s12
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 1985              		.loc 2 271 19 view .LVU654
 1986 0432 83ED017A 		vstr.32	s14, [r3, #4]
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1987              		.loc 2 272 5 is_stmt 1 view .LVU655
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1988              		.loc 2 272 25 is_stmt 0 view .LVU656
 1989 0436 67EE857A 		vmul.f32	s15, s15, s10
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1990              		.loc 2 272 37 view .LVU657
 1991 043a 66EEA56A 		vmul.f32	s13, s13, s11
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1992              		.loc 2 272 31 view .LVU658
 1993 043e 77EEE67A 		vsub.f32	s15, s15, s13
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 1994              		.loc 2 272 19 view .LVU659
 1995 0442 C3ED027A 		vstr.32	s15, [r3, #8]
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 1996              		.loc 2 273 5 is_stmt 1 view .LVU660
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 1997              		.loc 2 273 12 is_stmt 0 view .LVU661
 1998 0446 7FAE     		add	r6, sp, #508
 1999 0448 93E80700 		ldm	r3, {r0, r1, r2}
 2000 044c 86E80700 		stm	r6, {r0, r1, r2}
 2001 0450 31AF     		add	r7, sp, #196
 2002 0452 87E80700 		stm	r7, {r0, r1, r2}
 2003 0456 0DAE     		add	r6, sp, #52
 2004 0458 86E80700 		stm	r6, {r0, r1, r2}
 2005              	.LBE210:
 2006              	.LBE209:
 2007              	.LBB211:
 2008              	.LBI211:
 301:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 2009              		.loc 2 301 28 is_stmt 1 view .LVU662
 2010              	.LBB212:
 305:Core/Inc/Fusion/FusionMath.h **** #endif
 2011              		.loc 2 305 5 view .LVU663
 2012 045c 10AF     		add	r7, sp, #64
 2013 045e 87E80700 		stm	r7, {r0, r1, r2}
 2014              	.LBB213:
 2015              	.LBI213:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 2016              		.loc 2 283 21 view .LVU664
 2017              	.LBB214:
 284:Core/Inc/Fusion/FusionMath.h **** }
 2018              		.loc 2 284 5 view .LVU665
 2019 0462 85E80700 		stm	r5, {r0, r1, r2}
 2020 0466 8CE80700 		stm	ip, {r0, r1, r2}
 2021              	.LBB215:
 2022              	.LBI215:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2023              		.loc 2 252 28 view .LVU666
 2024              	.LBB216:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
ARM GAS  /tmp/ccHlrfTi.s 			page 55


 2025              		.loc 2 253 5 view .LVU667
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2026              		.loc 2 254 5 view .LVU668
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2027              		.loc 2 254 33 is_stmt 0 view .LVU669
 2028 046a 95ED007A 		vldr.32	s14, [r5]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2029              		.loc 2 254 50 view .LVU670
 2030 046e DCED007A 		vldr.32	s15, [ip]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2031              		.loc 2 254 36 view .LVU671
 2032 0472 27EE277A 		vmul.f32	s14, s14, s15
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2033              		.loc 2 254 19 view .LVU672
 2034 0476 83ED007A 		vstr.32	s14, [r3]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2035              		.loc 2 255 5 is_stmt 1 view .LVU673
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2036              		.loc 2 255 33 is_stmt 0 view .LVU674
 2037 047a D5ED016A 		vldr.32	s13, [r5, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2038              		.loc 2 255 50 view .LVU675
 2039 047e DCED017A 		vldr.32	s15, [ip, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2040              		.loc 2 255 36 view .LVU676
 2041 0482 66EEA76A 		vmul.f32	s13, s13, s15
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2042              		.loc 2 255 19 view .LVU677
 2043 0486 C3ED016A 		vstr.32	s13, [r3, #4]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2044              		.loc 2 256 5 is_stmt 1 view .LVU678
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2045              		.loc 2 256 33 is_stmt 0 view .LVU679
 2046 048a D5ED027A 		vldr.32	s15, [r5, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2047              		.loc 2 256 50 view .LVU680
 2048 048e 9CED026A 		vldr.32	s12, [ip, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2049              		.loc 2 256 36 view .LVU681
 2050 0492 67EE867A 		vmul.f32	s15, s15, s12
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2051              		.loc 2 256 19 view .LVU682
 2052 0496 C3ED027A 		vstr.32	s15, [r3, #8]
 257:Core/Inc/Fusion/FusionMath.h **** }
 2053              		.loc 2 257 5 is_stmt 1 view .LVU683
 257:Core/Inc/Fusion/FusionMath.h **** }
 2054              		.loc 2 257 12 is_stmt 0 view .LVU684
 2055 049a 0DF50278 		add	r8, sp, #520
 2056 049e 93E80700 		ldm	r3, {r0, r1, r2}
 2057 04a2 88E80700 		stm	r8, {r0, r1, r2}
 2058 04a6 85AF     		add	r7, sp, #532
 2059 04a8 87E80700 		stm	r7, {r0, r1, r2}
 2060              	.LBE216:
 2061              	.LBE215:
 2062              	.LBB217:
 2063              	.LBI217:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
ARM GAS  /tmp/ccHlrfTi.s 			page 56


 2064              		.loc 2 228 21 is_stmt 1 view .LVU685
 2065              	.LBB218:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2066              		.loc 2 229 5 view .LVU686
 229:Core/Inc/Fusion/FusionMath.h **** }
 2067              		.loc 2 229 26 is_stmt 0 view .LVU687
 2068 04ac 37EE267A 		vadd.f32	s14, s14, s13
 229:Core/Inc/Fusion/FusionMath.h **** }
 2069              		.loc 2 229 42 view .LVU688
 2070 04b0 77EE877A 		vadd.f32	s15, s15, s14
 2071              	.LVL74:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2072              		.loc 2 229 42 view .LVU689
 2073              	.LBE218:
 2074              	.LBE217:
 2075              	.LBE214:
 2076              	.LBE213:
 2077              	.LBB219:
 2078              	.LBI219:
 169:Core/Inc/Fusion/FusionMath.h **** 
 2079              		.loc 2 169 21 is_stmt 1 view .LVU690
 2080              	.LBB220:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 2081              		.loc 2 171 5 view .LVU691
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 2082              		.loc 2 176 5 view .LVU692
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 2083              		.loc 2 177 5 view .LVU693
 178:Core/Inc/Fusion/FusionMath.h **** }
 2084              		.loc 2 178 5 view .LVU694
 2085 04b4 EA4A     		ldr	r2, .L81
 2086 04b6 17EE901A 		vmov	r1, s15	@ int
 2087 04ba A2EB6102 		sub	r2, r2, r1, asr #1
 2088 04be 07EE102A 		vmov	s14, r2	@ int
 178:Core/Inc/Fusion/FusionMath.h **** }
 2089              		.loc 2 178 52 is_stmt 0 view .LVU695
 2090 04c2 DFEDE86A 		vldr.32	s13, .L81+4
 2091 04c6 67EEA67A 		vmul.f32	s15, s15, s13
 2092              	.LVL75:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2093              		.loc 2 178 56 view .LVU696
 2094 04ca 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 2095              		.loc 2 178 68 view .LVU697
 2096 04ce 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 2097              		.loc 2 178 37 view .LVU698
 2098 04d2 DFEDE56A 		vldr.32	s13, .L81+8
 2099 04d6 76EEE77A 		vsub.f32	s15, s13, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 2100              		.loc 2 178 22 view .LVU699
 2101 04da 67EE277A 		vmul.f32	s15, s14, s15
 2102              	.LVL76:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2103              		.loc 2 178 22 view .LVU700
 2104              	.LBE220:
 2105              	.LBE219:
ARM GAS  /tmp/ccHlrfTi.s 			page 57


 307:Core/Inc/Fusion/FusionMath.h **** }
 2106              		.loc 2 307 5 is_stmt 1 view .LVU701
 2107              	.LBB221:
 2108              	.LBI221:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2109              		.loc 2 238 28 view .LVU702
 2110              	.LBB222:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2111              		.loc 2 239 5 view .LVU703
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2112              		.loc 2 240 5 view .LVU704
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2113              		.loc 2 240 32 is_stmt 0 view .LVU705
 2114 04de 95ED007A 		vldr.32	s14, [r5]
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2115              		.loc 2 240 35 view .LVU706
 2116 04e2 27EE877A 		vmul.f32	s14, s15, s14
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2117              		.loc 2 240 19 view .LVU707
 2118 04e6 83ED007A 		vstr.32	s14, [r3]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2119              		.loc 2 241 5 is_stmt 1 view .LVU708
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2120              		.loc 2 241 32 is_stmt 0 view .LVU709
 2121 04ea 95ED017A 		vldr.32	s14, [r5, #4]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2122              		.loc 2 241 35 view .LVU710
 2123 04ee 27EE877A 		vmul.f32	s14, s15, s14
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2124              		.loc 2 241 19 view .LVU711
 2125 04f2 83ED017A 		vstr.32	s14, [r3, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2126              		.loc 2 242 5 is_stmt 1 view .LVU712
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2127              		.loc 2 242 32 is_stmt 0 view .LVU713
 2128 04f6 95ED027A 		vldr.32	s14, [r5, #8]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2129              		.loc 2 242 35 view .LVU714
 2130 04fa 67EE877A 		vmul.f32	s15, s15, s14
 2131              	.LVL77:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2132              		.loc 2 242 19 view .LVU715
 2133 04fe C3ED027A 		vstr.32	s15, [r3, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 2134              		.loc 2 243 5 is_stmt 1 view .LVU716
 243:Core/Inc/Fusion/FusionMath.h **** }
 2135              		.loc 2 243 12 is_stmt 0 view .LVU717
 2136 0502 79AE     		add	r6, sp, #484
 2137 0504 93E80700 		ldm	r3, {r0, r1, r2}
 2138 0508 86E80700 		stm	r6, {r0, r1, r2}
 2139 050c 7CAF     		add	r7, sp, #496
 2140 050e 87E80700 		stm	r7, {r0, r1, r2}
 243:Core/Inc/Fusion/FusionMath.h **** }
 2141              		.loc 2 243 12 view .LVU718
 2142 0512 34AE     		add	r6, sp, #208
 2143 0514 86E80700 		stm	r6, {r0, r1, r2}
 2144 0518 8CE80700 		stm	ip, {r0, r1, r2}
ARM GAS  /tmp/ccHlrfTi.s 			page 58


 2145 051c 9EE80700 		ldm	lr, {r0, r1, r2}
 2146 0520 85E80700 		stm	r5, {r0, r1, r2}
 2147              	.LBE222:
 2148              	.LBE221:
 2149              	.LBE212:
 2150              	.LBE211:
 2151              	.LBB223:
 2152              	.LBI223:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 2153              		.loc 2 266 28 is_stmt 1 view .LVU719
 2154              	.LBB224:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 2155              		.loc 2 269 5 view .LVU720
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2156              		.loc 2 270 5 view .LVU721
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2157              		.loc 2 270 22 is_stmt 0 view .LVU722
 2158 0524 DCED016A 		vldr.32	s13, [ip, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2159              		.loc 2 270 28 view .LVU723
 2160 0528 95ED026A 		vldr.32	s12, [r5, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2161              		.loc 2 270 25 view .LVU724
 2162 052c 66EE865A 		vmul.f32	s11, s13, s12
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2163              		.loc 2 270 34 view .LVU725
 2164 0530 9CED027A 		vldr.32	s14, [ip, #8]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2165              		.loc 2 270 40 view .LVU726
 2166 0534 D5ED017A 		vldr.32	s15, [r5, #4]
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2167              		.loc 2 270 37 view .LVU727
 2168 0538 27EE275A 		vmul.f32	s10, s14, s15
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2169              		.loc 2 270 31 view .LVU728
 2170 053c 75EEC55A 		vsub.f32	s11, s11, s10
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2171              		.loc 2 270 19 view .LVU729
 2172 0540 C3ED005A 		vstr.32	s11, [r3]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2173              		.loc 2 271 5 is_stmt 1 view .LVU730
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2174              		.loc 2 271 28 is_stmt 0 view .LVU731
 2175 0544 D5ED005A 		vldr.32	s11, [r5]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2176              		.loc 2 271 25 view .LVU732
 2177 0548 27EE257A 		vmul.f32	s14, s14, s11
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2178              		.loc 2 271 34 view .LVU733
 2179 054c 9CED005A 		vldr.32	s10, [ip]
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2180              		.loc 2 271 37 view .LVU734
 2181 0550 26EE056A 		vmul.f32	s12, s12, s10
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2182              		.loc 2 271 31 view .LVU735
 2183 0554 37EE467A 		vsub.f32	s14, s14, s12
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
ARM GAS  /tmp/ccHlrfTi.s 			page 59


 2184              		.loc 2 271 19 view .LVU736
 2185 0558 83ED017A 		vstr.32	s14, [r3, #4]
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2186              		.loc 2 272 5 is_stmt 1 view .LVU737
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2187              		.loc 2 272 25 is_stmt 0 view .LVU738
 2188 055c 67EE857A 		vmul.f32	s15, s15, s10
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2189              		.loc 2 272 37 view .LVU739
 2190 0560 66EEA56A 		vmul.f32	s13, s13, s11
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2191              		.loc 2 272 31 view .LVU740
 2192 0564 77EEE67A 		vsub.f32	s15, s15, s13
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2193              		.loc 2 272 19 view .LVU741
 2194 0568 C3ED027A 		vstr.32	s15, [r3, #8]
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2195              		.loc 2 273 5 is_stmt 1 view .LVU742
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2196              		.loc 2 273 12 is_stmt 0 view .LVU743
 2197 056c 76AD     		add	r5, sp, #472
 2198 056e 93E80700 		ldm	r3, {r0, r1, r2}
 2199 0572 85E80700 		stm	r5, {r0, r1, r2}
 2200 0576 73AB     		add	r3, sp, #460
 2201 0578 83E80700 		stm	r3, {r0, r1, r2}
 2202              	.LBE224:
 2203              	.LBE223:
 171:Core/Src/Fusion/FusionAhrs.c **** 
 2204              		.loc 1 171 42 view .LVU744
 2205 057c 04F14405 		add	r5, r4, #68
 2206 0580 85E80700 		stm	r5, {r0, r1, r2}
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2207              		.loc 1 174 9 is_stmt 1 view .LVU745
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2208              		.loc 1 174 18 is_stmt 0 view .LVU746
 2209 0584 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2210              		.loc 1 174 12 view .LVU747
 2211 0588 B3BB     		cbnz	r3, .L60
 2212 058a 10AB     		add	r3, sp, #64
 2213 058c 95E80700 		ldm	r5, {r0, r1, r2}
 2214 0590 83E80700 		stm	r3, {r0, r1, r2}
 2215              	.LBB225:
 2216              	.LBI225:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 2217              		.loc 2 283 21 is_stmt 1 discriminator 1 view .LVU748
 2218              	.LBB226:
 284:Core/Inc/Fusion/FusionMath.h **** }
 2219              		.loc 2 284 5 discriminator 1 view .LVU749
 2220 0594 17AE     		add	r6, sp, #92
 2221 0596 86E80700 		stm	r6, {r0, r1, r2}
 2222 059a 8CE80700 		stm	ip, {r0, r1, r2}
 2223              	.LBB227:
 2224              	.LBI227:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2225              		.loc 2 252 28 discriminator 1 view .LVU750
 2226              	.LBB228:
ARM GAS  /tmp/ccHlrfTi.s 			page 60


 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 2227              		.loc 2 253 5 discriminator 1 view .LVU751
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2228              		.loc 2 254 5 discriminator 1 view .LVU752
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2229              		.loc 2 254 33 is_stmt 0 discriminator 1 view .LVU753
 2230 059e 96ED007A 		vldr.32	s14, [r6]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2231              		.loc 2 254 50 discriminator 1 view .LVU754
 2232 05a2 DCED007A 		vldr.32	s15, [ip]
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2233              		.loc 2 254 36 discriminator 1 view .LVU755
 2234 05a6 27EE277A 		vmul.f32	s14, s14, s15
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2235              		.loc 2 254 19 discriminator 1 view .LVU756
 2236 05aa 1BAB     		add	r3, sp, #108
 2237 05ac 8DED1B7A 		vstr.32	s14, [sp, #108]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2238              		.loc 2 255 5 is_stmt 1 discriminator 1 view .LVU757
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2239              		.loc 2 255 33 is_stmt 0 discriminator 1 view .LVU758
 2240 05b0 D6ED016A 		vldr.32	s13, [r6, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2241              		.loc 2 255 50 discriminator 1 view .LVU759
 2242 05b4 DCED017A 		vldr.32	s15, [ip, #4]
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2243              		.loc 2 255 36 discriminator 1 view .LVU760
 2244 05b8 66EEA76A 		vmul.f32	s13, s13, s15
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2245              		.loc 2 255 19 discriminator 1 view .LVU761
 2246 05bc CDED1C6A 		vstr.32	s13, [sp, #112]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2247              		.loc 2 256 5 is_stmt 1 discriminator 1 view .LVU762
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2248              		.loc 2 256 33 is_stmt 0 discriminator 1 view .LVU763
 2249 05c0 D6ED027A 		vldr.32	s15, [r6, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2250              		.loc 2 256 50 discriminator 1 view .LVU764
 2251 05c4 9CED026A 		vldr.32	s12, [ip, #8]
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2252              		.loc 2 256 36 discriminator 1 view .LVU765
 2253 05c8 67EE867A 		vmul.f32	s15, s15, s12
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2254              		.loc 2 256 19 discriminator 1 view .LVU766
 2255 05cc CDED1D7A 		vstr.32	s15, [sp, #116]
 257:Core/Inc/Fusion/FusionMath.h **** }
 2256              		.loc 2 257 5 is_stmt 1 discriminator 1 view .LVU767
 257:Core/Inc/Fusion/FusionMath.h **** }
 2257              		.loc 2 257 12 is_stmt 0 discriminator 1 view .LVU768
 2258 05d0 88AE     		add	r6, sp, #544
 2259 05d2 93E80700 		ldm	r3, {r0, r1, r2}
 2260 05d6 86E80700 		stm	r6, {r0, r1, r2}
 2261 05da 8BAD     		add	r5, sp, #556
 2262 05dc 85E80700 		stm	r5, {r0, r1, r2}
 2263              	.LBE228:
 2264              	.LBE227:
 2265              	.LBB229:
ARM GAS  /tmp/ccHlrfTi.s 			page 61


 2266              	.LBI229:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 2267              		.loc 2 228 21 is_stmt 1 discriminator 1 view .LVU769
 2268              	.LBB230:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2269              		.loc 2 229 5 discriminator 1 view .LVU770
 229:Core/Inc/Fusion/FusionMath.h **** }
 2270              		.loc 2 229 26 is_stmt 0 discriminator 1 view .LVU771
 2271 05e0 37EE267A 		vadd.f32	s14, s14, s13
 229:Core/Inc/Fusion/FusionMath.h **** }
 2272              		.loc 2 229 42 discriminator 1 view .LVU772
 2273 05e4 77EE877A 		vadd.f32	s15, s15, s14
 2274              	.LBE230:
 2275              	.LBE229:
 2276              	.LBE226:
 2277              	.LBE225:
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2278              		.loc 1 174 124 discriminator 1 view .LVU773
 2279 05e8 94ED027A 		vldr.32	s14, [r4, #8]
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2280              		.loc 1 174 42 discriminator 1 view .LVU774
 2281 05ec B4EEE77A 		vcmpe.f32	s14, s15
 2282 05f0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 2283 05f4 C0F29F81 		blt	.L75
 2284              	.L60:
 175:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 2285              		.loc 1 175 13 is_stmt 1 view .LVU775
 175:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 2286              		.loc 1 175 38 is_stmt 0 view .LVU776
 2287 05f8 25AB     		add	r3, sp, #148
 2288 05fa 04F14402 		add	r2, r4, #68
 2289 05fe 07CA     		ldm	r2, {r0, r1, r2}
 2290 0600 83E80700 		stm	r3, {r0, r1, r2}
 176:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 2291              		.loc 1 176 13 is_stmt 1 view .LVU777
 176:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 2292              		.loc 1 176 39 is_stmt 0 view .LVU778
 2293 0604 0023     		movs	r3, #0
 2294 0606 84F85930 		strb	r3, [r4, #89]
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2295              		.loc 1 177 13 is_stmt 1 view .LVU779
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2296              		.loc 1 177 42 is_stmt 0 view .LVU780
 2297 060a E36D     		ldr	r3, [r4, #92]
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2298              		.loc 1 177 85 view .LVU781
 2299 060c 092B     		cmp	r3, #9
 2300 060e 40F29081 		bls	.L72
 2301 0612 0A22     		movs	r2, #10
 2302              	.L63:
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2303              		.loc 1 177 42 discriminator 4 view .LVU782
 2304 0614 9B1A     		subs	r3, r3, r2
 2305 0616 E365     		str	r3, [r4, #92]
 2306              	.L58:
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2307              		.loc 1 177 42 discriminator 4 view .LVU783
ARM GAS  /tmp/ccHlrfTi.s 			page 62


 2308              	.LBE208:
 184:Core/Src/Fusion/FusionAhrs.c **** 
 2309              		.loc 1 184 5 is_stmt 1 view .LVU784
 2310              	.LVL78:
 128:Core/Inc/Fusion/FusionMath.h **** }
 2311              		.loc 2 128 5 view .LVU785
 128:Core/Inc/Fusion/FusionMath.h **** }
 2312              		.loc 2 128 5 is_stmt 0 view .LVU786
 2313 0618 0DF15C0E 		add	lr, sp, #92
 2314 061c 07AB     		add	r3, sp, #28
 2315 061e 93E80700 		ldm	r3, {r0, r1, r2}
 2316 0622 8EE80700 		stm	lr, {r0, r1, r2}
 2317              	.LVL79:
 2318              	.LBB231:
 2319              	.LBI231:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2320              		.loc 2 238 28 is_stmt 1 view .LVU787
 2321              	.LBB232:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2322              		.loc 2 239 5 view .LVU788
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2323              		.loc 2 240 5 view .LVU789
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2324              		.loc 2 240 32 is_stmt 0 view .LVU790
 2325 0626 9EED007A 		vldr.32	s14, [lr]
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2326              		.loc 2 240 35 view .LVU791
 2327 062a DFED904A 		vldr.32	s9, .L81+12
 2328 062e 67EE245A 		vmul.f32	s11, s14, s9
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2329              		.loc 2 240 19 view .LVU792
 2330 0632 0DF16C0C 		add	ip, sp, #108
 2331 0636 CCED005A 		vstr.32	s11, [ip]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2332              		.loc 2 241 5 is_stmt 1 view .LVU793
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2333              		.loc 2 241 32 is_stmt 0 view .LVU794
 2334 063a DEED017A 		vldr.32	s15, [lr, #4]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2335              		.loc 2 241 35 view .LVU795
 2336 063e 27EEA46A 		vmul.f32	s12, s15, s9
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2337              		.loc 2 241 19 view .LVU796
 2338 0642 8CED016A 		vstr.32	s12, [ip, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2339              		.loc 2 242 5 is_stmt 1 view .LVU797
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2340              		.loc 2 242 32 is_stmt 0 view .LVU798
 2341 0646 DEED026A 		vldr.32	s13, [lr, #8]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2342              		.loc 2 242 35 view .LVU799
 2343 064a 66EEA44A 		vmul.f32	s9, s13, s9
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2344              		.loc 2 242 19 view .LVU800
 2345 064e CCED024A 		vstr.32	s9, [ip, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 2346              		.loc 2 243 5 is_stmt 1 view .LVU801
ARM GAS  /tmp/ccHlrfTi.s 			page 63


 243:Core/Inc/Fusion/FusionMath.h **** }
 2347              		.loc 2 243 12 is_stmt 0 view .LVU802
 2348 0652 58AB     		add	r3, sp, #352
 2349 0654 9CE80700 		ldm	ip, {r0, r1, r2}
 2350 0658 83E80700 		stm	r3, {r0, r1, r2}
 2351 065c 22AE     		add	r6, sp, #136
 2352 065e 86E80700 		stm	r6, {r0, r1, r2}
 2353              	.LVL80:
 243:Core/Inc/Fusion/FusionMath.h **** }
 2354              		.loc 2 243 12 view .LVU803
 2355              	.LBE232:
 2356              	.LBE231:
 187:Core/Src/Fusion/FusionAhrs.c **** 
 2357              		.loc 1 187 5 is_stmt 1 view .LVU804
 2358 0662 13AD     		add	r5, sp, #76
 2359 0664 28AB     		add	r3, sp, #160
 2360 0666 93E80700 		ldm	r3, {r0, r1, r2}
 2361 066a 85E80700 		stm	r5, {r0, r1, r2}
 2362 066e 25AB     		add	r3, sp, #148
 2363 0670 93E80700 		ldm	r3, {r0, r1, r2}
 2364 0674 8EE80700 		stm	lr, {r0, r1, r2}
 2365              	.LBB233:
 2366              	.LBI233:
 201:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2367              		.loc 2 201 28 view .LVU805
 2368              	.LBB234:
 202:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 2369              		.loc 2 202 5 view .LVU806
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2370              		.loc 2 203 5 view .LVU807
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2371              		.loc 2 203 33 is_stmt 0 view .LVU808
 2372 0678 95ED007A 		vldr.32	s14, [r5]
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2373              		.loc 2 203 50 view .LVU809
 2374 067c DEED007A 		vldr.32	s15, [lr]
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2375              		.loc 2 203 36 view .LVU810
 2376 0680 37EE277A 		vadd.f32	s14, s14, s15
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2377              		.loc 2 203 19 view .LVU811
 2378 0684 8CED007A 		vstr.32	s14, [ip]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2379              		.loc 2 204 5 is_stmt 1 view .LVU812
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2380              		.loc 2 204 33 is_stmt 0 view .LVU813
 2381 0688 D5ED017A 		vldr.32	s15, [r5, #4]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2382              		.loc 2 204 50 view .LVU814
 2383 068c DEED016A 		vldr.32	s13, [lr, #4]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2384              		.loc 2 204 36 view .LVU815
 2385 0690 77EEA67A 		vadd.f32	s15, s15, s13
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2386              		.loc 2 204 19 view .LVU816
 2387 0694 CCED017A 		vstr.32	s15, [ip, #4]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
ARM GAS  /tmp/ccHlrfTi.s 			page 64


 2388              		.loc 2 205 5 is_stmt 1 view .LVU817
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2389              		.loc 2 205 33 is_stmt 0 view .LVU818
 2390 0698 D5ED026A 		vldr.32	s13, [r5, #8]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2391              		.loc 2 205 50 view .LVU819
 2392 069c 9EED025A 		vldr.32	s10, [lr, #8]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2393              		.loc 2 205 36 view .LVU820
 2394 06a0 36EE855A 		vadd.f32	s10, s13, s10
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2395              		.loc 2 205 19 view .LVU821
 2396 06a4 8CED025A 		vstr.32	s10, [ip, #8]
 206:Core/Inc/Fusion/FusionMath.h **** }
 2397              		.loc 2 206 5 is_stmt 1 view .LVU822
 206:Core/Inc/Fusion/FusionMath.h **** }
 2398              		.loc 2 206 12 is_stmt 0 view .LVU823
 2399 06a8 55AF     		add	r7, sp, #340
 2400 06aa 9CE80700 		ldm	ip, {r0, r1, r2}
 2401 06ae 87E80700 		stm	r7, {r0, r1, r2}
 2402 06b2 37AB     		add	r3, sp, #220
 2403 06b4 83E80700 		stm	r3, {r0, r1, r2}
 2404              	.LBE234:
 2405              	.LBE233:
 187:Core/Src/Fusion/FusionAhrs.c **** 
 2406              		.loc 1 187 48 view .LVU824
 2407 06b8 D4ED0C6A 		vldr.32	s13, [r4, #48]
 2408 06bc 8EE80700 		stm	lr, {r0, r1, r2}
 2409              	.LVL81:
 2410              	.LBB235:
 2411              	.LBI235:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2412              		.loc 2 238 28 is_stmt 1 view .LVU825
 2413              	.LBB236:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2414              		.loc 2 239 5 view .LVU826
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2415              		.loc 2 240 5 view .LVU827
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2416              		.loc 2 240 35 is_stmt 0 view .LVU828
 2417 06c0 26EE877A 		vmul.f32	s14, s13, s14
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2418              		.loc 2 240 19 view .LVU829
 2419 06c4 8CED007A 		vstr.32	s14, [ip]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2420              		.loc 2 241 5 is_stmt 1 view .LVU830
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2421              		.loc 2 241 35 is_stmt 0 view .LVU831
 2422 06c8 66EEA77A 		vmul.f32	s15, s13, s15
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2423              		.loc 2 241 19 view .LVU832
 2424 06cc CCED017A 		vstr.32	s15, [ip, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2425              		.loc 2 242 5 is_stmt 1 view .LVU833
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2426              		.loc 2 242 35 is_stmt 0 view .LVU834
 2427 06d0 66EE856A 		vmul.f32	s13, s13, s10
ARM GAS  /tmp/ccHlrfTi.s 			page 65


 2428              	.LVL82:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2429              		.loc 2 242 19 view .LVU835
 2430 06d4 CCED026A 		vstr.32	s13, [ip, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 2431              		.loc 2 243 5 is_stmt 1 view .LVU836
 243:Core/Inc/Fusion/FusionMath.h **** }
 2432              		.loc 2 243 12 is_stmt 0 view .LVU837
 2433 06d8 52AF     		add	r7, sp, #328
 2434 06da 9CE80700 		ldm	ip, {r0, r1, r2}
 2435 06de 87E80700 		stm	r7, {r0, r1, r2}
 2436 06e2 3AAB     		add	r3, sp, #232
 2437 06e4 83E80700 		stm	r3, {r0, r1, r2}
 243:Core/Inc/Fusion/FusionMath.h **** }
 2438              		.loc 2 243 12 view .LVU838
 2439 06e8 96E80700 		ldm	r6, {r0, r1, r2}
 2440 06ec 85E80700 		stm	r5, {r0, r1, r2}
 2441 06f0 93E80700 		ldm	r3, {r0, r1, r2}
 2442 06f4 8EE80700 		stm	lr, {r0, r1, r2}
 2443              	.LBE236:
 2444              	.LBE235:
 2445              	.LBB237:
 2446              	.LBI237:
 201:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2447              		.loc 2 201 28 is_stmt 1 view .LVU839
 2448              	.LBB238:
 202:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 2449              		.loc 2 202 5 view .LVU840
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2450              		.loc 2 203 5 view .LVU841
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2451              		.loc 2 203 36 is_stmt 0 view .LVU842
 2452 06f8 37EE257A 		vadd.f32	s14, s14, s11
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2453              		.loc 2 203 19 view .LVU843
 2454 06fc 8CED007A 		vstr.32	s14, [ip]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2455              		.loc 2 204 5 is_stmt 1 view .LVU844
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2456              		.loc 2 204 36 is_stmt 0 view .LVU845
 2457 0700 77EE867A 		vadd.f32	s15, s15, s12
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2458              		.loc 2 204 19 view .LVU846
 2459 0704 CCED017A 		vstr.32	s15, [ip, #4]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2460              		.loc 2 205 5 is_stmt 1 view .LVU847
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2461              		.loc 2 205 36 is_stmt 0 view .LVU848
 2462 0708 76EEA46A 		vadd.f32	s13, s13, s9
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2463              		.loc 2 205 19 view .LVU849
 2464 070c CCED026A 		vstr.32	s13, [ip, #8]
 206:Core/Inc/Fusion/FusionMath.h **** }
 2465              		.loc 2 206 5 is_stmt 1 view .LVU850
 206:Core/Inc/Fusion/FusionMath.h **** }
 2466              		.loc 2 206 12 is_stmt 0 view .LVU851
 2467 0710 4FAE     		add	r6, sp, #316
ARM GAS  /tmp/ccHlrfTi.s 			page 66


 2468 0712 9CE80700 		ldm	ip, {r0, r1, r2}
 2469 0716 86E80700 		stm	r6, {r0, r1, r2}
 2470 071a 1FAB     		add	r3, sp, #124
 2471 071c 83E80700 		stm	r3, {r0, r1, r2}
 2472              	.LBE238:
 2473              	.LBE237:
 190:Core/Src/Fusion/FusionAhrs.c **** 
 2474              		.loc 1 190 5 is_stmt 1 view .LVU852
 2475 0720 8EE80700 		stm	lr, {r0, r1, r2}
 2476              	.LVL83:
 2477              	.LBB239:
 2478              	.LBI239:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2479              		.loc 2 238 28 view .LVU853
 2480              	.LBB240:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2481              		.loc 2 239 5 view .LVU854
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2482              		.loc 2 240 5 view .LVU855
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2483              		.loc 2 240 35 is_stmt 0 view .LVU856
 2484 0724 28EE077A 		vmul.f32	s14, s16, s14
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2485              		.loc 2 240 19 view .LVU857
 2486 0728 8CED007A 		vstr.32	s14, [ip]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2487              		.loc 2 241 5 is_stmt 1 view .LVU858
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2488              		.loc 2 241 35 is_stmt 0 view .LVU859
 2489 072c 68EE277A 		vmul.f32	s15, s16, s15
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2490              		.loc 2 241 19 view .LVU860
 2491 0730 CCED017A 		vstr.32	s15, [ip, #4]
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2492              		.loc 2 242 5 is_stmt 1 view .LVU861
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2493              		.loc 2 242 35 is_stmt 0 view .LVU862
 2494 0734 68EE266A 		vmul.f32	s13, s16, s13
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2495              		.loc 2 242 19 view .LVU863
 2496 0738 CCED026A 		vstr.32	s13, [ip, #8]
 243:Core/Inc/Fusion/FusionMath.h **** }
 2497              		.loc 2 243 5 is_stmt 1 view .LVU864
 243:Core/Inc/Fusion/FusionMath.h **** }
 2498              		.loc 2 243 12 is_stmt 0 view .LVU865
 2499 073c 4CAB     		add	r3, sp, #304
 2500 073e 9CE80700 		ldm	ip, {r0, r1, r2}
 2501 0742 83E80700 		stm	r3, {r0, r1, r2}
 2502 0746 3DAE     		add	r6, sp, #244
 2503 0748 86E80700 		stm	r6, {r0, r1, r2}
 2504              	.LVL84:
 243:Core/Inc/Fusion/FusionMath.h **** }
 2505              		.loc 2 243 12 view .LVU866
 2506 074c 1034     		adds	r4, r4, #16
 2507              	.LVL85:
 243:Core/Inc/Fusion/FusionMath.h **** }
 2508              		.loc 2 243 12 view .LVU867
ARM GAS  /tmp/ccHlrfTi.s 			page 67


 2509 074e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2510 0752 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2511 0756 96E80700 		ldm	r6, {r0, r1, r2}
 2512 075a 85E80700 		stm	r5, {r0, r1, r2}
 2513              	.LBE240:
 2514              	.LBE239:
 2515              	.LBB241:
 2516              	.LBI241:
 343:Core/Inc/Fusion/FusionMath.h **** #undef A
 344:Core/Inc/Fusion/FusionMath.h **** #undef B
 345:Core/Inc/Fusion/FusionMath.h **** }
 346:Core/Inc/Fusion/FusionMath.h **** 
 347:Core/Inc/Fusion/FusionMath.h **** /**
 348:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 349:Core/Inc/Fusion/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 350:Core/Inc/Fusion/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 351:Core/Inc/Fusion/FusionMath.h ****  * multiplied by the vector.
 352:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 353:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 354:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 355:Core/Inc/Fusion/FusionMath.h ****  */
 356:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 2517              		.loc 2 356 32 is_stmt 1 view .LVU868
 2518              	.LBB242:
 357:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 358:Core/Inc/Fusion/FusionMath.h **** #define V vector.axis
 359:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 2519              		.loc 2 359 5 view .LVU869
 360:Core/Inc/Fusion/FusionMath.h ****     result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 2520              		.loc 2 360 5 view .LVU870
 2521              		.loc 2 360 26 is_stmt 0 view .LVU871
 2522 075e DEED016A 		vldr.32	s13, [lr, #4]
 2523              		.loc 2 360 32 view .LVU872
 2524 0762 95ED007A 		vldr.32	s14, [r5]
 2525              		.loc 2 360 29 view .LVU873
 2526 0766 26EEC76A 		vnmul.f32	s12, s13, s14
 2527              		.loc 2 360 38 view .LVU874
 2528 076a DEED024A 		vldr.32	s9, [lr, #8]
 2529              		.loc 2 360 44 view .LVU875
 2530 076e 95ED015A 		vldr.32	s10, [r5, #4]
 2531              		.loc 2 360 41 view .LVU876
 2532 0772 64EE857A 		vmul.f32	s15, s9, s10
 2533              		.loc 2 360 35 view .LVU877
 2534 0776 36EE676A 		vsub.f32	s12, s12, s15
 2535              		.loc 2 360 50 view .LVU878
 2536 077a DEED035A 		vldr.32	s11, [lr, #12]
 2537              		.loc 2 360 56 view .LVU879
 2538 077e D5ED027A 		vldr.32	s15, [r5, #8]
 2539              		.loc 2 360 53 view .LVU880
 2540 0782 25EEA74A 		vmul.f32	s8, s11, s15
 2541              		.loc 2 360 47 view .LVU881
 2542 0786 36EE446A 		vsub.f32	s12, s12, s8
 2543              		.loc 2 360 22 view .LVU882
 2544 078a 8CED006A 		vstr.32	s12, [ip]
 361:Core/Inc/Fusion/FusionMath.h ****     result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 2545              		.loc 2 361 5 is_stmt 1 view .LVU883
 2546              		.loc 2 361 25 is_stmt 0 view .LVU884
ARM GAS  /tmp/ccHlrfTi.s 			page 68


 2547 078e 9EED004A 		vldr.32	s8, [lr]
 2548              		.loc 2 361 28 view .LVU885
 2549 0792 27EE046A 		vmul.f32	s12, s14, s8
 2550              		.loc 2 361 40 view .LVU886
 2551 0796 64EEA73A 		vmul.f32	s7, s9, s15
 2552              		.loc 2 361 34 view .LVU887
 2553 079a 36EE236A 		vadd.f32	s12, s12, s7
 2554              		.loc 2 361 52 view .LVU888
 2555 079e 65EE253A 		vmul.f32	s7, s10, s11
 2556              		.loc 2 361 46 view .LVU889
 2557 07a2 36EE636A 		vsub.f32	s12, s12, s7
 2558              		.loc 2 361 22 view .LVU890
 2559 07a6 8CED016A 		vstr.32	s12, [ip, #4]
 362:Core/Inc/Fusion/FusionMath.h ****     result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 2560              		.loc 2 362 5 is_stmt 1 view .LVU891
 2561              		.loc 2 362 28 is_stmt 0 view .LVU892
 2562 07aa 25EE046A 		vmul.f32	s12, s10, s8
 2563              		.loc 2 362 40 view .LVU893
 2564 07ae 66EEA73A 		vmul.f32	s7, s13, s15
 2565              		.loc 2 362 34 view .LVU894
 2566 07b2 36EE636A 		vsub.f32	s12, s12, s7
 2567              		.loc 2 362 52 view .LVU895
 2568 07b6 67EE255A 		vmul.f32	s11, s14, s11
 2569              		.loc 2 362 46 view .LVU896
 2570 07ba 36EE256A 		vadd.f32	s12, s12, s11
 2571              		.loc 2 362 22 view .LVU897
 2572 07be 8CED026A 		vstr.32	s12, [ip, #8]
 363:Core/Inc/Fusion/FusionMath.h ****     result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 2573              		.loc 2 363 5 is_stmt 1 view .LVU898
 2574              		.loc 2 363 28 is_stmt 0 view .LVU899
 2575 07c2 67EE847A 		vmul.f32	s15, s15, s8
 2576              		.loc 2 363 40 view .LVU900
 2577 07c6 66EE856A 		vmul.f32	s13, s13, s10
 2578              		.loc 2 363 34 view .LVU901
 2579 07ca 77EEA67A 		vadd.f32	s15, s15, s13
 2580              		.loc 2 363 52 view .LVU902
 2581 07ce 27EE247A 		vmul.f32	s14, s14, s9
 2582              		.loc 2 363 46 view .LVU903
 2583 07d2 77EEC77A 		vsub.f32	s15, s15, s14
 2584              		.loc 2 363 22 view .LVU904
 2585 07d6 CCED037A 		vstr.32	s15, [ip, #12]
 364:Core/Inc/Fusion/FusionMath.h ****     return result;
 2586              		.loc 2 364 5 is_stmt 1 view .LVU905
 2587              		.loc 2 364 12 is_stmt 0 view .LVU906
 2588 07da 96AF     		add	r7, sp, #600
 2589 07dc 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 2590 07e0 87E80F00 		stm	r7, {r0, r1, r2, r3}
 2591 07e4 40AE     		add	r6, sp, #256
 2592 07e6 86E80F00 		stm	r6, {r0, r1, r2, r3}
 2593 07ea 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 2594 07ee 85E80F00 		stm	r5, {r0, r1, r2, r3}
 2595 07f2 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 2596 07f6 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2597              	.LBE242:
 2598              	.LBE241:
 2599              	.LBB243:
 2600              	.LBI243:
ARM GAS  /tmp/ccHlrfTi.s 			page 69


 319:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 2601              		.loc 2 319 32 is_stmt 1 view .LVU907
 2602              	.LBB244:
 320:Core/Inc/Fusion/FusionMath.h ****     result.element.w = quaternionA.element.w + quaternionB.element.w;
 2603              		.loc 2 320 5 view .LVU908
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 2604              		.loc 2 321 5 view .LVU909
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 2605              		.loc 2 321 43 is_stmt 0 view .LVU910
 2606 07fa D5ED007A 		vldr.32	s15, [r5]
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 2607              		.loc 2 321 67 view .LVU911
 2608 07fe 9EED007A 		vldr.32	s14, [lr]
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 2609              		.loc 2 321 46 view .LVU912
 2610 0802 77EE877A 		vadd.f32	s15, s15, s14
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 2611              		.loc 2 321 22 view .LVU913
 2612 0806 CCED007A 		vstr.32	s15, [ip]
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 2613              		.loc 2 322 5 is_stmt 1 view .LVU914
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 2614              		.loc 2 322 43 is_stmt 0 view .LVU915
 2615 080a D5ED017A 		vldr.32	s15, [r5, #4]
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 2616              		.loc 2 322 67 view .LVU916
 2617 080e 9EED017A 		vldr.32	s14, [lr, #4]
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 2618              		.loc 2 322 46 view .LVU917
 2619 0812 77EE877A 		vadd.f32	s15, s15, s14
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 2620              		.loc 2 322 22 view .LVU918
 2621 0816 CCED017A 		vstr.32	s15, [ip, #4]
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 2622              		.loc 2 323 5 is_stmt 1 view .LVU919
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 2623              		.loc 2 323 43 is_stmt 0 view .LVU920
 2624 081a D5ED027A 		vldr.32	s15, [r5, #8]
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 2625              		.loc 2 323 67 view .LVU921
 2626 081e 9EED027A 		vldr.32	s14, [lr, #8]
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 2627              		.loc 2 323 46 view .LVU922
 2628 0822 77EE877A 		vadd.f32	s15, s15, s14
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 2629              		.loc 2 323 22 view .LVU923
 2630 0826 CCED027A 		vstr.32	s15, [ip, #8]
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 2631              		.loc 2 324 5 is_stmt 1 view .LVU924
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 2632              		.loc 2 324 43 is_stmt 0 view .LVU925
 2633 082a D5ED037A 		vldr.32	s15, [r5, #12]
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 2634              		.loc 2 324 67 view .LVU926
 2635 082e 9EED037A 		vldr.32	s14, [lr, #12]
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 2636              		.loc 2 324 46 view .LVU927
ARM GAS  /tmp/ccHlrfTi.s 			page 70


 2637 0832 77EE877A 		vadd.f32	s15, s15, s14
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 2638              		.loc 2 324 22 view .LVU928
 2639 0836 CCED037A 		vstr.32	s15, [ip, #12]
 325:Core/Inc/Fusion/FusionMath.h **** }
 2640              		.loc 2 325 5 is_stmt 1 view .LVU929
 325:Core/Inc/Fusion/FusionMath.h **** }
 2641              		.loc 2 325 12 is_stmt 0 view .LVU930
 2642 083a 48AE     		add	r6, sp, #288
 2643 083c 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 2644 0840 86E80F00 		stm	r6, {r0, r1, r2, r3}
 2645 0844 44AD     		add	r5, sp, #272
 2646 0846 85E80F00 		stm	r5, {r0, r1, r2, r3}
 2647              	.LBE244:
 2648              	.LBE243:
 190:Core/Src/Fusion/FusionAhrs.c **** 
 2649              		.loc 1 190 24 view .LVU931
 2650 084a 84E80F00 		stm	r4, {r0, r1, r2, r3}
 193:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 2651              		.loc 1 193 5 is_stmt 1 view .LVU932
 2652 084e 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2653              	.LBB245:
 2654              	.LBI245:
 365:Core/Inc/Fusion/FusionMath.h **** #undef Q
 366:Core/Inc/Fusion/FusionMath.h **** #undef V
 367:Core/Inc/Fusion/FusionMath.h **** }
 368:Core/Inc/Fusion/FusionMath.h **** 
 369:Core/Inc/Fusion/FusionMath.h **** /**
 370:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised quaternion.
 371:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 372:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised quaternion.
 373:Core/Inc/Fusion/FusionMath.h ****  */
 374:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 2655              		.loc 2 374 32 view .LVU933
 2656              	.LBB246:
 375:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 376:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 377:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 378:Core/Inc/Fusion/FusionMath.h **** #else
 379:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 2657              		.loc 2 379 5 view .LVU934
 2658              		.loc 2 379 62 is_stmt 0 view .LVU935
 2659 0852 9EED005A 		vldr.32	s10, [lr]
 2660              		.loc 2 379 65 view .LVU936
 2661 0856 65EE057A 		vmul.f32	s15, s10, s10
 2662              		.loc 2 379 74 view .LVU937
 2663 085a DEED015A 		vldr.32	s11, [lr, #4]
 2664 085e 07E0     		b	.L82
 2665              	.L83:
 2666              		.align	2
 2667              	.L81:
 2668 0860 12141F5F 		.word	1595872274
 2669 0864 12D3363F 		.word	1060557586
 2670 0868 FF51D83F 		.word	1071141375
 2671 086c 35FA0E3C 		.word	1007614517
 2672              	.L82:
 2673              		.loc 2 379 77 view .LVU938
ARM GAS  /tmp/ccHlrfTi.s 			page 71


 2674 0870 25EEA57A 		vmul.f32	s14, s11, s11
 2675              		.loc 2 379 71 view .LVU939
 2676 0874 77EE877A 		vadd.f32	s15, s15, s14
 2677              		.loc 2 379 86 view .LVU940
 2678 0878 9EED026A 		vldr.32	s12, [lr, #8]
 2679              		.loc 2 379 89 view .LVU941
 2680 087c 26EE067A 		vmul.f32	s14, s12, s12
 2681              		.loc 2 379 83 view .LVU942
 2682 0880 77EE877A 		vadd.f32	s15, s15, s14
 2683              		.loc 2 379 98 view .LVU943
 2684 0884 DEED036A 		vldr.32	s13, [lr, #12]
 2685              		.loc 2 379 101 view .LVU944
 2686 0888 26EEA67A 		vmul.f32	s14, s13, s13
 2687              		.loc 2 379 39 view .LVU945
 2688 088c 77EE877A 		vadd.f32	s15, s15, s14
 2689              	.LVL86:
 2690              	.LBB247:
 2691              	.LBI247:
 169:Core/Inc/Fusion/FusionMath.h **** 
 2692              		.loc 2 169 21 is_stmt 1 view .LVU946
 2693              	.LBB248:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 2694              		.loc 2 171 5 view .LVU947
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 2695              		.loc 2 176 5 view .LVU948
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 2696              		.loc 2 177 5 view .LVU949
 178:Core/Inc/Fusion/FusionMath.h **** }
 2697              		.loc 2 178 5 view .LVU950
 2698 0890 2B4B     		ldr	r3, .L84
 2699 0892 17EE902A 		vmov	r2, s15	@ int
 2700 0896 A3EB6203 		sub	r3, r3, r2, asr #1
 2701 089a 07EE103A 		vmov	s14, r3	@ int
 178:Core/Inc/Fusion/FusionMath.h **** }
 2702              		.loc 2 178 52 is_stmt 0 view .LVU951
 2703 089e DFED294A 		vldr.32	s9, .L84+4
 2704 08a2 67EEA47A 		vmul.f32	s15, s15, s9
 2705              	.LVL87:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2706              		.loc 2 178 56 view .LVU952
 2707 08a6 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 2708              		.loc 2 178 68 view .LVU953
 2709 08aa 67EE277A 		vmul.f32	s15, s14, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 2710              		.loc 2 178 37 view .LVU954
 2711 08ae DFED264A 		vldr.32	s9, .L84+8
 2712 08b2 74EEE77A 		vsub.f32	s15, s9, s15
 178:Core/Inc/Fusion/FusionMath.h **** }
 2713              		.loc 2 178 22 view .LVU955
 2714 08b6 67EE277A 		vmul.f32	s15, s14, s15
 2715              	.LVL88:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2716              		.loc 2 178 22 view .LVU956
 2717              	.LBE248:
 2718              	.LBE247:
 380:Core/Inc/Fusion/FusionMath.h **** #endif
ARM GAS  /tmp/ccHlrfTi.s 			page 72


 381:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion normalisedQuaternion;
 2719              		.loc 2 381 5 is_stmt 1 view .LVU957
 382:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 2720              		.loc 2 382 5 view .LVU958
 2721              		.loc 2 382 42 is_stmt 0 view .LVU959
 2722 08ba 25EE275A 		vmul.f32	s10, s10, s15
 2723              		.loc 2 382 36 view .LVU960
 2724 08be 8CED005A 		vstr.32	s10, [ip]
 383:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 2725              		.loc 2 383 5 is_stmt 1 view .LVU961
 2726              		.loc 2 383 42 is_stmt 0 view .LVU962
 2727 08c2 65EEA75A 		vmul.f32	s11, s11, s15
 2728              		.loc 2 383 36 view .LVU963
 2729 08c6 CCED015A 		vstr.32	s11, [ip, #4]
 384:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 2730              		.loc 2 384 5 is_stmt 1 view .LVU964
 2731              		.loc 2 384 42 is_stmt 0 view .LVU965
 2732 08ca 26EE276A 		vmul.f32	s12, s12, s15
 2733              		.loc 2 384 36 view .LVU966
 2734 08ce 8CED026A 		vstr.32	s12, [ip, #8]
 385:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 2735              		.loc 2 385 5 is_stmt 1 view .LVU967
 2736              		.loc 2 385 42 is_stmt 0 view .LVU968
 2737 08d2 66EEA77A 		vmul.f32	s15, s13, s15
 2738              	.LVL89:
 2739              		.loc 2 385 36 view .LVU969
 2740 08d6 CCED037A 		vstr.32	s15, [ip, #12]
 386:Core/Inc/Fusion/FusionMath.h ****     return normalisedQuaternion;
 2741              		.loc 2 386 5 is_stmt 1 view .LVU970
 2742              		.loc 2 386 12 is_stmt 0 view .LVU971
 2743 08da 0DF5127E 		add	lr, sp, #584
 2744              	.LVL90:
 2745              		.loc 2 386 12 view .LVU972
 2746 08de 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 2747 08e2 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2748 08e6 8EAD     		add	r5, sp, #568
 2749 08e8 85E80F00 		stm	r5, {r0, r1, r2, r3}
 2750              	.LBE246:
 2751              	.LBE245:
 193:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 2752              		.loc 1 193 24 view .LVU973
 2753 08ec 84E80F00 		stm	r4, {r0, r1, r2, r3}
 2754              	.LVL91:
 195:Core/Src/Fusion/FusionAhrs.c **** 
 2755              		.loc 1 195 1 view .LVU974
 2756 08f0 0DF51A7D 		add	sp, sp, #616
 2757              	.LCFI24:
 2758              		.cfi_remember_state
 2759              		.cfi_def_cfa_offset 32
 2760              		@ sp needed
 2761 08f4 BDEC028B 		vldm	sp!, {d8}
 2762              	.LCFI25:
 2763              		.cfi_restore 80
 2764              		.cfi_restore 81
 2765              		.cfi_def_cfa_offset 24
 2766              	.LVL92:
 195:Core/Src/Fusion/FusionAhrs.c **** 
ARM GAS  /tmp/ccHlrfTi.s 			page 73


 2767              		.loc 1 195 1 view .LVU975
 2768 08f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2769              	.LVL93:
 2770              	.L70:
 2771              	.LCFI26:
 2772              		.cfi_restore_state
 2773              	.LBB249:
 2774              	.LBB204:
 192:Core/Inc/Fusion/FusionMath.h **** }
 2775              		.loc 2 192 63 view .LVU976
 2776 08fc 0023     		movs	r3, #0
 2777 08fe 40E5     		b	.L57
 2778              	.L71:
 2779 0900 0123     		movs	r3, #1
 2780 0902 3EE5     		b	.L57
 2781              	.L78:
 192:Core/Inc/Fusion/FusionMath.h **** }
 2782              		.loc 2 192 63 view .LVU977
 2783              	.LBE204:
 2784              	.LBE249:
 2785              	.LBB250:
 158:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer = 0;
 2786              		.loc 1 158 13 is_stmt 1 view .LVU978
 2787 0904 DDED011A 		vldr.32	s3, [sp, #4]
 2788 0908 9DED022A 		vldr.32	s4, [sp, #8]
 2789 090c DDED032A 		vldr.32	s5, [sp, #12]
 2790 0910 9DED2B0A 		vldr.32	s0, [sp, #172]
 2791 0914 DDED2C0A 		vldr.32	s1, [sp, #176]
 2792 0918 9DED2D1A 		vldr.32	s2, [sp, #180]
 2793 091c FFF7FEFF 		bl	FusionCompassCalculateHeading
 2794              	.LVL94:
 2795 0920 2046     		mov	r0, r4
 2796 0922 FFF7FEFF 		bl	FusionAhrsSetHeading
 2797              	.LVL95:
 159:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimeout = true;
 2798              		.loc 1 159 13 view .LVU979
 159:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimeout = true;
 2799              		.loc 1 159 42 is_stmt 0 view .LVU980
 2800 0926 0023     		movs	r3, #0
 2801 0928 E365     		str	r3, [r4, #92]
 160:Core/Src/Fusion/FusionAhrs.c ****         }
 2802              		.loc 1 160 13 is_stmt 1 view .LVU981
 160:Core/Src/Fusion/FusionAhrs.c ****         }
 2803              		.loc 1 160 44 is_stmt 0 view .LVU982
 2804 092a 0123     		movs	r3, #1
 2805 092c 84F86030 		strb	r3, [r4, #96]
 2806 0930 31E5     		b	.L59
 2807              	.L72:
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2808              		.loc 1 177 85 view .LVU983
 2809 0932 0022     		movs	r2, #0
 2810 0934 6EE6     		b	.L63
 2811              	.L75:
 179:Core/Src/Fusion/FusionAhrs.c ****         }
 2812              		.loc 1 179 13 is_stmt 1 view .LVU984
 179:Core/Src/Fusion/FusionAhrs.c ****         }
 2813              		.loc 1 179 17 is_stmt 0 view .LVU985
ARM GAS  /tmp/ccHlrfTi.s 			page 74


 2814 0936 E36D     		ldr	r3, [r4, #92]
 179:Core/Src/Fusion/FusionAhrs.c ****         }
 2815              		.loc 1 179 41 view .LVU986
 2816 0938 0133     		adds	r3, r3, #1
 2817 093a E365     		str	r3, [r4, #92]
 2818 093c 6CE6     		b	.L58
 2819              	.L85:
 2820 093e 00BF     		.align	2
 2821              	.L84:
 2822 0940 12141F5F 		.word	1595872274
 2823 0944 12D3363F 		.word	1060557586
 2824 0948 FF51D83F 		.word	1071141375
 2825              	.LBE250:
 2826              		.cfi_endproc
 2827              	.LFE24:
 2829              		.section	.text.FusionAhrsUpdateExternalHeading,"ax",%progbits
 2830              		.align	1
 2831              		.global	FusionAhrsUpdateExternalHeading
 2832              		.syntax unified
 2833              		.thumb
 2834              		.thumb_func
 2835              		.fpu fpv4-sp-d16
 2837              	FusionAhrsUpdateExternalHeading:
 2838              	.LVL96:
 2839              	.LFB26:
 225:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 2840              		.loc 1 225 170 is_stmt 1 view -0
 2841              		.cfi_startproc
 2842              		@ args = 0, pretend = 0, frame = 40
 2843              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 2844              		.loc 1 225 170 is_stmt 0 view .LVU988
 2845 0000 10B5     		push	{r4, lr}
 2846              	.LCFI27:
 2847              		.cfi_def_cfa_offset 8
 2848              		.cfi_offset 4, -8
 2849              		.cfi_offset 14, -4
 2850 0002 2DED068B 		vpush.64	{d8, d9, d10}
 2851              	.LCFI28:
 2852              		.cfi_def_cfa_offset 32
 2853              		.cfi_offset 80, -32
 2854              		.cfi_offset 81, -28
 2855              		.cfi_offset 82, -24
 2856              		.cfi_offset 83, -20
 2857              		.cfi_offset 84, -16
 2858              		.cfi_offset 85, -12
 2859 0006 8AB0     		sub	sp, sp, #40
 2860              	.LCFI29:
 2861              		.cfi_def_cfa_offset 72
 2862 0008 0446     		mov	r4, r0
 2863 000a B0EE438A 		vmov.f32	s16, s6
 2864 000e B0EE63AA 		vmov.f32	s20, s7
 2865 0012 8DED030A 		vstr.32	s0, [sp, #12]
 2866 0016 CDED040A 		vstr.32	s1, [sp, #16]
 2867 001a 8DED051A 		vstr.32	s2, [sp, #20]
 2868 001e CDED001A 		vstr.32	s3, [sp]
 2869 0022 8DED012A 		vstr.32	s4, [sp, #4]
ARM GAS  /tmp/ccHlrfTi.s 			page 75


 2870 0026 CDED022A 		vstr.32	s5, [sp, #8]
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2871              		.loc 1 229 5 is_stmt 1 view .LVU989
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2872              		.loc 1 229 32 is_stmt 0 view .LVU990
 2873 002a 90ED040A 		vldr.32	s0, [r0, #16]
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2874              		.loc 1 229 38 view .LVU991
 2875 002e D0ED057A 		vldr.32	s15, [r0, #20]
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2876              		.loc 1 229 35 view .LVU992
 2877 0032 20EE270A 		vmul.f32	s0, s0, s15
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2878              		.loc 1 229 44 view .LVU993
 2879 0036 D0ED060A 		vldr.32	s1, [r0, #24]
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2880              		.loc 1 229 50 view .LVU994
 2881 003a 90ED077A 		vldr.32	s14, [r0, #28]
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2882              		.loc 1 229 47 view .LVU995
 2883 003e 20EE877A 		vmul.f32	s14, s1, s14
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2884              		.loc 1 229 65 view .LVU996
 2885 0042 60EEA00A 		vmul.f32	s1, s1, s1
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2886              		.loc 1 229 59 view .LVU997
 2887 0046 F6EE006A 		vmov.f32	s13, #5.0e-1
 2888 004a 76EEE00A 		vsub.f32	s1, s13, s1
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2889              		.loc 1 229 77 view .LVU998
 2890 004e 67EEA77A 		vmul.f32	s15, s15, s15
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2891              		.loc 1 229 24 view .LVU999
 2892 0052 70EEE70A 		vsub.f32	s1, s1, s15
 2893 0056 30EE070A 		vadd.f32	s0, s0, s14
 2894 005a FFF7FEFF 		bl	atan2f
 2895              	.LVL97:
 229:Core/Src/Fusion/FusionAhrs.c **** 
 2896              		.loc 1 229 24 view .LVU1000
 2897 005e F0EE409A 		vmov.f32	s19, s0
 2898              	.LVL98:
 232:Core/Src/Fusion/FusionAhrs.c ****     const float sinHeadingRadians = sinf(headingRadians);
 2899              		.loc 1 232 5 is_stmt 1 view .LVU1001
 2900              	.LBB251:
 2901              	.LBI251:
 127:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 2902              		.loc 2 127 21 view .LVU1002
 2903              	.LBB252:
 128:Core/Inc/Fusion/FusionMath.h **** }
 2904              		.loc 2 128 5 view .LVU1003
 128:Core/Inc/Fusion/FusionMath.h **** }
 2905              		.loc 2 128 20 is_stmt 0 view .LVU1004
 2906 0062 9FED1D3A 		vldr.32	s6, .L88
 2907 0066 28EE038A 		vmul.f32	s16, s16, s6
 2908              	.LVL99:
 128:Core/Inc/Fusion/FusionMath.h **** }
 2909              		.loc 2 128 20 view .LVU1005
ARM GAS  /tmp/ccHlrfTi.s 			page 76


 2910              	.LBE252:
 2911              	.LBE251:
 233:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 2912              		.loc 1 233 5 is_stmt 1 view .LVU1006
 233:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 2913              		.loc 1 233 37 is_stmt 0 view .LVU1007
 2914 006a B0EE480A 		vmov.f32	s0, s16
 2915              	.LVL100:
 233:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 2916              		.loc 1 233 37 view .LVU1008
 2917 006e FFF7FEFF 		bl	sinf
 2918              	.LVL101:
 2919 0072 B0EE409A 		vmov.f32	s18, s0
 2920              	.LVL102:
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 2921              		.loc 1 234 5 is_stmt 1 view .LVU1009
 235:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = -1.0f * cosf(roll) * sinHeadingRadians,
 2922              		.loc 1 235 23 is_stmt 0 view .LVU1010
 2923 0076 B0EE480A 		vmov.f32	s0, s16
 2924              	.LVL103:
 235:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = -1.0f * cosf(roll) * sinHeadingRadians,
 2925              		.loc 1 235 23 view .LVU1011
 2926 007a FFF7FEFF 		bl	cosf
 2927              	.LVL104:
 2928 007e F0EE408A 		vmov.f32	s17, s0
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 2929              		.loc 1 234 24 view .LVU1012
 2930 0082 8DED070A 		vstr.32	s0, [sp, #28]
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 2931              		.loc 1 236 31 view .LVU1013
 2932 0086 B0EE690A 		vmov.f32	s0, s19
 2933 008a FFF7FEFF 		bl	cosf
 2934              	.LVL105:
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 2935              		.loc 1 236 42 view .LVU1014
 2936 008e 20EE498A 		vnmul.f32	s16, s0, s18
 2937              	.LVL106:
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 2938              		.loc 1 234 24 view .LVU1015
 2939 0092 8DED088A 		vstr.32	s16, [sp, #32]
 237:Core/Src/Fusion/FusionAhrs.c ****     };
 2940              		.loc 1 237 43 view .LVU1016
 2941 0096 B0EE690A 		vmov.f32	s0, s19
 2942 009a FFF7FEFF 		bl	sinf
 2943              	.LVL107:
 237:Core/Src/Fusion/FusionAhrs.c ****     };
 2944              		.loc 1 237 41 view .LVU1017
 2945 009e 20EE094A 		vmul.f32	s8, s0, s18
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 2946              		.loc 1 234 24 view .LVU1018
 2947 00a2 8DED094A 		vstr.32	s8, [sp, #36]
 241:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 2948              		.loc 1 241 5 is_stmt 1 view .LVU1019
 2949 00a6 F0EE4A4A 		vmov.f32	s9, s20
 2950 00aa B0EE683A 		vmov.f32	s6, s17
 2951 00ae F0EE483A 		vmov.f32	s7, s16
 2952 00b2 DDED001A 		vldr.32	s3, [sp]
ARM GAS  /tmp/ccHlrfTi.s 			page 77


 2953 00b6 9DED012A 		vldr.32	s4, [sp, #4]
 2954 00ba DDED022A 		vldr.32	s5, [sp, #8]
 2955 00be 9DED030A 		vldr.32	s0, [sp, #12]
 2956 00c2 DDED040A 		vldr.32	s1, [sp, #16]
 2957 00c6 9DED051A 		vldr.32	s2, [sp, #20]
 2958 00ca 2046     		mov	r0, r4
 2959 00cc FFF7FEFF 		bl	FusionAhrsUpdate
 2960              	.LVL108:
 243:Core/Src/Fusion/FusionAhrs.c **** 
 2961              		.loc 1 243 1 is_stmt 0 view .LVU1020
 2962 00d0 0AB0     		add	sp, sp, #40
 2963              	.LCFI30:
 2964              		.cfi_def_cfa_offset 32
 2965              		@ sp needed
 2966 00d2 BDEC068B 		vldm	sp!, {d8-d10}
 2967              	.LCFI31:
 2968              		.cfi_restore 84
 2969              		.cfi_restore 85
 2970              		.cfi_restore 82
 2971              		.cfi_restore 83
 2972              		.cfi_restore 80
 2973              		.cfi_restore 81
 2974              		.cfi_def_cfa_offset 8
 2975              	.LVL109:
 243:Core/Src/Fusion/FusionAhrs.c **** 
 2976              		.loc 1 243 1 view .LVU1021
 2977 00d6 10BD     		pop	{r4, pc}
 2978              	.LVL110:
 2979              	.L89:
 243:Core/Src/Fusion/FusionAhrs.c **** 
 2980              		.loc 1 243 1 view .LVU1022
 2981              		.align	2
 2982              	.L88:
 2983 00d8 35FA8E3C 		.word	1016003125
 2984              		.cfi_endproc
 2985              	.LFE26:
 2987              		.section	.text.FusionAhrsUpdateNoMagnetometer,"ax",%progbits
 2988              		.align	1
 2989              		.global	FusionAhrsUpdateNoMagnetometer
 2990              		.syntax unified
 2991              		.thumb
 2992              		.thumb_func
 2993              		.fpu fpv4-sp-d16
 2995              	FusionAhrsUpdateNoMagnetometer:
 2996              	.LVL111:
 2997              	.LFB25:
 205:Core/Src/Fusion/FusionAhrs.c **** 
 2998              		.loc 1 205 148 is_stmt 1 view -0
 2999              		.cfi_startproc
 3000              		@ args = 0, pretend = 0, frame = 40
 3001              		@ frame_needed = 0, uses_anonymous_args = 0
 205:Core/Src/Fusion/FusionAhrs.c **** 
 3002              		.loc 1 205 148 is_stmt 0 view .LVU1024
 3003 0000 10B5     		push	{r4, lr}
 3004              	.LCFI32:
 3005              		.cfi_def_cfa_offset 8
 3006              		.cfi_offset 4, -8
ARM GAS  /tmp/ccHlrfTi.s 			page 78


 3007              		.cfi_offset 14, -4
 3008 0002 8AB0     		sub	sp, sp, #40
 3009              	.LCFI33:
 3010              		.cfi_def_cfa_offset 48
 3011 0004 0446     		mov	r4, r0
 3012 0006 F0EE434A 		vmov.f32	s9, s6
 3013 000a 8DED030A 		vstr.32	s0, [sp, #12]
 3014 000e CDED040A 		vstr.32	s1, [sp, #16]
 3015 0012 8DED051A 		vstr.32	s2, [sp, #20]
 3016 0016 CDED001A 		vstr.32	s3, [sp]
 3017 001a 8DED012A 		vstr.32	s4, [sp, #4]
 3018 001e CDED022A 		vstr.32	s5, [sp, #8]
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3019              		.loc 1 208 5 is_stmt 1 view .LVU1025
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3020              		.loc 1 208 54 is_stmt 0 view .LVU1026
 3021 0022 9FED0E4A 		vldr.32	s8, .L94
 3022 0026 8DED074A 		vstr.32	s8, [sp, #28]
 3023 002a 8DED084A 		vstr.32	s8, [sp, #32]
 3024 002e 8DED094A 		vstr.32	s8, [sp, #36]
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3025              		.loc 1 208 5 view .LVU1027
 3026 0032 B0EE443A 		vmov.f32	s6, s8
 3027              	.LVL112:
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3028              		.loc 1 208 5 view .LVU1028
 3029 0036 F0EE443A 		vmov.f32	s7, s8
 3030 003a FFF7FEFF 		bl	FusionAhrsUpdate
 3031              	.LVL113:
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3032              		.loc 1 211 5 is_stmt 1 view .LVU1029
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3033              		.loc 1 211 14 is_stmt 0 view .LVU1030
 3034 003e 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3035              		.loc 1 211 8 view .LVU1031
 3036 0042 13B1     		cbz	r3, .L90
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3037              		.loc 1 211 46 discriminator 1 view .LVU1032
 3038 0044 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3039              		.loc 1 211 38 discriminator 1 view .LVU1033
 3040 0048 0BB1     		cbz	r3, .L93
 3041              	.L90:
 214:Core/Src/Fusion/FusionAhrs.c **** 
 3042              		.loc 1 214 1 view .LVU1034
 3043 004a 0AB0     		add	sp, sp, #40
 3044              	.LCFI34:
 3045              		.cfi_remember_state
 3046              		.cfi_def_cfa_offset 8
 3047              		@ sp needed
 3048 004c 10BD     		pop	{r4, pc}
 3049              	.LVL114:
 3050              	.L93:
 3051              	.LCFI35:
 3052              		.cfi_restore_state
 212:Core/Src/Fusion/FusionAhrs.c ****     }
ARM GAS  /tmp/ccHlrfTi.s 			page 79


 3053              		.loc 1 212 9 is_stmt 1 view .LVU1035
 3054 004e 9FED030A 		vldr.32	s0, .L94
 3055 0052 2046     		mov	r0, r4
 3056 0054 FFF7FEFF 		bl	FusionAhrsSetHeading
 3057              	.LVL115:
 214:Core/Src/Fusion/FusionAhrs.c **** 
 3058              		.loc 1 214 1 is_stmt 0 view .LVU1036
 3059 0058 F7E7     		b	.L90
 3060              	.L95:
 3061 005a 00BF     		.align	2
 3062              	.L94:
 3063 005c 00000000 		.word	0
 3064              		.cfi_endproc
 3065              	.LFE25:
 3067              		.section	.rodata
 3068              		.align	2
 3069              		.set	.LANCHOR0,. + 0
 3070              	.LC0:
 3071 0000 0000003F 		.word	1056964608
 3072 0004 0000B442 		.word	1119092736
 3073 0008 0000B442 		.word	1119092736
 3074 000c 00000000 		.word	0
 3075              		.text
 3076              	.Letext0:
 3077              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 3078              		.file 4 "Core/Inc/Fusion/FusionAhrs.h"
 3079              		.file 5 "/usr/include/newlib/math.h"
 3080              		.file 6 "Core/Inc/Fusion/FusionCompass.h"
ARM GAS  /tmp/ccHlrfTi.s 			page 80


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FusionAhrs.c
     /tmp/ccHlrfTi.s:18     .text.FusionAhrsReset:0000000000000000 $t
     /tmp/ccHlrfTi.s:26     .text.FusionAhrsReset:0000000000000000 FusionAhrsReset
     /tmp/ccHlrfTi.s:90     .text.FusionAhrsReset:0000000000000044 $d
     /tmp/ccHlrfTi.s:95     .text.FusionAhrsSetSettings:0000000000000000 $t
     /tmp/ccHlrfTi.s:102    .text.FusionAhrsSetSettings:0000000000000000 FusionAhrsSetSettings
     /tmp/ccHlrfTi.s:242    .text.FusionAhrsSetSettings:00000000000000a4 $d
     /tmp/ccHlrfTi.s:248    .text.FusionAhrsInitialise:0000000000000000 $t
     /tmp/ccHlrfTi.s:255    .text.FusionAhrsInitialise:0000000000000000 FusionAhrsInitialise
     /tmp/ccHlrfTi.s:300    .text.FusionAhrsInitialise:0000000000000024 $d
     /tmp/ccHlrfTi.s:305    .text.FusionAhrsGetQuaternion:0000000000000000 $t
     /tmp/ccHlrfTi.s:312    .text.FusionAhrsGetQuaternion:0000000000000000 FusionAhrsGetQuaternion
     /tmp/ccHlrfTi.s:348    .text.FusionAhrsGetLinearAcceleration:0000000000000000 $t
     /tmp/ccHlrfTi.s:355    .text.FusionAhrsGetLinearAcceleration:0000000000000000 FusionAhrsGetLinearAcceleration
     /tmp/ccHlrfTi.s:475    .text.FusionAhrsGetEarthAcceleration:0000000000000000 $t
     /tmp/ccHlrfTi.s:482    .text.FusionAhrsGetEarthAcceleration:0000000000000000 FusionAhrsGetEarthAcceleration
     /tmp/ccHlrfTi.s:636    .text.FusionAhrsGetInternalStates:0000000000000000 $t
     /tmp/ccHlrfTi.s:643    .text.FusionAhrsGetInternalStates:0000000000000000 FusionAhrsGetInternalStates
     /tmp/ccHlrfTi.s:993    .text.FusionAhrsGetInternalStates:00000000000001cc $d
     /tmp/ccHlrfTi.s:1001   .text.FusionAhrsGetFlags:0000000000000000 $t
     /tmp/ccHlrfTi.s:1008   .text.FusionAhrsGetFlags:0000000000000000 FusionAhrsGetFlags
     /tmp/ccHlrfTi.s:1067   .text.FusionAhrsSetHeading:0000000000000000 $t
     /tmp/ccHlrfTi.s:1074   .text.FusionAhrsSetHeading:0000000000000000 FusionAhrsSetHeading
     /tmp/ccHlrfTi.s:1289   .text.FusionAhrsSetHeading:000000000000014c $d
     /tmp/ccHlrfTi.s:1294   .text.FusionAhrsUpdate:0000000000000000 $t
     /tmp/ccHlrfTi.s:1301   .text.FusionAhrsUpdate:0000000000000000 FusionAhrsUpdate
     /tmp/ccHlrfTi.s:1878   .text.FusionAhrsUpdate:0000000000000374 $d
     /tmp/ccHlrfTi.s:1885   .text.FusionAhrsUpdate:0000000000000380 $t
     /tmp/ccHlrfTi.s:2668   .text.FusionAhrsUpdate:0000000000000860 $d
     /tmp/ccHlrfTi.s:2674   .text.FusionAhrsUpdate:0000000000000870 $t
     /tmp/ccHlrfTi.s:2822   .text.FusionAhrsUpdate:0000000000000940 $d
     /tmp/ccHlrfTi.s:2830   .text.FusionAhrsUpdateExternalHeading:0000000000000000 $t
     /tmp/ccHlrfTi.s:2837   .text.FusionAhrsUpdateExternalHeading:0000000000000000 FusionAhrsUpdateExternalHeading
     /tmp/ccHlrfTi.s:2983   .text.FusionAhrsUpdateExternalHeading:00000000000000d8 $d
     /tmp/ccHlrfTi.s:2988   .text.FusionAhrsUpdateNoMagnetometer:0000000000000000 $t
     /tmp/ccHlrfTi.s:2995   .text.FusionAhrsUpdateNoMagnetometer:0000000000000000 FusionAhrsUpdateNoMagnetometer
     /tmp/ccHlrfTi.s:3063   .text.FusionAhrsUpdateNoMagnetometer:000000000000005c $d
     /tmp/ccHlrfTi.s:3068   .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
sinf
powf
sqrtf
asinf
atan2f
cosf
FusionCompassCalculateHeading

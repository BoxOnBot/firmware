ARM GAS  /tmp/ccuLRtFR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"FusionOffset.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FusionOffsetInitialise,"ax",%progbits
  18              		.align	1
  19              		.global	FusionOffsetInitialise
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	FusionOffsetInitialise:
  27              	.LVL0:
  28              	.LFB21:
  29              		.file 1 "Core/Src/Fusion/FusionOffset.c"
   1:Core/Src/Fusion/FusionOffset.c **** /**
   2:Core/Src/Fusion/FusionOffset.c ****  * @file FusionOffset.c
   3:Core/Src/Fusion/FusionOffset.c ****  * @author Seb Madgwick
   4:Core/Src/Fusion/FusionOffset.c ****  * @brief Gyroscope offset correction algorithm for run-time calibration of the
   5:Core/Src/Fusion/FusionOffset.c ****  * gyroscope offset.
   6:Core/Src/Fusion/FusionOffset.c ****  */
   7:Core/Src/Fusion/FusionOffset.c **** 
   8:Core/Src/Fusion/FusionOffset.c **** //------------------------------------------------------------------------------
   9:Core/Src/Fusion/FusionOffset.c **** // Includes
  10:Core/Src/Fusion/FusionOffset.c **** 
  11:Core/Src/Fusion/FusionOffset.c **** #include "FusionOffset.h"
  12:Core/Src/Fusion/FusionOffset.c **** #include <math.h> // fabs
  13:Core/Src/Fusion/FusionOffset.c **** 
  14:Core/Src/Fusion/FusionOffset.c **** //------------------------------------------------------------------------------
  15:Core/Src/Fusion/FusionOffset.c **** // Definitions
  16:Core/Src/Fusion/FusionOffset.c **** 
  17:Core/Src/Fusion/FusionOffset.c **** /**
  18:Core/Src/Fusion/FusionOffset.c ****  * @brief Cutoff frequency in Hz.
  19:Core/Src/Fusion/FusionOffset.c ****  */
  20:Core/Src/Fusion/FusionOffset.c **** #define CUTOFF_FREQUENCY (0.02f)
  21:Core/Src/Fusion/FusionOffset.c **** 
  22:Core/Src/Fusion/FusionOffset.c **** /**
  23:Core/Src/Fusion/FusionOffset.c ****  * @brief Timeout in seconds.
  24:Core/Src/Fusion/FusionOffset.c ****  */
  25:Core/Src/Fusion/FusionOffset.c **** #define TIMEOUT (5)
  26:Core/Src/Fusion/FusionOffset.c **** 
  27:Core/Src/Fusion/FusionOffset.c **** /**
  28:Core/Src/Fusion/FusionOffset.c ****  * @brief Threshold in degrees per second.
  29:Core/Src/Fusion/FusionOffset.c ****  */
ARM GAS  /tmp/ccuLRtFR.s 			page 2


  30:Core/Src/Fusion/FusionOffset.c **** #define THRESHOLD (3.0f)
  31:Core/Src/Fusion/FusionOffset.c **** 
  32:Core/Src/Fusion/FusionOffset.c **** //------------------------------------------------------------------------------
  33:Core/Src/Fusion/FusionOffset.c **** // Functions
  34:Core/Src/Fusion/FusionOffset.c **** 
  35:Core/Src/Fusion/FusionOffset.c **** /**
  36:Core/Src/Fusion/FusionOffset.c ****  * @brief Initialises the gyroscope offset algorithm.
  37:Core/Src/Fusion/FusionOffset.c ****  * @param offset Gyroscope offset algorithm structure.
  38:Core/Src/Fusion/FusionOffset.c ****  * @param sampleRate Sample rate in Hz.
  39:Core/Src/Fusion/FusionOffset.c ****  */
  40:Core/Src/Fusion/FusionOffset.c **** void FusionOffsetInitialise(FusionOffset *const offset, const unsigned int sampleRate) {
  30              		.loc 1 40 88 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  41:Core/Src/Fusion/FusionOffset.c ****     offset->filterCoefficient = 2.0f * (float) M_PI * CUTOFF_FREQUENCY * (1.0f / (float) sampleRate
  35              		.loc 1 41 5 view .LVU1
  36              		.loc 1 41 82 is_stmt 0 view .LVU2
  37 0000 07EE901A 		vmov	s15, r1	@ int
  38 0004 B8EE677A 		vcvt.f32.u32	s14, s15
  39              		.loc 1 41 80 view .LVU3
  40 0008 F7EE006A 		vmov.f32	s13, #1.0e+0
  41 000c C6EE877A 		vdiv.f32	s15, s13, s14
  42              		.loc 1 41 72 view .LVU4
  43 0010 9FED077A 		vldr.32	s14, .L2
  44 0014 67EE877A 		vmul.f32	s15, s15, s14
  45              		.loc 1 41 31 view .LVU5
  46 0018 C0ED007A 		vstr.32	s15, [r0]
  42:Core/Src/Fusion/FusionOffset.c ****     offset->timeout = TIMEOUT * sampleRate;
  47              		.loc 1 42 5 is_stmt 1 view .LVU6
  48              		.loc 1 42 31 is_stmt 0 view .LVU7
  49 001c 01EB8101 		add	r1, r1, r1, lsl #2
  50              	.LVL1:
  51              		.loc 1 42 21 view .LVU8
  52 0020 4160     		str	r1, [r0, #4]
  43:Core/Src/Fusion/FusionOffset.c ****     offset->timer = 0;
  53              		.loc 1 43 5 is_stmt 1 view .LVU9
  54              		.loc 1 43 19 is_stmt 0 view .LVU10
  55 0022 0023     		movs	r3, #0
  56 0024 8360     		str	r3, [r0, #8]
  44:Core/Src/Fusion/FusionOffset.c ****     offset->gyroscopeOffset = FUSION_VECTOR_ZERO;
  57              		.loc 1 44 5 is_stmt 1 view .LVU11
  58              		.loc 1 44 29 is_stmt 0 view .LVU12
  59 0026 0023     		movs	r3, #0
  60 0028 C360     		str	r3, [r0, #12]	@ float
  61 002a 0361     		str	r3, [r0, #16]	@ float
  62 002c 4361     		str	r3, [r0, #20]	@ float
  45:Core/Src/Fusion/FusionOffset.c **** }
  63              		.loc 1 45 1 view .LVU13
  64 002e 7047     		bx	lr
  65              	.L3:
  66              		.align	2
  67              	.L2:
  68 0030 FDAD003E 		.word	1040231933
  69              		.cfi_endproc
  70              	.LFE21:
ARM GAS  /tmp/ccuLRtFR.s 			page 3


  72              		.section	.text.FusionOffsetUpdate,"ax",%progbits
  73              		.align	1
  74              		.global	FusionOffsetUpdate
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu fpv4-sp-d16
  80              	FusionOffsetUpdate:
  81              	.LVL2:
  82              	.LFB22:
  46:Core/Src/Fusion/FusionOffset.c **** 
  47:Core/Src/Fusion/FusionOffset.c **** /**
  48:Core/Src/Fusion/FusionOffset.c ****  * @brief Updates the gyroscope offset algorithm and returns the corrected
  49:Core/Src/Fusion/FusionOffset.c ****  * gyroscope measurement.
  50:Core/Src/Fusion/FusionOffset.c ****  * @param offset Gyroscope offset algorithm structure.
  51:Core/Src/Fusion/FusionOffset.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
  52:Core/Src/Fusion/FusionOffset.c ****  * @return Corrected gyroscope measurement in degrees per second.
  53:Core/Src/Fusion/FusionOffset.c ****  */
  54:Core/Src/Fusion/FusionOffset.c **** FusionVector FusionOffsetUpdate(FusionOffset *const offset, FusionVector gyroscope) {
  83              		.loc 1 54 85 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 144
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              		.loc 1 54 85 is_stmt 0 view .LVU15
  88 0000 70B5     		push	{r4, r5, r6, lr}
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 4, -16
  92              		.cfi_offset 5, -12
  93              		.cfi_offset 6, -8
  94              		.cfi_offset 14, -4
  95 0002 A4B0     		sub	sp, sp, #144
  96              	.LCFI1:
  97              		.cfi_def_cfa_offset 160
  98 0004 0346     		mov	r3, r0
  99 0006 8DED050A 		vstr.32	s0, [sp, #20]
 100 000a CDED060A 		vstr.32	s1, [sp, #24]
 101 000e 8DED071A 		vstr.32	s2, [sp, #28]
  55:Core/Src/Fusion/FusionOffset.c **** 
  56:Core/Src/Fusion/FusionOffset.c ****     // Subtract offset from gyroscope measurement
  57:Core/Src/Fusion/FusionOffset.c ****     gyroscope = FusionVectorSubtract(gyroscope, offset->gyroscopeOffset);
 102              		.loc 1 57 5 is_stmt 1 view .LVU16
 103 0012 0DF1240E 		add	lr, sp, #36
 104 0016 0DF1140C 		add	ip, sp, #20
 105 001a 9CE80700 		ldm	ip, {r0, r1, r2}
 106              	.LVL3:
 107              		.loc 1 57 5 is_stmt 0 view .LVU17
 108 001e 8EE80700 		stm	lr, {r0, r1, r2}
 109 0022 0DF1300E 		add	lr, sp, #48
 110 0026 03F10C02 		add	r2, r3, #12
 111 002a 07CA     		ldm	r2, {r0, r1, r2}
 112 002c 8EE80700 		stm	lr, {r0, r1, r2}
 113              	.LBB8:
 114              	.LBI8:
 115              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
ARM GAS  /tmp/ccuLRtFR.s 			page 4


   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
ARM GAS  /tmp/ccuLRtFR.s 			page 5


  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
ARM GAS  /tmp/ccuLRtFR.s 			page 6


 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
ARM GAS  /tmp/ccuLRtFR.s 			page 7


 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 116              		.loc 2 215 28 is_stmt 1 view .LVU18
 117              	.LBB9:
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 118              		.loc 2 216 5 view .LVU19
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 119              		.loc 2 217 5 view .LVU20
 120              		.loc 2 217 36 is_stmt 0 view .LVU21
 121 0030 DDED097A 		vldr.32	s15, [sp, #36]
 122 0034 9DED0C7A 		vldr.32	s14, [sp, #48]
 123 0038 77EEC77A 		vsub.f32	s15, s15, s14
 124              		.loc 2 217 19 view .LVU22
 125 003c CDED0F7A 		vstr.32	s15, [sp, #60]
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 126              		.loc 2 218 5 is_stmt 1 view .LVU23
 127              		.loc 2 218 36 is_stmt 0 view .LVU24
ARM GAS  /tmp/ccuLRtFR.s 			page 8


 128 0040 9DED0A7A 		vldr.32	s14, [sp, #40]
 129 0044 DDED0D6A 		vldr.32	s13, [sp, #52]
 130 0048 37EE667A 		vsub.f32	s14, s14, s13
 131              		.loc 2 218 19 view .LVU25
 132 004c 8DED107A 		vstr.32	s14, [sp, #64]
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 133              		.loc 2 219 5 is_stmt 1 view .LVU26
 134              		.loc 2 219 36 is_stmt 0 view .LVU27
 135 0050 DDED0B6A 		vldr.32	s13, [sp, #44]
 136 0054 9DED0E6A 		vldr.32	s12, [sp, #56]
 137 0058 76EEC66A 		vsub.f32	s13, s13, s12
 138              		.loc 2 219 19 view .LVU28
 139 005c CDED116A 		vstr.32	s13, [sp, #68]
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
 140              		.loc 2 220 5 is_stmt 1 view .LVU29
 141              		.loc 2 220 12 is_stmt 0 view .LVU30
 142 0060 0DF1600E 		add	lr, sp, #96
 143 0064 0FAA     		add	r2, sp, #60
 144 0066 07CA     		ldm	r2, {r0, r1, r2}
 145 0068 8EE80700 		stm	lr, {r0, r1, r2}
 146 006c 8CE80700 		stm	ip, {r0, r1, r2}
 147              	.LBE9:
 148              	.LBE8:
  58:Core/Src/Fusion/FusionOffset.c **** 
  59:Core/Src/Fusion/FusionOffset.c ****     // Reset timer if gyroscope not stationary
  60:Core/Src/Fusion/FusionOffset.c ****     if ((fabs(gyroscope.axis.x) > THRESHOLD) || (fabs(gyroscope.axis.y) > THRESHOLD) || (fabs(gyros
 149              		.loc 1 60 5 is_stmt 1 view .LVU31
 150              		.loc 1 60 10 is_stmt 0 view .LVU32
 151 0070 F0EEE75A 		vabs.f32	s11, s15
 152              		.loc 1 60 8 view .LVU33
 153 0074 B0EE086A 		vmov.f32	s12, #3.0e+0
 154 0078 F4EEC65A 		vcmpe.f32	s11, s12
 155 007c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 156 0080 60DC     		bgt	.L5
 157              		.loc 1 60 50 discriminator 1 view .LVU34
 158 0082 B0EEC76A 		vabs.f32	s12, s14
 159              		.loc 1 60 46 discriminator 1 view .LVU35
 160 0086 F0EE085A 		vmov.f32	s11, #3.0e+0
 161 008a B4EEE56A 		vcmpe.f32	s12, s11
 162 008e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 163 0092 57DC     		bgt	.L5
 164              		.loc 1 60 90 discriminator 2 view .LVU36
 165 0094 B0EEE66A 		vabs.f32	s12, s13
 166              		.loc 1 60 86 discriminator 2 view .LVU37
 167 0098 B4EEE56A 		vcmpe.f32	s12, s11
 168 009c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 169 00a0 50DC     		bgt	.L5
  61:Core/Src/Fusion/FusionOffset.c ****         offset->timer = 0;
  62:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
  63:Core/Src/Fusion/FusionOffset.c ****     }
  64:Core/Src/Fusion/FusionOffset.c **** 
  65:Core/Src/Fusion/FusionOffset.c ****     // Increment timer while gyroscope stationary
  66:Core/Src/Fusion/FusionOffset.c ****     if (offset->timer < offset->timeout) {
 170              		.loc 1 66 5 is_stmt 1 view .LVU38
 171              		.loc 1 66 15 is_stmt 0 view .LVU39
 172 00a2 9A68     		ldr	r2, [r3, #8]
 173              		.loc 1 66 31 view .LVU40
ARM GAS  /tmp/ccuLRtFR.s 			page 9


 174 00a4 5968     		ldr	r1, [r3, #4]
 175              		.loc 1 66 8 view .LVU41
 176 00a6 8A42     		cmp	r2, r1
 177 00a8 5BD3     		bcc	.L12
  67:Core/Src/Fusion/FusionOffset.c ****         offset->timer++;
  68:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
  69:Core/Src/Fusion/FusionOffset.c ****     }
  70:Core/Src/Fusion/FusionOffset.c **** 
  71:Core/Src/Fusion/FusionOffset.c ****     // Adjust offset if timer has elapsed
  72:Core/Src/Fusion/FusionOffset.c ****     offset->gyroscopeOffset = FusionVectorAdd(offset->gyroscopeOffset, FusionVectorMultiplyScalar(g
 178              		.loc 1 72 5 is_stmt 1 view .LVU42
 179              		.loc 1 72 31 is_stmt 0 view .LVU43
 180 00aa 1A46     		mov	r2, r3
 181 00ac 0C33     		adds	r3, r3, #12
 182              	.LVL4:
 183              		.loc 1 72 31 view .LVU44
 184 00ae 92ED006A 		vldr.32	s12, [r2]
 185 00b2 0CAC     		add	r4, sp, #48
 186 00b4 0DF1140C 		add	ip, sp, #20
 187 00b8 9CE80700 		ldm	ip, {r0, r1, r2}
 188              	.LVL5:
 189              		.loc 1 72 31 view .LVU45
 190 00bc 84E80700 		stm	r4, {r0, r1, r2}
 191              	.LVL6:
 192              	.LBB10:
 193              	.LBI10:
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 194              		.loc 2 238 28 is_stmt 1 view .LVU46
 195              	.LBB11:
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 196              		.loc 2 239 5 view .LVU47
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 197              		.loc 2 240 5 view .LVU48
 198              		.loc 2 240 35 is_stmt 0 view .LVU49
 199 00c0 66EE277A 		vmul.f32	s15, s12, s15
 200              		.loc 2 240 19 view .LVU50
 201 00c4 CDED0F7A 		vstr.32	s15, [sp, #60]
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 202              		.loc 2 241 5 is_stmt 1 view .LVU51
 203              		.loc 2 241 35 is_stmt 0 view .LVU52
ARM GAS  /tmp/ccuLRtFR.s 			page 10


 204 00c8 26EE077A 		vmul.f32	s14, s12, s14
 205              		.loc 2 241 19 view .LVU53
 206 00cc 8DED107A 		vstr.32	s14, [sp, #64]
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 207              		.loc 2 242 5 is_stmt 1 view .LVU54
 208              		.loc 2 242 35 is_stmt 0 view .LVU55
 209 00d0 66EE266A 		vmul.f32	s13, s12, s13
 210              		.loc 2 242 19 view .LVU56
 211 00d4 CDED116A 		vstr.32	s13, [sp, #68]
 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 212              		.loc 2 243 5 is_stmt 1 view .LVU57
 213              		.loc 2 243 12 is_stmt 0 view .LVU58
 214 00d8 21AE     		add	r6, sp, #132
 215 00da 0DF13C0E 		add	lr, sp, #60
 216 00de 9EE80700 		ldm	lr, {r0, r1, r2}
 217 00e2 86E80700 		stm	r6, {r0, r1, r2}
 218 00e6 15AD     		add	r5, sp, #84
 219 00e8 85E80700 		stm	r5, {r0, r1, r2}
 220              	.LVL7:
 221              		.loc 2 243 12 view .LVU59
 222 00ec 09AE     		add	r6, sp, #36
 223 00ee 93E80700 		ldm	r3, {r0, r1, r2}
 224 00f2 86E80700 		stm	r6, {r0, r1, r2}
 225 00f6 95E80700 		ldm	r5, {r0, r1, r2}
 226 00fa 84E80700 		stm	r4, {r0, r1, r2}
 227              	.LBE11:
 228              	.LBE10:
 229              	.LBB12:
 230              	.LBI12:
 201:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 231              		.loc 2 201 28 is_stmt 1 view .LVU60
 232              	.LBB13:
 202:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 233              		.loc 2 202 5 view .LVU61
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 234              		.loc 2 203 5 view .LVU62
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 235              		.loc 2 203 33 is_stmt 0 view .LVU63
 236 00fe 9DED096A 		vldr.32	s12, [sp, #36]
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 237              		.loc 2 203 36 view .LVU64
 238 0102 76EE277A 		vadd.f32	s15, s12, s15
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 239              		.loc 2 203 19 view .LVU65
 240 0106 CDED0F7A 		vstr.32	s15, [sp, #60]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 241              		.loc 2 204 5 is_stmt 1 view .LVU66
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 242              		.loc 2 204 33 is_stmt 0 view .LVU67
 243 010a DDED0A7A 		vldr.32	s15, [sp, #40]
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 244              		.loc 2 204 36 view .LVU68
 245 010e 37EE877A 		vadd.f32	s14, s15, s14
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 246              		.loc 2 204 19 view .LVU69
 247 0112 8DED107A 		vstr.32	s14, [sp, #64]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
ARM GAS  /tmp/ccuLRtFR.s 			page 11


 248              		.loc 2 205 5 is_stmt 1 view .LVU70
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 249              		.loc 2 205 33 is_stmt 0 view .LVU71
 250 0116 9DED0B6A 		vldr.32	s12, [sp, #44]
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 251              		.loc 2 205 36 view .LVU72
 252 011a 76EE266A 		vadd.f32	s13, s12, s13
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 253              		.loc 2 205 19 view .LVU73
 254 011e CDED116A 		vstr.32	s13, [sp, #68]
 206:Core/Inc/Fusion/FusionMath.h **** }
 255              		.loc 2 206 5 is_stmt 1 view .LVU74
 206:Core/Inc/Fusion/FusionMath.h **** }
 256              		.loc 2 206 12 is_stmt 0 view .LVU75
 257 0122 1EAC     		add	r4, sp, #120
 258 0124 9EE80700 		ldm	lr, {r0, r1, r2}
 259 0128 84E80700 		stm	r4, {r0, r1, r2}
 260 012c 0DF16C0E 		add	lr, sp, #108
 261 0130 8EE80700 		stm	lr, {r0, r1, r2}
 262              	.LBE13:
 263              	.LBE12:
 264              		.loc 1 72 31 view .LVU76
 265 0134 83E80700 		stm	r3, {r0, r1, r2}
  73:Core/Src/Fusion/FusionOffset.c ****     return gyroscope;
 266              		.loc 1 73 5 is_stmt 1 view .LVU77
 267              		.loc 1 73 12 is_stmt 0 view .LVU78
 268 0138 12AB     		add	r3, sp, #72
 269              	.LVL8:
 270              		.loc 1 73 12 view .LVU79
 271 013a 9CE80700 		ldm	ip, {r0, r1, r2}
 272 013e 83E80700 		stm	r3, {r0, r1, r2}
 273 0142 06E0     		b	.L8
 274              	.LVL9:
 275              	.L5:
  61:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 276              		.loc 1 61 9 is_stmt 1 view .LVU80
  61:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 277              		.loc 1 61 23 is_stmt 0 view .LVU81
 278 0144 0022     		movs	r2, #0
 279 0146 9A60     		str	r2, [r3, #8]
  62:Core/Src/Fusion/FusionOffset.c ****     }
 280              		.loc 1 62 9 is_stmt 1 view .LVU82
  62:Core/Src/Fusion/FusionOffset.c ****     }
 281              		.loc 1 62 16 is_stmt 0 view .LVU83
 282 0148 12AB     		add	r3, sp, #72
 283              	.LVL10:
  62:Core/Src/Fusion/FusionOffset.c ****     }
 284              		.loc 1 62 16 view .LVU84
 285 014a 05AA     		add	r2, sp, #20
 286 014c 07CA     		ldm	r2, {r0, r1, r2}
 287 014e 83E80700 		stm	r3, {r0, r1, r2}
 288              	.L8:
  74:Core/Src/Fusion/FusionOffset.c **** }
 289              		.loc 1 74 1 view .LVU85
 290 0152 9DED120A 		vldr.32	s0, [sp, #72]
 291 0156 DDED130A 		vldr.32	s1, [sp, #76]
 292 015a 9DED141A 		vldr.32	s2, [sp, #80]
ARM GAS  /tmp/ccuLRtFR.s 			page 12


 293 015e 24B0     		add	sp, sp, #144
 294              	.LCFI2:
 295              		.cfi_remember_state
 296              		.cfi_def_cfa_offset 16
 297              		@ sp needed
 298 0160 70BD     		pop	{r4, r5, r6, pc}
 299              	.LVL11:
 300              	.L12:
 301              	.LCFI3:
 302              		.cfi_restore_state
  67:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 303              		.loc 1 67 9 is_stmt 1 view .LVU86
  67:Core/Src/Fusion/FusionOffset.c ****         return gyroscope;
 304              		.loc 1 67 22 is_stmt 0 view .LVU87
 305 0162 0132     		adds	r2, r2, #1
 306 0164 9A60     		str	r2, [r3, #8]
  68:Core/Src/Fusion/FusionOffset.c ****     }
 307              		.loc 1 68 9 is_stmt 1 view .LVU88
  68:Core/Src/Fusion/FusionOffset.c ****     }
 308              		.loc 1 68 16 is_stmt 0 view .LVU89
 309 0166 12AB     		add	r3, sp, #72
 310              	.LVL12:
  68:Core/Src/Fusion/FusionOffset.c ****     }
 311              		.loc 1 68 16 view .LVU90
 312 0168 05AA     		add	r2, sp, #20
 313 016a 07CA     		ldm	r2, {r0, r1, r2}
 314 016c 83E80700 		stm	r3, {r0, r1, r2}
 315 0170 EFE7     		b	.L8
 316              		.cfi_endproc
 317              	.LFE22:
 319              		.text
 320              	.Letext0:
 321              		.file 3 "Core/Inc/Fusion/FusionOffset.h"
ARM GAS  /tmp/ccuLRtFR.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FusionOffset.c
     /tmp/ccuLRtFR.s:18     .text.FusionOffsetInitialise:0000000000000000 $t
     /tmp/ccuLRtFR.s:26     .text.FusionOffsetInitialise:0000000000000000 FusionOffsetInitialise
     /tmp/ccuLRtFR.s:68     .text.FusionOffsetInitialise:0000000000000030 $d
     /tmp/ccuLRtFR.s:73     .text.FusionOffsetUpdate:0000000000000000 $t
     /tmp/ccuLRtFR.s:80     .text.FusionOffsetUpdate:0000000000000000 FusionOffsetUpdate

NO UNDEFINED SYMBOLS

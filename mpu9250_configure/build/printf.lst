ARM GAS  /tmp/ccDtGku3.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"printf.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._out_buffer,"ax",%progbits
  16              		.align	1
  17              		.arch armv7-m
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_out_buffer:
  24              	.LVL0:
  25              	.LFB0:
  26              		.file 1 "Core/Src/printf.c"
   1:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
   2:Core/Src/printf.c **** // \author (c) Marco Paland (info@paland.com)
   3:Core/Src/printf.c **** //             2014-2019, PALANDesign Hannover, Germany
   4:Core/Src/printf.c **** //
   5:Core/Src/printf.c **** // \license The MIT License (MIT)
   6:Core/Src/printf.c **** //
   7:Core/Src/printf.c **** // Permission is hereby granted, free of charge, to any person obtaining a copy
   8:Core/Src/printf.c **** // of this software and associated documentation files (the "Software"), to deal
   9:Core/Src/printf.c **** // in the Software without restriction, including without limitation the rights
  10:Core/Src/printf.c **** // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  11:Core/Src/printf.c **** // copies of the Software, and to permit persons to whom the Software is
  12:Core/Src/printf.c **** // furnished to do so, subject to the following conditions:
  13:Core/Src/printf.c **** //
  14:Core/Src/printf.c **** // The above copyright notice and this permission notice shall be included in
  15:Core/Src/printf.c **** // all copies or substantial portions of the Software.
  16:Core/Src/printf.c **** //
  17:Core/Src/printf.c **** // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:Core/Src/printf.c **** // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  19:Core/Src/printf.c **** // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  20:Core/Src/printf.c **** // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  21:Core/Src/printf.c **** // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  22:Core/Src/printf.c **** // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  23:Core/Src/printf.c **** // THE SOFTWARE.
  24:Core/Src/printf.c **** //
  25:Core/Src/printf.c **** // \brief Tiny printf, sprintf and (v)snprintf implementation, optimized for speed on
  26:Core/Src/printf.c **** //        embedded systems with a very limited resources. These routines are thread
  27:Core/Src/printf.c **** //        safe and reentrant!
  28:Core/Src/printf.c **** //        Use this instead of the bloated standard/newlib printf cause these use
  29:Core/Src/printf.c **** //        malloc for printf (and may not be thread safe).
  30:Core/Src/printf.c **** //
  31:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
  32:Core/Src/printf.c **** 
ARM GAS  /tmp/ccDtGku3.s 			page 2


  33:Core/Src/printf.c **** #include <stdbool.h>
  34:Core/Src/printf.c **** #include <stdint.h>
  35:Core/Src/printf.c **** 
  36:Core/Src/printf.c **** #include "printf.h"
  37:Core/Src/printf.c **** 
  38:Core/Src/printf.c **** 
  39:Core/Src/printf.c **** // define this globally (e.g. gcc -DPRINTF_INCLUDE_CONFIG_H ...) to include the
  40:Core/Src/printf.c **** // printf_config.h header file
  41:Core/Src/printf.c **** // default: undefined
  42:Core/Src/printf.c **** #ifdef PRINTF_INCLUDE_CONFIG_H
  43:Core/Src/printf.c **** #include "printf_config.h"
  44:Core/Src/printf.c **** #endif
  45:Core/Src/printf.c **** 
  46:Core/Src/printf.c **** 
  47:Core/Src/printf.c **** // 'ntoa' conversion buffer size, this must be big enough to hold one converted
  48:Core/Src/printf.c **** // numeric number including padded zeros (dynamically created on stack)
  49:Core/Src/printf.c **** // default: 32 byte
  50:Core/Src/printf.c **** #ifndef PRINTF_NTOA_BUFFER_SIZE
  51:Core/Src/printf.c **** #define PRINTF_NTOA_BUFFER_SIZE    32U
  52:Core/Src/printf.c **** #endif
  53:Core/Src/printf.c **** 
  54:Core/Src/printf.c **** // 'ftoa' conversion buffer size, this must be big enough to hold one converted
  55:Core/Src/printf.c **** // float number including padded zeros (dynamically created on stack)
  56:Core/Src/printf.c **** // default: 32 byte
  57:Core/Src/printf.c **** #ifndef PRINTF_FTOA_BUFFER_SIZE
  58:Core/Src/printf.c **** #define PRINTF_FTOA_BUFFER_SIZE    32U
  59:Core/Src/printf.c **** #endif
  60:Core/Src/printf.c **** 
  61:Core/Src/printf.c **** // support for the floating point type (%f)
  62:Core/Src/printf.c **** // default: activated
  63:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_FLOAT
  64:Core/Src/printf.c **** #define PRINTF_SUPPORT_FLOAT
  65:Core/Src/printf.c **** #endif
  66:Core/Src/printf.c **** 
  67:Core/Src/printf.c **** // support for exponential floating point notation (%e/%g)
  68:Core/Src/printf.c **** // default: activated
  69:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_EXPONENTIAL
  70:Core/Src/printf.c **** #define PRINTF_SUPPORT_EXPONENTIAL
  71:Core/Src/printf.c **** #endif
  72:Core/Src/printf.c **** 
  73:Core/Src/printf.c **** // define the default floating point precision
  74:Core/Src/printf.c **** // default: 6 digits
  75:Core/Src/printf.c **** #ifndef PRINTF_DEFAULT_FLOAT_PRECISION
  76:Core/Src/printf.c **** #define PRINTF_DEFAULT_FLOAT_PRECISION  6U
  77:Core/Src/printf.c **** #endif
  78:Core/Src/printf.c **** 
  79:Core/Src/printf.c **** // define the largest float suitable to print with %f
  80:Core/Src/printf.c **** // default: 1e9
  81:Core/Src/printf.c **** #ifndef PRINTF_MAX_FLOAT
  82:Core/Src/printf.c **** #define PRINTF_MAX_FLOAT  1e9
  83:Core/Src/printf.c **** #endif
  84:Core/Src/printf.c **** 
  85:Core/Src/printf.c **** // support for the long long types (%llu or %p)
  86:Core/Src/printf.c **** // default: activated
  87:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_LONG_LONG
  88:Core/Src/printf.c **** #define PRINTF_SUPPORT_LONG_LONG
  89:Core/Src/printf.c **** #endif
ARM GAS  /tmp/ccDtGku3.s 			page 3


  90:Core/Src/printf.c **** 
  91:Core/Src/printf.c **** // support for the ptrdiff_t type (%t)
  92:Core/Src/printf.c **** // ptrdiff_t is normally defined in <stddef.h> as long or long long type
  93:Core/Src/printf.c **** // default: activated
  94:Core/Src/printf.c **** #ifndef PRINTF_DISABLE_SUPPORT_PTRDIFF_T
  95:Core/Src/printf.c **** #define PRINTF_SUPPORT_PTRDIFF_T
  96:Core/Src/printf.c **** #endif
  97:Core/Src/printf.c **** 
  98:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
  99:Core/Src/printf.c **** 
 100:Core/Src/printf.c **** // internal flag definitions
 101:Core/Src/printf.c **** #define FLAGS_ZEROPAD   (1U <<  0U)
 102:Core/Src/printf.c **** #define FLAGS_LEFT      (1U <<  1U)
 103:Core/Src/printf.c **** #define FLAGS_PLUS      (1U <<  2U)
 104:Core/Src/printf.c **** #define FLAGS_SPACE     (1U <<  3U)
 105:Core/Src/printf.c **** #define FLAGS_HASH      (1U <<  4U)
 106:Core/Src/printf.c **** #define FLAGS_UPPERCASE (1U <<  5U)
 107:Core/Src/printf.c **** #define FLAGS_CHAR      (1U <<  6U)
 108:Core/Src/printf.c **** #define FLAGS_SHORT     (1U <<  7U)
 109:Core/Src/printf.c **** #define FLAGS_LONG      (1U <<  8U)
 110:Core/Src/printf.c **** #define FLAGS_LONG_LONG (1U <<  9U)
 111:Core/Src/printf.c **** #define FLAGS_PRECISION (1U << 10U)
 112:Core/Src/printf.c **** #define FLAGS_ADAPT_EXP (1U << 11U)
 113:Core/Src/printf.c **** 
 114:Core/Src/printf.c **** 
 115:Core/Src/printf.c **** // import float.h for DBL_MAX
 116:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 117:Core/Src/printf.c **** #include <float.h>
 118:Core/Src/printf.c **** #endif
 119:Core/Src/printf.c **** 
 120:Core/Src/printf.c **** 
 121:Core/Src/printf.c **** // output function type
 122:Core/Src/printf.c **** typedef void (*out_fct_type)(char character, void* buffer, size_t idx, size_t maxlen);
 123:Core/Src/printf.c **** 
 124:Core/Src/printf.c **** 
 125:Core/Src/printf.c **** // wrapper (used as buffer) for output function type
 126:Core/Src/printf.c **** typedef struct {
 127:Core/Src/printf.c ****   void  (*fct)(char character, void* arg);
 128:Core/Src/printf.c ****   void* arg;
 129:Core/Src/printf.c **** } out_fct_wrap_type;
 130:Core/Src/printf.c **** 
 131:Core/Src/printf.c **** 
 132:Core/Src/printf.c **** // internal buffer output
 133:Core/Src/printf.c **** static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
 134:Core/Src/printf.c **** {
  27              		.loc 1 134 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 135:Core/Src/printf.c ****   if (idx < maxlen) {
  32              		.loc 1 135 3 view .LVU1
  33              		.loc 1 135 6 is_stmt 0 view .LVU2
  34 0000 9A42     		cmp	r2, r3
  35 0002 00D2     		bcs	.L1
 136:Core/Src/printf.c ****     ((char*)buffer)[idx] = character;
  36              		.loc 1 136 5 is_stmt 1 view .LVU3
ARM GAS  /tmp/ccDtGku3.s 			page 4


  37              		.loc 1 136 26 is_stmt 0 view .LVU4
  38 0004 8854     		strb	r0, [r1, r2]
  39              	.L1:
 137:Core/Src/printf.c ****   }
 138:Core/Src/printf.c **** }
  40              		.loc 1 138 1 view .LVU5
  41 0006 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE0:
  45              		.section	.text._out_null,"ax",%progbits
  46              		.align	1
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	_out_null:
  53              	.LVL1:
  54              	.LFB1:
 139:Core/Src/printf.c **** 
 140:Core/Src/printf.c **** 
 141:Core/Src/printf.c **** // internal null output
 142:Core/Src/printf.c **** static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
 143:Core/Src/printf.c **** {
  55              		.loc 1 143 1 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
 144:Core/Src/printf.c ****   (void)character; (void)buffer; (void)idx; (void)maxlen;
  60              		.loc 1 144 3 view .LVU7
  61              		.loc 1 144 20 view .LVU8
  62              		.loc 1 144 34 view .LVU9
  63              		.loc 1 144 45 view .LVU10
 145:Core/Src/printf.c **** }
  64              		.loc 1 145 1 is_stmt 0 view .LVU11
  65 0000 7047     		bx	lr
  66              		.cfi_endproc
  67              	.LFE1:
  69              		.section	.text._out_fct,"ax",%progbits
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu softvfp
  76              	_out_fct:
  77              	.LVL2:
  78              	.LFB3:
 146:Core/Src/printf.c **** 
 147:Core/Src/printf.c **** 
 148:Core/Src/printf.c **** // internal _putchar wrapper
 149:Core/Src/printf.c **** static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
 150:Core/Src/printf.c **** {
 151:Core/Src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
 152:Core/Src/printf.c ****   if (character) {
 153:Core/Src/printf.c ****     _putchar(character);
 154:Core/Src/printf.c ****   }
 155:Core/Src/printf.c **** }
ARM GAS  /tmp/ccDtGku3.s 			page 5


 156:Core/Src/printf.c **** 
 157:Core/Src/printf.c **** 
 158:Core/Src/printf.c **** // internal output function wrapper
 159:Core/Src/printf.c **** static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
 160:Core/Src/printf.c **** {
  79              		.loc 1 160 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
 161:Core/Src/printf.c ****   (void)idx; (void)maxlen;
  83              		.loc 1 161 3 view .LVU13
  84              		.loc 1 161 14 view .LVU14
 162:Core/Src/printf.c ****   if (character) {
  85              		.loc 1 162 3 view .LVU15
  86              		.loc 1 162 6 is_stmt 0 view .LVU16
  87 0000 20B1     		cbz	r0, .L7
 160:Core/Src/printf.c ****   (void)idx; (void)maxlen;
  88              		.loc 1 160 1 view .LVU17
  89 0002 08B5     		push	{r3, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 3, -8
  93              		.cfi_offset 14, -4
 163:Core/Src/printf.c ****     // buffer is the output fct pointer
 164:Core/Src/printf.c ****     ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
  94              		.loc 1 164 5 is_stmt 1 view .LVU18
  95              		.loc 1 164 33 is_stmt 0 view .LVU19
  96 0004 0A68     		ldr	r2, [r1]
  97              	.LVL3:
  98              		.loc 1 164 6 view .LVU20
  99 0006 4968     		ldr	r1, [r1, #4]
 100              	.LVL4:
 101              		.loc 1 164 6 view .LVU21
 102 0008 9047     		blx	r2
 103              	.LVL5:
 165:Core/Src/printf.c ****   }
 166:Core/Src/printf.c **** }
 104              		.loc 1 166 1 view .LVU22
 105 000a 08BD     		pop	{r3, pc}
 106              	.LVL6:
 107              	.L7:
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 0
 110              		.cfi_restore 3
 111              		.cfi_restore 14
 112              		.loc 1 166 1 view .LVU23
 113 000c 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE3:
 117              		.section	.text._atoi,"ax",%progbits
 118              		.align	1
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu softvfp
 124              	_atoi:
 125              	.LVL7:
ARM GAS  /tmp/ccDtGku3.s 			page 6


 126              	.LFB6:
 167:Core/Src/printf.c **** 
 168:Core/Src/printf.c **** 
 169:Core/Src/printf.c **** // internal secure strlen
 170:Core/Src/printf.c **** // \return The length of the string (excluding the terminating 0) limited by 'maxsize'
 171:Core/Src/printf.c **** static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
 172:Core/Src/printf.c **** {
 173:Core/Src/printf.c ****   const char* s;
 174:Core/Src/printf.c ****   for (s = str; *s && maxsize--; ++s);
 175:Core/Src/printf.c ****   return (unsigned int)(s - str);
 176:Core/Src/printf.c **** }
 177:Core/Src/printf.c **** 
 178:Core/Src/printf.c **** 
 179:Core/Src/printf.c **** // internal test if char is a digit (0-9)
 180:Core/Src/printf.c **** // \return true if char is a digit
 181:Core/Src/printf.c **** static inline bool _is_digit(char ch)
 182:Core/Src/printf.c **** {
 183:Core/Src/printf.c ****   return (ch >= '0') && (ch <= '9');
 184:Core/Src/printf.c **** }
 185:Core/Src/printf.c **** 
 186:Core/Src/printf.c **** 
 187:Core/Src/printf.c **** // internal ASCII string to unsigned int conversion
 188:Core/Src/printf.c **** static unsigned int _atoi(const char** str)
 189:Core/Src/printf.c **** {
 127              		.loc 1 189 1 is_stmt 1 view -0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132              		.loc 1 189 1 is_stmt 0 view .LVU25
 133 0000 0146     		mov	r1, r0
 190:Core/Src/printf.c ****   unsigned int i = 0U;
 134              		.loc 1 190 3 is_stmt 1 view .LVU26
 135              	.LVL8:
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 136              		.loc 1 191 3 view .LVU27
 190:Core/Src/printf.c ****   unsigned int i = 0U;
 137              		.loc 1 190 16 is_stmt 0 view .LVU28
 138 0002 0020     		movs	r0, #0
 139              	.LVL9:
 140              		.loc 1 191 9 view .LVU29
 141 0004 07E0     		b	.L11
 142              	.LVL10:
 143              	.L12:
 192:Core/Src/printf.c ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 144              		.loc 1 192 5 is_stmt 1 view .LVU30
 145              		.loc 1 192 11 is_stmt 0 view .LVU31
 146 0006 00EB8000 		add	r0, r0, r0, lsl #2
 147              	.LVL11:
 148              		.loc 1 192 42 view .LVU32
 149 000a 531C     		adds	r3, r2, #1
 150 000c 0B60     		str	r3, [r1]
 151              		.loc 1 192 34 view .LVU33
 152 000e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 153              		.loc 1 192 17 view .LVU34
 154 0010 03EB4000 		add	r0, r3, r0, lsl #1
 155              		.loc 1 192 7 view .LVU35
ARM GAS  /tmp/ccDtGku3.s 			page 7


 156 0014 3038     		subs	r0, r0, #48
 157              	.LVL12:
 158              	.L11:
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 159              		.loc 1 191 9 is_stmt 1 view .LVU36
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 160              		.loc 1 191 21 is_stmt 0 view .LVU37
 161 0016 0A68     		ldr	r2, [r1]
 191:Core/Src/printf.c ****   while (_is_digit(**str)) {
 162              		.loc 1 191 10 view .LVU38
 163 0018 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 164              	.LVL13:
 165              	.LBB20:
 166              	.LBI20:
 181:Core/Src/printf.c **** {
 167              		.loc 1 181 20 is_stmt 1 view .LVU39
 168              	.LBB21:
 183:Core/Src/printf.c **** }
 169              		.loc 1 183 3 view .LVU40
 183:Core/Src/printf.c **** }
 170              		.loc 1 183 22 is_stmt 0 view .LVU41
 171 001a 303B     		subs	r3, r3, #48
 172              	.LVL14:
 183:Core/Src/printf.c **** }
 173              		.loc 1 183 22 view .LVU42
 174 001c DBB2     		uxtb	r3, r3
 175              	.LVL15:
 183:Core/Src/printf.c **** }
 176              		.loc 1 183 22 view .LVU43
 177              	.LBE21:
 178              	.LBE20:
 191:Core/Src/printf.c ****     i = i * 10U + (unsigned int)(*((*str)++) - '0');
 179              		.loc 1 191 9 view .LVU44
 180 001e 092B     		cmp	r3, #9
 181 0020 F1D9     		bls	.L12
 193:Core/Src/printf.c ****   }
 194:Core/Src/printf.c ****   return i;
 182              		.loc 1 194 3 is_stmt 1 view .LVU45
 195:Core/Src/printf.c **** }
 183              		.loc 1 195 1 is_stmt 0 view .LVU46
 184 0022 7047     		bx	lr
 185              		.cfi_endproc
 186              	.LFE6:
 188              		.section	.text._out_rev,"ax",%progbits
 189              		.align	1
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu softvfp
 195              	_out_rev:
 196              	.LVL16:
 197              	.LFB7:
 196:Core/Src/printf.c **** 
 197:Core/Src/printf.c **** 
 198:Core/Src/printf.c **** // output the specified string in reverse, taking care of any zero-padding
 199:Core/Src/printf.c **** static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, 
 200:Core/Src/printf.c **** {
ARM GAS  /tmp/ccDtGku3.s 			page 8


 198              		.loc 1 200 1 is_stmt 1 view -0
 199              		.cfi_startproc
 200              		@ args = 16, pretend = 0, frame = 8
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              		.loc 1 200 1 is_stmt 0 view .LVU48
 203 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 204              	.LCFI2:
 205              		.cfi_def_cfa_offset 36
 206              		.cfi_offset 4, -36
 207              		.cfi_offset 5, -32
 208              		.cfi_offset 6, -28
 209              		.cfi_offset 7, -24
 210              		.cfi_offset 8, -20
 211              		.cfi_offset 9, -16
 212              		.cfi_offset 10, -12
 213              		.cfi_offset 11, -8
 214              		.cfi_offset 14, -4
 215 0004 83B0     		sub	sp, sp, #12
 216              	.LCFI3:
 217              		.cfi_def_cfa_offset 48
 218 0006 0546     		mov	r5, r0
 219 0008 0E46     		mov	r6, r1
 220 000a 9346     		mov	fp, r2
 221 000c 1F46     		mov	r7, r3
 222 000e DDF830A0 		ldr	r10, [sp, #48]
 223 0012 0D9C     		ldr	r4, [sp, #52]
 224 0014 DDF83890 		ldr	r9, [sp, #56]
 201:Core/Src/printf.c ****   const size_t start_idx = idx;
 225              		.loc 1 201 3 is_stmt 1 view .LVU49
 226              	.LVL17:
 202:Core/Src/printf.c **** 
 203:Core/Src/printf.c ****   // pad spaces up to given width
 204:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 227              		.loc 1 204 3 view .LVU50
 228              		.loc 1 204 6 is_stmt 0 view .LVU51
 229 0018 0F9B     		ldr	r3, [sp, #60]
 230              	.LVL18:
 231              		.loc 1 204 6 view .LVU52
 232 001a 13F0030F 		tst	r3, #3
 233 001e 19D1     		bne	.L15
 234              	.LBB22:
 205:Core/Src/printf.c ****     for (size_t i = len; i < width; i++) {
 235              		.loc 1 205 17 view .LVU53
 236 0020 A046     		mov	r8, r4
 237              	.LBE22:
 238 0022 0192     		str	r2, [sp, #4]
 239              	.LVL19:
 240              	.L14:
 241              	.LBB23:
 242              		.loc 1 205 26 is_stmt 1 discriminator 1 view .LVU54
 243              		.loc 1 205 5 is_stmt 0 discriminator 1 view .LVU55
 244 0024 C845     		cmp	r8, r9
 245 0026 09D2     		bcs	.L25
 206:Core/Src/printf.c ****       out(' ', buffer, idx++, maxlen);
 246              		.loc 1 206 7 is_stmt 1 discriminator 3 view .LVU56
 247 0028 02F1010B 		add	fp, r2, #1
 248              	.LVL20:
ARM GAS  /tmp/ccDtGku3.s 			page 9


 249              		.loc 1 206 7 is_stmt 0 discriminator 3 view .LVU57
 250 002c 3B46     		mov	r3, r7
 251 002e 3146     		mov	r1, r6
 252 0030 2020     		movs	r0, #32
 253 0032 A847     		blx	r5
 254              	.LVL21:
 205:Core/Src/printf.c ****     for (size_t i = len; i < width; i++) {
 255              		.loc 1 205 37 is_stmt 1 discriminator 3 view .LVU58
 205:Core/Src/printf.c ****     for (size_t i = len; i < width; i++) {
 256              		.loc 1 205 38 is_stmt 0 discriminator 3 view .LVU59
 257 0034 08F10108 		add	r8, r8, #1
 258              	.LVL22:
 259              		.loc 1 206 7 discriminator 3 view .LVU60
 260 0038 5A46     		mov	r2, fp
 261 003a F3E7     		b	.L14
 262              	.LVL23:
 263              	.L25:
 264              		.loc 1 206 7 discriminator 3 view .LVU61
 265 003c DDF804B0 		ldr	fp, [sp, #4]
 266 0040 08E0     		b	.L15
 267              	.LVL24:
 268              	.L18:
 269              		.loc 1 206 7 discriminator 3 view .LVU62
 270              	.LBE23:
 207:Core/Src/printf.c ****     }
 208:Core/Src/printf.c ****   }
 209:Core/Src/printf.c **** 
 210:Core/Src/printf.c ****   // reverse string
 211:Core/Src/printf.c ****   while (len) {
 212:Core/Src/printf.c ****     out(buf[--len], buffer, idx++, maxlen);
 271              		.loc 1 212 5 is_stmt 1 view .LVU63
 272 0042 013C     		subs	r4, r4, #1
 273              	.LVL25:
 274              		.loc 1 212 5 is_stmt 0 view .LVU64
 275 0044 02F10108 		add	r8, r2, #1
 276              	.LVL26:
 277              		.loc 1 212 5 view .LVU65
 278 0048 3B46     		mov	r3, r7
 279 004a 3146     		mov	r1, r6
 280 004c 1AF80400 		ldrb	r0, [r10, r4]	@ zero_extendqisi2
 281 0050 A847     		blx	r5
 282              	.LVL27:
 283 0052 4246     		mov	r2, r8
 284              	.LVL28:
 285              	.L15:
 211:Core/Src/printf.c ****     out(buf[--len], buffer, idx++, maxlen);
 286              		.loc 1 211 9 is_stmt 1 view .LVU66
 287 0054 002C     		cmp	r4, #0
 288 0056 F4D1     		bne	.L18
 213:Core/Src/printf.c ****   }
 214:Core/Src/printf.c **** 
 215:Core/Src/printf.c ****   // append pad spaces up to given width
 216:Core/Src/printf.c ****   if (flags & FLAGS_LEFT) {
 289              		.loc 1 216 3 view .LVU67
 290              		.loc 1 216 6 is_stmt 0 view .LVU68
 291 0058 0F9B     		ldr	r3, [sp, #60]
 292 005a 13F0020F 		tst	r3, #2
ARM GAS  /tmp/ccDtGku3.s 			page 10


 293 005e 03D1     		bne	.L19
 294              	.LVL29:
 295              	.L13:
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 218:Core/Src/printf.c ****       out(' ', buffer, idx++, maxlen);
 219:Core/Src/printf.c ****     }
 220:Core/Src/printf.c ****   }
 221:Core/Src/printf.c **** 
 222:Core/Src/printf.c ****   return idx;
 223:Core/Src/printf.c **** }
 296              		.loc 1 223 1 view .LVU69
 297 0060 1046     		mov	r0, r2
 298 0062 03B0     		add	sp, sp, #12
 299              	.LCFI4:
 300              		.cfi_remember_state
 301              		.cfi_def_cfa_offset 36
 302              		@ sp needed
 303 0064 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 304              	.LVL30:
 305              	.L19:
 306              	.LCFI5:
 307              		.cfi_restore_state
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 308              		.loc 1 217 11 is_stmt 1 view .LVU70
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 309              		.loc 1 217 16 is_stmt 0 view .LVU71
 310 0068 A2EB0B03 		sub	r3, r2, fp
 217:Core/Src/printf.c ****     while (idx - start_idx < width) {
 311              		.loc 1 217 11 view .LVU72
 312 006c 4B45     		cmp	r3, r9
 313 006e F7D2     		bcs	.L13
 218:Core/Src/printf.c ****     }
 314              		.loc 1 218 7 is_stmt 1 view .LVU73
 315 0070 541C     		adds	r4, r2, #1
 316              	.LVL31:
 218:Core/Src/printf.c ****     }
 317              		.loc 1 218 7 is_stmt 0 view .LVU74
 318 0072 3B46     		mov	r3, r7
 319 0074 3146     		mov	r1, r6
 320 0076 2020     		movs	r0, #32
 321 0078 A847     		blx	r5
 322              	.LVL32:
 323 007a 2246     		mov	r2, r4
 324 007c F4E7     		b	.L19
 325              		.cfi_endproc
 326              	.LFE7:
 328              		.section	.text._ntoa_format,"ax",%progbits
 329              		.align	1
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu softvfp
 335              	_ntoa_format:
 336              	.LVL33:
 337              	.LFB8:
 224:Core/Src/printf.c **** 
 225:Core/Src/printf.c **** 
ARM GAS  /tmp/ccDtGku3.s 			page 11


 226:Core/Src/printf.c **** // internal itoa format
 227:Core/Src/printf.c **** static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, si
 228:Core/Src/printf.c **** {
 338              		.loc 1 228 1 is_stmt 1 view -0
 339              		.cfi_startproc
 340              		@ args = 28, pretend = 0, frame = 0
 341              		@ frame_needed = 0, uses_anonymous_args = 0
 342              		.loc 1 228 1 is_stmt 0 view .LVU76
 343 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 344              	.LCFI6:
 345              		.cfi_def_cfa_offset 28
 346              		.cfi_offset 4, -28
 347              		.cfi_offset 5, -24
 348              		.cfi_offset 6, -20
 349              		.cfi_offset 7, -16
 350              		.cfi_offset 8, -12
 351              		.cfi_offset 9, -8
 352              		.cfi_offset 14, -4
 353 0004 85B0     		sub	sp, sp, #20
 354              	.LCFI7:
 355              		.cfi_def_cfa_offset 48
 356 0006 0C9D     		ldr	r5, [sp, #48]
 357 0008 0D9C     		ldr	r4, [sp, #52]
 358 000a 9DF83890 		ldrb	r9, [sp, #56]	@ zero_extendqisi2
 359 000e DDF83C80 		ldr	r8, [sp, #60]
 360 0012 DDF840E0 		ldr	lr, [sp, #64]
 361 0016 119F     		ldr	r7, [sp, #68]
 362 0018 129E     		ldr	r6, [sp, #72]
 229:Core/Src/printf.c ****   // pad leading zeros
 230:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT)) {
 363              		.loc 1 230 3 is_stmt 1 view .LVU77
 364              		.loc 1 230 6 is_stmt 0 view .LVU78
 365 001a 16F0020F 		tst	r6, #2
 366 001e 21D1     		bne	.L27
 231:Core/Src/printf.c ****     if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 367              		.loc 1 231 5 is_stmt 1 view .LVU79
 368              		.loc 1 231 8 is_stmt 0 view .LVU80
 369 0020 7FB1     		cbz	r7, .L30
 370              		.loc 1 231 15 discriminator 1 view .LVU81
 371 0022 16F0010F 		tst	r6, #1
 372 0026 0CD0     		beq	.L30
 373              		.loc 1 231 42 discriminator 2 view .LVU82
 374 0028 B9F1000F 		cmp	r9, #0
 375 002c 02D1     		bne	.L29
 376              		.loc 1 231 55 discriminator 3 view .LVU83
 377 002e 16F00C0F 		tst	r6, #12
 378 0032 06D0     		beq	.L30
 379              	.L29:
 232:Core/Src/printf.c ****       width--;
 380              		.loc 1 232 7 is_stmt 1 view .LVU84
 381              		.loc 1 232 12 is_stmt 0 view .LVU85
 382 0034 013F     		subs	r7, r7, #1
 383              	.LVL34:
 384              		.loc 1 232 12 view .LVU86
 385 0036 04E0     		b	.L30
 386              	.LVL35:
 387              	.L32:
ARM GAS  /tmp/ccDtGku3.s 			page 12


 233:Core/Src/printf.c ****     }
 234:Core/Src/printf.c ****     while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 235:Core/Src/printf.c ****       buf[len++] = '0';
 388              		.loc 1 235 7 is_stmt 1 view .LVU87
 389              		.loc 1 235 18 is_stmt 0 view .LVU88
 390 0038 4FF0300C 		mov	ip, #48
 391 003c 05F804C0 		strb	ip, [r5, r4]
 392              		.loc 1 235 14 view .LVU89
 393 0040 0134     		adds	r4, r4, #1
 394              	.LVL36:
 395              	.L30:
 234:Core/Src/printf.c ****       buf[len++] = '0';
 396              		.loc 1 234 11 is_stmt 1 view .LVU90
 397 0042 7445     		cmp	r4, lr
 398 0044 01D2     		bcs	.L33
 234:Core/Src/printf.c ****       buf[len++] = '0';
 399              		.loc 1 234 25 is_stmt 0 discriminator 1 view .LVU91
 400 0046 1F2C     		cmp	r4, #31
 401 0048 F6D9     		bls	.L32
 402              	.L33:
 236:Core/Src/printf.c ****     }
 237:Core/Src/printf.c ****     while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 403              		.loc 1 237 11 is_stmt 1 view .LVU92
 404 004a 16F0010F 		tst	r6, #1
 405 004e 09D0     		beq	.L27
 406              		.loc 1 237 36 is_stmt 0 discriminator 1 view .LVU93
 407 0050 BC42     		cmp	r4, r7
 408 0052 07D2     		bcs	.L27
 409              		.loc 1 237 53 discriminator 2 view .LVU94
 410 0054 1F2C     		cmp	r4, #31
 411 0056 05D8     		bhi	.L27
 238:Core/Src/printf.c ****       buf[len++] = '0';
 412              		.loc 1 238 7 is_stmt 1 view .LVU95
 413              	.LVL37:
 414              		.loc 1 238 18 is_stmt 0 view .LVU96
 415 0058 4FF0300C 		mov	ip, #48
 416 005c 05F804C0 		strb	ip, [r5, r4]
 417              		.loc 1 238 14 view .LVU97
 418 0060 0134     		adds	r4, r4, #1
 419              	.LVL38:
 420              		.loc 1 238 14 view .LVU98
 421 0062 F2E7     		b	.L33
 422              	.LVL39:
 423              	.L27:
 239:Core/Src/printf.c ****     }
 240:Core/Src/printf.c ****   }
 241:Core/Src/printf.c **** 
 242:Core/Src/printf.c ****   // handle hash
 243:Core/Src/printf.c ****   if (flags & FLAGS_HASH) {
 424              		.loc 1 243 3 is_stmt 1 view .LVU99
 425              		.loc 1 243 6 is_stmt 0 view .LVU100
 426 0064 16F0100F 		tst	r6, #16
 427 0068 17D0     		beq	.L35
 244:Core/Src/printf.c ****     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 428              		.loc 1 244 5 is_stmt 1 view .LVU101
 429              		.loc 1 244 8 is_stmt 0 view .LVU102
 430 006a 16F4806F 		tst	r6, #1024
ARM GAS  /tmp/ccDtGku3.s 			page 13


 431 006e 04D1     		bne	.L36
 432              		.loc 1 244 36 discriminator 1 view .LVU103
 433 0070 1CB1     		cbz	r4, .L36
 434              		.loc 1 244 43 discriminator 2 view .LVU104
 435 0072 7445     		cmp	r4, lr
 436 0074 24D0     		beq	.L37
 437              		.loc 1 244 61 discriminator 3 view .LVU105
 438 0076 BC42     		cmp	r4, r7
 439 0078 22D0     		beq	.L37
 440              	.L36:
 245:Core/Src/printf.c ****       len--;
 246:Core/Src/printf.c ****       if (len && (base == 16U)) {
 247:Core/Src/printf.c ****         len--;
 248:Core/Src/printf.c ****       }
 249:Core/Src/printf.c ****     }
 250:Core/Src/printf.c ****     if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 441              		.loc 1 250 5 is_stmt 1 view .LVU106
 442              		.loc 1 250 8 is_stmt 0 view .LVU107
 443 007a B8F1100F 		cmp	r8, #16
 444 007e 2BD0     		beq	.L47
 445              	.L38:
 251:Core/Src/printf.c ****       buf[len++] = 'x';
 252:Core/Src/printf.c ****     }
 253:Core/Src/printf.c ****     else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 446              		.loc 1 253 10 is_stmt 1 view .LVU108
 447              		.loc 1 253 13 is_stmt 0 view .LVU109
 448 0080 B8F1100F 		cmp	r8, #16
 449 0084 33D0     		beq	.L48
 450              	.L40:
 254:Core/Src/printf.c ****       buf[len++] = 'X';
 255:Core/Src/printf.c ****     }
 256:Core/Src/printf.c ****     else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 451              		.loc 1 256 10 is_stmt 1 view .LVU110
 452              		.loc 1 256 13 is_stmt 0 view .LVU111
 453 0086 B8F1020F 		cmp	r8, #2
 454 008a 3BD0     		beq	.L49
 455              	.L39:
 257:Core/Src/printf.c ****       buf[len++] = 'b';
 258:Core/Src/printf.c ****     }
 259:Core/Src/printf.c ****     if (len < PRINTF_NTOA_BUFFER_SIZE) {
 456              		.loc 1 259 5 is_stmt 1 view .LVU112
 457              		.loc 1 259 8 is_stmt 0 view .LVU113
 458 008c 1F2C     		cmp	r4, #31
 459 008e 04D8     		bhi	.L35
 260:Core/Src/printf.c ****       buf[len++] = '0';
 460              		.loc 1 260 7 is_stmt 1 view .LVU114
 461              	.LVL40:
 462              		.loc 1 260 18 is_stmt 0 view .LVU115
 463 0090 4FF0300C 		mov	ip, #48
 464 0094 05F804C0 		strb	ip, [r5, r4]
 465              		.loc 1 260 14 view .LVU116
 466 0098 0134     		adds	r4, r4, #1
 467              	.LVL41:
 468              	.L35:
 261:Core/Src/printf.c ****     }
 262:Core/Src/printf.c ****   }
 263:Core/Src/printf.c **** 
ARM GAS  /tmp/ccDtGku3.s 			page 14


 264:Core/Src/printf.c ****   if (len < PRINTF_NTOA_BUFFER_SIZE) {
 469              		.loc 1 264 3 is_stmt 1 view .LVU117
 470              		.loc 1 264 6 is_stmt 0 view .LVU118
 471 009a 1F2C     		cmp	r4, #31
 472 009c 07D8     		bhi	.L41
 265:Core/Src/printf.c ****     if (negative) {
 473              		.loc 1 265 5 is_stmt 1 view .LVU119
 474              		.loc 1 265 8 is_stmt 0 view .LVU120
 475 009e B9F1000F 		cmp	r9, #0
 476 00a2 37D0     		beq	.L42
 266:Core/Src/printf.c ****       buf[len++] = '-';
 477              		.loc 1 266 7 is_stmt 1 view .LVU121
 478              	.LVL42:
 479              		.loc 1 266 18 is_stmt 0 view .LVU122
 480 00a4 4FF02D0C 		mov	ip, #45
 481 00a8 05F804C0 		strb	ip, [r5, r4]
 482              		.loc 1 266 14 view .LVU123
 483 00ac 0134     		adds	r4, r4, #1
 484              	.LVL43:
 485              	.L41:
 267:Core/Src/printf.c ****     }
 268:Core/Src/printf.c ****     else if (flags & FLAGS_PLUS) {
 269:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 270:Core/Src/printf.c ****     }
 271:Core/Src/printf.c ****     else if (flags & FLAGS_SPACE) {
 272:Core/Src/printf.c ****       buf[len++] = ' ';
 273:Core/Src/printf.c ****     }
 274:Core/Src/printf.c ****   }
 275:Core/Src/printf.c **** 
 276:Core/Src/printf.c ****   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 486              		.loc 1 276 3 is_stmt 1 view .LVU124
 487              		.loc 1 276 10 is_stmt 0 view .LVU125
 488 00ae 0396     		str	r6, [sp, #12]
 489 00b0 0297     		str	r7, [sp, #8]
 490 00b2 0194     		str	r4, [sp, #4]
 491 00b4 0095     		str	r5, [sp]
 492 00b6 FFF7FEFF 		bl	_out_rev
 493              	.LVL44:
 277:Core/Src/printf.c **** }
 494              		.loc 1 277 1 view .LVU126
 495 00ba 05B0     		add	sp, sp, #20
 496              	.LCFI8:
 497              		.cfi_remember_state
 498              		.cfi_def_cfa_offset 28
 499              		@ sp needed
 500 00bc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 501              	.LVL45:
 502              	.L37:
 503              	.LCFI9:
 504              		.cfi_restore_state
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 505              		.loc 1 245 7 is_stmt 1 view .LVU127
 246:Core/Src/printf.c ****         len--;
 506              		.loc 1 246 7 view .LVU128
 246:Core/Src/printf.c ****         len--;
 507              		.loc 1 246 10 is_stmt 0 view .LVU129
 508 00c0 B4F1010C 		subs	ip, r4, #1
ARM GAS  /tmp/ccDtGku3.s 			page 15


 509              	.LVL46:
 246:Core/Src/printf.c ****         len--;
 510              		.loc 1 246 10 view .LVU130
 511 00c4 06D0     		beq	.L44
 246:Core/Src/printf.c ****         len--;
 512              		.loc 1 246 15 discriminator 1 view .LVU131
 513 00c6 B8F1100F 		cmp	r8, #16
 514 00ca 01D0     		beq	.L50
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 515              		.loc 1 245 10 view .LVU132
 516 00cc 6446     		mov	r4, ip
 517 00ce D4E7     		b	.L36
 518              	.L50:
 247:Core/Src/printf.c ****       }
 519              		.loc 1 247 9 is_stmt 1 view .LVU133
 247:Core/Src/printf.c ****       }
 520              		.loc 1 247 12 is_stmt 0 view .LVU134
 521 00d0 023C     		subs	r4, r4, #2
 522              	.LVL47:
 247:Core/Src/printf.c ****       }
 523              		.loc 1 247 12 view .LVU135
 524 00d2 D2E7     		b	.L36
 525              	.LVL48:
 526              	.L44:
 245:Core/Src/printf.c ****       if (len && (base == 16U)) {
 527              		.loc 1 245 10 view .LVU136
 528 00d4 6446     		mov	r4, ip
 529 00d6 D0E7     		b	.L36
 530              	.LVL49:
 531              	.L47:
 250:Core/Src/printf.c ****       buf[len++] = 'x';
 532              		.loc 1 250 23 discriminator 1 view .LVU137
 533 00d8 16F0200F 		tst	r6, #32
 534 00dc D0D1     		bne	.L38
 250:Core/Src/printf.c ****       buf[len++] = 'x';
 535              		.loc 1 250 53 discriminator 2 view .LVU138
 536 00de 1F2C     		cmp	r4, #31
 537 00e0 CED8     		bhi	.L38
 251:Core/Src/printf.c ****     }
 538              		.loc 1 251 7 is_stmt 1 view .LVU139
 539              	.LVL50:
 251:Core/Src/printf.c ****     }
 540              		.loc 1 251 18 is_stmt 0 view .LVU140
 541 00e2 4FF0780C 		mov	ip, #120
 542 00e6 05F804C0 		strb	ip, [r5, r4]
 251:Core/Src/printf.c ****     }
 543              		.loc 1 251 14 view .LVU141
 544 00ea 0134     		adds	r4, r4, #1
 545              	.LVL51:
 251:Core/Src/printf.c ****     }
 546              		.loc 1 251 18 view .LVU142
 547 00ec CEE7     		b	.L39
 548              	.L48:
 253:Core/Src/printf.c ****       buf[len++] = 'X';
 549              		.loc 1 253 28 discriminator 1 view .LVU143
 550 00ee 16F0200F 		tst	r6, #32
 551 00f2 C8D0     		beq	.L40
ARM GAS  /tmp/ccDtGku3.s 			page 16


 253:Core/Src/printf.c ****       buf[len++] = 'X';
 552              		.loc 1 253 57 discriminator 2 view .LVU144
 553 00f4 1F2C     		cmp	r4, #31
 554 00f6 C6D8     		bhi	.L40
 254:Core/Src/printf.c ****     }
 555              		.loc 1 254 7 is_stmt 1 view .LVU145
 556              	.LVL52:
 254:Core/Src/printf.c ****     }
 557              		.loc 1 254 18 is_stmt 0 view .LVU146
 558 00f8 4FF0580C 		mov	ip, #88
 559 00fc 05F804C0 		strb	ip, [r5, r4]
 254:Core/Src/printf.c ****     }
 560              		.loc 1 254 14 view .LVU147
 561 0100 0134     		adds	r4, r4, #1
 562              	.LVL53:
 254:Core/Src/printf.c ****     }
 563              		.loc 1 254 18 view .LVU148
 564 0102 C3E7     		b	.L39
 565              	.L49:
 256:Core/Src/printf.c ****       buf[len++] = 'b';
 566              		.loc 1 256 27 discriminator 1 view .LVU149
 567 0104 1F2C     		cmp	r4, #31
 568 0106 C1D8     		bhi	.L39
 257:Core/Src/printf.c ****     }
 569              		.loc 1 257 7 is_stmt 1 view .LVU150
 570              	.LVL54:
 257:Core/Src/printf.c ****     }
 571              		.loc 1 257 18 is_stmt 0 view .LVU151
 572 0108 4FF0620C 		mov	ip, #98
 573 010c 05F804C0 		strb	ip, [r5, r4]
 257:Core/Src/printf.c ****     }
 574              		.loc 1 257 14 view .LVU152
 575 0110 0134     		adds	r4, r4, #1
 576              	.LVL55:
 257:Core/Src/printf.c ****     }
 577              		.loc 1 257 14 view .LVU153
 578 0112 BBE7     		b	.L39
 579              	.L42:
 268:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 580              		.loc 1 268 10 is_stmt 1 view .LVU154
 268:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 581              		.loc 1 268 13 is_stmt 0 view .LVU155
 582 0114 16F0040F 		tst	r6, #4
 583 0118 05D0     		beq	.L43
 269:Core/Src/printf.c ****     }
 584              		.loc 1 269 7 is_stmt 1 view .LVU156
 585              	.LVL56:
 269:Core/Src/printf.c ****     }
 586              		.loc 1 269 18 is_stmt 0 view .LVU157
 587 011a 4FF02B0C 		mov	ip, #43
 588 011e 05F804C0 		strb	ip, [r5, r4]
 269:Core/Src/printf.c ****     }
 589              		.loc 1 269 14 view .LVU158
 590 0122 0134     		adds	r4, r4, #1
 591              	.LVL57:
 269:Core/Src/printf.c ****     }
 592              		.loc 1 269 14 view .LVU159
ARM GAS  /tmp/ccDtGku3.s 			page 17


 593 0124 C3E7     		b	.L41
 594              	.L43:
 271:Core/Src/printf.c ****       buf[len++] = ' ';
 595              		.loc 1 271 10 is_stmt 1 view .LVU160
 271:Core/Src/printf.c ****       buf[len++] = ' ';
 596              		.loc 1 271 13 is_stmt 0 view .LVU161
 597 0126 16F0080F 		tst	r6, #8
 598 012a C0D0     		beq	.L41
 272:Core/Src/printf.c ****     }
 599              		.loc 1 272 7 is_stmt 1 view .LVU162
 600              	.LVL58:
 272:Core/Src/printf.c ****     }
 601              		.loc 1 272 18 is_stmt 0 view .LVU163
 602 012c 4FF0200C 		mov	ip, #32
 603 0130 05F804C0 		strb	ip, [r5, r4]
 272:Core/Src/printf.c ****     }
 604              		.loc 1 272 14 view .LVU164
 605 0134 0134     		adds	r4, r4, #1
 606              	.LVL59:
 272:Core/Src/printf.c ****     }
 607              		.loc 1 272 14 view .LVU165
 608 0136 BAE7     		b	.L41
 609              		.cfi_endproc
 610              	.LFE8:
 612              		.section	.text._ntoa_long,"ax",%progbits
 613              		.align	1
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu softvfp
 619              	_ntoa_long:
 620              	.LVL60:
 621              	.LFB9:
 278:Core/Src/printf.c **** 
 279:Core/Src/printf.c **** 
 280:Core/Src/printf.c **** // internal itoa for 'long' type
 281:Core/Src/printf.c **** static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long v
 282:Core/Src/printf.c **** {
 622              		.loc 1 282 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 24, pretend = 0, frame = 32
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		.loc 1 282 1 is_stmt 0 view .LVU167
 627 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 628              	.LCFI10:
 629              		.cfi_def_cfa_offset 20
 630              		.cfi_offset 4, -20
 631              		.cfi_offset 5, -16
 632              		.cfi_offset 6, -12
 633              		.cfi_offset 7, -8
 634              		.cfi_offset 14, -4
 635 0002 91B0     		sub	sp, sp, #68
 636              	.LCFI11:
 637              		.cfi_def_cfa_offset 88
 638 0004 169C     		ldr	r4, [sp, #88]
 639 0006 189D     		ldr	r5, [sp, #96]
 640 0008 1B9E     		ldr	r6, [sp, #108]
ARM GAS  /tmp/ccDtGku3.s 			page 18


 283:Core/Src/printf.c ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 641              		.loc 1 283 3 is_stmt 1 view .LVU168
 284:Core/Src/printf.c ****   size_t len = 0U;
 642              		.loc 1 284 3 view .LVU169
 643              	.LVL61:
 285:Core/Src/printf.c **** 
 286:Core/Src/printf.c ****   // no hash for 0 values
 287:Core/Src/printf.c ****   if (!value) {
 644              		.loc 1 287 3 view .LVU170
 645              		.loc 1 287 6 is_stmt 0 view .LVU171
 646 000a 0CB9     		cbnz	r4, .L52
 288:Core/Src/printf.c ****     flags &= ~FLAGS_HASH;
 647              		.loc 1 288 5 is_stmt 1 view .LVU172
 648              		.loc 1 288 11 is_stmt 0 view .LVU173
 649 000c 26F01006 		bic	r6, r6, #16
 650              	.LVL62:
 651              	.L52:
 289:Core/Src/printf.c ****   }
 290:Core/Src/printf.c **** 
 291:Core/Src/printf.c ****   // write if precision != 0 and value is != 0
 292:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION) || value) {
 652              		.loc 1 292 3 is_stmt 1 view .LVU174
 653              		.loc 1 292 6 is_stmt 0 view .LVU175
 654 0010 16F4806E 		ands	lr, r6, #1024
 655 0014 16D0     		beq	.L58
 656              		.loc 1 292 34 discriminator 1 view .LVU176
 657 0016 64B3     		cbz	r4, .L59
 658 0018 4FF0000E 		mov	lr, #0
 659 001c 12E0     		b	.L58
 660              	.LVL63:
 661              	.L63:
 662              	.LBB24:
 293:Core/Src/printf.c ****     do {
 294:Core/Src/printf.c ****       const char digit = (char)(value % base);
 295:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 663              		.loc 1 295 18 discriminator 1 view .LVU177
 664 001e 0CF1300C 		add	ip, ip, #48
 665              	.LVL64:
 666              		.loc 1 295 18 discriminator 1 view .LVU178
 667 0022 5FFA8CFC 		uxtb	ip, ip
 668              	.LVL65:
 669              	.L56:
 670              		.loc 1 295 14 discriminator 8 view .LVU179
 671 0026 0EF10107 		add	r7, lr, #1
 672              	.LVL66:
 673              		.loc 1 295 18 discriminator 8 view .LVU180
 674 002a 0EF1400E 		add	lr, lr, #64
 675 002e EE44     		add	lr, sp, lr
 676 0030 0EF820CC 		strb	ip, [lr, #-32]
 296:Core/Src/printf.c ****       value /= base;
 677              		.loc 1 296 7 is_stmt 1 discriminator 8 view .LVU181
 678              		.loc 1 296 13 is_stmt 0 discriminator 8 view .LVU182
 679 0034 B4FBF5FC 		udiv	ip, r4, r5
 680              	.LVL67:
 681              		.loc 1 296 13 discriminator 8 view .LVU183
 682              	.LBE24:
 297:Core/Src/printf.c ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
ARM GAS  /tmp/ccDtGku3.s 			page 19


 683              		.loc 1 297 13 is_stmt 1 discriminator 8 view .LVU184
 684              		.loc 1 297 5 is_stmt 0 discriminator 8 view .LVU185
 685 0038 AC42     		cmp	r4, r5
 686 003a 1BD3     		bcc	.L54
 687              		.loc 1 297 20 discriminator 1 view .LVU186
 688 003c 1F2F     		cmp	r7, #31
 689 003e 19D8     		bhi	.L54
 690              	.LBB25:
 295:Core/Src/printf.c ****       value /= base;
 691              		.loc 1 295 14 view .LVU187
 692 0040 BE46     		mov	lr, r7
 296:Core/Src/printf.c ****       value /= base;
 693              		.loc 1 296 13 view .LVU188
 694 0042 6446     		mov	r4, ip
 695              	.LVL68:
 696              	.L58:
 296:Core/Src/printf.c ****       value /= base;
 697              		.loc 1 296 13 view .LVU189
 698              	.LBE25:
 293:Core/Src/printf.c ****       const char digit = (char)(value % base);
 699              		.loc 1 293 5 is_stmt 1 view .LVU190
 700              	.LBB26:
 294:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 701              		.loc 1 294 7 view .LVU191
 294:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 702              		.loc 1 294 39 is_stmt 0 view .LVU192
 703 0044 B4FBF5FC 		udiv	ip, r4, r5
 704 0048 05FB1C4C 		mls	ip, r5, ip, r4
 294:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 705              		.loc 1 294 18 view .LVU193
 706 004c 5FFA8CFC 		uxtb	ip, ip
 707              	.LVL69:
 295:Core/Src/printf.c ****       value /= base;
 708              		.loc 1 295 7 is_stmt 1 view .LVU194
 295:Core/Src/printf.c ****       value /= base;
 709              		.loc 1 295 18 is_stmt 0 view .LVU195
 710 0050 BCF1090F 		cmp	ip, #9
 711 0054 E3D9     		bls	.L63
 295:Core/Src/printf.c ****       value /= base;
 712              		.loc 1 295 85 discriminator 2 view .LVU196
 713 0056 16F0200F 		tst	r6, #32
 714 005a 08D0     		beq	.L60
 295:Core/Src/printf.c ****       value /= base;
 715              		.loc 1 295 85 view .LVU197
 716 005c 4127     		movs	r7, #65
 717              	.L57:
 295:Core/Src/printf.c ****       value /= base;
 718              		.loc 1 295 85 discriminator 7 view .LVU198
 719 005e BC44     		add	ip, ip, r7
 720              	.LVL70:
 295:Core/Src/printf.c ****       value /= base;
 721              		.loc 1 295 85 discriminator 7 view .LVU199
 722 0060 5FFA8CFC 		uxtb	ip, ip
 295:Core/Src/printf.c ****       value /= base;
 723              		.loc 1 295 18 discriminator 7 view .LVU200
 724 0064 ACF10A0C 		sub	ip, ip, #10
 725 0068 5FFA8CFC 		uxtb	ip, ip
ARM GAS  /tmp/ccDtGku3.s 			page 20


 726 006c DBE7     		b	.L56
 727              	.LVL71:
 728              	.L60:
 295:Core/Src/printf.c ****       value /= base;
 729              		.loc 1 295 85 view .LVU201
 730 006e 6127     		movs	r7, #97
 731 0070 F5E7     		b	.L57
 732              	.LVL72:
 733              	.L59:
 295:Core/Src/printf.c ****       value /= base;
 734              		.loc 1 295 85 view .LVU202
 735              	.LBE26:
 284:Core/Src/printf.c **** 
 736              		.loc 1 284 10 view .LVU203
 737 0072 2746     		mov	r7, r4
 738              	.LVL73:
 739              	.L54:
 298:Core/Src/printf.c ****   }
 299:Core/Src/printf.c **** 
 300:Core/Src/printf.c ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 740              		.loc 1 300 3 is_stmt 1 view .LVU204
 741              		.loc 1 300 10 is_stmt 0 view .LVU205
 742 0074 0696     		str	r6, [sp, #24]
 743 0076 1A9C     		ldr	r4, [sp, #104]
 744 0078 0594     		str	r4, [sp, #20]
 745 007a 199C     		ldr	r4, [sp, #100]
 746 007c 0494     		str	r4, [sp, #16]
 747 007e 0395     		str	r5, [sp, #12]
 748 0080 9DF85C40 		ldrb	r4, [sp, #92]	@ zero_extendqisi2
 749 0084 0294     		str	r4, [sp, #8]
 750 0086 0197     		str	r7, [sp, #4]
 751 0088 08AC     		add	r4, sp, #32
 752 008a 0094     		str	r4, [sp]
 753 008c FFF7FEFF 		bl	_ntoa_format
 754              	.LVL74:
 301:Core/Src/printf.c **** }
 755              		.loc 1 301 1 view .LVU206
 756 0090 11B0     		add	sp, sp, #68
 757              	.LCFI12:
 758              		.cfi_def_cfa_offset 20
 759              		@ sp needed
 760 0092 F0BD     		pop	{r4, r5, r6, r7, pc}
 761              		.loc 1 301 1 view .LVU207
 762              		.cfi_endproc
 763              	.LFE9:
 765              		.global	__aeabi_uldivmod
 766              		.section	.text._ntoa_long_long,"ax",%progbits
 767              		.align	1
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu softvfp
 773              	_ntoa_long_long:
 774              	.LVL75:
 775              	.LFB10:
 302:Core/Src/printf.c **** 
 303:Core/Src/printf.c **** 
ARM GAS  /tmp/ccDtGku3.s 			page 21


 304:Core/Src/printf.c **** // internal itoa for 'long long' type
 305:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 306:Core/Src/printf.c **** static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned l
 307:Core/Src/printf.c **** {
 776              		.loc 1 307 1 is_stmt 1 view -0
 777              		.cfi_startproc
 778              		@ args = 36, pretend = 0, frame = 48
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		.loc 1 307 1 is_stmt 0 view .LVU209
 781 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 782              	.LCFI13:
 783              		.cfi_def_cfa_offset 36
 784              		.cfi_offset 4, -36
 785              		.cfi_offset 5, -32
 786              		.cfi_offset 6, -28
 787              		.cfi_offset 7, -24
 788              		.cfi_offset 8, -20
 789              		.cfi_offset 9, -16
 790              		.cfi_offset 10, -12
 791              		.cfi_offset 11, -8
 792              		.cfi_offset 14, -4
 793 0004 95B0     		sub	sp, sp, #84
 794              	.LCFI14:
 795              		.cfi_def_cfa_offset 120
 796 0006 0990     		str	r0, [sp, #36]
 797 0008 0A91     		str	r1, [sp, #40]
 798 000a 0B92     		str	r2, [sp, #44]
 799 000c 9B46     		mov	fp, r3
 800 000e 1E9D     		ldr	r5, [sp, #120]
 801 0010 1F9E     		ldr	r6, [sp, #124]
 802 0012 229F     		ldr	r7, [sp, #136]
 803 0014 DDF88C80 		ldr	r8, [sp, #140]
 804 0018 DDF898A0 		ldr	r10, [sp, #152]
 308:Core/Src/printf.c ****   char buf[PRINTF_NTOA_BUFFER_SIZE];
 805              		.loc 1 308 3 is_stmt 1 view .LVU210
 309:Core/Src/printf.c ****   size_t len = 0U;
 806              		.loc 1 309 3 view .LVU211
 807              	.LVL76:
 310:Core/Src/printf.c **** 
 311:Core/Src/printf.c ****   // no hash for 0 values
 312:Core/Src/printf.c ****   if (!value) {
 808              		.loc 1 312 3 view .LVU212
 809              		.loc 1 312 6 is_stmt 0 view .LVU213
 810 001c 55EA0603 		orrs	r3, r5, r6
 811              	.LVL77:
 812              		.loc 1 312 6 view .LVU214
 813 0020 01D1     		bne	.L65
 313:Core/Src/printf.c ****     flags &= ~FLAGS_HASH;
 814              		.loc 1 313 5 is_stmt 1 view .LVU215
 815              		.loc 1 313 11 is_stmt 0 view .LVU216
 816 0022 2AF0100A 		bic	r10, r10, #16
 817              	.LVL78:
 818              	.L65:
 314:Core/Src/printf.c ****   }
 315:Core/Src/printf.c **** 
 316:Core/Src/printf.c ****   // write if precision != 0 and value is != 0
 317:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION) || value) {
ARM GAS  /tmp/ccDtGku3.s 			page 22


 819              		.loc 1 317 3 is_stmt 1 view .LVU217
 820              		.loc 1 317 6 is_stmt 0 view .LVU218
 821 0026 1AF48064 		ands	r4, r10, #1024
 822 002a 1FD0     		beq	.L71
 823              		.loc 1 317 34 discriminator 1 view .LVU219
 824 002c 55EA0603 		orrs	r3, r5, r6
 825 0030 30D0     		beq	.L72
 826 0032 0024     		movs	r4, #0
 827 0034 1AE0     		b	.L71
 828              	.LVL79:
 829              	.L78:
 830              	.LBB27:
 318:Core/Src/printf.c ****     do {
 319:Core/Src/printf.c ****       const char digit = (char)(value % base);
 320:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 831              		.loc 1 320 18 discriminator 1 view .LVU220
 832 0036 03F13002 		add	r2, r3, #48
 833 003a D2B2     		uxtb	r2, r2
 834              	.L69:
 835              		.loc 1 320 14 discriminator 8 view .LVU221
 836 003c 04F10109 		add	r9, r4, #1
 837              	.LVL80:
 838              		.loc 1 320 18 discriminator 8 view .LVU222
 839 0040 04F15003 		add	r3, r4, #80
 840              	.LVL81:
 841              		.loc 1 320 18 discriminator 8 view .LVU223
 842 0044 0DEB0304 		add	r4, sp, r3
 843 0048 04F8202C 		strb	r2, [r4, #-32]
 321:Core/Src/printf.c ****       value /= base;
 844              		.loc 1 321 7 is_stmt 1 discriminator 8 view .LVU224
 845              		.loc 1 321 13 is_stmt 0 discriminator 8 view .LVU225
 846 004c 3A46     		mov	r2, r7
 847 004e 4346     		mov	r3, r8
 848 0050 2846     		mov	r0, r5
 849 0052 3146     		mov	r1, r6
 850 0054 FFF7FEFF 		bl	__aeabi_uldivmod
 851              	.LVL82:
 852              		.loc 1 321 13 discriminator 8 view .LVU226
 853              	.LBE27:
 322:Core/Src/printf.c ****     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 854              		.loc 1 322 13 is_stmt 1 discriminator 8 view .LVU227
 855              		.loc 1 322 5 is_stmt 0 discriminator 8 view .LVU228
 856 0058 BD42     		cmp	r5, r7
 857 005a 76EB0803 		sbcs	r3, r6, r8
 858 005e 1BD3     		bcc	.L67
 859              		.loc 1 322 20 discriminator 1 view .LVU229
 860 0060 B9F11F0F 		cmp	r9, #31
 861 0064 18D8     		bhi	.L67
 862              	.LBB28:
 320:Core/Src/printf.c ****       value /= base;
 863              		.loc 1 320 14 view .LVU230
 864 0066 4C46     		mov	r4, r9
 321:Core/Src/printf.c ****       value /= base;
 865              		.loc 1 321 13 view .LVU231
 866 0068 0546     		mov	r5, r0
 867 006a 0E46     		mov	r6, r1
 868              	.LVL83:
ARM GAS  /tmp/ccDtGku3.s 			page 23


 869              	.L71:
 321:Core/Src/printf.c ****       value /= base;
 870              		.loc 1 321 13 view .LVU232
 871              	.LBE28:
 318:Core/Src/printf.c ****       const char digit = (char)(value % base);
 872              		.loc 1 318 5 is_stmt 1 view .LVU233
 873              	.LBB29:
 319:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 874              		.loc 1 319 7 view .LVU234
 319:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 875              		.loc 1 319 39 is_stmt 0 view .LVU235
 876 006c 3A46     		mov	r2, r7
 877 006e 4346     		mov	r3, r8
 878 0070 2846     		mov	r0, r5
 879 0072 3146     		mov	r1, r6
 880 0074 FFF7FEFF 		bl	__aeabi_uldivmod
 881              	.LVL84:
 319:Core/Src/printf.c ****       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 882              		.loc 1 319 18 view .LVU236
 883 0078 D3B2     		uxtb	r3, r2
 884              	.LVL85:
 320:Core/Src/printf.c ****       value /= base;
 885              		.loc 1 320 7 is_stmt 1 view .LVU237
 320:Core/Src/printf.c ****       value /= base;
 886              		.loc 1 320 18 is_stmt 0 view .LVU238
 887 007a 092B     		cmp	r3, #9
 888 007c DBD9     		bls	.L78
 320:Core/Src/printf.c ****       value /= base;
 889              		.loc 1 320 85 discriminator 2 view .LVU239
 890 007e 1AF0200F 		tst	r10, #32
 891 0082 05D0     		beq	.L73
 320:Core/Src/printf.c ****       value /= base;
 892              		.loc 1 320 85 view .LVU240
 893 0084 4122     		movs	r2, #65
 894              	.L70:
 320:Core/Src/printf.c ****       value /= base;
 895              		.loc 1 320 85 discriminator 7 view .LVU241
 896 0086 1A44     		add	r2, r2, r3
 897 0088 D2B2     		uxtb	r2, r2
 320:Core/Src/printf.c ****       value /= base;
 898              		.loc 1 320 18 discriminator 7 view .LVU242
 899 008a 0A3A     		subs	r2, r2, #10
 900 008c D2B2     		uxtb	r2, r2
 901 008e D5E7     		b	.L69
 902              	.L73:
 320:Core/Src/printf.c ****       value /= base;
 903              		.loc 1 320 85 view .LVU243
 904 0090 6122     		movs	r2, #97
 905 0092 F8E7     		b	.L70
 906              	.LVL86:
 907              	.L72:
 320:Core/Src/printf.c ****       value /= base;
 908              		.loc 1 320 85 view .LVU244
 909              	.LBE29:
 309:Core/Src/printf.c **** 
 910              		.loc 1 309 10 view .LVU245
 911 0094 4FF00009 		mov	r9, #0
ARM GAS  /tmp/ccDtGku3.s 			page 24


 912              	.LVL87:
 913              	.L67:
 323:Core/Src/printf.c ****   }
 324:Core/Src/printf.c **** 
 325:Core/Src/printf.c ****   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width
 914              		.loc 1 325 3 is_stmt 1 view .LVU246
 915              		.loc 1 325 10 is_stmt 0 view .LVU247
 916 0098 CDF818A0 		str	r10, [sp, #24]
 917 009c 259B     		ldr	r3, [sp, #148]
 918 009e 0593     		str	r3, [sp, #20]
 919 00a0 249B     		ldr	r3, [sp, #144]
 920 00a2 0493     		str	r3, [sp, #16]
 921 00a4 0397     		str	r7, [sp, #12]
 922 00a6 9DF88030 		ldrb	r3, [sp, #128]	@ zero_extendqisi2
 923 00aa 0293     		str	r3, [sp, #8]
 924 00ac CDF80490 		str	r9, [sp, #4]
 925 00b0 0CAB     		add	r3, sp, #48
 926 00b2 0093     		str	r3, [sp]
 927 00b4 5B46     		mov	r3, fp
 928 00b6 0B9A     		ldr	r2, [sp, #44]
 929 00b8 0A99     		ldr	r1, [sp, #40]
 930 00ba 0998     		ldr	r0, [sp, #36]
 931 00bc FFF7FEFF 		bl	_ntoa_format
 932              	.LVL88:
 326:Core/Src/printf.c **** }
 933              		.loc 1 326 1 view .LVU248
 934 00c0 15B0     		add	sp, sp, #84
 935              	.LCFI15:
 936              		.cfi_def_cfa_offset 36
 937              		@ sp needed
 938 00c2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 939              		.loc 1 326 1 view .LVU249
 940              		.cfi_endproc
 941              	.LFE10:
 943              		.global	__aeabi_dcmpeq
 944              		.global	__aeabi_dcmpgt
 945              		.global	__aeabi_dcmplt
 946              		.global	__aeabi_i2d
 947              		.global	__aeabi_dmul
 948              		.global	__aeabi_dadd
 949              		.global	__aeabi_dsub
 950              		.global	__aeabi_d2iz
 951              		.global	__aeabi_ddiv
 952              		.global	__aeabi_dcmpge
 953              		.section	.text._etoa,"ax",%progbits
 954              		.align	1
 955              		.syntax unified
 956              		.thumb
 957              		.thumb_func
 958              		.fpu softvfp
 960              	_etoa:
 961              	.LVL89:
 962              	.LFB12:
 327:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_LONG_LONG
 328:Core/Src/printf.c **** 
 329:Core/Src/printf.c **** 
 330:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
ARM GAS  /tmp/ccDtGku3.s 			page 25


 331:Core/Src/printf.c **** 
 332:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 333:Core/Src/printf.c **** // forward declaration so that _ftoa can switch to exp notation for values > PRINTF_MAX_FLOAT
 334:Core/Src/printf.c **** static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 335:Core/Src/printf.c **** #endif
 336:Core/Src/printf.c **** 
 337:Core/Src/printf.c **** 
 338:Core/Src/printf.c **** // internal ftoa for fixed decimal floating point
 339:Core/Src/printf.c **** static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 340:Core/Src/printf.c **** {
 341:Core/Src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 342:Core/Src/printf.c ****   size_t len  = 0U;
 343:Core/Src/printf.c ****   double diff = 0.0;
 344:Core/Src/printf.c **** 
 345:Core/Src/printf.c ****   // powers of 10
 346:Core/Src/printf.c ****   static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 10
 347:Core/Src/printf.c **** 
 348:Core/Src/printf.c ****   // test for special values
 349:Core/Src/printf.c ****   if (value != value)
 350:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 351:Core/Src/printf.c ****   if (value < -DBL_MAX)
 352:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 353:Core/Src/printf.c ****   if (value > DBL_MAX)
 354:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 355:Core/Src/printf.c **** 
 356:Core/Src/printf.c ****   // test for very large values
 357:Core/Src/printf.c ****   // standard printf behavior is to print EVERY whole number digit -- which could be 100s of charac
 358:Core/Src/printf.c ****   if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 359:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 360:Core/Src/printf.c ****     return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 361:Core/Src/printf.c **** #else
 362:Core/Src/printf.c ****     return 0U;
 363:Core/Src/printf.c **** #endif
 364:Core/Src/printf.c ****   }
 365:Core/Src/printf.c **** 
 366:Core/Src/printf.c ****   // test for negative
 367:Core/Src/printf.c ****   bool negative = false;
 368:Core/Src/printf.c ****   if (value < 0) {
 369:Core/Src/printf.c ****     negative = true;
 370:Core/Src/printf.c ****     value = 0 - value;
 371:Core/Src/printf.c ****   }
 372:Core/Src/printf.c **** 
 373:Core/Src/printf.c ****   // set default precision, if not set explicitly
 374:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 375:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 376:Core/Src/printf.c ****   }
 377:Core/Src/printf.c ****   // limit precision to 9, cause a prec >= 10 can lead to overflow errors
 378:Core/Src/printf.c ****   while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 379:Core/Src/printf.c ****     buf[len++] = '0';
 380:Core/Src/printf.c ****     prec--;
 381:Core/Src/printf.c ****   }
 382:Core/Src/printf.c **** 
 383:Core/Src/printf.c ****   int whole = (int)value;
 384:Core/Src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 385:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 386:Core/Src/printf.c ****   diff = tmp - frac;
 387:Core/Src/printf.c **** 
ARM GAS  /tmp/ccDtGku3.s 			page 26


 388:Core/Src/printf.c ****   if (diff > 0.5) {
 389:Core/Src/printf.c ****     ++frac;
 390:Core/Src/printf.c ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 391:Core/Src/printf.c ****     if (frac >= pow10[prec]) {
 392:Core/Src/printf.c ****       frac = 0;
 393:Core/Src/printf.c ****       ++whole;
 394:Core/Src/printf.c ****     }
 395:Core/Src/printf.c ****   }
 396:Core/Src/printf.c ****   else if (diff < 0.5) {
 397:Core/Src/printf.c ****   }
 398:Core/Src/printf.c ****   else if ((frac == 0U) || (frac & 1U)) {
 399:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 400:Core/Src/printf.c ****     ++frac;
 401:Core/Src/printf.c ****   }
 402:Core/Src/printf.c **** 
 403:Core/Src/printf.c ****   if (prec == 0U) {
 404:Core/Src/printf.c ****     diff = value - (double)whole;
 405:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 406:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 407:Core/Src/printf.c ****       // 1.5 -> 2, but 2.5 -> 2
 408:Core/Src/printf.c ****       ++whole;
 409:Core/Src/printf.c ****     }
 410:Core/Src/printf.c ****   }
 411:Core/Src/printf.c ****   else {
 412:Core/Src/printf.c ****     unsigned int count = prec;
 413:Core/Src/printf.c ****     // now do fractional part, as an unsigned number
 414:Core/Src/printf.c ****     while (len < PRINTF_FTOA_BUFFER_SIZE) {
 415:Core/Src/printf.c ****       --count;
 416:Core/Src/printf.c ****       buf[len++] = (char)(48U + (frac % 10U));
 417:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 418:Core/Src/printf.c ****         break;
 419:Core/Src/printf.c ****       }
 420:Core/Src/printf.c ****     }
 421:Core/Src/printf.c ****     // add extra 0s
 422:Core/Src/printf.c ****     while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 423:Core/Src/printf.c ****       buf[len++] = '0';
 424:Core/Src/printf.c ****     }
 425:Core/Src/printf.c ****     if (len < PRINTF_FTOA_BUFFER_SIZE) {
 426:Core/Src/printf.c ****       // add decimal
 427:Core/Src/printf.c ****       buf[len++] = '.';
 428:Core/Src/printf.c ****     }
 429:Core/Src/printf.c ****   }
 430:Core/Src/printf.c **** 
 431:Core/Src/printf.c ****   // do whole part, number is reversed
 432:Core/Src/printf.c ****   while (len < PRINTF_FTOA_BUFFER_SIZE) {
 433:Core/Src/printf.c ****     buf[len++] = (char)(48 + (whole % 10));
 434:Core/Src/printf.c ****     if (!(whole /= 10)) {
 435:Core/Src/printf.c ****       break;
 436:Core/Src/printf.c ****     }
 437:Core/Src/printf.c ****   }
 438:Core/Src/printf.c **** 
 439:Core/Src/printf.c ****   // pad leading zeros
 440:Core/Src/printf.c ****   if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 441:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 442:Core/Src/printf.c ****       width--;
 443:Core/Src/printf.c ****     }
 444:Core/Src/printf.c ****     while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
ARM GAS  /tmp/ccDtGku3.s 			page 27


 445:Core/Src/printf.c ****       buf[len++] = '0';
 446:Core/Src/printf.c ****     }
 447:Core/Src/printf.c ****   }
 448:Core/Src/printf.c **** 
 449:Core/Src/printf.c ****   if (len < PRINTF_FTOA_BUFFER_SIZE) {
 450:Core/Src/printf.c ****     if (negative) {
 451:Core/Src/printf.c ****       buf[len++] = '-';
 452:Core/Src/printf.c ****     }
 453:Core/Src/printf.c ****     else if (flags & FLAGS_PLUS) {
 454:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 455:Core/Src/printf.c ****     }
 456:Core/Src/printf.c ****     else if (flags & FLAGS_SPACE) {
 457:Core/Src/printf.c ****       buf[len++] = ' ';
 458:Core/Src/printf.c ****     }
 459:Core/Src/printf.c ****   }
 460:Core/Src/printf.c **** 
 461:Core/Src/printf.c ****   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 462:Core/Src/printf.c **** }
 463:Core/Src/printf.c **** 
 464:Core/Src/printf.c **** 
 465:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 466:Core/Src/printf.c **** // internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.ja
 467:Core/Src/printf.c **** static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsign
 468:Core/Src/printf.c **** {
 963              		.loc 1 468 1 is_stmt 1 view -0
 964              		.cfi_startproc
 965              		@ args = 20, pretend = 0, frame = 48
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              		.loc 1 468 1 is_stmt 0 view .LVU251
 968 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 969              	.LCFI16:
 970              		.cfi_def_cfa_offset 36
 971              		.cfi_offset 4, -36
 972              		.cfi_offset 5, -32
 973              		.cfi_offset 6, -28
 974              		.cfi_offset 7, -24
 975              		.cfi_offset 8, -20
 976              		.cfi_offset 9, -16
 977              		.cfi_offset 10, -12
 978              		.cfi_offset 11, -8
 979              		.cfi_offset 14, -4
 980 0004 93B0     		sub	sp, sp, #76
 981              	.LCFI17:
 982              		.cfi_def_cfa_offset 112
 983 0006 8346     		mov	fp, r0
 984 0008 0D46     		mov	r5, r1
 985 000a 1446     		mov	r4, r2
 986 000c 9A46     		mov	r10, r3
 987 000e 1C9E     		ldr	r6, [sp, #112]
 988 0010 0796     		str	r6, [sp, #28]
 989 0012 1D9F     		ldr	r7, [sp, #116]
 990 0014 0897     		str	r7, [sp, #32]
 469:Core/Src/printf.c ****   // check for NaN and special values
 470:Core/Src/printf.c ****   if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 991              		.loc 1 470 3 is_stmt 1 view .LVU252
 992              		.loc 1 470 6 is_stmt 0 view .LVU253
 993 0016 3246     		mov	r2, r6
ARM GAS  /tmp/ccDtGku3.s 			page 28


 994              	.LVL90:
 995              		.loc 1 470 6 view .LVU254
 996 0018 3B46     		mov	r3, r7
 997              	.LVL91:
 998              		.loc 1 470 6 view .LVU255
 999 001a 3046     		mov	r0, r6
 1000              	.LVL92:
 1001              		.loc 1 470 6 view .LVU256
 1002 001c 3946     		mov	r1, r7
 1003              	.LVL93:
 1004              		.loc 1 470 6 view .LVU257
 1005 001e FFF7FEFF 		bl	__aeabi_dcmpeq
 1006              	.LVL94:
 1007 0022 0028     		cmp	r0, #0
 1008 0024 00F00C81 		beq	.L80
 1009              		.loc 1 470 24 discriminator 1 view .LVU258
 1010 0028 4FF0FF32 		mov	r2, #-1
 1011 002c AE4B     		ldr	r3, .L121+64
 1012 002e 3046     		mov	r0, r6
 1013 0030 3946     		mov	r1, r7
 1014 0032 FFF7FEFF 		bl	__aeabi_dcmpgt
 1015              	.LVL95:
 1016 0036 0028     		cmp	r0, #0
 1017 0038 40F00281 		bne	.L80
 1018              		.loc 1 470 45 discriminator 2 view .LVU259
 1019 003c 4FF0FF32 		mov	r2, #-1
 1020 0040 6FF48013 		mvn	r3, #1048576
 1021 0044 3046     		mov	r0, r6
 1022 0046 3946     		mov	r1, r7
 1023 0048 FFF7FEFF 		bl	__aeabi_dcmplt
 1024              	.LVL96:
 1025 004c 0028     		cmp	r0, #0
 1026 004e 40F0F780 		bne	.L80
 471:Core/Src/printf.c ****     return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 472:Core/Src/printf.c ****   }
 473:Core/Src/printf.c **** 
 474:Core/Src/printf.c ****   // determine the sign
 475:Core/Src/printf.c ****   const bool negative = value < 0;
 1027              		.loc 1 475 3 is_stmt 1 view .LVU260
 1028              	.LVL97:
 476:Core/Src/printf.c ****   if (negative) {
 1029              		.loc 1 476 3 view .LVU261
 1030              		.loc 1 476 6 is_stmt 0 view .LVU262
 1031 0052 0022     		movs	r2, #0
 1032 0054 0023     		movs	r3, #0
 1033 0056 079E     		ldr	r6, [sp, #28]
 1034              		.loc 1 476 6 view .LVU263
 1035 0058 3046     		mov	r0, r6
 1036 005a 089F     		ldr	r7, [sp, #32]
 1037              		.loc 1 476 6 view .LVU264
 1038 005c 3946     		mov	r1, r7
 1039 005e FFF7FEFF 		bl	__aeabi_dcmplt
 1040              	.LVL98:
 1041 0062 0028     		cmp	r0, #0
 1042 0064 40F0FF80 		bne	.L119
 1043 0068 079A     		ldr	r2, [sp, #28]
 1044 006a 089B     		ldr	r3, [sp, #32]
ARM GAS  /tmp/ccDtGku3.s 			page 29


 1045 006c 0992     		str	r2, [sp, #36]
 1046 006e 1093     		str	r3, [sp, #64]
 1047              	.LVL99:
 1048              	.L84:
 477:Core/Src/printf.c ****     value = -value;
 478:Core/Src/printf.c ****   }
 479:Core/Src/printf.c **** 
 480:Core/Src/printf.c ****   // default precision
 481:Core/Src/printf.c ****   if (!(flags & FLAGS_PRECISION)) {
 1049              		.loc 1 481 3 is_stmt 1 view .LVU265
 1050              		.loc 1 481 6 is_stmt 0 view .LVU266
 1051 0070 209B     		ldr	r3, [sp, #128]
 1052 0072 13F48063 		ands	r3, r3, #1024
 1053 0076 1193     		str	r3, [sp, #68]
 1054 0078 01D1     		bne	.L86
 482:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1055              		.loc 1 482 10 view .LVU267
 1056 007a 0623     		movs	r3, #6
 1057 007c 1E93     		str	r3, [sp, #120]
 1058              	.LVL100:
 1059              	.L86:
 483:Core/Src/printf.c ****   }
 484:Core/Src/printf.c **** 
 485:Core/Src/printf.c ****   // determine the decimal exponent
 486:Core/Src/printf.c ****   // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
 487:Core/Src/printf.c ****   union {
 1060              		.loc 1 487 3 is_stmt 1 view .LVU268
 488:Core/Src/printf.c ****     uint64_t U;
 489:Core/Src/printf.c ****     double   F;
 490:Core/Src/printf.c ****   } conv;
 491:Core/Src/printf.c **** 
 492:Core/Src/printf.c ****   conv.F = value;
 1061              		.loc 1 492 3 view .LVU269
 493:Core/Src/printf.c ****   int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 1062              		.loc 1 493 3 view .LVU270
 1063 007e 099A     		ldr	r2, [sp, #36]
 1064 0080 109B     		ldr	r3, [sp, #64]
 1065              		.loc 1 493 14 is_stmt 0 view .LVU271
 1066 0082 C3F30A50 		ubfx	r0, r3, #20, #11
 1067              	.LVL101:
 494:Core/Src/printf.c ****   conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is n
 1068              		.loc 1 494 3 is_stmt 1 view .LVU272
 1069              		.loc 1 494 20 is_stmt 0 view .LVU273
 1070 0086 C3F31303 		ubfx	r3, r3, #0, #20
 1071              		.loc 1 494 44 view .LVU274
 1072 008a 1646     		mov	r6, r2
 1073              	.LVL102:
 1074              		.loc 1 494 44 view .LVU275
 1075 008c 43F07F57 		orr	r7, r3, #1069547520
 1076              	.LVL103:
 1077              		.loc 1 494 44 view .LVU276
 1078 0090 47F44017 		orr	r7, r7, #3145728
 495:Core/Src/printf.c ****   // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
 496:Core/Src/printf.c ****   int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.28952965460216
 1079              		.loc 1 496 3 is_stmt 1 view .LVU277
 1080              		.loc 1 496 45 is_stmt 0 view .LVU278
 1081 0094 A0F2FF30 		subw	r0, r0, #1023
ARM GAS  /tmp/ccDtGku3.s 			page 30


 1082              	.LVL104:
 1083              		.loc 1 496 45 view .LVU279
 1084 0098 FFF7FEFF 		bl	__aeabi_i2d
 1085              	.LVL105:
 1086              		.loc 1 496 45 view .LVU280
 1087 009c 82A3     		adr	r3, .L121
 1088 009e D3E90023 		ldrd	r2, [r3]
 1089 00a2 FFF7FEFF 		bl	__aeabi_dmul
 1090              	.LVL106:
 1091              		.loc 1 496 38 view .LVU281
 1092 00a6 82A3     		adr	r3, .L121+8
 1093 00a8 D3E90023 		ldrd	r2, [r3]
 1094 00ac FFF7FEFF 		bl	__aeabi_dadd
 1095              	.LVL107:
 1096 00b0 8046     		mov	r8, r0
 1097 00b2 8946     		mov	r9, r1
 1098              		.loc 1 496 75 view .LVU282
 1099 00b4 0022     		movs	r2, #0
 1100 00b6 8D4B     		ldr	r3, .L121+68
 1101 00b8 3046     		mov	r0, r6
 1102 00ba 3946     		mov	r1, r7
 1103 00bc FFF7FEFF 		bl	__aeabi_dsub
 1104              	.LVL108:
 1105              		.loc 1 496 82 view .LVU283
 1106 00c0 7DA3     		adr	r3, .L121+16
 1107 00c2 D3E90023 		ldrd	r2, [r3]
 1108 00c6 FFF7FEFF 		bl	__aeabi_dmul
 1109              	.LVL109:
 1110 00ca 0246     		mov	r2, r0
 1111 00cc 0B46     		mov	r3, r1
 1112              		.loc 1 496 65 view .LVU284
 1113 00ce 4046     		mov	r0, r8
 1114 00d0 4946     		mov	r1, r9
 1115 00d2 FFF7FEFF 		bl	__aeabi_dadd
 1116              	.LVL110:
 1117              		.loc 1 496 7 view .LVU285
 1118 00d6 FFF7FEFF 		bl	__aeabi_d2iz
 1119              	.LVL111:
 1120 00da 8146     		mov	r9, r0
 1121              	.LVL112:
 497:Core/Src/printf.c ****   // now we want to compute 10^expval but we want to be sure it won't overflow
 498:Core/Src/printf.c ****   exp2 = (int)(expval * 3.321928094887362 + 0.5);
 1122              		.loc 1 498 3 is_stmt 1 view .LVU286
 1123              		.loc 1 498 23 is_stmt 0 view .LVU287
 1124 00dc FFF7FEFF 		bl	__aeabi_i2d
 1125              	.LVL113:
 1126              		.loc 1 498 23 view .LVU288
 1127 00e0 0646     		mov	r6, r0
 1128 00e2 0F46     		mov	r7, r1
 1129 00e4 76A3     		adr	r3, .L121+24
 1130 00e6 D3E90023 		ldrd	r2, [r3]
 1131 00ea FFF7FEFF 		bl	__aeabi_dmul
 1132              	.LVL114:
 1133              		.loc 1 498 43 view .LVU289
 1134 00ee 0022     		movs	r2, #0
 1135 00f0 7F4B     		ldr	r3, .L121+72
 1136 00f2 FFF7FEFF 		bl	__aeabi_dadd
ARM GAS  /tmp/ccDtGku3.s 			page 31


 1137              	.LVL115:
 1138              		.loc 1 498 8 view .LVU290
 1139 00f6 FFF7FEFF 		bl	__aeabi_d2iz
 1140              	.LVL116:
 1141 00fa 8046     		mov	r8, r0
 1142              	.LVL117:
 499:Core/Src/printf.c ****   const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 1143              		.loc 1 499 3 is_stmt 1 view .LVU291
 1144              		.loc 1 499 28 is_stmt 0 view .LVU292
 1145 00fc 72A3     		adr	r3, .L121+32
 1146 00fe D3E90023 		ldrd	r2, [r3]
 1147 0102 3046     		mov	r0, r6
 1148              	.LVL118:
 1149              		.loc 1 499 28 view .LVU293
 1150 0104 3946     		mov	r1, r7
 1151 0106 FFF7FEFF 		bl	__aeabi_dmul
 1152              	.LVL119:
 1153 010a 0646     		mov	r6, r0
 1154 010c 0F46     		mov	r7, r1
 1155              		.loc 1 499 55 view .LVU294
 1156 010e 4046     		mov	r0, r8
 1157 0110 FFF7FEFF 		bl	__aeabi_i2d
 1158              	.LVL120:
 1159 0114 6EA3     		adr	r3, .L121+40
 1160 0116 D3E90023 		ldrd	r2, [r3]
 1161 011a FFF7FEFF 		bl	__aeabi_dmul
 1162              	.LVL121:
 1163 011e 0246     		mov	r2, r0
 1164 0120 0B46     		mov	r3, r1
 1165              		.loc 1 499 16 view .LVU295
 1166 0122 3046     		mov	r0, r6
 1167 0124 3946     		mov	r1, r7
 1168 0126 FFF7FEFF 		bl	__aeabi_dsub
 1169              	.LVL122:
 1170 012a 0646     		mov	r6, r0
 1171 012c 0F46     		mov	r7, r1
 1172              	.LVL123:
 500:Core/Src/printf.c ****   const double z2 = z * z;
 1173              		.loc 1 500 3 is_stmt 1 view .LVU296
 1174              		.loc 1 500 16 is_stmt 0 view .LVU297
 1175 012e 0246     		mov	r2, r0
 1176 0130 0B46     		mov	r3, r1
 1177 0132 FFF7FEFF 		bl	__aeabi_dmul
 1178              	.LVL124:
 1179 0136 CDE90C01 		strd	r0, [sp, #48]
 1180              	.LVL125:
 501:Core/Src/printf.c ****   conv.U = (uint64_t)(exp2 + 1023) << 52U;
 1181              		.loc 1 501 3 is_stmt 1 view .LVU298
 1182              		.loc 1 501 28 is_stmt 0 view .LVU299
 1183 013a 08F2FF38 		addw	r8, r8, #1023
 1184              	.LVL126:
 1185              		.loc 1 501 36 view .LVU300
 1186 013e 0021     		movs	r1, #0
 1187 0140 0022     		movs	r2, #0
 1188 0142 CDE90A12 		strd	r1, [sp, #40]
 1189 0146 4FEA0851 		lsl	r1, r8, #20
 1190 014a 0B91     		str	r1, [sp, #44]
ARM GAS  /tmp/ccDtGku3.s 			page 32


 1191 014c 0021     		movs	r1, #0
 1192 014e 0A91     		str	r1, [sp, #40]
 502:Core/Src/printf.c ****   // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_functi
 503:Core/Src/printf.c ****   conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 1193              		.loc 1 503 3 is_stmt 1 view .LVU301
 1194              		.loc 1 503 19 is_stmt 0 view .LVU302
 1195 0150 3246     		mov	r2, r6
 1196 0152 3B46     		mov	r3, r7
 1197 0154 3046     		mov	r0, r6
 1198              	.LVL127:
 1199              		.loc 1 503 19 view .LVU303
 1200 0156 3946     		mov	r1, r7
 1201 0158 FFF7FEFF 		bl	__aeabi_dadd
 1202              	.LVL128:
 1203 015c CDE90E01 		strd	r0, [sp, #56]
 1204              		.loc 1 503 28 view .LVU304
 1205 0160 3246     		mov	r2, r6
 1206 0162 3B46     		mov	r3, r7
 1207 0164 0020     		movs	r0, #0
 1208 0166 4FF08041 		mov	r1, #1073741824
 1209 016a FFF7FEFF 		bl	__aeabi_dsub
 1210              	.LVL129:
 1211 016e 0646     		mov	r6, r0
 1212              	.LVL130:
 1213              		.loc 1 503 28 view .LVU305
 1214 0170 0F46     		mov	r7, r1
 1215              		.loc 1 503 60 view .LVU306
 1216 0172 0022     		movs	r2, #0
 1217 0174 5F4B     		ldr	r3, .L121+76
 1218 0176 DDE90C01 		ldrd	r0, [sp, #48]
 1219 017a FFF7FEFF 		bl	__aeabi_ddiv
 1220              	.LVL131:
 1221              		.loc 1 503 55 view .LVU307
 1222 017e 0022     		movs	r2, #0
 1223 0180 5D4B     		ldr	r3, .L121+80
 1224 0182 FFF7FEFF 		bl	__aeabi_dadd
 1225              	.LVL132:
 1226 0186 0246     		mov	r2, r0
 1227 0188 0B46     		mov	r3, r1
 1228              		.loc 1 503 49 view .LVU308
 1229 018a DDE90C01 		ldrd	r0, [sp, #48]
 1230 018e FFF7FEFF 		bl	__aeabi_ddiv
 1231              	.LVL133:
 1232              		.loc 1 503 43 view .LVU309
 1233 0192 0022     		movs	r2, #0
 1234 0194 594B     		ldr	r3, .L121+84
 1235 0196 FFF7FEFF 		bl	__aeabi_dadd
 1236              	.LVL134:
 1237 019a 0246     		mov	r2, r0
 1238 019c 0B46     		mov	r3, r1
 1239              		.loc 1 503 38 view .LVU310
 1240 019e DDE90C01 		ldrd	r0, [sp, #48]
 1241 01a2 FFF7FEFF 		bl	__aeabi_ddiv
 1242              	.LVL135:
 1243 01a6 0246     		mov	r2, r0
 1244 01a8 0B46     		mov	r3, r1
 1245              		.loc 1 503 32 view .LVU311
ARM GAS  /tmp/ccDtGku3.s 			page 33


 1246 01aa 3046     		mov	r0, r6
 1247 01ac 3946     		mov	r1, r7
 1248 01ae FFF7FEFF 		bl	__aeabi_dadd
 1249              	.LVL136:
 1250 01b2 0246     		mov	r2, r0
 1251 01b4 0B46     		mov	r3, r1
 1252              		.loc 1 503 23 view .LVU312
 1253 01b6 DDE90E01 		ldrd	r0, [sp, #56]
 1254 01ba FFF7FEFF 		bl	__aeabi_ddiv
 1255              	.LVL137:
 1256              		.loc 1 503 15 view .LVU313
 1257 01be 0022     		movs	r2, #0
 1258 01c0 4F4B     		ldr	r3, .L121+88
 1259 01c2 FFF7FEFF 		bl	__aeabi_dadd
 1260              	.LVL138:
 1261              		.loc 1 503 10 view .LVU314
 1262 01c6 DDE90A23 		ldrd	r2, [sp, #40]
 1263 01ca FFF7FEFF 		bl	__aeabi_dmul
 1264              	.LVL139:
 1265 01ce 0646     		mov	r6, r0
 1266 01d0 0F46     		mov	r7, r1
 1267 01d2 CDE90A67 		strd	r6, [sp, #40]
 504:Core/Src/printf.c ****   // correct for rounding errors
 505:Core/Src/printf.c ****   if (value < conv.F) {
 1268              		.loc 1 505 3 is_stmt 1 view .LVU315
 1269              		.loc 1 505 6 is_stmt 0 view .LVU316
 1270 01d6 099A     		ldr	r2, [sp, #36]
 1271 01d8 109B     		ldr	r3, [sp, #64]
 1272 01da FFF7FEFF 		bl	__aeabi_dcmpgt
 1273              	.LVL140:
 1274 01de 48B1     		cbz	r0, .L87
 506:Core/Src/printf.c ****     expval--;
 1275              		.loc 1 506 5 is_stmt 1 view .LVU317
 1276              		.loc 1 506 11 is_stmt 0 view .LVU318
 1277 01e0 09F1FF39 		add	r9, r9, #-1
 1278              	.LVL141:
 507:Core/Src/printf.c ****     conv.F /= 10;
 1279              		.loc 1 507 5 is_stmt 1 view .LVU319
 1280              		.loc 1 507 12 is_stmt 0 view .LVU320
 1281 01e4 0022     		movs	r2, #0
 1282 01e6 444B     		ldr	r3, .L121+80
 1283 01e8 3046     		mov	r0, r6
 1284 01ea 3946     		mov	r1, r7
 1285 01ec FFF7FEFF 		bl	__aeabi_ddiv
 1286              	.LVL142:
 1287 01f0 CDE90A01 		strd	r0, [sp, #40]
 1288              	.L87:
 508:Core/Src/printf.c ****   }
 509:Core/Src/printf.c **** 
 510:Core/Src/printf.c ****   // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
 511:Core/Src/printf.c ****   unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 1289              		.loc 1 511 3 is_stmt 1 view .LVU321
 1290              		.loc 1 511 43 is_stmt 0 view .LVU322
 1291 01f4 09F16303 		add	r3, r9, #99
 1292              		.loc 1 511 68 view .LVU323
 1293 01f8 C62B     		cmp	r3, #198
 1294 01fa 39D8     		bhi	.L105
ARM GAS  /tmp/ccDtGku3.s 			page 34


 1295              		.loc 1 511 68 view .LVU324
 1296 01fc 0426     		movs	r6, #4
 1297              	.L89:
 1298              	.LVL143:
 512:Core/Src/printf.c **** 
 513:Core/Src/printf.c ****   // in "%g" mode, "prec" is the number of *significant figures* not decimals
 514:Core/Src/printf.c ****   if (flags & FLAGS_ADAPT_EXP) {
 1299              		.loc 1 514 3 is_stmt 1 discriminator 4 view .LVU325
 1300              		.loc 1 514 6 is_stmt 0 discriminator 4 view .LVU326
 1301 01fe 209B     		ldr	r3, [sp, #128]
 1302 0200 13F4006F 		tst	r3, #2048
 1303 0204 3ED0     		beq	.L90
 515:Core/Src/printf.c ****     // do we want to fall-back to "%f" mode?
 516:Core/Src/printf.c ****     if ((value >= 1e-4) && (value < 1e6)) {
 1304              		.loc 1 516 5 is_stmt 1 view .LVU327
 1305              		.loc 1 516 8 is_stmt 0 view .LVU328
 1306 0206 34A3     		adr	r3, .L121+48
 1307 0208 D3E90023 		ldrd	r2, [r3]
 1308 020c DDF82480 		ldr	r8, [sp, #36]
 1309              	.LVL144:
 1310              		.loc 1 516 8 view .LVU329
 1311 0210 4046     		mov	r0, r8
 1312 0212 109F     		ldr	r7, [sp, #64]
 1313 0214 3946     		mov	r1, r7
 1314 0216 FFF7FEFF 		bl	__aeabi_dcmpge
 1315              	.LVL145:
 1316 021a 0028     		cmp	r0, #0
 1317 021c 37D0     		beq	.L91
 1318              		.loc 1 516 25 discriminator 1 view .LVU330
 1319 021e 30A3     		adr	r3, .L121+56
 1320 0220 D3E90023 		ldrd	r2, [r3]
 1321 0224 4046     		mov	r0, r8
 1322 0226 3946     		mov	r1, r7
 1323 0228 FFF7FEFF 		bl	__aeabi_dcmplt
 1324              	.LVL146:
 1325 022c 0028     		cmp	r0, #0
 1326 022e 2ED0     		beq	.L91
 517:Core/Src/printf.c ****       if ((int)prec > expval) {
 1327              		.loc 1 517 7 is_stmt 1 view .LVU331
 1328              		.loc 1 517 10 is_stmt 0 view .LVU332
 1329 0230 1E9B     		ldr	r3, [sp, #120]
 1330 0232 4B45     		cmp	r3, r9
 1331 0234 1EDD     		ble	.L106
 518:Core/Src/printf.c ****         prec = (unsigned)((int)prec - expval - 1);
 1332              		.loc 1 518 9 is_stmt 1 view .LVU333
 1333              		.loc 1 518 37 is_stmt 0 view .LVU334
 1334 0236 A3EB0903 		sub	r3, r3, r9
 1335              		.loc 1 518 46 view .LVU335
 1336 023a 013B     		subs	r3, r3, #1
 1337 023c 1E93     		str	r3, [sp, #120]
 1338              	.LVL147:
 1339              		.loc 1 518 46 view .LVU336
 1340 023e 1BE0     		b	.L94
 1341              	.LVL148:
 1342              	.L80:
 471:Core/Src/printf.c ****   }
 1343              		.loc 1 471 5 is_stmt 1 view .LVU337
ARM GAS  /tmp/ccDtGku3.s 			page 35


 471:Core/Src/printf.c ****   }
 1344              		.loc 1 471 12 is_stmt 0 view .LVU338
 1345 0240 209B     		ldr	r3, [sp, #128]
 1346 0242 0493     		str	r3, [sp, #16]
 1347 0244 1F9B     		ldr	r3, [sp, #124]
 1348 0246 0393     		str	r3, [sp, #12]
 1349 0248 1E9B     		ldr	r3, [sp, #120]
 1350 024a 0293     		str	r3, [sp, #8]
 1351 024c 079A     		ldr	r2, [sp, #28]
 1352 024e 089B     		ldr	r3, [sp, #32]
 1353 0250 CDE90023 		strd	r2, [sp]
 1354 0254 5346     		mov	r3, r10
 1355 0256 2246     		mov	r2, r4
 1356 0258 2946     		mov	r1, r5
 1357 025a 5846     		mov	r0, fp
 1358 025c FFF7FEFF 		bl	_ftoa
 1359              	.LVL149:
 1360              	.L83:
 519:Core/Src/printf.c ****       }
 520:Core/Src/printf.c ****       else {
 521:Core/Src/printf.c ****         prec = 0;
 522:Core/Src/printf.c ****       }
 523:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 524:Core/Src/printf.c ****       // no characters in exponent
 525:Core/Src/printf.c ****       minwidth = 0U;
 526:Core/Src/printf.c ****       expval   = 0;
 527:Core/Src/printf.c ****     }
 528:Core/Src/printf.c ****     else {
 529:Core/Src/printf.c ****       // we use one sigfig for the whole part
 530:Core/Src/printf.c ****       if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 531:Core/Src/printf.c ****         --prec;
 532:Core/Src/printf.c ****       }
 533:Core/Src/printf.c ****     }
 534:Core/Src/printf.c ****   }
 535:Core/Src/printf.c **** 
 536:Core/Src/printf.c ****   // will everything fit?
 537:Core/Src/printf.c ****   unsigned int fwidth = width;
 538:Core/Src/printf.c ****   if (width > minwidth) {
 539:Core/Src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 540:Core/Src/printf.c ****     fwidth -= minwidth;
 541:Core/Src/printf.c ****   } else {
 542:Core/Src/printf.c ****     // not enough characters, so go back to default sizing
 543:Core/Src/printf.c ****     fwidth = 0U;
 544:Core/Src/printf.c ****   }
 545:Core/Src/printf.c ****   if ((flags & FLAGS_LEFT) && minwidth) {
 546:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 547:Core/Src/printf.c ****     fwidth = 0U;
 548:Core/Src/printf.c ****   }
 549:Core/Src/printf.c **** 
 550:Core/Src/printf.c ****   // rescale the float value
 551:Core/Src/printf.c ****   if (expval) {
 552:Core/Src/printf.c ****     value /= conv.F;
 553:Core/Src/printf.c ****   }
 554:Core/Src/printf.c **** 
 555:Core/Src/printf.c ****   // output the floating part
 556:Core/Src/printf.c ****   const size_t start_idx = idx;
 557:Core/Src/printf.c ****   idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADA
ARM GAS  /tmp/ccDtGku3.s 			page 36


 558:Core/Src/printf.c **** 
 559:Core/Src/printf.c ****   // output the exponent part
 560:Core/Src/printf.c ****   if (minwidth) {
 561:Core/Src/printf.c ****     // output the exponential symbol
 562:Core/Src/printf.c ****     out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 563:Core/Src/printf.c ****     // output the exponent value
 564:Core/Src/printf.c ****     idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, 
 565:Core/Src/printf.c ****     // might need to right-pad spaces
 566:Core/Src/printf.c ****     if (flags & FLAGS_LEFT) {
 567:Core/Src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 568:Core/Src/printf.c ****     }
 569:Core/Src/printf.c ****   }
 570:Core/Src/printf.c ****   return idx;
 571:Core/Src/printf.c **** }
 1361              		.loc 1 571 1 view .LVU339
 1362 0260 13B0     		add	sp, sp, #76
 1363              	.LCFI18:
 1364              		.cfi_remember_state
 1365              		.cfi_def_cfa_offset 36
 1366              		@ sp needed
 1367 0262 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1368              	.LVL150:
 1369              	.L119:
 1370              	.LCFI19:
 1371              		.cfi_restore_state
 477:Core/Src/printf.c ****   }
 1372              		.loc 1 477 5 is_stmt 1 view .LVU340
 477:Core/Src/printf.c ****   }
 1373              		.loc 1 477 11 is_stmt 0 view .LVU341
 1374 0266 0996     		str	r6, [sp, #36]
 1375 0268 07F10043 		add	r3, r7, #-2147483648
 1376 026c 1093     		str	r3, [sp, #64]
 1377              	.LVL151:
 477:Core/Src/printf.c ****   }
 1378              		.loc 1 477 11 view .LVU342
 1379 026e FFE6     		b	.L84
 1380              	.LVL152:
 1381              	.L105:
 511:Core/Src/printf.c **** 
 1382              		.loc 1 511 68 view .LVU343
 1383 0270 0526     		movs	r6, #5
 1384 0272 C4E7     		b	.L89
 1385              	.LVL153:
 1386              	.L106:
 521:Core/Src/printf.c ****       }
 1387              		.loc 1 521 14 view .LVU344
 1388 0274 0023     		movs	r3, #0
 1389 0276 1E93     		str	r3, [sp, #120]
 1390              	.LVL154:
 1391              	.L94:
 523:Core/Src/printf.c ****       // no characters in exponent
 1392              		.loc 1 523 7 is_stmt 1 view .LVU345
 523:Core/Src/printf.c ****       // no characters in exponent
 1393              		.loc 1 523 13 is_stmt 0 view .LVU346
 1394 0278 209B     		ldr	r3, [sp, #128]
 1395 027a 43F48063 		orr	r3, r3, #1024
 1396 027e 2093     		str	r3, [sp, #128]
ARM GAS  /tmp/ccDtGku3.s 			page 37


 1397              	.LVL155:
 525:Core/Src/printf.c ****       expval   = 0;
 1398              		.loc 1 525 7 is_stmt 1 view .LVU347
 526:Core/Src/printf.c ****     }
 1399              		.loc 1 526 7 view .LVU348
 525:Core/Src/printf.c ****       expval   = 0;
 1400              		.loc 1 525 16 is_stmt 0 view .LVU349
 1401 0280 0026     		movs	r6, #0
 526:Core/Src/printf.c ****     }
 1402              		.loc 1 526 16 view .LVU350
 1403 0282 B146     		mov	r9, r6
 1404              	.LVL156:
 1405              	.L90:
 537:Core/Src/printf.c ****   if (width > minwidth) {
 1406              		.loc 1 537 3 is_stmt 1 view .LVU351
 538:Core/Src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 1407              		.loc 1 538 3 view .LVU352
 538:Core/Src/printf.c ****     // we didn't fall-back so subtract the characters required for the exponent
 1408              		.loc 1 538 6 is_stmt 0 view .LVU353
 1409 0284 1F9B     		ldr	r3, [sp, #124]
 1410 0286 9E42     		cmp	r6, r3
 1411 0288 3CD2     		bcs	.L107
 540:Core/Src/printf.c ****   } else {
 1412              		.loc 1 540 5 is_stmt 1 view .LVU354
 540:Core/Src/printf.c ****   } else {
 1413              		.loc 1 540 12 is_stmt 0 view .LVU355
 1414 028a 9F1B     		subs	r7, r3, r6
 1415              	.LVL157:
 540:Core/Src/printf.c ****   } else {
 1416              		.loc 1 540 12 view .LVU356
 1417 028c 3BE0     		b	.L95
 1418              	.LVL158:
 1419              	.L91:
 530:Core/Src/printf.c ****         --prec;
 1420              		.loc 1 530 7 is_stmt 1 view .LVU357
 530:Core/Src/printf.c ****         --prec;
 1421              		.loc 1 530 10 is_stmt 0 view .LVU358
 1422 028e 1E9B     		ldr	r3, [sp, #120]
 1423 0290 002B     		cmp	r3, #0
 1424 0292 F7D0     		beq	.L90
 530:Core/Src/printf.c ****         --prec;
 1425              		.loc 1 530 22 discriminator 1 view .LVU359
 1426 0294 119B     		ldr	r3, [sp, #68]
 1427 0296 002B     		cmp	r3, #0
 1428 0298 F4D0     		beq	.L90
 531:Core/Src/printf.c ****       }
 1429              		.loc 1 531 9 is_stmt 1 view .LVU360
 1430 029a 1E9B     		ldr	r3, [sp, #120]
 1431 029c 013B     		subs	r3, r3, #1
 1432 029e 1E93     		str	r3, [sp, #120]
 1433              	.LVL159:
 531:Core/Src/printf.c ****       }
 1434              		.loc 1 531 9 is_stmt 0 view .LVU361
 1435 02a0 F0E7     		b	.L90
 1436              	.L122:
 1437 02a2 00BFAFF3 		.align	3
 1437      0080
ARM GAS  /tmp/ccDtGku3.s 			page 38


 1438              	.L121:
 1439 02a8 FB799F50 		.word	1352628731
 1440 02ac 1344D33F 		.word	1070810131
 1441 02b0 B3C8608B 		.word	-1956591437
 1442 02b4 288AC63F 		.word	1069976104
 1443 02b8 61436F63 		.word	1668236129
 1444 02bc A787D23F 		.word	1070761895
 1445 02c0 71A37909 		.word	158966641
 1446 02c4 4F930A40 		.word	1074434895
 1447 02c8 1655B5BB 		.word	-1145744106
 1448 02cc B16B0240 		.word	1073900465
 1449 02d0 EF39FAFE 		.word	-17155601
 1450 02d4 422EE63F 		.word	1072049730
 1451 02d8 2D431CEB 		.word	-350469331
 1452 02dc E2361A3F 		.word	1058682594
 1453 02e0 00000000 		.word	0
 1454 02e4 80842E41 		.word	1093567616
 1455 02e8 FFFFEF7F 		.word	2146435071
 1456 02ec 0000F83F 		.word	1073217536
 1457 02f0 0000E03F 		.word	1071644672
 1458 02f4 00002C40 		.word	1076625408
 1459 02f8 00002440 		.word	1076101120
 1460 02fc 00001840 		.word	1075314688
 1461 0300 0000F03F 		.word	1072693248
 1462              	.LVL160:
 1463              	.L107:
 543:Core/Src/printf.c ****   }
 1464              		.loc 1 543 12 view .LVU362
 1465 0304 0027     		movs	r7, #0
 1466              	.LVL161:
 1467              	.L95:
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 1468              		.loc 1 545 3 is_stmt 1 view .LVU363
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 1469              		.loc 1 545 6 is_stmt 0 view .LVU364
 1470 0306 209B     		ldr	r3, [sp, #128]
 1471 0308 13F00208 		ands	r8, r3, #2
 1472 030c 01D0     		beq	.L96
 545:Core/Src/printf.c ****     // if we're padding on the right, DON'T pad the floating part
 1473              		.loc 1 545 28 discriminator 1 view .LVU365
 1474 030e 06B1     		cbz	r6, .L96
 547:Core/Src/printf.c ****   }
 1475              		.loc 1 547 12 view .LVU366
 1476 0310 0027     		movs	r7, #0
 1477              	.LVL162:
 1478              	.L96:
 551:Core/Src/printf.c ****     value /= conv.F;
 1479              		.loc 1 551 3 is_stmt 1 view .LVU367
 551:Core/Src/printf.c ****     value /= conv.F;
 1480              		.loc 1 551 6 is_stmt 0 view .LVU368
 1481 0312 B9F1000F 		cmp	r9, #0
 1482 0316 07D0     		beq	.L97
 552:Core/Src/printf.c ****   }
 1483              		.loc 1 552 5 is_stmt 1 view .LVU369
 552:Core/Src/printf.c ****   }
 1484              		.loc 1 552 18 is_stmt 0 view .LVU370
 1485 0318 DDE90A23 		ldrd	r2, [sp, #40]
ARM GAS  /tmp/ccDtGku3.s 			page 39


 552:Core/Src/printf.c ****   }
 1486              		.loc 1 552 11 view .LVU371
 1487 031c 0998     		ldr	r0, [sp, #36]
 1488 031e 1099     		ldr	r1, [sp, #64]
 1489 0320 FFF7FEFF 		bl	__aeabi_ddiv
 1490              	.LVL163:
 1491 0324 0990     		str	r0, [sp, #36]
 1492              	.LVL164:
 552:Core/Src/printf.c ****   }
 1493              		.loc 1 552 11 view .LVU372
 1494 0326 1091     		str	r1, [sp, #64]
 1495              	.LVL165:
 1496              	.L97:
 556:Core/Src/printf.c ****   idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADA
 1497              		.loc 1 556 3 is_stmt 1 view .LVU373
 557:Core/Src/printf.c **** 
 1498              		.loc 1 557 3 view .LVU374
 557:Core/Src/printf.c **** 
 1499              		.loc 1 557 9 is_stmt 0 view .LVU375
 1500 0328 0022     		movs	r2, #0
 1501 032a 0023     		movs	r3, #0
 1502 032c 0798     		ldr	r0, [sp, #28]
 1503 032e 0899     		ldr	r1, [sp, #32]
 1504 0330 FFF7FEFF 		bl	__aeabi_dcmplt
 1505              	.LVL166:
 1506 0334 0028     		cmp	r0, #0
 1507 0336 3BD1     		bne	.L120
 1508              	.LVL167:
 1509              	.L98:
 557:Core/Src/printf.c **** 
 1510              		.loc 1 557 9 discriminator 4 view .LVU376
 1511 0338 209B     		ldr	r3, [sp, #128]
 1512 033a 23F40063 		bic	r3, r3, #2048
 1513 033e 0493     		str	r3, [sp, #16]
 1514 0340 0397     		str	r7, [sp, #12]
 1515 0342 1E9B     		ldr	r3, [sp, #120]
 1516 0344 0293     		str	r3, [sp, #8]
 1517 0346 099A     		ldr	r2, [sp, #36]
 1518 0348 109B     		ldr	r3, [sp, #64]
 1519 034a CDE90023 		strd	r2, [sp]
 1520 034e 5346     		mov	r3, r10
 1521 0350 2246     		mov	r2, r4
 1522 0352 2946     		mov	r1, r5
 1523 0354 5846     		mov	r0, fp
 1524 0356 FFF7FEFF 		bl	_ftoa
 1525              	.LVL168:
 560:Core/Src/printf.c ****     // output the exponential symbol
 1526              		.loc 1 560 3 is_stmt 1 discriminator 4 view .LVU377
 560:Core/Src/printf.c ****     // output the exponential symbol
 1527              		.loc 1 560 6 is_stmt 0 discriminator 4 view .LVU378
 1528 035a 002E     		cmp	r6, #0
 1529 035c 80D0     		beq	.L83
 562:Core/Src/printf.c ****     // output the exponent value
 1530              		.loc 1 562 5 is_stmt 1 view .LVU379
 1531 035e 209B     		ldr	r3, [sp, #128]
 1532 0360 13F0200F 		tst	r3, #32
 1533 0364 29D0     		beq	.L109
ARM GAS  /tmp/ccDtGku3.s 			page 40


 1534 0366 4527     		movs	r7, #69
 1535              	.LVL169:
 1536              	.L100:
 562:Core/Src/printf.c ****     // output the exponent value
 1537              		.loc 1 562 5 is_stmt 0 discriminator 4 view .LVU380
 1538 0368 431C     		adds	r3, r0, #1
 1539 036a 0793     		str	r3, [sp, #28]
 1540              	.LVL170:
 562:Core/Src/printf.c ****     // output the exponent value
 1541              		.loc 1 562 5 discriminator 4 view .LVU381
 1542 036c 5346     		mov	r3, r10
 1543              	.LVL171:
 562:Core/Src/printf.c ****     // output the exponent value
 1544              		.loc 1 562 5 discriminator 4 view .LVU382
 1545 036e 0246     		mov	r2, r0
 1546 0370 2946     		mov	r1, r5
 1547 0372 3846     		mov	r0, r7
 1548 0374 D847     		blx	fp
 1549              	.LVL172:
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1550              		.loc 1 564 5 is_stmt 1 discriminator 4 view .LVU383
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1551              		.loc 1 564 71 is_stmt 0 discriminator 4 view .LVU384
 1552 0376 89EAE973 		eor	r3, r9, r9, asr #31
 1553 037a A3EBE973 		sub	r3, r3, r9, asr #31
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1554              		.loc 1 564 11 discriminator 4 view .LVU385
 1555 037e 0522     		movs	r2, #5
 1556 0380 0592     		str	r2, [sp, #20]
 1557 0382 013E     		subs	r6, r6, #1
 1558              	.LVL173:
 564:Core/Src/printf.c ****     // might need to right-pad spaces
 1559              		.loc 1 564 11 discriminator 4 view .LVU386
 1560 0384 0496     		str	r6, [sp, #16]
 1561 0386 0022     		movs	r2, #0
 1562 0388 0392     		str	r2, [sp, #12]
 1563 038a 0A22     		movs	r2, #10
 1564 038c 0292     		str	r2, [sp, #8]
 1565 038e 4FEAD970 		lsr	r0, r9, #31
 1566 0392 0190     		str	r0, [sp, #4]
 1567 0394 0093     		str	r3, [sp]
 1568 0396 5346     		mov	r3, r10
 1569 0398 079A     		ldr	r2, [sp, #28]
 1570 039a 2946     		mov	r1, r5
 1571 039c 5846     		mov	r0, fp
 1572 039e FFF7FEFF 		bl	_ntoa_long
 1573              	.LVL174:
 566:Core/Src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 1574              		.loc 1 566 5 is_stmt 1 discriminator 4 view .LVU387
 566:Core/Src/printf.c ****       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 1575              		.loc 1 566 8 is_stmt 0 discriminator 4 view .LVU388
 1576 03a2 B8F1000F 		cmp	r8, #0
 1577 03a6 3FF45BAF 		beq	.L83
 1578 03aa 0246     		mov	r2, r0
 1579 03ac 1F9F     		ldr	r7, [sp, #124]
 1580 03ae 0CE0     		b	.L101
 1581              	.LVL175:
ARM GAS  /tmp/ccDtGku3.s 			page 41


 1582              	.L120:
 557:Core/Src/printf.c **** 
 1583              		.loc 1 557 9 discriminator 1 view .LVU389
 1584 03b0 1099     		ldr	r1, [sp, #64]
 1585 03b2 01F10043 		add	r3, r1, #-2147483648
 1586 03b6 1093     		str	r3, [sp, #64]
 1587              	.LVL176:
 557:Core/Src/printf.c **** 
 1588              		.loc 1 557 9 discriminator 1 view .LVU390
 1589 03b8 BEE7     		b	.L98
 1590              	.LVL177:
 1591              	.L109:
 562:Core/Src/printf.c ****     // output the exponent value
 1592              		.loc 1 562 5 view .LVU391
 1593 03ba 6527     		movs	r7, #101
 1594              	.LVL178:
 562:Core/Src/printf.c ****     // output the exponent value
 1595              		.loc 1 562 5 view .LVU392
 1596 03bc D4E7     		b	.L100
 1597              	.LVL179:
 1598              	.L102:
 567:Core/Src/printf.c ****     }
 1599              		.loc 1 567 39 is_stmt 1 discriminator 2 view .LVU393
 1600 03be 561C     		adds	r6, r2, #1
 1601              	.LVL180:
 567:Core/Src/printf.c ****     }
 1602              		.loc 1 567 39 is_stmt 0 discriminator 2 view .LVU394
 1603 03c0 5346     		mov	r3, r10
 1604 03c2 2946     		mov	r1, r5
 1605 03c4 2020     		movs	r0, #32
 1606 03c6 D847     		blx	fp
 1607              	.LVL181:
 1608 03c8 3246     		mov	r2, r6
 1609              	.LVL182:
 1610              	.L101:
 567:Core/Src/printf.c ****     }
 1611              		.loc 1 567 13 is_stmt 1 discriminator 1 view .LVU395
 567:Core/Src/printf.c ****     }
 1612              		.loc 1 567 18 is_stmt 0 discriminator 1 view .LVU396
 1613 03ca 131B     		subs	r3, r2, r4
 567:Core/Src/printf.c ****     }
 1614              		.loc 1 567 13 discriminator 1 view .LVU397
 1615 03cc BB42     		cmp	r3, r7
 1616 03ce F6D3     		bcc	.L102
 567:Core/Src/printf.c ****     }
 1617              		.loc 1 567 13 discriminator 1 view .LVU398
 1618 03d0 1046     		mov	r0, r2
 1619 03d2 45E7     		b	.L83
 1620              		.cfi_endproc
 1621              	.LFE12:
 1623              		.section	.rodata._ftoa.str1.4,"aMS",%progbits,1
 1624              		.align	2
 1625              	.LC0:
 1626 0000 666E6900 		.ascii	"fni\000"
 1627              		.align	2
 1628              	.LC1:
 1629 0004 666E692B 		.ascii	"fni+\000"
ARM GAS  /tmp/ccDtGku3.s 			page 42


 1629      00
 1630 0009 000000   		.align	2
 1631              	.LC2:
 1632 000c 6E616E00 		.ascii	"nan\000"
 1633              		.align	2
 1634              	.LC3:
 1635 0010 666E692D 		.ascii	"fni-\000"
 1635      00
 1636              		.global	__aeabi_d2uiz
 1637              		.global	__aeabi_ui2d
 1638              		.global	__aeabi_dcmple
 1639              		.section	.text._ftoa,"ax",%progbits
 1640              		.align	1
 1641              		.syntax unified
 1642              		.thumb
 1643              		.thumb_func
 1644              		.fpu softvfp
 1646              	_ftoa:
 1647              	.LVL183:
 1648              	.LFB11:
 340:Core/Src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 1649              		.loc 1 340 1 is_stmt 1 view -0
 1650              		.cfi_startproc
 1651              		@ args = 20, pretend = 0, frame = 64
 1652              		@ frame_needed = 0, uses_anonymous_args = 0
 340:Core/Src/printf.c ****   char buf[PRINTF_FTOA_BUFFER_SIZE];
 1653              		.loc 1 340 1 is_stmt 0 view .LVU400
 1654 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1655              	.LCFI20:
 1656              		.cfi_def_cfa_offset 36
 1657              		.cfi_offset 4, -36
 1658              		.cfi_offset 5, -32
 1659              		.cfi_offset 6, -28
 1660              		.cfi_offset 7, -24
 1661              		.cfi_offset 8, -20
 1662              		.cfi_offset 9, -16
 1663              		.cfi_offset 10, -12
 1664              		.cfi_offset 11, -8
 1665              		.cfi_offset 14, -4
 1666 0004 97B0     		sub	sp, sp, #92
 1667              	.LCFI21:
 1668              		.cfi_def_cfa_offset 128
 1669 0006 0790     		str	r0, [sp, #28]
 1670 0008 0A91     		str	r1, [sp, #40]
 1671 000a 9246     		mov	r10, r2
 1672 000c 9B46     		mov	fp, r3
 1673 000e DDE92089 		ldrd	r8, [sp, #128]
 1674 0012 229D     		ldr	r5, [sp, #136]
 341:Core/Src/printf.c ****   size_t len  = 0U;
 1675              		.loc 1 341 3 is_stmt 1 view .LVU401
 342:Core/Src/printf.c ****   double diff = 0.0;
 1676              		.loc 1 342 3 view .LVU402
 1677              	.LVL184:
 343:Core/Src/printf.c **** 
 1678              		.loc 1 343 3 view .LVU403
 346:Core/Src/printf.c **** 
 1679              		.loc 1 346 3 view .LVU404
ARM GAS  /tmp/ccDtGku3.s 			page 43


 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1680              		.loc 1 349 3 view .LVU405
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1681              		.loc 1 349 6 is_stmt 0 view .LVU406
 1682 0014 4246     		mov	r2, r8
 1683              	.LVL185:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1684              		.loc 1 349 6 view .LVU407
 1685 0016 4B46     		mov	r3, r9
 1686              	.LVL186:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1687              		.loc 1 349 6 view .LVU408
 1688 0018 4046     		mov	r0, r8
 1689              	.LVL187:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1690              		.loc 1 349 6 view .LVU409
 1691 001a 4946     		mov	r1, r9
 1692              	.LVL188:
 349:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 1693              		.loc 1 349 6 view .LVU410
 1694 001c FFF7FEFF 		bl	__aeabi_dcmpeq
 1695              	.LVL189:
 1696 0020 0028     		cmp	r0, #0
 1697 0022 40D0     		beq	.L196
 351:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 1698              		.loc 1 351 3 is_stmt 1 view .LVU411
 351:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 1699              		.loc 1 351 6 is_stmt 0 view .LVU412
 1700 0024 4FF0FF32 		mov	r2, #-1
 1701 0028 6FF48013 		mvn	r3, #1048576
 1702 002c 4046     		mov	r0, r8
 1703 002e 4946     		mov	r1, r9
 1704 0030 FFF7FEFF 		bl	__aeabi_dcmplt
 1705              	.LVL190:
 1706 0034 0028     		cmp	r0, #0
 1707 0036 45D1     		bne	.L197
 353:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 1708              		.loc 1 353 3 is_stmt 1 view .LVU413
 353:Core/Src/printf.c ****     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS
 1709              		.loc 1 353 6 is_stmt 0 view .LVU414
 1710 0038 4FF0FF32 		mov	r2, #-1
 1711 003c 9E4B     		ldr	r3, .L201+16
 1712 003e 4046     		mov	r0, r8
 1713 0040 4946     		mov	r1, r9
 1714 0042 FFF7FEFF 		bl	__aeabi_dcmpgt
 1715              	.LVL191:
 1716 0046 0028     		cmp	r0, #0
 1717 0048 4BD1     		bne	.L198
 358:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 1718              		.loc 1 358 3 is_stmt 1 view .LVU415
 358:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 1719              		.loc 1 358 6 is_stmt 0 view .LVU416
 1720 004a 97A3     		adr	r3, .L201
 1721 004c D3E90023 		ldrd	r2, [r3]
 1722 0050 4046     		mov	r0, r8
 1723 0052 4946     		mov	r1, r9
 1724 0054 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  /tmp/ccDtGku3.s 			page 44


 1725              	.LVL192:
 1726 0058 0028     		cmp	r0, #0
 1727 005a 5AD1     		bne	.L133
 358:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 1728              		.loc 1 358 34 discriminator 1 view .LVU417
 1729 005c 94A3     		adr	r3, .L201+8
 1730 005e D3E90023 		ldrd	r2, [r3]
 1731 0062 4046     		mov	r0, r8
 1732 0064 4946     		mov	r1, r9
 1733 0066 FFF7FEFF 		bl	__aeabi_dcmplt
 1734              	.LVL193:
 1735 006a 0028     		cmp	r0, #0
 1736 006c 51D1     		bne	.L133
 367:Core/Src/printf.c ****   if (value < 0) {
 1737              		.loc 1 367 3 is_stmt 1 view .LVU418
 1738              	.LVL194:
 368:Core/Src/printf.c ****     negative = true;
 1739              		.loc 1 368 3 view .LVU419
 368:Core/Src/printf.c ****     negative = true;
 1740              		.loc 1 368 6 is_stmt 0 view .LVU420
 1741 006e 0022     		movs	r2, #0
 1742 0070 0023     		movs	r3, #0
 1743 0072 4046     		mov	r0, r8
 1744 0074 4946     		mov	r1, r9
 1745 0076 FFF7FEFF 		bl	__aeabi_dcmplt
 1746              	.LVL195:
 1747 007a 0028     		cmp	r0, #0
 1748 007c 57D1     		bne	.L199
 367:Core/Src/printf.c ****   if (value < 0) {
 1749              		.loc 1 367 8 view .LVU421
 1750 007e 0023     		movs	r3, #0
 1751 0080 0B93     		str	r3, [sp, #44]
 1752              	.LVL196:
 1753              	.L136:
 374:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1754              		.loc 1 374 3 is_stmt 1 view .LVU422
 374:Core/Src/printf.c ****     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 1755              		.loc 1 374 6 is_stmt 0 view .LVU423
 1756 0082 249B     		ldr	r3, [sp, #144]
 1757 0084 13F4806F 		tst	r3, #1024
 1758 0088 5CD0     		beq	.L172
 1759              	.L138:
 1760              	.LVL197:
 375:Core/Src/printf.c ****   }
 1761              		.loc 1 375 10 view .LVU424
 1762 008a 0024     		movs	r4, #0
 1763              	.LVL198:
 1764              	.L140:
 378:Core/Src/printf.c ****     buf[len++] = '0';
 1765              		.loc 1 378 9 is_stmt 1 view .LVU425
 1766 008c 1F2C     		cmp	r4, #31
 1767 008e 5BD8     		bhi	.L141
 378:Core/Src/printf.c ****     buf[len++] = '0';
 1768              		.loc 1 378 42 is_stmt 0 discriminator 1 view .LVU426
 1769 0090 092D     		cmp	r5, #9
 1770 0092 59D9     		bls	.L141
 379:Core/Src/printf.c ****     prec--;
ARM GAS  /tmp/ccDtGku3.s 			page 45


 1771              		.loc 1 379 5 is_stmt 1 view .LVU427
 1772              	.LVL199:
 379:Core/Src/printf.c ****     prec--;
 1773              		.loc 1 379 16 is_stmt 0 view .LVU428
 1774 0094 04F15803 		add	r3, r4, #88
 1775 0098 6B44     		add	r3, sp, r3
 1776 009a 3022     		movs	r2, #48
 1777 009c 03F8202C 		strb	r2, [r3, #-32]
 380:Core/Src/printf.c ****   }
 1778              		.loc 1 380 5 is_stmt 1 view .LVU429
 380:Core/Src/printf.c ****   }
 1779              		.loc 1 380 9 is_stmt 0 view .LVU430
 1780 00a0 013D     		subs	r5, r5, #1
 1781              	.LVL200:
 379:Core/Src/printf.c ****     prec--;
 1782              		.loc 1 379 12 view .LVU431
 1783 00a2 0134     		adds	r4, r4, #1
 1784              	.LVL201:
 379:Core/Src/printf.c ****     prec--;
 1785              		.loc 1 379 12 view .LVU432
 1786 00a4 F2E7     		b	.L140
 1787              	.LVL202:
 1788              	.L196:
 350:Core/Src/printf.c ****   if (value < -DBL_MAX)
 1789              		.loc 1 350 5 is_stmt 1 view .LVU433
 350:Core/Src/printf.c ****   if (value < -DBL_MAX)
 1790              		.loc 1 350 12 is_stmt 0 view .LVU434
 1791 00a6 249B     		ldr	r3, [sp, #144]
 1792 00a8 0393     		str	r3, [sp, #12]
 1793 00aa 239B     		ldr	r3, [sp, #140]
 1794 00ac 0293     		str	r3, [sp, #8]
 1795 00ae 0323     		movs	r3, #3
 1796 00b0 0193     		str	r3, [sp, #4]
 1797 00b2 824B     		ldr	r3, .L201+20
 1798 00b4 0093     		str	r3, [sp]
 1799 00b6 5B46     		mov	r3, fp
 1800 00b8 5246     		mov	r2, r10
 1801 00ba 0A99     		ldr	r1, [sp, #40]
 1802 00bc 0798     		ldr	r0, [sp, #28]
 1803 00be FFF7FEFF 		bl	_out_rev
 1804              	.LVL203:
 1805 00c2 2AE1     		b	.L123
 1806              	.L197:
 352:Core/Src/printf.c ****   if (value > DBL_MAX)
 1807              		.loc 1 352 5 is_stmt 1 view .LVU435
 352:Core/Src/printf.c ****   if (value > DBL_MAX)
 1808              		.loc 1 352 12 is_stmt 0 view .LVU436
 1809 00c4 249B     		ldr	r3, [sp, #144]
 1810 00c6 0393     		str	r3, [sp, #12]
 1811 00c8 239B     		ldr	r3, [sp, #140]
 1812 00ca 0293     		str	r3, [sp, #8]
 1813 00cc 0423     		movs	r3, #4
 1814 00ce 0193     		str	r3, [sp, #4]
 1815 00d0 7B4B     		ldr	r3, .L201+24
 1816 00d2 0093     		str	r3, [sp]
 1817 00d4 5B46     		mov	r3, fp
 1818 00d6 5246     		mov	r2, r10
ARM GAS  /tmp/ccDtGku3.s 			page 46


 1819 00d8 0A99     		ldr	r1, [sp, #40]
 1820 00da 0798     		ldr	r0, [sp, #28]
 1821 00dc FFF7FEFF 		bl	_out_rev
 1822              	.LVL204:
 1823 00e0 1BE1     		b	.L123
 1824              	.L198:
 354:Core/Src/printf.c **** 
 1825              		.loc 1 354 5 is_stmt 1 view .LVU437
 354:Core/Src/printf.c **** 
 1826              		.loc 1 354 12 is_stmt 0 view .LVU438
 1827 00e2 249B     		ldr	r3, [sp, #144]
 1828 00e4 13F00403 		ands	r3, r3, #4
 1829 00e8 0FD0     		beq	.L169
 1830 00ea 764A     		ldr	r2, .L201+28
 1831              	.L131:
 354:Core/Src/printf.c **** 
 1832              		.loc 1 354 12 discriminator 4 view .LVU439
 1833 00ec 7BB1     		cbz	r3, .L170
 354:Core/Src/printf.c **** 
 1834              		.loc 1 354 12 view .LVU440
 1835 00ee 0423     		movs	r3, #4
 1836              	.L132:
 354:Core/Src/printf.c **** 
 1837              		.loc 1 354 12 discriminator 8 view .LVU441
 1838 00f0 2499     		ldr	r1, [sp, #144]
 1839 00f2 0391     		str	r1, [sp, #12]
 1840 00f4 2399     		ldr	r1, [sp, #140]
 1841 00f6 0291     		str	r1, [sp, #8]
 1842 00f8 0193     		str	r3, [sp, #4]
 1843 00fa 0092     		str	r2, [sp]
 1844 00fc 5B46     		mov	r3, fp
 1845 00fe 5246     		mov	r2, r10
 1846 0100 0A99     		ldr	r1, [sp, #40]
 1847 0102 0798     		ldr	r0, [sp, #28]
 1848 0104 FFF7FEFF 		bl	_out_rev
 1849              	.LVL205:
 1850 0108 07E1     		b	.L123
 1851              	.L169:
 354:Core/Src/printf.c **** 
 1852              		.loc 1 354 12 view .LVU442
 1853 010a 6F4A     		ldr	r2, .L201+32
 1854 010c EEE7     		b	.L131
 1855              	.L170:
 1856 010e 0323     		movs	r3, #3
 1857 0110 EEE7     		b	.L132
 1858              	.L133:
 360:Core/Src/printf.c **** #else
 1859              		.loc 1 360 5 is_stmt 1 view .LVU443
 360:Core/Src/printf.c **** #else
 1860              		.loc 1 360 12 is_stmt 0 view .LVU444
 1861 0112 249B     		ldr	r3, [sp, #144]
 1862 0114 0493     		str	r3, [sp, #16]
 1863 0116 239B     		ldr	r3, [sp, #140]
 1864 0118 0393     		str	r3, [sp, #12]
 1865 011a 0295     		str	r5, [sp, #8]
 1866 011c CDE90089 		strd	r8, [sp]
 1867 0120 5B46     		mov	r3, fp
ARM GAS  /tmp/ccDtGku3.s 			page 47


 1868 0122 5246     		mov	r2, r10
 1869 0124 0A99     		ldr	r1, [sp, #40]
 1870 0126 0798     		ldr	r0, [sp, #28]
 1871 0128 FFF7FEFF 		bl	_etoa
 1872              	.LVL206:
 1873 012c F5E0     		b	.L123
 1874              	.LVL207:
 1875              	.L199:
 369:Core/Src/printf.c ****     value = 0 - value;
 1876              		.loc 1 369 5 is_stmt 1 view .LVU445
 370:Core/Src/printf.c ****   }
 1877              		.loc 1 370 5 view .LVU446
 370:Core/Src/printf.c ****   }
 1878              		.loc 1 370 11 is_stmt 0 view .LVU447
 1879 012e 4246     		mov	r2, r8
 1880 0130 4B46     		mov	r3, r9
 1881 0132 0020     		movs	r0, #0
 1882 0134 0021     		movs	r1, #0
 1883 0136 FFF7FEFF 		bl	__aeabi_dsub
 1884              	.LVL208:
 1885 013a 8046     		mov	r8, r0
 1886 013c 8946     		mov	r9, r1
 1887              	.LVL209:
 369:Core/Src/printf.c ****     value = 0 - value;
 1888              		.loc 1 369 14 view .LVU448
 1889 013e 0123     		movs	r3, #1
 1890 0140 0B93     		str	r3, [sp, #44]
 1891 0142 9EE7     		b	.L136
 1892              	.LVL210:
 1893              	.L172:
 375:Core/Src/printf.c ****   }
 1894              		.loc 1 375 10 view .LVU449
 1895 0144 0625     		movs	r5, #6
 1896 0146 A0E7     		b	.L138
 1897              	.LVL211:
 1898              	.L141:
 383:Core/Src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 1899              		.loc 1 383 3 is_stmt 1 view .LVU450
 383:Core/Src/printf.c ****   double tmp = (value - whole) * pow10[prec];
 1900              		.loc 1 383 7 is_stmt 0 view .LVU451
 1901 0148 4046     		mov	r0, r8
 1902 014a 4946     		mov	r1, r9
 1903 014c FFF7FEFF 		bl	__aeabi_d2iz
 1904              	.LVL212:
 1905 0150 0646     		mov	r6, r0
 1906              	.LVL213:
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1907              		.loc 1 384 3 is_stmt 1 view .LVU452
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1908              		.loc 1 384 23 is_stmt 0 view .LVU453
 1909 0152 FFF7FEFF 		bl	__aeabi_i2d
 1910              	.LVL214:
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1911              		.loc 1 384 23 view .LVU454
 1912 0156 0246     		mov	r2, r0
 1913 0158 0B46     		mov	r3, r1
 1914 015a 4046     		mov	r0, r8
ARM GAS  /tmp/ccDtGku3.s 			page 48


 1915 015c 4946     		mov	r1, r9
 1916 015e FFF7FEFF 		bl	__aeabi_dsub
 1917              	.LVL215:
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1918              		.loc 1 384 39 view .LVU455
 1919 0162 5A4B     		ldr	r3, .L201+36
 1920 0164 03EBC503 		add	r3, r3, r5, lsl #3
 1921 0168 D3E90023 		ldrd	r2, [r3]
 384:Core/Src/printf.c ****   unsigned long frac = (unsigned long)tmp;
 1922              		.loc 1 384 10 view .LVU456
 1923 016c CDE90C23 		strd	r2, [sp, #48]
 1924 0170 FFF7FEFF 		bl	__aeabi_dmul
 1925              	.LVL216:
 1926 0174 0246     		mov	r2, r0
 1927 0176 0B46     		mov	r3, r1
 1928 0178 CDE90823 		strd	r2, [sp, #32]
 1929              	.LVL217:
 385:Core/Src/printf.c ****   diff = tmp - frac;
 1930              		.loc 1 385 3 is_stmt 1 view .LVU457
 385:Core/Src/printf.c ****   diff = tmp - frac;
 1931              		.loc 1 385 17 is_stmt 0 view .LVU458
 1932 017c FFF7FEFF 		bl	__aeabi_d2uiz
 1933              	.LVL218:
 385:Core/Src/printf.c ****   diff = tmp - frac;
 1934              		.loc 1 385 17 view .LVU459
 1935 0180 0746     		mov	r7, r0
 1936              	.LVL219:
 386:Core/Src/printf.c **** 
 1937              		.loc 1 386 3 is_stmt 1 view .LVU460
 386:Core/Src/printf.c **** 
 1938              		.loc 1 386 14 is_stmt 0 view .LVU461
 1939 0182 FFF7FEFF 		bl	__aeabi_ui2d
 1940              	.LVL220:
 386:Core/Src/printf.c **** 
 1941              		.loc 1 386 14 view .LVU462
 1942 0186 0246     		mov	r2, r0
 1943 0188 0B46     		mov	r3, r1
 386:Core/Src/printf.c **** 
 1944              		.loc 1 386 8 view .LVU463
 1945 018a DDE90801 		ldrd	r0, [sp, #32]
 1946 018e FFF7FEFF 		bl	__aeabi_dsub
 1947              	.LVL221:
 1948 0192 0246     		mov	r2, r0
 1949 0194 0B46     		mov	r3, r1
 1950 0196 CDE90823 		strd	r2, [sp, #32]
 1951              	.LVL222:
 388:Core/Src/printf.c ****     ++frac;
 1952              		.loc 1 388 3 is_stmt 1 view .LVU464
 388:Core/Src/printf.c ****     ++frac;
 1953              		.loc 1 388 6 is_stmt 0 view .LVU465
 1954 019a 0022     		movs	r2, #0
 1955              	.LVL223:
 388:Core/Src/printf.c ****     ++frac;
 1956              		.loc 1 388 6 view .LVU466
 1957 019c 4C4B     		ldr	r3, .L201+40
 1958 019e FFF7FEFF 		bl	__aeabi_dcmpgt
 1959              	.LVL224:
ARM GAS  /tmp/ccDtGku3.s 			page 49


 1960 01a2 50B3     		cbz	r0, .L187
 389:Core/Src/printf.c ****     // handle rollover, e.g. case 0.99 with prec 1 is 1.0
 1961              		.loc 1 389 5 is_stmt 1 view .LVU467
 1962 01a4 0137     		adds	r7, r7, #1
 1963              	.LVL225:
 391:Core/Src/printf.c ****       frac = 0;
 1964              		.loc 1 391 5 view .LVU468
 391:Core/Src/printf.c ****       frac = 0;
 1965              		.loc 1 391 14 is_stmt 0 view .LVU469
 1966 01a6 3846     		mov	r0, r7
 1967 01a8 FFF7FEFF 		bl	__aeabi_ui2d
 1968              	.LVL226:
 1969 01ac 0246     		mov	r2, r0
 1970 01ae 0B46     		mov	r3, r1
 391:Core/Src/printf.c ****       frac = 0;
 1971              		.loc 1 391 8 view .LVU470
 1972 01b0 DDE90C01 		ldrd	r0, [sp, #48]
 1973 01b4 FFF7FEFF 		bl	__aeabi_dcmple
 1974              	.LVL227:
 1975 01b8 08B1     		cbz	r0, .L145
 392:Core/Src/printf.c ****       ++whole;
 1976              		.loc 1 392 7 is_stmt 1 view .LVU471
 1977              	.LVL228:
 393:Core/Src/printf.c ****     }
 1978              		.loc 1 393 7 view .LVU472
 1979 01ba 0136     		adds	r6, r6, #1
 1980              	.LVL229:
 392:Core/Src/printf.c ****       ++whole;
 1981              		.loc 1 392 12 is_stmt 0 view .LVU473
 1982 01bc 0027     		movs	r7, #0
 1983              	.LVL230:
 1984              	.L145:
 403:Core/Src/printf.c ****     diff = value - (double)whole;
 1985              		.loc 1 403 3 is_stmt 1 view .LVU474
 403:Core/Src/printf.c ****     diff = value - (double)whole;
 1986              		.loc 1 403 6 is_stmt 0 view .LVU475
 1987 01be 55BB     		cbnz	r5, .L148
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 1988              		.loc 1 404 5 is_stmt 1 view .LVU476
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 1989              		.loc 1 404 20 is_stmt 0 view .LVU477
 1990 01c0 3046     		mov	r0, r6
 1991 01c2 FFF7FEFF 		bl	__aeabi_i2d
 1992              	.LVL231:
 1993 01c6 0246     		mov	r2, r0
 1994 01c8 0B46     		mov	r3, r1
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 1995              		.loc 1 404 10 view .LVU478
 1996 01ca 4046     		mov	r0, r8
 1997 01cc 4946     		mov	r1, r9
 1998 01ce FFF7FEFF 		bl	__aeabi_dsub
 1999              	.LVL232:
 2000 01d2 0746     		mov	r7, r0
 2001              	.LVL233:
 404:Core/Src/printf.c ****     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 2002              		.loc 1 404 10 view .LVU479
 2003 01d4 8846     		mov	r8, r1
ARM GAS  /tmp/ccDtGku3.s 			page 50


 2004              	.LVL234:
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2005              		.loc 1 405 5 is_stmt 1 view .LVU480
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2006              		.loc 1 405 8 is_stmt 0 view .LVU481
 2007 01d6 0022     		movs	r2, #0
 2008 01d8 3D4B     		ldr	r3, .L201+40
 2009 01da FFF7FEFF 		bl	__aeabi_dcmplt
 2010              	.LVL235:
 2011 01de 38B1     		cbz	r0, .L149
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2012              		.loc 1 405 24 discriminator 2 view .LVU482
 2013 01e0 0022     		movs	r2, #0
 2014 01e2 3B4B     		ldr	r3, .L201+40
 2015 01e4 3846     		mov	r0, r7
 2016 01e6 4146     		mov	r1, r8
 2017 01e8 FFF7FEFF 		bl	__aeabi_dcmpgt
 2018              	.LVL236:
 2019 01ec 0028     		cmp	r0, #0
 2020 01ee 42D0     		beq	.L159
 2021              	.L149:
 405:Core/Src/printf.c ****       // exactly 0.5 and ODD, then round up
 2022              		.loc 1 405 41 discriminator 3 view .LVU483
 2023 01f0 16F0010F 		tst	r6, #1
 2024 01f4 3FD0     		beq	.L159
 408:Core/Src/printf.c ****     }
 2025              		.loc 1 408 7 is_stmt 1 view .LVU484
 2026 01f6 0136     		adds	r6, r6, #1
 2027              	.LVL237:
 408:Core/Src/printf.c ****     }
 2028              		.loc 1 408 7 is_stmt 0 view .LVU485
 2029 01f8 3DE0     		b	.L159
 2030              	.LVL238:
 2031              	.L187:
 396:Core/Src/printf.c ****   }
 2032              		.loc 1 396 8 is_stmt 1 view .LVU486
 396:Core/Src/printf.c ****   }
 2033              		.loc 1 396 11 is_stmt 0 view .LVU487
 2034 01fa 0022     		movs	r2, #0
 2035 01fc 344B     		ldr	r3, .L201+40
 2036 01fe DDE90801 		ldrd	r0, [sp, #32]
 2037 0202 FFF7FEFF 		bl	__aeabi_dcmplt
 2038              	.LVL239:
 2039 0206 0028     		cmp	r0, #0
 2040 0208 D9D1     		bne	.L145
 398:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 2041              		.loc 1 398 8 is_stmt 1 view .LVU488
 398:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 2042              		.loc 1 398 11 is_stmt 0 view .LVU489
 2043 020a 17B1     		cbz	r7, .L147
 398:Core/Src/printf.c ****     // if halfway, round up if odd OR if last digit is 0
 2044              		.loc 1 398 25 discriminator 1 view .LVU490
 2045 020c 17F0010F 		tst	r7, #1
 2046 0210 D5D0     		beq	.L145
 2047              	.L147:
 400:Core/Src/printf.c ****   }
 2048              		.loc 1 400 5 is_stmt 1 view .LVU491
ARM GAS  /tmp/ccDtGku3.s 			page 51


 2049 0212 0137     		adds	r7, r7, #1
 2050              	.LVL240:
 400:Core/Src/printf.c ****   }
 2051              		.loc 1 400 5 is_stmt 0 view .LVU492
 2052 0214 D3E7     		b	.L145
 2053              	.LVL241:
 2054              	.L148:
 2055              	.LBB30:
 414:Core/Src/printf.c ****       --count;
 2056              		.loc 1 414 11 is_stmt 1 view .LVU493
 2057 0216 1F2C     		cmp	r4, #31
 2058 0218 17D8     		bhi	.L155
 415:Core/Src/printf.c ****       buf[len++] = (char)(48U + (frac % 10U));
 2059              		.loc 1 415 7 view .LVU494
 2060 021a 013D     		subs	r5, r5, #1
 2061              	.LVL242:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2062              		.loc 1 416 7 view .LVU495
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2063              		.loc 1 416 39 is_stmt 0 view .LVU496
 2064 021c 2D4B     		ldr	r3, .L201+44
 2065 021e A3FB0723 		umull	r2, r3, r3, r7
 2066 0222 DB08     		lsrs	r3, r3, #3
 2067 0224 1946     		mov	r1, r3
 2068 0226 03EB8303 		add	r3, r3, r3, lsl #2
 2069 022a A7EB4303 		sub	r3, r7, r3, lsl #1
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2070              		.loc 1 416 14 view .LVU497
 2071 022e 621C     		adds	r2, r4, #1
 2072              	.LVL243:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2073              		.loc 1 416 20 view .LVU498
 2074 0230 3033     		adds	r3, r3, #48
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2075              		.loc 1 416 18 view .LVU499
 2076 0232 04F15800 		add	r0, r4, #88
 2077 0236 0DEB0004 		add	r4, sp, r0
 2078 023a 04F8203C 		strb	r3, [r4, #-32]
 417:Core/Src/printf.c ****         break;
 2079              		.loc 1 417 7 is_stmt 1 view .LVU500
 2080              	.LVL244:
 417:Core/Src/printf.c ****         break;
 2081              		.loc 1 417 10 is_stmt 0 view .LVU501
 2082 023e 092F     		cmp	r7, #9
 2083 0240 02D9     		bls	.L173
 417:Core/Src/printf.c ****         break;
 2084              		.loc 1 417 18 view .LVU502
 2085 0242 0F46     		mov	r7, r1
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2086              		.loc 1 416 14 view .LVU503
 2087 0244 1446     		mov	r4, r2
 2088 0246 E6E7     		b	.L148
 2089              	.L173:
 416:Core/Src/printf.c ****       if (!(frac /= 10U)) {
 2090              		.loc 1 416 14 view .LVU504
 2091 0248 1446     		mov	r4, r2
 2092              	.LVL245:
ARM GAS  /tmp/ccDtGku3.s 			page 52


 2093              	.L155:
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2094              		.loc 1 422 11 is_stmt 1 view .LVU505
 2095 024a 1F2C     		cmp	r4, #31
 2096 024c 0AD8     		bhi	.L156
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2097              		.loc 1 422 53 is_stmt 0 discriminator 1 view .LVU506
 2098 024e 6B1E     		subs	r3, r5, #1
 2099              	.LVL246:
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2100              		.loc 1 422 44 discriminator 1 view .LVU507
 2101 0250 45B1     		cbz	r5, .L156
 423:Core/Src/printf.c ****     }
 2102              		.loc 1 423 7 is_stmt 1 view .LVU508
 2103              	.LVL247:
 423:Core/Src/printf.c ****     }
 2104              		.loc 1 423 18 is_stmt 0 view .LVU509
 2105 0252 04F15802 		add	r2, r4, #88
 2106 0256 6A44     		add	r2, sp, r2
 2107 0258 3021     		movs	r1, #48
 2108 025a 02F8201C 		strb	r1, [r2, #-32]
 422:Core/Src/printf.c ****       buf[len++] = '0';
 2109              		.loc 1 422 53 view .LVU510
 2110 025e 1D46     		mov	r5, r3
 423:Core/Src/printf.c ****     }
 2111              		.loc 1 423 14 view .LVU511
 2112 0260 0134     		adds	r4, r4, #1
 2113              	.LVL248:
 423:Core/Src/printf.c ****     }
 2114              		.loc 1 423 14 view .LVU512
 2115 0262 F2E7     		b	.L155
 2116              	.LVL249:
 2117              	.L156:
 425:Core/Src/printf.c ****       // add decimal
 2118              		.loc 1 425 5 is_stmt 1 view .LVU513
 425:Core/Src/printf.c ****       // add decimal
 2119              		.loc 1 425 8 is_stmt 0 view .LVU514
 2120 0264 1F2C     		cmp	r4, #31
 2121 0266 06D8     		bhi	.L159
 427:Core/Src/printf.c ****     }
 2122              		.loc 1 427 7 is_stmt 1 view .LVU515
 2123              	.LVL250:
 427:Core/Src/printf.c ****     }
 2124              		.loc 1 427 18 is_stmt 0 view .LVU516
 2125 0268 04F15803 		add	r3, r4, #88
 2126 026c 6B44     		add	r3, sp, r3
 2127 026e 2E22     		movs	r2, #46
 2128 0270 03F8202C 		strb	r2, [r3, #-32]
 427:Core/Src/printf.c ****     }
 2129              		.loc 1 427 14 view .LVU517
 2130 0274 0134     		adds	r4, r4, #1
 2131              	.LVL251:
 2132              	.L159:
 427:Core/Src/printf.c ****     }
 2133              		.loc 1 427 14 view .LVU518
 2134              	.LBE30:
 432:Core/Src/printf.c ****     buf[len++] = (char)(48 + (whole % 10));
ARM GAS  /tmp/ccDtGku3.s 			page 53


 2135              		.loc 1 432 9 is_stmt 1 view .LVU519
 2136 0276 1F2C     		cmp	r4, #31
 2137 0278 31D8     		bhi	.L158
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2138              		.loc 1 433 5 view .LVU520
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2139              		.loc 1 433 37 is_stmt 0 view .LVU521
 2140 027a 174A     		ldr	r2, .L201+48
 2141 027c 82FB0632 		smull	r3, r2, r2, r6
 2142 0280 F317     		asrs	r3, r6, #31
 2143 0282 C3EBA203 		rsb	r3, r3, r2, asr #2
 2144 0286 1A46     		mov	r2, r3
 2145 0288 03EB8303 		add	r3, r3, r3, lsl #2
 2146 028c A6EB4303 		sub	r3, r6, r3, lsl #1
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2147              		.loc 1 433 12 view .LVU522
 2148 0290 611C     		adds	r1, r4, #1
 2149              	.LVL252:
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2150              		.loc 1 433 18 view .LVU523
 2151 0292 3033     		adds	r3, r3, #48
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2152              		.loc 1 433 16 view .LVU524
 2153 0294 04F15800 		add	r0, r4, #88
 2154 0298 0DEB0004 		add	r4, sp, r0
 2155 029c 04F8203C 		strb	r3, [r4, #-32]
 434:Core/Src/printf.c ****       break;
 2156              		.loc 1 434 5 is_stmt 1 view .LVU525
 434:Core/Src/printf.c ****       break;
 2157              		.loc 1 434 17 is_stmt 0 view .LVU526
 2158 02a0 1646     		mov	r6, r2
 2159              	.LVL253:
 434:Core/Src/printf.c ****       break;
 2160              		.loc 1 434 8 view .LVU527
 2161 02a2 DAB1     		cbz	r2, .L174
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
 2162              		.loc 1 433 12 view .LVU528
 2163 02a4 0C46     		mov	r4, r1
 2164 02a6 E6E7     		b	.L159
 2165              	.L202:
 2166              		.align	3
 2167              	.L201:
 2168 02a8 00000000 		.word	0
 2169 02ac 65CDCD41 		.word	1104006501
 2170 02b0 00000000 		.word	0
 2171 02b4 65CDCDC1 		.word	-1043477147
 2172 02b8 FFFFEF7F 		.word	2146435071
 2173 02bc 0C000000 		.word	.LC2
 2174 02c0 10000000 		.word	.LC3
 2175 02c4 04000000 		.word	.LC1
 2176 02c8 00000000 		.word	.LC0
 2177 02cc 00000000 		.word	.LANCHOR0
 2178 02d0 0000E03F 		.word	1071644672
 2179 02d4 CDCCCCCC 		.word	-858993459
 2180 02d8 67666666 		.word	1717986919
 2181              	.L174:
 433:Core/Src/printf.c ****     if (!(whole /= 10)) {
ARM GAS  /tmp/ccDtGku3.s 			page 54


 2182              		.loc 1 433 12 view .LVU529
 2183 02dc 0C46     		mov	r4, r1
 2184              	.LVL254:
 2185              	.L158:
 440:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2186              		.loc 1 440 3 is_stmt 1 view .LVU530
 440:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2187              		.loc 1 440 29 is_stmt 0 view .LVU531
 2188 02de 249B     		ldr	r3, [sp, #144]
 2189 02e0 03F00303 		and	r3, r3, #3
 440:Core/Src/printf.c ****     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 2190              		.loc 1 440 6 view .LVU532
 2191 02e4 012B     		cmp	r3, #1
 2192 02e6 1BD0     		beq	.L200
 2193              	.LVL255:
 2194              	.L161:
 449:Core/Src/printf.c ****     if (negative) {
 2195              		.loc 1 449 3 is_stmt 1 view .LVU533
 449:Core/Src/printf.c ****     if (negative) {
 2196              		.loc 1 449 6 is_stmt 0 view .LVU534
 2197 02e8 1F2C     		cmp	r4, #31
 2198 02ea 09D8     		bhi	.L166
 450:Core/Src/printf.c ****       buf[len++] = '-';
 2199              		.loc 1 450 5 is_stmt 1 view .LVU535
 450:Core/Src/printf.c ****       buf[len++] = '-';
 2200              		.loc 1 450 8 is_stmt 0 view .LVU536
 2201 02ec 0B9B     		ldr	r3, [sp, #44]
 2202 02ee 002B     		cmp	r3, #0
 2203 02f0 33D0     		beq	.L167
 451:Core/Src/printf.c ****     }
 2204              		.loc 1 451 7 is_stmt 1 view .LVU537
 2205              	.LVL256:
 451:Core/Src/printf.c ****     }
 2206              		.loc 1 451 18 is_stmt 0 view .LVU538
 2207 02f2 04F15803 		add	r3, r4, #88
 2208 02f6 6B44     		add	r3, sp, r3
 2209 02f8 2D22     		movs	r2, #45
 2210 02fa 03F8202C 		strb	r2, [r3, #-32]
 451:Core/Src/printf.c ****     }
 2211              		.loc 1 451 14 view .LVU539
 2212 02fe 0134     		adds	r4, r4, #1
 2213              	.LVL257:
 2214              	.L166:
 461:Core/Src/printf.c **** }
 2215              		.loc 1 461 3 is_stmt 1 view .LVU540
 461:Core/Src/printf.c **** }
 2216              		.loc 1 461 10 is_stmt 0 view .LVU541
 2217 0300 249B     		ldr	r3, [sp, #144]
 2218 0302 0393     		str	r3, [sp, #12]
 2219 0304 239B     		ldr	r3, [sp, #140]
 2220 0306 0293     		str	r3, [sp, #8]
 2221 0308 0194     		str	r4, [sp, #4]
 2222 030a 0EAB     		add	r3, sp, #56
 2223 030c 0093     		str	r3, [sp]
 2224 030e 5B46     		mov	r3, fp
 2225 0310 5246     		mov	r2, r10
 2226 0312 0A99     		ldr	r1, [sp, #40]
ARM GAS  /tmp/ccDtGku3.s 			page 55


 2227 0314 0798     		ldr	r0, [sp, #28]
 2228 0316 FFF7FEFF 		bl	_out_rev
 2229              	.LVL258:
 2230              	.L123:
 462:Core/Src/printf.c **** 
 2231              		.loc 1 462 1 view .LVU542
 2232 031a 17B0     		add	sp, sp, #92
 2233              	.LCFI22:
 2234              		.cfi_remember_state
 2235              		.cfi_def_cfa_offset 36
 2236              		@ sp needed
 2237 031c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2238              	.LVL259:
 2239              	.L200:
 2240              	.LCFI23:
 2241              		.cfi_restore_state
 441:Core/Src/printf.c ****       width--;
 2242              		.loc 1 441 5 is_stmt 1 view .LVU543
 441:Core/Src/printf.c ****       width--;
 2243              		.loc 1 441 8 is_stmt 0 view .LVU544
 2244 0320 239B     		ldr	r3, [sp, #140]
 2245 0322 B3B1     		cbz	r3, .L192
 441:Core/Src/printf.c ****       width--;
 2246              		.loc 1 441 15 discriminator 1 view .LVU545
 2247 0324 0B9B     		ldr	r3, [sp, #44]
 2248 0326 1BB9     		cbnz	r3, .L163
 441:Core/Src/printf.c ****       width--;
 2249              		.loc 1 441 28 discriminator 2 view .LVU546
 2250 0328 249B     		ldr	r3, [sp, #144]
 2251 032a 13F00C0F 		tst	r3, #12
 2252 032e 12D0     		beq	.L193
 2253              	.L163:
 442:Core/Src/printf.c ****     }
 2254              		.loc 1 442 7 is_stmt 1 view .LVU547
 442:Core/Src/printf.c ****     }
 2255              		.loc 1 442 12 is_stmt 0 view .LVU548
 2256 0330 239B     		ldr	r3, [sp, #140]
 2257 0332 013B     		subs	r3, r3, #1
 2258 0334 2393     		str	r3, [sp, #140]
 2259              	.LVL260:
 442:Core/Src/printf.c ****     }
 2260              		.loc 1 442 12 view .LVU549
 2261 0336 1946     		mov	r1, r3
 2262 0338 06E0     		b	.L164
 2263              	.LVL261:
 2264              	.L165:
 445:Core/Src/printf.c ****     }
 2265              		.loc 1 445 7 is_stmt 1 view .LVU550
 445:Core/Src/printf.c ****     }
 2266              		.loc 1 445 18 is_stmt 0 view .LVU551
 2267 033a 04F15803 		add	r3, r4, #88
 2268 033e 6B44     		add	r3, sp, r3
 2269 0340 3022     		movs	r2, #48
 2270 0342 03F8202C 		strb	r2, [r3, #-32]
 445:Core/Src/printf.c ****     }
 2271              		.loc 1 445 14 view .LVU552
 2272 0346 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccDtGku3.s 			page 56


 2273              	.LVL262:
 2274              	.L164:
 444:Core/Src/printf.c ****       buf[len++] = '0';
 2275              		.loc 1 444 11 is_stmt 1 view .LVU553
 2276 0348 8C42     		cmp	r4, r1
 2277 034a CDD2     		bcs	.L161
 444:Core/Src/printf.c ****       buf[len++] = '0';
 2278              		.loc 1 444 26 is_stmt 0 discriminator 1 view .LVU554
 2279 034c 1F2C     		cmp	r4, #31
 2280 034e F4D9     		bls	.L165
 2281 0350 CAE7     		b	.L161
 2282              	.LVL263:
 2283              	.L192:
 444:Core/Src/printf.c ****       buf[len++] = '0';
 2284              		.loc 1 444 26 discriminator 1 view .LVU555
 2285 0352 2399     		ldr	r1, [sp, #140]
 2286 0354 F8E7     		b	.L164
 2287              	.L193:
 2288 0356 2399     		ldr	r1, [sp, #140]
 2289 0358 F6E7     		b	.L164
 2290              	.L167:
 453:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2291              		.loc 1 453 10 is_stmt 1 view .LVU556
 453:Core/Src/printf.c ****       buf[len++] = '+';  // ignore the space if the '+' exists
 2292              		.loc 1 453 13 is_stmt 0 view .LVU557
 2293 035a 249B     		ldr	r3, [sp, #144]
 2294 035c 13F0040F 		tst	r3, #4
 2295 0360 07D0     		beq	.L168
 454:Core/Src/printf.c ****     }
 2296              		.loc 1 454 7 is_stmt 1 view .LVU558
 2297              	.LVL264:
 454:Core/Src/printf.c ****     }
 2298              		.loc 1 454 18 is_stmt 0 view .LVU559
 2299 0362 04F15803 		add	r3, r4, #88
 2300 0366 6B44     		add	r3, sp, r3
 2301 0368 2B22     		movs	r2, #43
 2302 036a 03F8202C 		strb	r2, [r3, #-32]
 454:Core/Src/printf.c ****     }
 2303              		.loc 1 454 14 view .LVU560
 2304 036e 0134     		adds	r4, r4, #1
 2305              	.LVL265:
 454:Core/Src/printf.c ****     }
 2306              		.loc 1 454 14 view .LVU561
 2307 0370 C6E7     		b	.L166
 2308              	.L168:
 456:Core/Src/printf.c ****       buf[len++] = ' ';
 2309              		.loc 1 456 10 is_stmt 1 view .LVU562
 456:Core/Src/printf.c ****       buf[len++] = ' ';
 2310              		.loc 1 456 13 is_stmt 0 view .LVU563
 2311 0372 249B     		ldr	r3, [sp, #144]
 2312 0374 13F0080F 		tst	r3, #8
 2313 0378 C2D0     		beq	.L166
 457:Core/Src/printf.c ****     }
 2314              		.loc 1 457 7 is_stmt 1 view .LVU564
 2315              	.LVL266:
 457:Core/Src/printf.c ****     }
 2316              		.loc 1 457 18 is_stmt 0 view .LVU565
ARM GAS  /tmp/ccDtGku3.s 			page 57


 2317 037a 04F15803 		add	r3, r4, #88
 2318 037e 6B44     		add	r3, sp, r3
 2319 0380 2022     		movs	r2, #32
 2320 0382 03F8202C 		strb	r2, [r3, #-32]
 457:Core/Src/printf.c ****     }
 2321              		.loc 1 457 14 view .LVU566
 2322 0386 0134     		adds	r4, r4, #1
 2323              	.LVL267:
 457:Core/Src/printf.c ****     }
 2324              		.loc 1 457 14 view .LVU567
 2325 0388 BAE7     		b	.L166
 2326              		.cfi_endproc
 2327              	.LFE11:
 2329 038a 00BF     		.section	.text._vsnprintf,"ax",%progbits
 2330              		.align	1
 2331              		.syntax unified
 2332              		.thumb
 2333              		.thumb_func
 2334              		.fpu softvfp
 2336              	_vsnprintf:
 2337              	.LVL268:
 2338              	.LFB13:
 572:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 573:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 574:Core/Src/printf.c **** 
 575:Core/Src/printf.c **** 
 576:Core/Src/printf.c **** // internal vsnprintf
 577:Core/Src/printf.c **** static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_l
 578:Core/Src/printf.c **** {
 2339              		.loc 1 578 1 is_stmt 1 view -0
 2340              		.cfi_startproc
 2341              		@ args = 4, pretend = 0, frame = 16
 2342              		@ frame_needed = 0, uses_anonymous_args = 0
 2343              		.loc 1 578 1 is_stmt 0 view .LVU569
 2344 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2345              	.LCFI24:
 2346              		.cfi_def_cfa_offset 36
 2347              		.cfi_offset 4, -36
 2348              		.cfi_offset 5, -32
 2349              		.cfi_offset 6, -28
 2350              		.cfi_offset 7, -24
 2351              		.cfi_offset 8, -20
 2352              		.cfi_offset 9, -16
 2353              		.cfi_offset 10, -12
 2354              		.cfi_offset 11, -8
 2355              		.cfi_offset 14, -4
 2356 0004 8FB0     		sub	sp, sp, #60
 2357              	.LCFI25:
 2358              		.cfi_def_cfa_offset 96
 2359 0006 0746     		mov	r7, r0
 2360 0008 1646     		mov	r6, r2
 2361 000a 0D93     		str	r3, [sp, #52]
 579:Core/Src/printf.c ****   unsigned int flags, width, precision, n;
 2362              		.loc 1 579 3 is_stmt 1 view .LVU570
 580:Core/Src/printf.c ****   size_t idx = 0U;
 2363              		.loc 1 580 3 view .LVU571
 2364              	.LVL269:
ARM GAS  /tmp/ccDtGku3.s 			page 58


 581:Core/Src/printf.c **** 
 582:Core/Src/printf.c ****   if (!buffer) {
 2365              		.loc 1 582 3 view .LVU572
 2366              		.loc 1 582 6 is_stmt 0 view .LVU573
 2367 000c 8846     		mov	r8, r1
 2368 000e 0029     		cmp	r1, #0
 2369 0010 00F02383 		beq	.L303
 2370              	.L204:
 2371              	.LVL270:
 2372              	.LBB31:
 583:Core/Src/printf.c ****     // use null output function
 584:Core/Src/printf.c ****     out = _out_null;
 585:Core/Src/printf.c ****   }
 586:Core/Src/printf.c **** 
 587:Core/Src/printf.c ****   while (*format)
 588:Core/Src/printf.c ****   {
 589:Core/Src/printf.c ****     // format specifier?  %[flags][width][.precision][length]
 590:Core/Src/printf.c ****     if (*format != '%') {
 591:Core/Src/printf.c ****       // no
 592:Core/Src/printf.c ****       out(*format, buffer, idx++, maxlen);
 593:Core/Src/printf.c ****       format++;
 594:Core/Src/printf.c ****       continue;
 595:Core/Src/printf.c ****     }
 596:Core/Src/printf.c ****     else {
 597:Core/Src/printf.c ****       // yes, evaluate it
 598:Core/Src/printf.c ****       format++;
 599:Core/Src/printf.c ****     }
 600:Core/Src/printf.c **** 
 601:Core/Src/printf.c ****     // evaluate flags
 602:Core/Src/printf.c ****     flags = 0U;
 603:Core/Src/printf.c ****     do {
 604:Core/Src/printf.c ****       switch (*format) {
 605:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 606:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 607:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 608:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 609:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 610:Core/Src/printf.c ****         default :                                   n = 0U; break;
 611:Core/Src/printf.c ****       }
 612:Core/Src/printf.c ****     } while (n);
 613:Core/Src/printf.c **** 
 614:Core/Src/printf.c ****     // evaluate width field
 615:Core/Src/printf.c ****     width = 0U;
 616:Core/Src/printf.c ****     if (_is_digit(*format)) {
 617:Core/Src/printf.c ****       width = _atoi(&format);
 618:Core/Src/printf.c ****     }
 619:Core/Src/printf.c ****     else if (*format == '*') {
 620:Core/Src/printf.c ****       const int w = va_arg(va, int);
 621:Core/Src/printf.c ****       if (w < 0) {
 622:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 623:Core/Src/printf.c ****         width = (unsigned int)-w;
 624:Core/Src/printf.c ****       }
 625:Core/Src/printf.c ****       else {
 626:Core/Src/printf.c ****         width = (unsigned int)w;
 627:Core/Src/printf.c ****       }
 628:Core/Src/printf.c ****       format++;
 629:Core/Src/printf.c ****     }
ARM GAS  /tmp/ccDtGku3.s 			page 59


 630:Core/Src/printf.c **** 
 631:Core/Src/printf.c ****     // evaluate precision field
 632:Core/Src/printf.c ****     precision = 0U;
 633:Core/Src/printf.c ****     if (*format == '.') {
 634:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 635:Core/Src/printf.c ****       format++;
 636:Core/Src/printf.c ****       if (_is_digit(*format)) {
 637:Core/Src/printf.c ****         precision = _atoi(&format);
 638:Core/Src/printf.c ****       }
 639:Core/Src/printf.c ****       else if (*format == '*') {
 640:Core/Src/printf.c ****         const int prec = (int)va_arg(va, int);
 641:Core/Src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 642:Core/Src/printf.c ****         format++;
 643:Core/Src/printf.c ****       }
 644:Core/Src/printf.c ****     }
 645:Core/Src/printf.c **** 
 646:Core/Src/printf.c ****     // evaluate length field
 647:Core/Src/printf.c ****     switch (*format) {
 648:Core/Src/printf.c ****       case 'l' :
 649:Core/Src/printf.c ****         flags |= FLAGS_LONG;
 650:Core/Src/printf.c ****         format++;
 651:Core/Src/printf.c ****         if (*format == 'l') {
 652:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 653:Core/Src/printf.c ****           format++;
 654:Core/Src/printf.c ****         }
 655:Core/Src/printf.c ****         break;
 656:Core/Src/printf.c ****       case 'h' :
 657:Core/Src/printf.c ****         flags |= FLAGS_SHORT;
 658:Core/Src/printf.c ****         format++;
 659:Core/Src/printf.c ****         if (*format == 'h') {
 660:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 661:Core/Src/printf.c ****           format++;
 662:Core/Src/printf.c ****         }
 663:Core/Src/printf.c ****         break;
 664:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_PTRDIFF_T)
 665:Core/Src/printf.c ****       case 't' :
 666:Core/Src/printf.c ****         flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 667:Core/Src/printf.c ****         format++;
 668:Core/Src/printf.c ****         break;
 669:Core/Src/printf.c **** #endif
 670:Core/Src/printf.c ****       case 'j' :
 671:Core/Src/printf.c ****         flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 672:Core/Src/printf.c ****         format++;
 673:Core/Src/printf.c ****         break;
 674:Core/Src/printf.c ****       case 'z' :
 675:Core/Src/printf.c ****         flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 676:Core/Src/printf.c ****         format++;
 677:Core/Src/printf.c ****         break;
 678:Core/Src/printf.c ****       default :
 679:Core/Src/printf.c ****         break;
 680:Core/Src/printf.c ****     }
 681:Core/Src/printf.c **** 
 682:Core/Src/printf.c ****     // evaluate specifier
 683:Core/Src/printf.c ****     switch (*format) {
 684:Core/Src/printf.c ****       case 'd' :
 685:Core/Src/printf.c ****       case 'i' :
 686:Core/Src/printf.c ****       case 'u' :
ARM GAS  /tmp/ccDtGku3.s 			page 60


 687:Core/Src/printf.c ****       case 'x' :
 688:Core/Src/printf.c ****       case 'X' :
 689:Core/Src/printf.c ****       case 'o' :
 690:Core/Src/printf.c ****       case 'b' : {
 691:Core/Src/printf.c ****         // set the base
 692:Core/Src/printf.c ****         unsigned int base;
 693:Core/Src/printf.c ****         if (*format == 'x' || *format == 'X') {
 694:Core/Src/printf.c ****           base = 16U;
 695:Core/Src/printf.c ****         }
 696:Core/Src/printf.c ****         else if (*format == 'o') {
 697:Core/Src/printf.c ****           base =  8U;
 698:Core/Src/printf.c ****         }
 699:Core/Src/printf.c ****         else if (*format == 'b') {
 700:Core/Src/printf.c ****           base =  2U;
 701:Core/Src/printf.c ****         }
 702:Core/Src/printf.c ****         else {
 703:Core/Src/printf.c ****           base = 10U;
 704:Core/Src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 705:Core/Src/printf.c ****         }
 706:Core/Src/printf.c ****         // uppercase
 707:Core/Src/printf.c ****         if (*format == 'X') {
 708:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 709:Core/Src/printf.c ****         }
 710:Core/Src/printf.c **** 
 711:Core/Src/printf.c ****         // no plus or space flag for u, x, X, o, b
 712:Core/Src/printf.c ****         if ((*format != 'i') && (*format != 'd')) {
 713:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 714:Core/Src/printf.c ****         }
 715:Core/Src/printf.c **** 
 716:Core/Src/printf.c ****         // ignore '0' flag when precision is given
 717:Core/Src/printf.c ****         if (flags & FLAGS_PRECISION) {
 718:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 719:Core/Src/printf.c ****         }
 720:Core/Src/printf.c **** 
 721:Core/Src/printf.c ****         // convert the integer
 722:Core/Src/printf.c ****         if ((*format == 'i') || (*format == 'd')) {
 723:Core/Src/printf.c ****           // signed
 724:Core/Src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 725:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 726:Core/Src/printf.c ****             const long long value = va_arg(va, long long);
 727:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 728:Core/Src/printf.c **** #endif
 729:Core/Src/printf.c ****           }
 730:Core/Src/printf.c ****           else if (flags & FLAGS_LONG) {
 731:Core/Src/printf.c ****             const long value = va_arg(va, long);
 732:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 733:Core/Src/printf.c ****           }
 734:Core/Src/printf.c ****           else {
 735:Core/Src/printf.c ****             const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) 
 736:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 737:Core/Src/printf.c ****           }
 738:Core/Src/printf.c ****         }
 739:Core/Src/printf.c ****         else {
 740:Core/Src/printf.c ****           // unsigned
 741:Core/Src/printf.c ****           if (flags & FLAGS_LONG_LONG) {
 742:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 743:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, 
ARM GAS  /tmp/ccDtGku3.s 			page 61


 744:Core/Src/printf.c **** #endif
 745:Core/Src/printf.c ****           }
 746:Core/Src/printf.c ****           else if (flags & FLAGS_LONG) {
 747:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 748:Core/Src/printf.c ****           }
 749:Core/Src/printf.c ****           else {
 750:Core/Src/printf.c ****             const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned in
 751:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 752:Core/Src/printf.c ****           }
 753:Core/Src/printf.c ****         }
 754:Core/Src/printf.c ****         format++;
 755:Core/Src/printf.c ****         break;
 756:Core/Src/printf.c ****       }
 757:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_FLOAT)
 758:Core/Src/printf.c ****       case 'f' :
 759:Core/Src/printf.c ****       case 'F' :
 760:Core/Src/printf.c ****         if (*format == 'F') flags |= FLAGS_UPPERCASE;
 761:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 762:Core/Src/printf.c ****         format++;
 763:Core/Src/printf.c ****         break;
 764:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 765:Core/Src/printf.c ****       case 'e':
 766:Core/Src/printf.c ****       case 'E':
 767:Core/Src/printf.c ****       case 'g':
 768:Core/Src/printf.c ****       case 'G':
 769:Core/Src/printf.c ****         if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 770:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 771:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 772:Core/Src/printf.c ****         format++;
 773:Core/Src/printf.c ****         break;
 774:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 775:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_FLOAT
 776:Core/Src/printf.c ****       case 'c' : {
 777:Core/Src/printf.c ****         unsigned int l = 1U;
 778:Core/Src/printf.c ****         // pre padding
 779:Core/Src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
 780:Core/Src/printf.c ****           while (l++ < width) {
 781:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 782:Core/Src/printf.c ****           }
 783:Core/Src/printf.c ****         }
 784:Core/Src/printf.c ****         // char output
 785:Core/Src/printf.c ****         out((char)va_arg(va, int), buffer, idx++, maxlen);
 786:Core/Src/printf.c ****         // post padding
 787:Core/Src/printf.c ****         if (flags & FLAGS_LEFT) {
 788:Core/Src/printf.c ****           while (l++ < width) {
 789:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 790:Core/Src/printf.c ****           }
 791:Core/Src/printf.c ****         }
 792:Core/Src/printf.c ****         format++;
 793:Core/Src/printf.c ****         break;
 2373              		.loc 1 793 9 view .LVU574
 2374 0014 0024     		movs	r4, #0
 2375              	.LVL271:
 2376              	.L284:
 2377              		.loc 1 793 9 view .LVU575
 2378              	.LBE31:
 587:Core/Src/printf.c ****   {
ARM GAS  /tmp/ccDtGku3.s 			page 62


 2379              		.loc 1 587 9 is_stmt 1 view .LVU576
 587:Core/Src/printf.c ****   {
 2380              		.loc 1 587 10 is_stmt 0 view .LVU577
 2381 0016 0D9B     		ldr	r3, [sp, #52]
 2382 0018 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 587:Core/Src/printf.c ****   {
 2383              		.loc 1 587 9 view .LVU578
 2384 001a 0028     		cmp	r0, #0
 2385 001c 00F01F83 		beq	.L304
 590:Core/Src/printf.c ****       // no
 2386              		.loc 1 590 5 is_stmt 1 view .LVU579
 590:Core/Src/printf.c ****       // no
 2387              		.loc 1 590 8 is_stmt 0 view .LVU580
 2388 0020 2528     		cmp	r0, #37
 2389 0022 09D0     		beq	.L206
 592:Core/Src/printf.c ****       format++;
 2390              		.loc 1 592 7 is_stmt 1 view .LVU581
 2391 0024 651C     		adds	r5, r4, #1
 2392              	.LVL272:
 592:Core/Src/printf.c ****       format++;
 2393              		.loc 1 592 7 is_stmt 0 view .LVU582
 2394 0026 3346     		mov	r3, r6
 2395 0028 2246     		mov	r2, r4
 2396 002a 4146     		mov	r1, r8
 2397 002c B847     		blx	r7
 2398              	.LVL273:
 593:Core/Src/printf.c ****       continue;
 2399              		.loc 1 593 7 is_stmt 1 view .LVU583
 593:Core/Src/printf.c ****       continue;
 2400              		.loc 1 593 13 is_stmt 0 view .LVU584
 2401 002e 0D9B     		ldr	r3, [sp, #52]
 2402 0030 0133     		adds	r3, r3, #1
 2403 0032 0D93     		str	r3, [sp, #52]
 594:Core/Src/printf.c ****     }
 2404              		.loc 1 594 7 is_stmt 1 view .LVU585
 592:Core/Src/printf.c ****       format++;
 2405              		.loc 1 592 7 is_stmt 0 view .LVU586
 2406 0034 2C46     		mov	r4, r5
 594:Core/Src/printf.c ****     }
 2407              		.loc 1 594 7 view .LVU587
 2408 0036 EEE7     		b	.L284
 2409              	.LVL274:
 2410              	.L206:
 598:Core/Src/printf.c ****     }
 2411              		.loc 1 598 7 is_stmt 1 view .LVU588
 598:Core/Src/printf.c ****     }
 2412              		.loc 1 598 13 is_stmt 0 view .LVU589
 2413 0038 0133     		adds	r3, r3, #1
 2414 003a 0D93     		str	r3, [sp, #52]
 602:Core/Src/printf.c ****     do {
 2415              		.loc 1 602 5 is_stmt 1 view .LVU590
 2416              	.LVL275:
 602:Core/Src/printf.c ****     do {
 2417              		.loc 1 602 11 is_stmt 0 view .LVU591
 2418 003c 0025     		movs	r5, #0
 2419              	.LVL276:
 2420              	.L208:
ARM GAS  /tmp/ccDtGku3.s 			page 63


 603:Core/Src/printf.c ****       switch (*format) {
 2421              		.loc 1 603 5 is_stmt 1 view .LVU592
 604:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2422              		.loc 1 604 7 view .LVU593
 604:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2423              		.loc 1 604 15 is_stmt 0 view .LVU594
 2424 003e 0D9B     		ldr	r3, [sp, #52]
 2425 0040 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 604:Core/Src/printf.c ****         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 2426              		.loc 1 604 7 view .LVU595
 2427 0042 A1F12002 		sub	r2, r1, #32
 2428 0046 102A     		cmp	r2, #16
 2429 0048 0AD8     		bhi	.L209
 2430 004a DFE802F0 		tbb	[pc, r2]
 2431              	.L211:
 2432 004e 38       		.byte	(.L215-.L211)/2
 2433 004f 09       		.byte	(.L209-.L211)/2
 2434 0050 09       		.byte	(.L209-.L211)/2
 2435 0051 3D       		.byte	(.L214-.L211)/2
 2436 0052 09       		.byte	(.L209-.L211)/2
 2437 0053 09       		.byte	(.L209-.L211)/2
 2438 0054 09       		.byte	(.L209-.L211)/2
 2439 0055 09       		.byte	(.L209-.L211)/2
 2440 0056 09       		.byte	(.L209-.L211)/2
 2441 0057 09       		.byte	(.L209-.L211)/2
 2442 0058 09       		.byte	(.L209-.L211)/2
 2443 0059 33       		.byte	(.L213-.L211)/2
 2444 005a 09       		.byte	(.L209-.L211)/2
 2445 005b 2E       		.byte	(.L212-.L211)/2
 2446 005c 09       		.byte	(.L209-.L211)/2
 2447 005d 09       		.byte	(.L209-.L211)/2
 2448 005e 29       		.byte	(.L210-.L211)/2
 2449 005f 00       		.p2align 1
 2450              	.L209:
 2451              	.LVL277:
 612:Core/Src/printf.c **** 
 2452              		.loc 1 612 13 is_stmt 1 view .LVU596
 615:Core/Src/printf.c ****     if (_is_digit(*format)) {
 2453              		.loc 1 615 5 view .LVU597
 616:Core/Src/printf.c ****       width = _atoi(&format);
 2454              		.loc 1 616 5 view .LVU598
 2455              	.LBB32:
 2456              	.LBI32:
 181:Core/Src/printf.c **** {
 2457              		.loc 1 181 20 view .LVU599
 2458              	.LBB33:
 183:Core/Src/printf.c **** }
 2459              		.loc 1 183 3 view .LVU600
 183:Core/Src/printf.c **** }
 2460              		.loc 1 183 22 is_stmt 0 view .LVU601
 2461 0060 A1F13003 		sub	r3, r1, #48
 2462 0064 DBB2     		uxtb	r3, r3
 2463              	.LVL278:
 183:Core/Src/printf.c **** }
 2464              		.loc 1 183 22 view .LVU602
 2465              	.LBE33:
 2466              	.LBE32:
ARM GAS  /tmp/ccDtGku3.s 			page 64


 616:Core/Src/printf.c ****       width = _atoi(&format);
 2467              		.loc 1 616 8 view .LVU603
 2468 0066 092B     		cmp	r3, #9
 2469 0068 33D9     		bls	.L305
 619:Core/Src/printf.c ****       const int w = va_arg(va, int);
 2470              		.loc 1 619 10 is_stmt 1 view .LVU604
 619:Core/Src/printf.c ****       const int w = va_arg(va, int);
 2471              		.loc 1 619 13 is_stmt 0 view .LVU605
 2472 006a 2A29     		cmp	r1, #42
 2473 006c 36D0     		beq	.L306
 615:Core/Src/printf.c ****     if (_is_digit(*format)) {
 2474              		.loc 1 615 11 view .LVU606
 2475 006e 0023     		movs	r3, #0
 2476 0070 0A93     		str	r3, [sp, #40]
 2477              	.LVL279:
 2478              	.L219:
 632:Core/Src/printf.c ****     if (*format == '.') {
 2479              		.loc 1 632 5 is_stmt 1 view .LVU607
 633:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 2480              		.loc 1 633 5 view .LVU608
 633:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 2481              		.loc 1 633 9 is_stmt 0 view .LVU609
 2482 0072 0D9B     		ldr	r3, [sp, #52]
 2483 0074 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 633:Core/Src/printf.c ****       flags |= FLAGS_PRECISION;
 2484              		.loc 1 633 8 view .LVU610
 2485 0076 2E2A     		cmp	r2, #46
 2486 0078 40D0     		beq	.L307
 632:Core/Src/printf.c ****     if (*format == '.') {
 2487              		.loc 1 632 15 view .LVU611
 2488 007a 4FF0000B 		mov	fp, #0
 2489              	.LVL280:
 2490              	.L222:
 647:Core/Src/printf.c ****       case 'l' :
 2491              		.loc 1 647 5 is_stmt 1 view .LVU612
 647:Core/Src/printf.c ****       case 'l' :
 2492              		.loc 1 647 13 is_stmt 0 view .LVU613
 2493 007e 0D9A     		ldr	r2, [sp, #52]
 2494 0080 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 647:Core/Src/printf.c ****       case 'l' :
 2495              		.loc 1 647 5 view .LVU614
 2496 0082 683B     		subs	r3, r3, #104
 2497 0084 122B     		cmp	r3, #18
 2498 0086 77D8     		bhi	.L224
 2499 0088 DFE803F0 		tbb	[pc, r3]
 2500              	.L226:
 2501 008c 64       		.byte	(.L230-.L226)/2
 2502 008d 76       		.byte	(.L224-.L226)/2
 2503 008e D3       		.byte	(.L229-.L226)/2
 2504 008f 76       		.byte	(.L224-.L226)/2
 2505 0090 56       		.byte	(.L228-.L226)/2
 2506 0091 76       		.byte	(.L224-.L226)/2
 2507 0092 76       		.byte	(.L224-.L226)/2
 2508 0093 76       		.byte	(.L224-.L226)/2
 2509 0094 76       		.byte	(.L224-.L226)/2
 2510 0095 76       		.byte	(.L224-.L226)/2
 2511 0096 76       		.byte	(.L224-.L226)/2
ARM GAS  /tmp/ccDtGku3.s 			page 65


 2512 0097 76       		.byte	(.L224-.L226)/2
 2513 0098 72       		.byte	(.L227-.L226)/2
 2514 0099 76       		.byte	(.L224-.L226)/2
 2515 009a 76       		.byte	(.L224-.L226)/2
 2516 009b 76       		.byte	(.L224-.L226)/2
 2517 009c 76       		.byte	(.L224-.L226)/2
 2518 009d 76       		.byte	(.L224-.L226)/2
 2519 009e D8       		.byte	(.L225-.L226)/2
 2520              	.LVL281:
 2521 009f 00       		.p2align 1
 2522              	.L210:
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2523              		.loc 1 605 19 is_stmt 1 view .LVU615
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2524              		.loc 1 605 25 is_stmt 0 view .LVU616
 2525 00a0 45F00105 		orr	r5, r5, #1
 2526              	.LVL282:
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2527              		.loc 1 605 43 is_stmt 1 view .LVU617
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2528              		.loc 1 605 49 is_stmt 0 view .LVU618
 2529 00a4 0133     		adds	r3, r3, #1
 2530 00a6 0D93     		str	r3, [sp, #52]
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2531              		.loc 1 605 53 is_stmt 1 view .LVU619
 2532              	.LVL283:
 605:Core/Src/printf.c ****         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 2533              		.loc 1 605 61 view .LVU620
 612:Core/Src/printf.c **** 
 2534              		.loc 1 612 13 view .LVU621
 2535 00a8 C9E7     		b	.L208
 2536              	.LVL284:
 2537              	.L212:
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2538              		.loc 1 606 19 view .LVU622
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2539              		.loc 1 606 25 is_stmt 0 view .LVU623
 2540 00aa 45F00205 		orr	r5, r5, #2
 2541              	.LVL285:
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2542              		.loc 1 606 43 is_stmt 1 view .LVU624
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2543              		.loc 1 606 49 is_stmt 0 view .LVU625
 2544 00ae 0133     		adds	r3, r3, #1
 2545 00b0 0D93     		str	r3, [sp, #52]
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2546              		.loc 1 606 53 is_stmt 1 view .LVU626
 2547              	.LVL286:
 606:Core/Src/printf.c ****         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 2548              		.loc 1 606 61 view .LVU627
 612:Core/Src/printf.c **** 
 2549              		.loc 1 612 13 view .LVU628
 2550 00b2 C4E7     		b	.L208
 2551              	.LVL287:
 2552              	.L213:
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2553              		.loc 1 607 19 view .LVU629
ARM GAS  /tmp/ccDtGku3.s 			page 66


 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2554              		.loc 1 607 25 is_stmt 0 view .LVU630
 2555 00b4 45F00405 		orr	r5, r5, #4
 2556              	.LVL288:
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2557              		.loc 1 607 43 is_stmt 1 view .LVU631
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2558              		.loc 1 607 49 is_stmt 0 view .LVU632
 2559 00b8 0133     		adds	r3, r3, #1
 2560 00ba 0D93     		str	r3, [sp, #52]
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2561              		.loc 1 607 53 is_stmt 1 view .LVU633
 2562              	.LVL289:
 607:Core/Src/printf.c ****         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 2563              		.loc 1 607 61 view .LVU634
 612:Core/Src/printf.c **** 
 2564              		.loc 1 612 13 view .LVU635
 2565 00bc BFE7     		b	.L208
 2566              	.LVL290:
 2567              	.L215:
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2568              		.loc 1 608 19 view .LVU636
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2569              		.loc 1 608 25 is_stmt 0 view .LVU637
 2570 00be 45F00805 		orr	r5, r5, #8
 2571              	.LVL291:
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2572              		.loc 1 608 43 is_stmt 1 view .LVU638
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2573              		.loc 1 608 49 is_stmt 0 view .LVU639
 2574 00c2 0133     		adds	r3, r3, #1
 2575 00c4 0D93     		str	r3, [sp, #52]
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2576              		.loc 1 608 53 is_stmt 1 view .LVU640
 2577              	.LVL292:
 608:Core/Src/printf.c ****         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 2578              		.loc 1 608 61 view .LVU641
 612:Core/Src/printf.c **** 
 2579              		.loc 1 612 13 view .LVU642
 2580 00c6 BAE7     		b	.L208
 2581              	.LVL293:
 2582              	.L214:
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2583              		.loc 1 609 19 view .LVU643
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2584              		.loc 1 609 25 is_stmt 0 view .LVU644
 2585 00c8 45F01005 		orr	r5, r5, #16
 2586              	.LVL294:
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2587              		.loc 1 609 43 is_stmt 1 view .LVU645
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2588              		.loc 1 609 49 is_stmt 0 view .LVU646
 2589 00cc 0133     		adds	r3, r3, #1
 2590 00ce 0D93     		str	r3, [sp, #52]
 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2591              		.loc 1 609 53 is_stmt 1 view .LVU647
 2592              	.LVL295:
ARM GAS  /tmp/ccDtGku3.s 			page 67


 609:Core/Src/printf.c ****         default :                                   n = 0U; break;
 2593              		.loc 1 609 61 view .LVU648
 612:Core/Src/printf.c **** 
 2594              		.loc 1 612 13 view .LVU649
 2595 00d0 B5E7     		b	.L208
 2596              	.LVL296:
 2597              	.L305:
 617:Core/Src/printf.c ****     }
 2598              		.loc 1 617 7 view .LVU650
 617:Core/Src/printf.c ****     }
 2599              		.loc 1 617 15 is_stmt 0 view .LVU651
 2600 00d2 0DA8     		add	r0, sp, #52
 2601 00d4 FFF7FEFF 		bl	_atoi
 2602              	.LVL297:
 2603 00d8 0A90     		str	r0, [sp, #40]
 2604              	.LVL298:
 617:Core/Src/printf.c ****     }
 2605              		.loc 1 617 15 view .LVU652
 2606 00da CAE7     		b	.L219
 2607              	.LVL299:
 2608              	.L306:
 2609              	.LBB34:
 620:Core/Src/printf.c ****       if (w < 0) {
 2610              		.loc 1 620 7 is_stmt 1 view .LVU653
 620:Core/Src/printf.c ****       if (w < 0) {
 2611              		.loc 1 620 17 is_stmt 0 view .LVU654
 2612 00dc 189B     		ldr	r3, [sp, #96]
 2613 00de 1A1D     		adds	r2, r3, #4
 2614 00e0 1892     		str	r2, [sp, #96]
 2615 00e2 1868     		ldr	r0, [r3]
 621:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 2616              		.loc 1 621 7 is_stmt 1 view .LVU655
 621:Core/Src/printf.c ****         flags |= FLAGS_LEFT;    // reverse padding
 2617              		.loc 1 621 10 is_stmt 0 view .LVU656
 2618 00e4 0028     		cmp	r0, #0
 2619 00e6 04DB     		blt	.L308
 626:Core/Src/printf.c ****       }
 2620              		.loc 1 626 9 is_stmt 1 view .LVU657
 626:Core/Src/printf.c ****       }
 2621              		.loc 1 626 15 is_stmt 0 view .LVU658
 2622 00e8 0A90     		str	r0, [sp, #40]
 2623              	.LVL300:
 2624              	.L221:
 628:Core/Src/printf.c ****     }
 2625              		.loc 1 628 7 is_stmt 1 view .LVU659
 628:Core/Src/printf.c ****     }
 2626              		.loc 1 628 13 is_stmt 0 view .LVU660
 2627 00ea 0D9B     		ldr	r3, [sp, #52]
 2628 00ec 0133     		adds	r3, r3, #1
 2629 00ee 0D93     		str	r3, [sp, #52]
 2630 00f0 BFE7     		b	.L219
 2631              	.LVL301:
 2632              	.L308:
 622:Core/Src/printf.c ****         width = (unsigned int)-w;
 2633              		.loc 1 622 9 is_stmt 1 view .LVU661
 622:Core/Src/printf.c ****         width = (unsigned int)-w;
 2634              		.loc 1 622 15 is_stmt 0 view .LVU662
ARM GAS  /tmp/ccDtGku3.s 			page 68


 2635 00f2 45F00205 		orr	r5, r5, #2
 2636              	.LVL302:
 623:Core/Src/printf.c ****       }
 2637              		.loc 1 623 9 is_stmt 1 view .LVU663
 623:Core/Src/printf.c ****       }
 2638              		.loc 1 623 31 is_stmt 0 view .LVU664
 2639 00f6 4342     		rsbs	r3, r0, #0
 2640 00f8 0A93     		str	r3, [sp, #40]
 2641              	.LVL303:
 623:Core/Src/printf.c ****       }
 2642              		.loc 1 623 31 view .LVU665
 2643 00fa F6E7     		b	.L221
 2644              	.LVL304:
 2645              	.L307:
 623:Core/Src/printf.c ****       }
 2646              		.loc 1 623 31 view .LVU666
 2647              	.LBE34:
 634:Core/Src/printf.c ****       format++;
 2648              		.loc 1 634 7 is_stmt 1 view .LVU667
 634:Core/Src/printf.c ****       format++;
 2649              		.loc 1 634 13 is_stmt 0 view .LVU668
 2650 00fc 45F48065 		orr	r5, r5, #1024
 2651              	.LVL305:
 635:Core/Src/printf.c ****       if (_is_digit(*format)) {
 2652              		.loc 1 635 7 is_stmt 1 view .LVU669
 635:Core/Src/printf.c ****       if (_is_digit(*format)) {
 2653              		.loc 1 635 13 is_stmt 0 view .LVU670
 2654 0100 5A1C     		adds	r2, r3, #1
 2655 0102 0D92     		str	r2, [sp, #52]
 636:Core/Src/printf.c ****         precision = _atoi(&format);
 2656              		.loc 1 636 7 is_stmt 1 view .LVU671
 636:Core/Src/printf.c ****         precision = _atoi(&format);
 2657              		.loc 1 636 11 is_stmt 0 view .LVU672
 2658 0104 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2659              	.LVL306:
 2660              	.LBB35:
 2661              	.LBI35:
 181:Core/Src/printf.c **** {
 2662              		.loc 1 181 20 is_stmt 1 view .LVU673
 2663              	.LBB36:
 183:Core/Src/printf.c **** }
 2664              		.loc 1 183 3 view .LVU674
 183:Core/Src/printf.c **** }
 2665              		.loc 1 183 22 is_stmt 0 view .LVU675
 2666 0106 A2F13003 		sub	r3, r2, #48
 2667 010a DBB2     		uxtb	r3, r3
 2668              	.LVL307:
 183:Core/Src/printf.c **** }
 2669              		.loc 1 183 22 view .LVU676
 2670              	.LBE36:
 2671              	.LBE35:
 636:Core/Src/printf.c ****         precision = _atoi(&format);
 2672              		.loc 1 636 10 view .LVU677
 2673 010c 092B     		cmp	r3, #9
 2674 010e 04D9     		bls	.L309
 639:Core/Src/printf.c ****         const int prec = (int)va_arg(va, int);
 2675              		.loc 1 639 12 is_stmt 1 view .LVU678
ARM GAS  /tmp/ccDtGku3.s 			page 69


 639:Core/Src/printf.c ****         const int prec = (int)va_arg(va, int);
 2676              		.loc 1 639 15 is_stmt 0 view .LVU679
 2677 0110 2A2A     		cmp	r2, #42
 2678 0112 07D0     		beq	.L310
 632:Core/Src/printf.c ****     if (*format == '.') {
 2679              		.loc 1 632 15 view .LVU680
 2680 0114 4FF0000B 		mov	fp, #0
 2681 0118 B1E7     		b	.L222
 2682              	.L309:
 637:Core/Src/printf.c ****       }
 2683              		.loc 1 637 9 is_stmt 1 view .LVU681
 637:Core/Src/printf.c ****       }
 2684              		.loc 1 637 21 is_stmt 0 view .LVU682
 2685 011a 0DA8     		add	r0, sp, #52
 2686 011c FFF7FEFF 		bl	_atoi
 2687              	.LVL308:
 2688 0120 8346     		mov	fp, r0
 2689              	.LVL309:
 637:Core/Src/printf.c ****       }
 2690              		.loc 1 637 21 view .LVU683
 2691 0122 ACE7     		b	.L222
 2692              	.LVL310:
 2693              	.L310:
 2694              	.LBB37:
 640:Core/Src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2695              		.loc 1 640 9 is_stmt 1 view .LVU684
 640:Core/Src/printf.c ****         precision = prec > 0 ? (unsigned int)prec : 0U;
 2696              		.loc 1 640 19 is_stmt 0 view .LVU685
 2697 0124 189B     		ldr	r3, [sp, #96]
 2698 0126 1A1D     		adds	r2, r3, #4
 2699 0128 1892     		str	r2, [sp, #96]
 2700 012a 1B68     		ldr	r3, [r3]
 641:Core/Src/printf.c ****         format++;
 2701              		.loc 1 641 9 is_stmt 1 view .LVU686
 641:Core/Src/printf.c ****         format++;
 2702              		.loc 1 641 51 is_stmt 0 view .LVU687
 2703 012c 23EAE37B 		bic	fp, r3, r3, asr #31
 2704              	.LVL311:
 642:Core/Src/printf.c ****       }
 2705              		.loc 1 642 9 is_stmt 1 view .LVU688
 642:Core/Src/printf.c ****       }
 2706              		.loc 1 642 15 is_stmt 0 view .LVU689
 2707 0130 0D9B     		ldr	r3, [sp, #52]
 2708 0132 0133     		adds	r3, r3, #1
 2709 0134 0D93     		str	r3, [sp, #52]
 2710 0136 A2E7     		b	.L222
 2711              	.L228:
 642:Core/Src/printf.c ****       }
 2712              		.loc 1 642 15 view .LVU690
 2713              	.LBE37:
 649:Core/Src/printf.c ****         format++;
 2714              		.loc 1 649 9 is_stmt 1 view .LVU691
 649:Core/Src/printf.c ****         format++;
 2715              		.loc 1 649 15 is_stmt 0 view .LVU692
 2716 0138 45F48071 		orr	r1, r5, #256
 2717              	.LVL312:
 650:Core/Src/printf.c ****         if (*format == 'l') {
ARM GAS  /tmp/ccDtGku3.s 			page 70


 2718              		.loc 1 650 9 is_stmt 1 view .LVU693
 650:Core/Src/printf.c ****         if (*format == 'l') {
 2719              		.loc 1 650 15 is_stmt 0 view .LVU694
 2720 013c 531C     		adds	r3, r2, #1
 2721 013e 0D93     		str	r3, [sp, #52]
 651:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 2722              		.loc 1 651 9 is_stmt 1 view .LVU695
 651:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 2723              		.loc 1 651 13 is_stmt 0 view .LVU696
 2724 0140 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 651:Core/Src/printf.c ****           flags |= FLAGS_LONG_LONG;
 2725              		.loc 1 651 12 view .LVU697
 2726 0142 6C2A     		cmp	r2, #108
 2727 0144 01D0     		beq	.L311
 649:Core/Src/printf.c ****         format++;
 2728              		.loc 1 649 15 view .LVU698
 2729 0146 0D46     		mov	r5, r1
 2730 0148 16E0     		b	.L224
 2731              	.L311:
 652:Core/Src/printf.c ****           format++;
 2732              		.loc 1 652 11 is_stmt 1 view .LVU699
 652:Core/Src/printf.c ****           format++;
 2733              		.loc 1 652 17 is_stmt 0 view .LVU700
 2734 014a 45F44075 		orr	r5, r5, #768
 2735              	.LVL313:
 653:Core/Src/printf.c ****         }
 2736              		.loc 1 653 11 is_stmt 1 view .LVU701
 653:Core/Src/printf.c ****         }
 2737              		.loc 1 653 17 is_stmt 0 view .LVU702
 2738 014e 0133     		adds	r3, r3, #1
 2739 0150 0D93     		str	r3, [sp, #52]
 2740 0152 11E0     		b	.L224
 2741              	.L230:
 657:Core/Src/printf.c ****         format++;
 2742              		.loc 1 657 9 is_stmt 1 view .LVU703
 657:Core/Src/printf.c ****         format++;
 2743              		.loc 1 657 15 is_stmt 0 view .LVU704
 2744 0154 45F08001 		orr	r1, r5, #128
 2745              	.LVL314:
 658:Core/Src/printf.c ****         if (*format == 'h') {
 2746              		.loc 1 658 9 is_stmt 1 view .LVU705
 658:Core/Src/printf.c ****         if (*format == 'h') {
 2747              		.loc 1 658 15 is_stmt 0 view .LVU706
 2748 0158 531C     		adds	r3, r2, #1
 2749 015a 0D93     		str	r3, [sp, #52]
 659:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 2750              		.loc 1 659 9 is_stmt 1 view .LVU707
 659:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 2751              		.loc 1 659 13 is_stmt 0 view .LVU708
 2752 015c 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 659:Core/Src/printf.c ****           flags |= FLAGS_CHAR;
 2753              		.loc 1 659 12 view .LVU709
 2754 015e 682A     		cmp	r2, #104
 2755 0160 01D0     		beq	.L312
 657:Core/Src/printf.c ****         format++;
 2756              		.loc 1 657 15 view .LVU710
 2757 0162 0D46     		mov	r5, r1
ARM GAS  /tmp/ccDtGku3.s 			page 71


 2758 0164 08E0     		b	.L224
 2759              	.L312:
 660:Core/Src/printf.c ****           format++;
 2760              		.loc 1 660 11 is_stmt 1 view .LVU711
 660:Core/Src/printf.c ****           format++;
 2761              		.loc 1 660 17 is_stmt 0 view .LVU712
 2762 0166 45F0C005 		orr	r5, r5, #192
 2763              	.LVL315:
 661:Core/Src/printf.c ****         }
 2764              		.loc 1 661 11 is_stmt 1 view .LVU713
 661:Core/Src/printf.c ****         }
 2765              		.loc 1 661 17 is_stmt 0 view .LVU714
 2766 016a 0133     		adds	r3, r3, #1
 2767 016c 0D93     		str	r3, [sp, #52]
 2768 016e 03E0     		b	.L224
 2769              	.L227:
 666:Core/Src/printf.c ****         format++;
 2770              		.loc 1 666 9 is_stmt 1 view .LVU715
 666:Core/Src/printf.c ****         format++;
 2771              		.loc 1 666 15 is_stmt 0 view .LVU716
 2772 0170 45F48075 		orr	r5, r5, #256
 2773              	.LVL316:
 667:Core/Src/printf.c ****         break;
 2774              		.loc 1 667 9 is_stmt 1 view .LVU717
 667:Core/Src/printf.c ****         break;
 2775              		.loc 1 667 15 is_stmt 0 view .LVU718
 2776 0174 0132     		adds	r2, r2, #1
 2777 0176 0D92     		str	r2, [sp, #52]
 668:Core/Src/printf.c **** #endif
 2778              		.loc 1 668 9 is_stmt 1 view .LVU719
 2779              	.L224:
 683:Core/Src/printf.c ****       case 'd' :
 2780              		.loc 1 683 5 view .LVU720
 683:Core/Src/printf.c ****       case 'd' :
 2781              		.loc 1 683 13 is_stmt 0 view .LVU721
 2782 0178 0D9B     		ldr	r3, [sp, #52]
 2783 017a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 683:Core/Src/printf.c ****       case 'd' :
 2784              		.loc 1 683 5 view .LVU722
 2785 017c A0F12503 		sub	r3, r0, #37
 2786 0180 532B     		cmp	r3, #83
 2787 0182 00F26082 		bhi	.L231
 2788 0186 DFE813F0 		tbh	[pc, r3, lsl #1]
 2789              	.L233:
 2790 018a 5302     		.2byte	(.L239-.L233)/2
 2791 018c 5E02     		.2byte	(.L231-.L233)/2
 2792 018e 5E02     		.2byte	(.L231-.L233)/2
 2793 0190 5E02     		.2byte	(.L231-.L233)/2
 2794 0192 5E02     		.2byte	(.L231-.L233)/2
 2795 0194 5E02     		.2byte	(.L231-.L233)/2
 2796 0196 5E02     		.2byte	(.L231-.L233)/2
 2797 0198 5E02     		.2byte	(.L231-.L233)/2
 2798 019a 5E02     		.2byte	(.L231-.L233)/2
 2799 019c 5E02     		.2byte	(.L231-.L233)/2
 2800 019e 5E02     		.2byte	(.L231-.L233)/2
 2801 01a0 5E02     		.2byte	(.L231-.L233)/2
 2802 01a2 5E02     		.2byte	(.L231-.L233)/2
ARM GAS  /tmp/ccDtGku3.s 			page 72


 2803 01a4 5E02     		.2byte	(.L231-.L233)/2
 2804 01a6 5E02     		.2byte	(.L231-.L233)/2
 2805 01a8 5E02     		.2byte	(.L231-.L233)/2
 2806 01aa 5E02     		.2byte	(.L231-.L233)/2
 2807 01ac 5E02     		.2byte	(.L231-.L233)/2
 2808 01ae 5E02     		.2byte	(.L231-.L233)/2
 2809 01b0 5E02     		.2byte	(.L231-.L233)/2
 2810 01b2 5E02     		.2byte	(.L231-.L233)/2
 2811 01b4 5E02     		.2byte	(.L231-.L233)/2
 2812 01b6 5E02     		.2byte	(.L231-.L233)/2
 2813 01b8 5E02     		.2byte	(.L231-.L233)/2
 2814 01ba 5E02     		.2byte	(.L231-.L233)/2
 2815 01bc 5E02     		.2byte	(.L231-.L233)/2
 2816 01be 5E02     		.2byte	(.L231-.L233)/2
 2817 01c0 5E02     		.2byte	(.L231-.L233)/2
 2818 01c2 5E02     		.2byte	(.L231-.L233)/2
 2819 01c4 5E02     		.2byte	(.L231-.L233)/2
 2820 01c6 5E02     		.2byte	(.L231-.L233)/2
 2821 01c8 5E02     		.2byte	(.L231-.L233)/2
 2822 01ca 7301     		.2byte	(.L236-.L233)/2
 2823 01cc 5301     		.2byte	(.L237-.L233)/2
 2824 01ce 7301     		.2byte	(.L236-.L233)/2
 2825 01d0 5E02     		.2byte	(.L231-.L233)/2
 2826 01d2 5E02     		.2byte	(.L231-.L233)/2
 2827 01d4 5E02     		.2byte	(.L231-.L233)/2
 2828 01d6 5E02     		.2byte	(.L231-.L233)/2
 2829 01d8 5E02     		.2byte	(.L231-.L233)/2
 2830 01da 5E02     		.2byte	(.L231-.L233)/2
 2831 01dc 5E02     		.2byte	(.L231-.L233)/2
 2832 01de 5E02     		.2byte	(.L231-.L233)/2
 2833 01e0 5E02     		.2byte	(.L231-.L233)/2
 2834 01e2 5E02     		.2byte	(.L231-.L233)/2
 2835 01e4 5E02     		.2byte	(.L231-.L233)/2
 2836 01e6 5E02     		.2byte	(.L231-.L233)/2
 2837 01e8 5E02     		.2byte	(.L231-.L233)/2
 2838 01ea 5E02     		.2byte	(.L231-.L233)/2
 2839 01ec 5E02     		.2byte	(.L231-.L233)/2
 2840 01ee 5E02     		.2byte	(.L231-.L233)/2
 2841 01f0 5E00     		.2byte	(.L232-.L233)/2
 2842 01f2 5E02     		.2byte	(.L231-.L233)/2
 2843 01f4 5E02     		.2byte	(.L231-.L233)/2
 2844 01f6 5E02     		.2byte	(.L231-.L233)/2
 2845 01f8 5E02     		.2byte	(.L231-.L233)/2
 2846 01fa 5E02     		.2byte	(.L231-.L233)/2
 2847 01fc 5E02     		.2byte	(.L231-.L233)/2
 2848 01fe 5E02     		.2byte	(.L231-.L233)/2
 2849 0200 5E02     		.2byte	(.L231-.L233)/2
 2850 0202 5E02     		.2byte	(.L231-.L233)/2
 2851 0204 5E00     		.2byte	(.L232-.L233)/2
 2852 0206 9A01     		.2byte	(.L238-.L233)/2
 2853 0208 5E00     		.2byte	(.L232-.L233)/2
 2854 020a 7301     		.2byte	(.L236-.L233)/2
 2855 020c 5301     		.2byte	(.L237-.L233)/2
 2856 020e 7301     		.2byte	(.L236-.L233)/2
 2857 0210 5E02     		.2byte	(.L231-.L233)/2
 2858 0212 5E00     		.2byte	(.L232-.L233)/2
 2859 0214 5E02     		.2byte	(.L231-.L233)/2
ARM GAS  /tmp/ccDtGku3.s 			page 73


 2860 0216 5E02     		.2byte	(.L231-.L233)/2
 2861 0218 5E02     		.2byte	(.L231-.L233)/2
 2862 021a 5E02     		.2byte	(.L231-.L233)/2
 2863 021c 5E02     		.2byte	(.L231-.L233)/2
 2864 021e 5E00     		.2byte	(.L232-.L233)/2
 2865 0220 3802     		.2byte	(.L235-.L233)/2
 2866 0222 5E02     		.2byte	(.L231-.L233)/2
 2867 0224 5E02     		.2byte	(.L231-.L233)/2
 2868 0226 D301     		.2byte	(.L234-.L233)/2
 2869 0228 5E02     		.2byte	(.L231-.L233)/2
 2870 022a 5E00     		.2byte	(.L232-.L233)/2
 2871 022c 5E02     		.2byte	(.L231-.L233)/2
 2872 022e 5E02     		.2byte	(.L231-.L233)/2
 2873 0230 5E00     		.2byte	(.L232-.L233)/2
 2874              		.p2align 1
 2875              	.L229:
 671:Core/Src/printf.c ****         format++;
 2876              		.loc 1 671 9 is_stmt 1 view .LVU723
 671:Core/Src/printf.c ****         format++;
 2877              		.loc 1 671 15 is_stmt 0 view .LVU724
 2878 0232 45F40075 		orr	r5, r5, #512
 2879              	.LVL317:
 672:Core/Src/printf.c ****         break;
 2880              		.loc 1 672 9 is_stmt 1 view .LVU725
 672:Core/Src/printf.c ****         break;
 2881              		.loc 1 672 15 is_stmt 0 view .LVU726
 2882 0236 0132     		adds	r2, r2, #1
 2883 0238 0D92     		str	r2, [sp, #52]
 673:Core/Src/printf.c ****       case 'z' :
 2884              		.loc 1 673 9 is_stmt 1 view .LVU727
 2885 023a 9DE7     		b	.L224
 2886              	.L225:
 675:Core/Src/printf.c ****         format++;
 2887              		.loc 1 675 9 view .LVU728
 675:Core/Src/printf.c ****         format++;
 2888              		.loc 1 675 15 is_stmt 0 view .LVU729
 2889 023c 45F48075 		orr	r5, r5, #256
 2890              	.LVL318:
 676:Core/Src/printf.c ****         break;
 2891              		.loc 1 676 9 is_stmt 1 view .LVU730
 676:Core/Src/printf.c ****         break;
 2892              		.loc 1 676 15 is_stmt 0 view .LVU731
 2893 0240 0132     		adds	r2, r2, #1
 2894 0242 0D92     		str	r2, [sp, #52]
 677:Core/Src/printf.c ****       default :
 2895              		.loc 1 677 9 is_stmt 1 view .LVU732
 2896 0244 98E7     		b	.L224
 2897              	.L232:
 2898              	.LBB38:
 692:Core/Src/printf.c ****         if (*format == 'x' || *format == 'X') {
 2899              		.loc 1 692 9 view .LVU733
 693:Core/Src/printf.c ****           base = 16U;
 2900              		.loc 1 693 9 view .LVU734
 693:Core/Src/printf.c ****           base = 16U;
 2901              		.loc 1 693 12 is_stmt 0 view .LVU735
 2902 0246 7828     		cmp	r0, #120
 2903 0248 09D0     		beq	.L293
ARM GAS  /tmp/ccDtGku3.s 			page 74


 693:Core/Src/printf.c ****           base = 16U;
 2904              		.loc 1 693 28 discriminator 1 view .LVU736
 2905 024a 5828     		cmp	r0, #88
 2906 024c 3AD0     		beq	.L294
 696:Core/Src/printf.c ****           base =  8U;
 2907              		.loc 1 696 14 is_stmt 1 view .LVU737
 696:Core/Src/printf.c ****           base =  8U;
 2908              		.loc 1 696 17 is_stmt 0 view .LVU738
 2909 024e 6F28     		cmp	r0, #111
 2910 0250 3AD0     		beq	.L295
 699:Core/Src/printf.c ****           base =  2U;
 2911              		.loc 1 699 14 is_stmt 1 view .LVU739
 699:Core/Src/printf.c ****           base =  2U;
 2912              		.loc 1 699 17 is_stmt 0 view .LVU740
 2913 0252 6228     		cmp	r0, #98
 2914 0254 3AD0     		beq	.L296
 703:Core/Src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 2915              		.loc 1 703 11 is_stmt 1 view .LVU741
 2916              	.LVL319:
 704:Core/Src/printf.c ****         }
 2917              		.loc 1 704 11 view .LVU742
 704:Core/Src/printf.c ****         }
 2918              		.loc 1 704 17 is_stmt 0 view .LVU743
 2919 0256 25F01005 		bic	r5, r5, #16
 2920              	.LVL320:
 703:Core/Src/printf.c ****           flags &= ~FLAGS_HASH;   // no hash for dec format
 2921              		.loc 1 703 16 view .LVU744
 2922 025a 0A23     		movs	r3, #10
 2923 025c 00E0     		b	.L240
 2924              	.LVL321:
 2925              	.L293:
 694:Core/Src/printf.c ****         }
 2926              		.loc 1 694 16 view .LVU745
 2927 025e 1023     		movs	r3, #16
 2928              	.L240:
 2929              	.LVL322:
 707:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 2930              		.loc 1 707 9 is_stmt 1 view .LVU746
 707:Core/Src/printf.c ****           flags |= FLAGS_UPPERCASE;
 2931              		.loc 1 707 12 is_stmt 0 view .LVU747
 2932 0260 5828     		cmp	r0, #88
 2933 0262 35D0     		beq	.L313
 2934              	.L241:
 712:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2935              		.loc 1 712 9 is_stmt 1 view .LVU748
 712:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2936              		.loc 1 712 12 is_stmt 0 view .LVU749
 2937 0264 6928     		cmp	r0, #105
 2938 0266 03D0     		beq	.L242
 712:Core/Src/printf.c ****           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 2939              		.loc 1 712 30 discriminator 1 view .LVU750
 2940 0268 6428     		cmp	r0, #100
 2941 026a 01D0     		beq	.L242
 713:Core/Src/printf.c ****         }
 2942              		.loc 1 713 11 is_stmt 1 view .LVU751
 713:Core/Src/printf.c ****         }
 2943              		.loc 1 713 17 is_stmt 0 view .LVU752
ARM GAS  /tmp/ccDtGku3.s 			page 75


 2944 026c 25F00C05 		bic	r5, r5, #12
 2945              	.LVL323:
 2946              	.L242:
 717:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 2947              		.loc 1 717 9 is_stmt 1 view .LVU753
 717:Core/Src/printf.c ****           flags &= ~FLAGS_ZEROPAD;
 2948              		.loc 1 717 12 is_stmt 0 view .LVU754
 2949 0270 15F4806F 		tst	r5, #1024
 2950 0274 01D0     		beq	.L243
 718:Core/Src/printf.c ****         }
 2951              		.loc 1 718 11 is_stmt 1 view .LVU755
 718:Core/Src/printf.c ****         }
 2952              		.loc 1 718 17 is_stmt 0 view .LVU756
 2953 0276 25F00105 		bic	r5, r5, #1
 2954              	.LVL324:
 2955              	.L243:
 722:Core/Src/printf.c ****           // signed
 2956              		.loc 1 722 9 is_stmt 1 view .LVU757
 722:Core/Src/printf.c ****           // signed
 2957              		.loc 1 722 12 is_stmt 0 view .LVU758
 2958 027a 6928     		cmp	r0, #105
 2959 027c 2BD0     		beq	.L244
 722:Core/Src/printf.c ****           // signed
 2960              		.loc 1 722 30 discriminator 1 view .LVU759
 2961 027e 6428     		cmp	r0, #100
 2962 0280 29D0     		beq	.L244
 741:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2963              		.loc 1 741 11 is_stmt 1 view .LVU760
 741:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 2964              		.loc 1 741 14 is_stmt 0 view .LVU761
 2965 0282 15F4007F 		tst	r5, #512
 2966 0286 40F09680 		bne	.L314
 746:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 2967              		.loc 1 746 16 is_stmt 1 view .LVU762
 746:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, prec
 2968              		.loc 1 746 19 is_stmt 0 view .LVU763
 2969 028a 15F4807F 		tst	r5, #256
 2970 028e 40F0AD80 		bne	.L315
 2971              	.LBB39:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2972              		.loc 1 750 13 is_stmt 1 view .LVU764
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2973              		.loc 1 750 103 is_stmt 0 view .LVU765
 2974 0292 15F0400F 		tst	r5, #64
 2975 0296 00F0BE80 		beq	.L255
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 2976              		.loc 1 750 78 view .LVU766
 2977 029a 189A     		ldr	r2, [sp, #96]
 2978 029c 111D     		adds	r1, r2, #4
 2979 029e 1891     		str	r1, [sp, #96]
 2980 02a0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 2981              	.L256:
 2982              	.LVL325:
 751:Core/Src/printf.c ****           }
 2983              		.loc 1 751 13 is_stmt 1 discriminator 8 view .LVU767
 751:Core/Src/printf.c ****           }
 2984              		.loc 1 751 19 is_stmt 0 discriminator 8 view .LVU768
ARM GAS  /tmp/ccDtGku3.s 			page 76


 2985 02a2 0595     		str	r5, [sp, #20]
 2986 02a4 0A99     		ldr	r1, [sp, #40]
 2987 02a6 0491     		str	r1, [sp, #16]
 2988 02a8 CDF80CB0 		str	fp, [sp, #12]
 2989 02ac 0293     		str	r3, [sp, #8]
 2990 02ae 0023     		movs	r3, #0
 2991              	.LVL326:
 751:Core/Src/printf.c ****           }
 2992              		.loc 1 751 19 discriminator 8 view .LVU769
 2993 02b0 0193     		str	r3, [sp, #4]
 2994 02b2 0092     		str	r2, [sp]
 2995 02b4 3346     		mov	r3, r6
 2996 02b6 2246     		mov	r2, r4
 2997              	.LVL327:
 751:Core/Src/printf.c ****           }
 2998              		.loc 1 751 19 discriminator 8 view .LVU770
 2999 02b8 4146     		mov	r1, r8
 3000 02ba 3846     		mov	r0, r7
 3001 02bc FFF7FEFF 		bl	_ntoa_long
 3002              	.LVL328:
 751:Core/Src/printf.c ****           }
 3003              		.loc 1 751 19 discriminator 8 view .LVU771
 3004 02c0 0446     		mov	r4, r0
 3005              	.LVL329:
 751:Core/Src/printf.c ****           }
 3006              		.loc 1 751 19 discriminator 8 view .LVU772
 3007 02c2 29E0     		b	.L248
 3008              	.LVL330:
 3009              	.L294:
 751:Core/Src/printf.c ****           }
 3010              		.loc 1 751 19 discriminator 8 view .LVU773
 3011              	.LBE39:
 694:Core/Src/printf.c ****         }
 3012              		.loc 1 694 16 view .LVU774
 3013 02c4 1023     		movs	r3, #16
 3014 02c6 CBE7     		b	.L240
 3015              	.L295:
 697:Core/Src/printf.c ****         }
 3016              		.loc 1 697 16 view .LVU775
 3017 02c8 0823     		movs	r3, #8
 3018 02ca C9E7     		b	.L240
 3019              	.L296:
 700:Core/Src/printf.c ****         }
 3020              		.loc 1 700 16 view .LVU776
 3021 02cc 0223     		movs	r3, #2
 3022 02ce C7E7     		b	.L240
 3023              	.LVL331:
 3024              	.L313:
 708:Core/Src/printf.c ****         }
 3025              		.loc 1 708 11 is_stmt 1 view .LVU777
 708:Core/Src/printf.c ****         }
 3026              		.loc 1 708 17 is_stmt 0 view .LVU778
 3027 02d0 45F02005 		orr	r5, r5, #32
 3028              	.LVL332:
 708:Core/Src/printf.c ****         }
 3029              		.loc 1 708 17 view .LVU779
 3030 02d4 C6E7     		b	.L241
ARM GAS  /tmp/ccDtGku3.s 			page 77


 3031              	.L244:
 724:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3032              		.loc 1 724 11 is_stmt 1 view .LVU780
 724:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 3033              		.loc 1 724 14 is_stmt 0 view .LVU781
 3034 02d6 15F4007F 		tst	r5, #512
 3035 02da 21D1     		bne	.L316
 730:Core/Src/printf.c ****             const long value = va_arg(va, long);
 3036              		.loc 1 730 16 is_stmt 1 view .LVU782
 730:Core/Src/printf.c ****             const long value = va_arg(va, long);
 3037              		.loc 1 730 19 is_stmt 0 view .LVU783
 3038 02dc 15F4807F 		tst	r5, #256
 3039 02e0 42D1     		bne	.L317
 3040              	.LBB40:
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3041              		.loc 1 735 13 is_stmt 1 view .LVU784
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3042              		.loc 1 735 76 is_stmt 0 view .LVU785
 3043 02e2 15F0400F 		tst	r5, #64
 3044 02e6 58D0     		beq	.L250
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3045              		.loc 1 735 60 view .LVU786
 3046 02e8 189A     		ldr	r2, [sp, #96]
 3047 02ea 111D     		adds	r1, r2, #4
 3048 02ec 1891     		str	r1, [sp, #96]
 3049 02ee 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3050              	.L251:
 3051              	.LVL333:
 736:Core/Src/printf.c ****           }
 3052              		.loc 1 736 13 is_stmt 1 discriminator 8 view .LVU787
 736:Core/Src/printf.c ****           }
 3053              		.loc 1 736 56 is_stmt 0 discriminator 8 view .LVU788
 3054 02f0 82EAE271 		eor	r1, r2, r2, asr #31
 3055 02f4 A1EBE271 		sub	r1, r1, r2, asr #31
 736:Core/Src/printf.c ****           }
 3056              		.loc 1 736 19 discriminator 8 view .LVU789
 3057 02f8 0595     		str	r5, [sp, #20]
 3058 02fa 0A98     		ldr	r0, [sp, #40]
 3059 02fc 0490     		str	r0, [sp, #16]
 3060 02fe CDF80CB0 		str	fp, [sp, #12]
 3061 0302 0293     		str	r3, [sp, #8]
 3062 0304 D20F     		lsrs	r2, r2, #31
 3063              	.LVL334:
 736:Core/Src/printf.c ****           }
 3064              		.loc 1 736 19 discriminator 8 view .LVU790
 3065 0306 0192     		str	r2, [sp, #4]
 3066 0308 0091     		str	r1, [sp]
 3067 030a 3346     		mov	r3, r6
 3068              	.LVL335:
 736:Core/Src/printf.c ****           }
 3069              		.loc 1 736 19 discriminator 8 view .LVU791
 3070 030c 2246     		mov	r2, r4
 3071 030e 4146     		mov	r1, r8
 3072 0310 3846     		mov	r0, r7
 3073 0312 FFF7FEFF 		bl	_ntoa_long
 3074              	.LVL336:
 736:Core/Src/printf.c ****           }
ARM GAS  /tmp/ccDtGku3.s 			page 78


 3075              		.loc 1 736 19 discriminator 8 view .LVU792
 3076 0316 0446     		mov	r4, r0
 3077              	.LVL337:
 3078              	.L248:
 736:Core/Src/printf.c ****           }
 3079              		.loc 1 736 19 discriminator 8 view .LVU793
 3080              	.LBE40:
 754:Core/Src/printf.c ****         break;
 3081              		.loc 1 754 9 is_stmt 1 view .LVU794
 754:Core/Src/printf.c ****         break;
 3082              		.loc 1 754 15 is_stmt 0 view .LVU795
 3083 0318 0D9B     		ldr	r3, [sp, #52]
 3084 031a 0133     		adds	r3, r3, #1
 3085 031c 0D93     		str	r3, [sp, #52]
 755:Core/Src/printf.c ****       }
 3086              		.loc 1 755 9 is_stmt 1 view .LVU796
 3087 031e 7AE6     		b	.L284
 3088              	.LVL338:
 3089              	.L316:
 3090              	.LBB41:
 726:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3091              		.loc 1 726 13 view .LVU797
 726:Core/Src/printf.c ****             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value 
 3092              		.loc 1 726 29 is_stmt 0 view .LVU798
 3093 0320 189A     		ldr	r2, [sp, #96]
 3094 0322 0732     		adds	r2, r2, #7
 3095 0324 22F00702 		bic	r2, r2, #7
 3096 0328 02F10801 		add	r1, r2, #8
 3097 032c 1891     		str	r1, [sp, #96]
 3098 032e 5168     		ldr	r1, [r2, #4]
 727:Core/Src/printf.c **** #endif
 3099              		.loc 1 727 13 is_stmt 1 view .LVU799
 727:Core/Src/printf.c **** #endif
 3100              		.loc 1 727 61 is_stmt 0 view .LVU800
 3101 0330 1268     		ldr	r2, [r2]
 3102 0332 0846     		mov	r0, r1
 3103 0334 0029     		cmp	r1, #0
 3104 0336 13DB     		blt	.L318
 3105              	.L247:
 727:Core/Src/printf.c **** #endif
 3106              		.loc 1 727 19 view .LVU801
 3107 0338 0895     		str	r5, [sp, #32]
 3108 033a 0A9D     		ldr	r5, [sp, #40]
 3109              	.LVL339:
 727:Core/Src/printf.c **** #endif
 3110              		.loc 1 727 19 view .LVU802
 3111 033c 0795     		str	r5, [sp, #28]
 3112 033e CDF818B0 		str	fp, [sp, #24]
 3113 0342 0493     		str	r3, [sp, #16]
 3114 0344 0023     		movs	r3, #0
 3115              	.LVL340:
 727:Core/Src/printf.c **** #endif
 3116              		.loc 1 727 19 view .LVU803
 3117 0346 0593     		str	r3, [sp, #20]
 3118 0348 C90F     		lsrs	r1, r1, #31
 3119 034a 0291     		str	r1, [sp, #8]
 3120 034c 0092     		str	r2, [sp]
ARM GAS  /tmp/ccDtGku3.s 			page 79


 3121 034e 0190     		str	r0, [sp, #4]
 3122 0350 3346     		mov	r3, r6
 3123 0352 2246     		mov	r2, r4
 3124 0354 4146     		mov	r1, r8
 3125 0356 3846     		mov	r0, r7
 3126 0358 FFF7FEFF 		bl	_ntoa_long_long
 3127              	.LVL341:
 727:Core/Src/printf.c **** #endif
 3128              		.loc 1 727 19 view .LVU804
 3129 035c 0446     		mov	r4, r0
 3130              	.LVL342:
 727:Core/Src/printf.c **** #endif
 3131              		.loc 1 727 19 view .LVU805
 3132              	.LBE41:
 3133 035e DBE7     		b	.L248
 3134              	.LVL343:
 3135              	.L318:
 3136              	.LBB42:
 727:Core/Src/printf.c **** #endif
 3137              		.loc 1 727 61 view .LVU806
 3138 0360 5242     		negs	r2, r2
 3139 0362 61EB4100 		sbc	r0, r1, r1, lsl #1
 3140 0366 E7E7     		b	.L247
 3141              	.L317:
 3142              	.LBE42:
 3143              	.LBB43:
 731:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3144              		.loc 1 731 13 is_stmt 1 view .LVU807
 731:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - valu
 3145              		.loc 1 731 24 is_stmt 0 view .LVU808
 3146 0368 189A     		ldr	r2, [sp, #96]
 3147 036a 111D     		adds	r1, r2, #4
 3148 036c 1891     		str	r1, [sp, #96]
 3149 036e 1268     		ldr	r2, [r2]
 732:Core/Src/printf.c ****           }
 3150              		.loc 1 732 13 is_stmt 1 view .LVU809
 732:Core/Src/printf.c ****           }
 3151              		.loc 1 732 56 is_stmt 0 view .LVU810
 3152 0370 82EAE271 		eor	r1, r2, r2, asr #31
 3153 0374 A1EBE271 		sub	r1, r1, r2, asr #31
 732:Core/Src/printf.c ****           }
 3154              		.loc 1 732 19 view .LVU811
 3155 0378 0595     		str	r5, [sp, #20]
 3156 037a 0A98     		ldr	r0, [sp, #40]
 3157 037c 0490     		str	r0, [sp, #16]
 3158 037e CDF80CB0 		str	fp, [sp, #12]
 3159 0382 0293     		str	r3, [sp, #8]
 3160 0384 D20F     		lsrs	r2, r2, #31
 3161 0386 0192     		str	r2, [sp, #4]
 3162 0388 0091     		str	r1, [sp]
 3163 038a 3346     		mov	r3, r6
 3164              	.LVL344:
 732:Core/Src/printf.c ****           }
 3165              		.loc 1 732 19 view .LVU812
 3166 038c 2246     		mov	r2, r4
 3167 038e 4146     		mov	r1, r8
 3168 0390 3846     		mov	r0, r7
ARM GAS  /tmp/ccDtGku3.s 			page 80


 3169 0392 FFF7FEFF 		bl	_ntoa_long
 3170              	.LVL345:
 732:Core/Src/printf.c ****           }
 3171              		.loc 1 732 19 view .LVU813
 3172 0396 0446     		mov	r4, r0
 3173              	.LVL346:
 732:Core/Src/printf.c ****           }
 3174              		.loc 1 732 19 view .LVU814
 3175              	.LBE43:
 3176 0398 BEE7     		b	.L248
 3177              	.LVL347:
 3178              	.L250:
 3179              	.LBB44:
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3180              		.loc 1 735 129 discriminator 2 view .LVU815
 3181 039a 15F0800F 		tst	r5, #128
 3182 039e 05D0     		beq	.L252
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3183              		.loc 1 735 113 view .LVU816
 3184 03a0 189A     		ldr	r2, [sp, #96]
 3185 03a2 111D     		adds	r1, r2, #4
 3186 03a4 1891     		str	r1, [sp, #96]
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3187              		.loc 1 735 102 view .LVU817
 3188 03a6 B2F90020 		ldrsh	r2, [r2]
 3189 03aa A1E7     		b	.L251
 3190              	.L252:
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3191              		.loc 1 735 129 view .LVU818
 3192 03ac 189A     		ldr	r2, [sp, #96]
 3193 03ae 111D     		adds	r1, r2, #4
 3194 03b0 1891     		str	r1, [sp, #96]
 3195 03b2 1268     		ldr	r2, [r2]
 3196 03b4 9CE7     		b	.L251
 3197              	.L314:
 735:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value
 3198              		.loc 1 735 129 view .LVU819
 3199              	.LBE44:
 743:Core/Src/printf.c **** #endif
 3200              		.loc 1 743 13 is_stmt 1 view .LVU820
 743:Core/Src/printf.c **** #endif
 3201              		.loc 1 743 19 is_stmt 0 view .LVU821
 3202 03b6 189A     		ldr	r2, [sp, #96]
 3203 03b8 0732     		adds	r2, r2, #7
 3204 03ba 22F00702 		bic	r2, r2, #7
 3205 03be 02F10801 		add	r1, r2, #8
 3206 03c2 1891     		str	r1, [sp, #96]
 3207 03c4 0895     		str	r5, [sp, #32]
 3208 03c6 0A99     		ldr	r1, [sp, #40]
 3209 03c8 0791     		str	r1, [sp, #28]
 3210 03ca CDF818B0 		str	fp, [sp, #24]
 3211 03ce 0021     		movs	r1, #0
 3212 03d0 0493     		str	r3, [sp, #16]
 3213 03d2 0591     		str	r1, [sp, #20]
 3214 03d4 0291     		str	r1, [sp, #8]
 3215 03d6 0CCA     		ldmia	r2, {r2-r3}
 3216 03d8 CDE90023 		strd	r2, [sp]
ARM GAS  /tmp/ccDtGku3.s 			page 81


 3217 03dc 3346     		mov	r3, r6
 3218              	.LVL348:
 743:Core/Src/printf.c **** #endif
 3219              		.loc 1 743 19 view .LVU822
 3220 03de 2246     		mov	r2, r4
 3221 03e0 4146     		mov	r1, r8
 3222 03e2 3846     		mov	r0, r7
 3223 03e4 FFF7FEFF 		bl	_ntoa_long_long
 3224              	.LVL349:
 743:Core/Src/printf.c **** #endif
 3225              		.loc 1 743 19 view .LVU823
 3226 03e8 0446     		mov	r4, r0
 3227              	.LVL350:
 743:Core/Src/printf.c **** #endif
 3228              		.loc 1 743 19 view .LVU824
 3229 03ea 95E7     		b	.L248
 3230              	.LVL351:
 3231              	.L315:
 747:Core/Src/printf.c ****           }
 3232              		.loc 1 747 13 is_stmt 1 view .LVU825
 747:Core/Src/printf.c ****           }
 3233              		.loc 1 747 19 is_stmt 0 view .LVU826
 3234 03ec 189A     		ldr	r2, [sp, #96]
 3235 03ee 111D     		adds	r1, r2, #4
 3236 03f0 1891     		str	r1, [sp, #96]
 3237 03f2 0595     		str	r5, [sp, #20]
 3238 03f4 0A99     		ldr	r1, [sp, #40]
 3239 03f6 0491     		str	r1, [sp, #16]
 3240 03f8 CDF80CB0 		str	fp, [sp, #12]
 3241 03fc 0293     		str	r3, [sp, #8]
 3242 03fe 0023     		movs	r3, #0
 3243              	.LVL352:
 747:Core/Src/printf.c ****           }
 3244              		.loc 1 747 19 view .LVU827
 3245 0400 0193     		str	r3, [sp, #4]
 3246 0402 1368     		ldr	r3, [r2]
 3247 0404 0093     		str	r3, [sp]
 3248 0406 3346     		mov	r3, r6
 3249 0408 2246     		mov	r2, r4
 3250 040a 4146     		mov	r1, r8
 3251 040c 3846     		mov	r0, r7
 3252 040e FFF7FEFF 		bl	_ntoa_long
 3253              	.LVL353:
 747:Core/Src/printf.c ****           }
 3254              		.loc 1 747 19 view .LVU828
 3255 0412 0446     		mov	r4, r0
 3256              	.LVL354:
 747:Core/Src/printf.c ****           }
 3257              		.loc 1 747 19 view .LVU829
 3258 0414 80E7     		b	.L248
 3259              	.LVL355:
 3260              	.L255:
 3261              	.LBB45:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3262              		.loc 1 750 174 discriminator 2 view .LVU830
 3263 0416 15F0800F 		tst	r5, #128
 3264 041a 04D0     		beq	.L257
ARM GAS  /tmp/ccDtGku3.s 			page 82


 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3265              		.loc 1 750 149 view .LVU831
 3266 041c 189A     		ldr	r2, [sp, #96]
 3267 041e 111D     		adds	r1, r2, #4
 3268 0420 1891     		str	r1, [sp, #96]
 3269 0422 1288     		ldrh	r2, [r2]
 3270 0424 3DE7     		b	.L256
 3271              	.L257:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3272              		.loc 1 750 174 view .LVU832
 3273 0426 189A     		ldr	r2, [sp, #96]
 3274 0428 111D     		adds	r1, r2, #4
 3275 042a 1891     		str	r1, [sp, #96]
 3276 042c 1268     		ldr	r2, [r2]
 3277 042e 38E7     		b	.L256
 3278              	.LVL356:
 3279              	.L237:
 750:Core/Src/printf.c ****             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags)
 3280              		.loc 1 750 174 view .LVU833
 3281              	.LBE45:
 3282              	.LBE38:
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3283              		.loc 1 760 9 is_stmt 1 view .LVU834
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3284              		.loc 1 760 12 is_stmt 0 view .LVU835
 3285 0430 4628     		cmp	r0, #70
 3286 0432 1AD0     		beq	.L319
 3287              	.L258:
 761:Core/Src/printf.c ****         format++;
 3288              		.loc 1 761 9 is_stmt 1 view .LVU836
 761:Core/Src/printf.c ****         format++;
 3289              		.loc 1 761 15 is_stmt 0 view .LVU837
 3290 0434 189B     		ldr	r3, [sp, #96]
 3291 0436 0733     		adds	r3, r3, #7
 3292 0438 23F00703 		bic	r3, r3, #7
 3293 043c 03F10802 		add	r2, r3, #8
 3294 0440 1892     		str	r2, [sp, #96]
 3295 0442 0495     		str	r5, [sp, #16]
 3296 0444 0A9A     		ldr	r2, [sp, #40]
 3297 0446 0392     		str	r2, [sp, #12]
 3298 0448 CDF808B0 		str	fp, [sp, #8]
 3299 044c D3E90023 		ldrd	r2, [r3]
 3300 0450 CDE90023 		strd	r2, [sp]
 3301 0454 3346     		mov	r3, r6
 3302 0456 2246     		mov	r2, r4
 3303 0458 4146     		mov	r1, r8
 3304 045a 3846     		mov	r0, r7
 3305 045c FFF7FEFF 		bl	_ftoa
 3306              	.LVL357:
 3307 0460 0446     		mov	r4, r0
 3308              	.LVL358:
 762:Core/Src/printf.c ****         break;
 3309              		.loc 1 762 9 is_stmt 1 view .LVU838
 762:Core/Src/printf.c ****         break;
 3310              		.loc 1 762 15 is_stmt 0 view .LVU839
 3311 0462 0D9B     		ldr	r3, [sp, #52]
 3312 0464 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccDtGku3.s 			page 83


 3313 0466 0D93     		str	r3, [sp, #52]
 763:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_EXPONENTIAL)
 3314              		.loc 1 763 9 is_stmt 1 view .LVU840
 3315 0468 D5E5     		b	.L284
 3316              	.LVL359:
 3317              	.L319:
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3318              		.loc 1 760 29 discriminator 1 view .LVU841
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3319              		.loc 1 760 35 is_stmt 0 discriminator 1 view .LVU842
 3320 046a 45F02005 		orr	r5, r5, #32
 3321              	.LVL360:
 760:Core/Src/printf.c ****         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3322              		.loc 1 760 35 discriminator 1 view .LVU843
 3323 046e E1E7     		b	.L258
 3324              	.L236:
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3325              		.loc 1 769 9 is_stmt 1 view .LVU844
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3326              		.loc 1 769 12 is_stmt 0 view .LVU845
 3327 0470 6728     		cmp	r0, #103
 3328 0472 01D0     		beq	.L259
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3329              		.loc 1 769 29 discriminator 2 view .LVU846
 3330 0474 4728     		cmp	r0, #71
 3331 0476 01D1     		bne	.L260
 3332              	.L259:
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3333              		.loc 1 769 49 is_stmt 1 discriminator 3 view .LVU847
 769:Core/Src/printf.c ****         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 3334              		.loc 1 769 55 is_stmt 0 discriminator 3 view .LVU848
 3335 0478 45F40065 		orr	r5, r5, #2048
 3336              	.LVL361:
 3337              	.L260:
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3338              		.loc 1 770 9 is_stmt 1 view .LVU849
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3339              		.loc 1 770 12 is_stmt 0 view .LVU850
 3340 047c 4528     		cmp	r0, #69
 3341 047e 01D0     		beq	.L261
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3342              		.loc 1 770 29 discriminator 2 view .LVU851
 3343 0480 4728     		cmp	r0, #71
 3344 0482 01D1     		bne	.L262
 3345              	.L261:
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3346              		.loc 1 770 49 is_stmt 1 discriminator 3 view .LVU852
 770:Core/Src/printf.c ****         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 3347              		.loc 1 770 55 is_stmt 0 discriminator 3 view .LVU853
 3348 0484 45F02005 		orr	r5, r5, #32
 3349              	.LVL362:
 3350              	.L262:
 771:Core/Src/printf.c ****         format++;
 3351              		.loc 1 771 9 is_stmt 1 view .LVU854
 771:Core/Src/printf.c ****         format++;
 3352              		.loc 1 771 15 is_stmt 0 view .LVU855
 3353 0488 189B     		ldr	r3, [sp, #96]
ARM GAS  /tmp/ccDtGku3.s 			page 84


 3354 048a 0733     		adds	r3, r3, #7
 3355 048c 23F00703 		bic	r3, r3, #7
 3356 0490 03F10802 		add	r2, r3, #8
 3357 0494 1892     		str	r2, [sp, #96]
 3358 0496 0495     		str	r5, [sp, #16]
 3359 0498 0A9A     		ldr	r2, [sp, #40]
 3360 049a 0392     		str	r2, [sp, #12]
 3361 049c CDF808B0 		str	fp, [sp, #8]
 3362 04a0 D3E90023 		ldrd	r2, [r3]
 3363 04a4 CDE90023 		strd	r2, [sp]
 3364 04a8 3346     		mov	r3, r6
 3365 04aa 2246     		mov	r2, r4
 3366 04ac 4146     		mov	r1, r8
 3367 04ae 3846     		mov	r0, r7
 3368 04b0 FFF7FEFF 		bl	_etoa
 3369              	.LVL363:
 3370 04b4 0446     		mov	r4, r0
 3371              	.LVL364:
 772:Core/Src/printf.c ****         break;
 3372              		.loc 1 772 9 is_stmt 1 view .LVU856
 772:Core/Src/printf.c ****         break;
 3373              		.loc 1 772 15 is_stmt 0 view .LVU857
 3374 04b6 0D9B     		ldr	r3, [sp, #52]
 3375 04b8 0133     		adds	r3, r3, #1
 3376 04ba 0D93     		str	r3, [sp, #52]
 773:Core/Src/printf.c **** #endif  // PRINTF_SUPPORT_EXPONENTIAL
 3377              		.loc 1 773 9 is_stmt 1 view .LVU858
 3378 04bc ABE5     		b	.L284
 3379              	.LVL365:
 3380              	.L238:
 3381              	.LBB46:
 777:Core/Src/printf.c ****         // pre padding
 3382              		.loc 1 777 9 view .LVU859
 779:Core/Src/printf.c ****           while (l++ < width) {
 3383              		.loc 1 779 9 view .LVU860
 779:Core/Src/printf.c ****           while (l++ < width) {
 3384              		.loc 1 779 12 is_stmt 0 view .LVU861
 3385 04be 15F00205 		ands	r5, r5, #2
 3386              	.LVL366:
 779:Core/Src/printf.c ****           while (l++ < width) {
 3387              		.loc 1 779 12 view .LVU862
 3388 04c2 1FD0     		beq	.L297
 777:Core/Src/printf.c ****         // pre padding
 3389              		.loc 1 777 22 view .LVU863
 3390 04c4 4FF00109 		mov	r9, #1
 3391              	.LVL367:
 3392              	.L264:
 785:Core/Src/printf.c ****         // post padding
 3393              		.loc 1 785 9 is_stmt 1 view .LVU864
 785:Core/Src/printf.c ****         // post padding
 3394              		.loc 1 785 19 is_stmt 0 view .LVU865
 3395 04c8 1898     		ldr	r0, [sp, #96]
 3396 04ca 031D     		adds	r3, r0, #4
 3397 04cc 1893     		str	r3, [sp, #96]
 785:Core/Src/printf.c ****         // post padding
 3398              		.loc 1 785 9 view .LVU866
 3399 04ce 04F1010A 		add	r10, r4, #1
ARM GAS  /tmp/ccDtGku3.s 			page 85


 3400              	.LVL368:
 785:Core/Src/printf.c ****         // post padding
 3401              		.loc 1 785 9 view .LVU867
 3402 04d2 3346     		mov	r3, r6
 3403 04d4 2246     		mov	r2, r4
 3404 04d6 4146     		mov	r1, r8
 3405 04d8 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 3406 04da B847     		blx	r7
 3407              	.LVL369:
 787:Core/Src/printf.c ****           while (l++ < width) {
 3408              		.loc 1 787 9 is_stmt 1 view .LVU868
 787:Core/Src/printf.c ****           while (l++ < width) {
 3409              		.loc 1 787 12 is_stmt 0 view .LVU869
 3410 04dc BDB9     		cbnz	r5, .L320
 3411              	.LVL370:
 3412              	.L267:
 792:Core/Src/printf.c ****         break;
 3413              		.loc 1 792 9 is_stmt 1 view .LVU870
 792:Core/Src/printf.c ****         break;
 3414              		.loc 1 792 15 is_stmt 0 view .LVU871
 3415 04de 0D9B     		ldr	r3, [sp, #52]
 3416 04e0 0133     		adds	r3, r3, #1
 3417 04e2 0D93     		str	r3, [sp, #52]
 3418              		.loc 1 793 9 is_stmt 1 view .LVU872
 3419 04e4 5446     		mov	r4, r10
 3420 04e6 96E5     		b	.L284
 3421              	.LVL371:
 3422              	.L265:
 781:Core/Src/printf.c ****           }
 3423              		.loc 1 781 13 view .LVU873
 3424 04e8 02F1010A 		add	r10, r2, #1
 3425              	.LVL372:
 781:Core/Src/printf.c ****           }
 3426              		.loc 1 781 13 is_stmt 0 view .LVU874
 3427 04ec 3346     		mov	r3, r6
 3428 04ee 4146     		mov	r1, r8
 3429 04f0 2020     		movs	r0, #32
 3430 04f2 B847     		blx	r7
 3431              	.LVL373:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3432              		.loc 1 780 19 view .LVU875
 3433 04f4 4B46     		mov	r3, r9
 781:Core/Src/printf.c ****           }
 3434              		.loc 1 781 13 view .LVU876
 3435 04f6 5246     		mov	r2, r10
 3436              	.LVL374:
 3437              	.L263:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3438              		.loc 1 780 17 is_stmt 1 view .LVU877
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3439              		.loc 1 780 19 is_stmt 0 view .LVU878
 3440 04f8 03F10109 		add	r9, r3, #1
 3441              	.LVL375:
 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3442              		.loc 1 780 17 view .LVU879
 3443 04fc 9B45     		cmp	fp, r3
 3444 04fe F3D8     		bhi	.L265
ARM GAS  /tmp/ccDtGku3.s 			page 86


 780:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3445              		.loc 1 780 17 view .LVU880
 3446 0500 1446     		mov	r4, r2
 3447 0502 E1E7     		b	.L264
 3448              	.LVL376:
 3449              	.L297:
 777:Core/Src/printf.c ****         // pre padding
 3450              		.loc 1 777 22 view .LVU881
 3451 0504 0123     		movs	r3, #1
 3452 0506 DDF828B0 		ldr	fp, [sp, #40]
 3453              	.LVL377:
 777:Core/Src/printf.c ****         // pre padding
 3454              		.loc 1 777 22 view .LVU882
 3455 050a 2246     		mov	r2, r4
 3456 050c F4E7     		b	.L263
 3457              	.LVL378:
 3458              	.L320:
 777:Core/Src/printf.c ****         // pre padding
 3459              		.loc 1 777 22 view .LVU883
 3460 050e 5246     		mov	r2, r10
 3461 0510 DDF828A0 		ldr	r10, [sp, #40]
 3462              	.LVL379:
 777:Core/Src/printf.c ****         // pre padding
 3463              		.loc 1 777 22 view .LVU884
 3464 0514 06E0     		b	.L266
 3465              	.LVL380:
 3466              	.L268:
 789:Core/Src/printf.c ****           }
 3467              		.loc 1 789 13 is_stmt 1 view .LVU885
 3468 0516 551C     		adds	r5, r2, #1
 3469              	.LVL381:
 789:Core/Src/printf.c ****           }
 3470              		.loc 1 789 13 is_stmt 0 view .LVU886
 3471 0518 3346     		mov	r3, r6
 3472 051a 4146     		mov	r1, r8
 3473 051c 2020     		movs	r0, #32
 3474 051e B847     		blx	r7
 3475              	.LVL382:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3476              		.loc 1 788 19 view .LVU887
 3477 0520 A146     		mov	r9, r4
 789:Core/Src/printf.c ****           }
 3478              		.loc 1 789 13 view .LVU888
 3479 0522 2A46     		mov	r2, r5
 3480              	.LVL383:
 3481              	.L266:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3482              		.loc 1 788 17 is_stmt 1 view .LVU889
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3483              		.loc 1 788 19 is_stmt 0 view .LVU890
 3484 0524 09F10104 		add	r4, r9, #1
 3485              	.LVL384:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3486              		.loc 1 788 17 view .LVU891
 3487 0528 CA45     		cmp	r10, r9
 3488 052a F4D8     		bhi	.L268
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
ARM GAS  /tmp/ccDtGku3.s 			page 87


 3489              		.loc 1 788 17 view .LVU892
 3490 052c 9246     		mov	r10, r2
 3491 052e D6E7     		b	.L267
 3492              	.LVL385:
 3493              	.L234:
 788:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3494              		.loc 1 788 17 view .LVU893
 3495              	.LBE46:
 3496              	.LBB47:
 794:Core/Src/printf.c ****       }
 795:Core/Src/printf.c **** 
 796:Core/Src/printf.c ****       case 's' : {
 797:Core/Src/printf.c ****         const char* p = va_arg(va, char*);
 3497              		.loc 1 797 9 is_stmt 1 view .LVU894
 3498              		.loc 1 797 21 is_stmt 0 view .LVU895
 3499 0530 189B     		ldr	r3, [sp, #96]
 3500 0532 1A1D     		adds	r2, r3, #4
 3501 0534 1892     		str	r2, [sp, #96]
 3502 0536 D3F800A0 		ldr	r10, [r3]
 798:Core/Src/printf.c ****         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 3503              		.loc 1 798 9 is_stmt 1 view .LVU896
 3504              		.loc 1 798 26 is_stmt 0 view .LVU897
 3505 053a BBF1000F 		cmp	fp, #0
 3506 053e 1ED1     		bne	.L269
 3507 0540 4FF0FF33 		mov	r3, #-1
 3508              	.L270:
 3509 0544 D146     		mov	r9, r10
 3510 0546 02E0     		b	.L271
 3511              	.LVL386:
 3512              	.L273:
 3513              	.LBB48:
 3514              	.LBB49:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3515              		.loc 1 174 38 is_stmt 1 view .LVU898
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3516              		.loc 1 174 34 view .LVU899
 3517 0548 09F10109 		add	r9, r9, #1
 3518              	.LVL387:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3519              		.loc 1 174 30 is_stmt 0 view .LVU900
 3520 054c 1346     		mov	r3, r2
 3521              	.LVL388:
 3522              	.L271:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3523              		.loc 1 174 17 is_stmt 1 view .LVU901
 3524 054e 99F80020 		ldrb	r2, [r9]	@ zero_extendqisi2
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3525              		.loc 1 174 3 is_stmt 0 view .LVU902
 3526 0552 12B1     		cbz	r2, .L272
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3527              		.loc 1 174 30 view .LVU903
 3528 0554 5A1E     		subs	r2, r3, #1
 3529              	.LVL389:
 174:Core/Src/printf.c ****   return (unsigned int)(s - str);
 3530              		.loc 1 174 20 view .LVU904
 3531 0556 002B     		cmp	r3, #0
 3532 0558 F6D1     		bne	.L273
ARM GAS  /tmp/ccDtGku3.s 			page 88


 3533              	.LVL390:
 3534              	.L272:
 175:Core/Src/printf.c **** }
 3535              		.loc 1 175 3 is_stmt 1 view .LVU905
 175:Core/Src/printf.c **** }
 3536              		.loc 1 175 27 is_stmt 0 view .LVU906
 3537 055a A9EB0A09 		sub	r9, r9, r10
 3538              	.LVL391:
 175:Core/Src/printf.c **** }
 3539              		.loc 1 175 27 view .LVU907
 3540              	.LBE49:
 3541              	.LBE48:
 799:Core/Src/printf.c ****         // pre padding
 800:Core/Src/printf.c ****         if (flags & FLAGS_PRECISION) {
 3542              		.loc 1 800 9 is_stmt 1 view .LVU908
 3543              		.loc 1 800 12 is_stmt 0 view .LVU909
 3544 055e 15F48063 		ands	r3, r5, #1024
 3545 0562 0B93     		str	r3, [sp, #44]
 3546 0564 02D0     		beq	.L274
 801:Core/Src/printf.c ****           l = (l < precision ? l : precision);
 3547              		.loc 1 801 11 is_stmt 1 view .LVU910
 3548              		.loc 1 801 13 is_stmt 0 view .LVU911
 3549 0566 D945     		cmp	r9, fp
 3550 0568 28BF     		it	cs
 3551 056a D946     		movcs	r9, fp
 3552              	.LVL392:
 3553              	.L274:
 802:Core/Src/printf.c ****         }
 803:Core/Src/printf.c ****         if (!(flags & FLAGS_LEFT)) {
 3554              		.loc 1 803 9 is_stmt 1 view .LVU912
 3555              		.loc 1 803 12 is_stmt 0 view .LVU913
 3556 056c 15F00203 		ands	r3, r5, #2
 3557 0570 0C93     		str	r3, [sp, #48]
 3558 0572 06D0     		beq	.L321
 3559              		.loc 1 803 12 view .LVU914
 3560 0574 2246     		mov	r2, r4
 3561 0576 5C46     		mov	r4, fp
 3562              	.LVL393:
 3563              		.loc 1 803 12 view .LVU915
 3564 0578 B346     		mov	fp, r6
 3565              	.LVL394:
 3566              		.loc 1 803 12 view .LVU916
 3567 057a 0B9E     		ldr	r6, [sp, #44]
 3568              	.LVL395:
 3569              		.loc 1 803 12 view .LVU917
 3570 057c 1DE0     		b	.L278
 3571              	.LVL396:
 3572              	.L269:
 798:Core/Src/printf.c ****         // pre padding
 3573              		.loc 1 798 26 view .LVU918
 3574 057e 5B46     		mov	r3, fp
 3575 0580 E0E7     		b	.L270
 3576              	.LVL397:
 3577              	.L321:
 798:Core/Src/printf.c ****         // pre padding
 3578              		.loc 1 798 26 view .LVU919
 3579 0582 2246     		mov	r2, r4
ARM GAS  /tmp/ccDtGku3.s 			page 89


 3580 0584 0A9C     		ldr	r4, [sp, #40]
 3581              	.LVL398:
 798:Core/Src/printf.c ****         // pre padding
 3582              		.loc 1 798 26 view .LVU920
 3583 0586 4B46     		mov	r3, r9
 3584 0588 07E0     		b	.L275
 3585              	.LVL399:
 3586              	.L277:
 804:Core/Src/printf.c ****           while (l++ < width) {
 805:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 3587              		.loc 1 805 13 is_stmt 1 view .LVU921
 3588 058a 02F10109 		add	r9, r2, #1
 3589              	.LVL400:
 3590              		.loc 1 805 13 is_stmt 0 view .LVU922
 3591 058e 3346     		mov	r3, r6
 3592 0590 4146     		mov	r1, r8
 3593 0592 2020     		movs	r0, #32
 3594 0594 B847     		blx	r7
 3595              	.LVL401:
 804:Core/Src/printf.c ****           while (l++ < width) {
 3596              		.loc 1 804 19 view .LVU923
 3597 0596 2B46     		mov	r3, r5
 3598              		.loc 1 805 13 view .LVU924
 3599 0598 4A46     		mov	r2, r9
 3600              	.LVL402:
 3601              	.L275:
 804:Core/Src/printf.c ****           while (l++ < width) {
 3602              		.loc 1 804 17 is_stmt 1 view .LVU925
 804:Core/Src/printf.c ****           while (l++ < width) {
 3603              		.loc 1 804 19 is_stmt 0 view .LVU926
 3604 059a 5D1C     		adds	r5, r3, #1
 3605              	.LVL403:
 804:Core/Src/printf.c ****           while (l++ < width) {
 3606              		.loc 1 804 17 view .LVU927
 3607 059c 9C42     		cmp	r4, r3
 3608 059e F4D8     		bhi	.L277
 804:Core/Src/printf.c ****           while (l++ < width) {
 3609              		.loc 1 804 19 view .LVU928
 3610 05a0 A946     		mov	r9, r5
 3611 05a2 5C46     		mov	r4, fp
 3612 05a4 B346     		mov	fp, r6
 3613              	.LVL404:
 804:Core/Src/printf.c ****           while (l++ < width) {
 3614              		.loc 1 804 19 view .LVU929
 3615 05a6 0B9E     		ldr	r6, [sp, #44]
 3616              	.LVL405:
 804:Core/Src/printf.c ****           while (l++ < width) {
 3617              		.loc 1 804 19 view .LVU930
 3618 05a8 07E0     		b	.L278
 3619              	.LVL406:
 3620              	.L298:
 806:Core/Src/printf.c ****           }
 807:Core/Src/printf.c ****         }
 808:Core/Src/printf.c ****         // string output
 809:Core/Src/printf.c ****         while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 3621              		.loc 1 809 69 view .LVU931
 3622 05aa 1C46     		mov	r4, r3
ARM GAS  /tmp/ccDtGku3.s 			page 90


 3623              	.LVL407:
 3624              	.L280:
 810:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3625              		.loc 1 810 11 is_stmt 1 view .LVU932
 3626              		.loc 1 810 18 is_stmt 0 view .LVU933
 3627 05ac 0AF1010A 		add	r10, r10, #1
 3628              	.LVL408:
 3629              		.loc 1 810 11 view .LVU934
 3630 05b0 551C     		adds	r5, r2, #1
 3631              	.LVL409:
 3632              		.loc 1 810 11 view .LVU935
 3633 05b2 5B46     		mov	r3, fp
 3634 05b4 4146     		mov	r1, r8
 3635 05b6 B847     		blx	r7
 3636              	.LVL410:
 3637 05b8 2A46     		mov	r2, r5
 3638              	.LVL411:
 3639              	.L278:
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3640              		.loc 1 809 15 is_stmt 1 view .LVU936
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3641              		.loc 1 809 17 is_stmt 0 view .LVU937
 3642 05ba 9AF80000 		ldrb	r0, [r10]	@ zero_extendqisi2
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3643              		.loc 1 809 15 view .LVU938
 3644 05be 20B1     		cbz	r0, .L279
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3645              		.loc 1 809 26 discriminator 1 view .LVU939
 3646 05c0 002E     		cmp	r6, #0
 3647 05c2 F3D0     		beq	.L280
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3648              		.loc 1 809 69 discriminator 2 view .LVU940
 3649 05c4 631E     		subs	r3, r4, #1
 3650              	.LVL412:
 809:Core/Src/printf.c ****           out(*(p++), buffer, idx++, maxlen);
 3651              		.loc 1 809 57 discriminator 2 view .LVU941
 3652 05c6 002C     		cmp	r4, #0
 3653 05c8 EFD1     		bne	.L298
 3654              	.LVL413:
 3655              	.L279:
 811:Core/Src/printf.c ****         }
 812:Core/Src/printf.c ****         // post padding
 813:Core/Src/printf.c ****         if (flags & FLAGS_LEFT) {
 3656              		.loc 1 813 12 view .LVU942
 3657 05ca 1446     		mov	r4, r2
 3658 05cc 5E46     		mov	r6, fp
 3659              		.loc 1 813 9 is_stmt 1 view .LVU943
 3660              		.loc 1 813 12 is_stmt 0 view .LVU944
 3661 05ce 0C9B     		ldr	r3, [sp, #48]
 3662 05d0 1BB9     		cbnz	r3, .L322
 3663              	.LVL414:
 3664              	.L282:
 814:Core/Src/printf.c ****           while (l++ < width) {
 815:Core/Src/printf.c ****             out(' ', buffer, idx++, maxlen);
 816:Core/Src/printf.c ****           }
 817:Core/Src/printf.c ****         }
 818:Core/Src/printf.c ****         format++;
ARM GAS  /tmp/ccDtGku3.s 			page 91


 3665              		.loc 1 818 9 is_stmt 1 view .LVU945
 3666              		.loc 1 818 15 is_stmt 0 view .LVU946
 3667 05d2 0D9B     		ldr	r3, [sp, #52]
 3668 05d4 0133     		adds	r3, r3, #1
 3669 05d6 0D93     		str	r3, [sp, #52]
 819:Core/Src/printf.c ****         break;
 3670              		.loc 1 819 9 is_stmt 1 view .LVU947
 3671 05d8 1DE5     		b	.L284
 3672              	.LVL415:
 3673              	.L322:
 3674              		.loc 1 819 9 is_stmt 0 view .LVU948
 3675 05da DDF828A0 		ldr	r10, [sp, #40]
 3676              	.LVL416:
 3677              		.loc 1 819 9 view .LVU949
 3678 05de 06E0     		b	.L281
 3679              	.LVL417:
 3680              	.L283:
 815:Core/Src/printf.c ****           }
 3681              		.loc 1 815 13 is_stmt 1 view .LVU950
 3682 05e0 551C     		adds	r5, r2, #1
 3683              	.LVL418:
 815:Core/Src/printf.c ****           }
 3684              		.loc 1 815 13 is_stmt 0 view .LVU951
 3685 05e2 3346     		mov	r3, r6
 3686 05e4 4146     		mov	r1, r8
 3687 05e6 2020     		movs	r0, #32
 3688 05e8 B847     		blx	r7
 3689              	.LVL419:
 814:Core/Src/printf.c ****           while (l++ < width) {
 3690              		.loc 1 814 19 view .LVU952
 3691 05ea A146     		mov	r9, r4
 815:Core/Src/printf.c ****           }
 3692              		.loc 1 815 13 view .LVU953
 3693 05ec 2A46     		mov	r2, r5
 3694              	.LVL420:
 3695              	.L281:
 814:Core/Src/printf.c ****           while (l++ < width) {
 3696              		.loc 1 814 17 is_stmt 1 view .LVU954
 814:Core/Src/printf.c ****           while (l++ < width) {
 3697              		.loc 1 814 19 is_stmt 0 view .LVU955
 3698 05ee 09F10104 		add	r4, r9, #1
 3699              	.LVL421:
 814:Core/Src/printf.c ****           while (l++ < width) {
 3700              		.loc 1 814 17 view .LVU956
 3701 05f2 CA45     		cmp	r10, r9
 3702 05f4 F4D8     		bhi	.L283
 814:Core/Src/printf.c ****           while (l++ < width) {
 3703              		.loc 1 814 17 view .LVU957
 3704 05f6 1446     		mov	r4, r2
 3705              	.LVL422:
 814:Core/Src/printf.c ****           while (l++ < width) {
 3706              		.loc 1 814 17 view .LVU958
 3707 05f8 EBE7     		b	.L282
 3708              	.LVL423:
 3709              	.L235:
 814:Core/Src/printf.c ****           while (l++ < width) {
 3710              		.loc 1 814 17 view .LVU959
ARM GAS  /tmp/ccDtGku3.s 			page 92


 3711              	.LBE47:
 3712              	.LBB50:
 820:Core/Src/printf.c ****       }
 821:Core/Src/printf.c **** 
 822:Core/Src/printf.c ****       case 'p' : {
 823:Core/Src/printf.c ****         width = sizeof(void*) * 2U;
 3713              		.loc 1 823 9 is_stmt 1 view .LVU960
 824:Core/Src/printf.c ****         flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 3714              		.loc 1 824 9 view .LVU961
 3715              		.loc 1 824 15 is_stmt 0 view .LVU962
 3716 05fa 45F02105 		orr	r5, r5, #33
 3717              	.LVL424:
 825:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 826:Core/Src/printf.c ****         const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 3718              		.loc 1 826 9 is_stmt 1 view .LVU963
 827:Core/Src/printf.c ****         if (is_ll) {
 3719              		.loc 1 827 9 view .LVU964
 828:Core/Src/printf.c ****           idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U,
 829:Core/Src/printf.c ****         }
 830:Core/Src/printf.c ****         else {
 831:Core/Src/printf.c **** #endif
 832:Core/Src/printf.c ****           idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)),
 3720              		.loc 1 832 11 view .LVU965
 3721              		.loc 1 832 81 is_stmt 0 view .LVU966
 3722 05fe 189B     		ldr	r3, [sp, #96]
 3723 0600 1A1D     		adds	r2, r3, #4
 3724 0602 1892     		str	r2, [sp, #96]
 3725 0604 1B68     		ldr	r3, [r3]
 3726              		.loc 1 832 17 view .LVU967
 3727 0606 0595     		str	r5, [sp, #20]
 3728 0608 0822     		movs	r2, #8
 3729 060a 0492     		str	r2, [sp, #16]
 3730 060c CDF80CB0 		str	fp, [sp, #12]
 3731 0610 1022     		movs	r2, #16
 3732 0612 0292     		str	r2, [sp, #8]
 3733 0614 0022     		movs	r2, #0
 3734 0616 0192     		str	r2, [sp, #4]
 3735 0618 0093     		str	r3, [sp]
 3736 061a 3346     		mov	r3, r6
 3737 061c 2246     		mov	r2, r4
 3738 061e 4146     		mov	r1, r8
 3739 0620 3846     		mov	r0, r7
 3740 0622 FFF7FEFF 		bl	_ntoa_long
 3741              	.LVL425:
 3742 0626 0446     		mov	r4, r0
 3743              	.LVL426:
 833:Core/Src/printf.c **** #if defined(PRINTF_SUPPORT_LONG_LONG)
 834:Core/Src/printf.c ****         }
 835:Core/Src/printf.c **** #endif
 836:Core/Src/printf.c ****         format++;
 3744              		.loc 1 836 9 is_stmt 1 view .LVU968
 3745              		.loc 1 836 15 is_stmt 0 view .LVU969
 3746 0628 0D9B     		ldr	r3, [sp, #52]
 3747 062a 0133     		adds	r3, r3, #1
 3748 062c 0D93     		str	r3, [sp, #52]
 837:Core/Src/printf.c ****         break;
 3749              		.loc 1 837 9 is_stmt 1 view .LVU970
ARM GAS  /tmp/ccDtGku3.s 			page 93


 3750 062e F2E4     		b	.L284
 3751              	.LVL427:
 3752              	.L239:
 3753              		.loc 1 837 9 is_stmt 0 view .LVU971
 3754              	.LBE50:
 838:Core/Src/printf.c ****       }
 839:Core/Src/printf.c **** 
 840:Core/Src/printf.c ****       case '%' :
 841:Core/Src/printf.c ****         out('%', buffer, idx++, maxlen);
 3755              		.loc 1 841 9 is_stmt 1 view .LVU972
 3756 0630 651C     		adds	r5, r4, #1
 3757              	.LVL428:
 3758              		.loc 1 841 9 is_stmt 0 view .LVU973
 3759 0632 3346     		mov	r3, r6
 3760 0634 2246     		mov	r2, r4
 3761 0636 4146     		mov	r1, r8
 3762 0638 2520     		movs	r0, #37
 3763 063a B847     		blx	r7
 3764              	.LVL429:
 842:Core/Src/printf.c ****         format++;
 3765              		.loc 1 842 9 is_stmt 1 view .LVU974
 3766              		.loc 1 842 15 is_stmt 0 view .LVU975
 3767 063c 0D9B     		ldr	r3, [sp, #52]
 3768 063e 0133     		adds	r3, r3, #1
 3769 0640 0D93     		str	r3, [sp, #52]
 843:Core/Src/printf.c ****         break;
 3770              		.loc 1 843 9 is_stmt 1 view .LVU976
 841:Core/Src/printf.c ****         format++;
 3771              		.loc 1 841 9 is_stmt 0 view .LVU977
 3772 0642 2C46     		mov	r4, r5
 3773              		.loc 1 843 9 view .LVU978
 3774 0644 E7E4     		b	.L284
 3775              	.LVL430:
 3776              	.L231:
 844:Core/Src/printf.c **** 
 845:Core/Src/printf.c ****       default :
 846:Core/Src/printf.c ****         out(*format, buffer, idx++, maxlen);
 3777              		.loc 1 846 9 is_stmt 1 view .LVU979
 3778 0646 651C     		adds	r5, r4, #1
 3779              	.LVL431:
 3780              		.loc 1 846 9 is_stmt 0 view .LVU980
 3781 0648 3346     		mov	r3, r6
 3782 064a 2246     		mov	r2, r4
 3783 064c 4146     		mov	r1, r8
 3784 064e B847     		blx	r7
 3785              	.LVL432:
 847:Core/Src/printf.c ****         format++;
 3786              		.loc 1 847 9 is_stmt 1 view .LVU981
 3787              		.loc 1 847 15 is_stmt 0 view .LVU982
 3788 0650 0D9B     		ldr	r3, [sp, #52]
 3789 0652 0133     		adds	r3, r3, #1
 3790 0654 0D93     		str	r3, [sp, #52]
 848:Core/Src/printf.c ****         break;
 3791              		.loc 1 848 9 is_stmt 1 view .LVU983
 846:Core/Src/printf.c ****         format++;
 3792              		.loc 1 846 9 is_stmt 0 view .LVU984
 3793 0656 2C46     		mov	r4, r5
ARM GAS  /tmp/ccDtGku3.s 			page 94


 3794              		.loc 1 848 9 view .LVU985
 3795 0658 DDE4     		b	.L284
 3796              	.LVL433:
 3797              	.L303:
 584:Core/Src/printf.c ****   }
 3798              		.loc 1 584 9 view .LVU986
 3799 065a 074F     		ldr	r7, .L323
 3800 065c DAE4     		b	.L204
 3801              	.LVL434:
 3802              	.L304:
 849:Core/Src/printf.c ****     }
 850:Core/Src/printf.c ****   }
 851:Core/Src/printf.c **** 
 852:Core/Src/printf.c ****   // termination
 853:Core/Src/printf.c ****   out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 3803              		.loc 1 853 3 is_stmt 1 view .LVU987
 3804 065e B442     		cmp	r4, r6
 3805 0660 01D3     		bcc	.L299
 3806              		.loc 1 853 3 is_stmt 0 discriminator 1 view .LVU988
 3807 0662 721E     		subs	r2, r6, #1
 3808 0664 00E0     		b	.L286
 3809              	.L299:
 3810              		.loc 1 853 3 view .LVU989
 3811 0666 2246     		mov	r2, r4
 3812              	.L286:
 3813              		.loc 1 853 3 discriminator 4 view .LVU990
 3814 0668 3346     		mov	r3, r6
 3815 066a 4146     		mov	r1, r8
 3816 066c 0020     		movs	r0, #0
 3817 066e B847     		blx	r7
 3818              	.LVL435:
 854:Core/Src/printf.c **** 
 855:Core/Src/printf.c ****   // return written chars without terminating \0
 856:Core/Src/printf.c ****   return (int)idx;
 3819              		.loc 1 856 3 is_stmt 1 discriminator 4 view .LVU991
 857:Core/Src/printf.c **** }
 3820              		.loc 1 857 1 is_stmt 0 discriminator 4 view .LVU992
 3821 0670 2046     		mov	r0, r4
 3822 0672 0FB0     		add	sp, sp, #60
 3823              	.LCFI26:
 3824              		.cfi_def_cfa_offset 36
 3825              		@ sp needed
 3826 0674 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3827              	.LVL436:
 3828              	.L324:
 3829              		.loc 1 857 1 discriminator 4 view .LVU993
 3830              		.align	2
 3831              	.L323:
 3832 0678 00000000 		.word	_out_null
 3833              		.cfi_endproc
 3834              	.LFE13:
 3836              		.section	.text._out_char,"ax",%progbits
 3837              		.align	1
 3838              		.syntax unified
 3839              		.thumb
 3840              		.thumb_func
 3841              		.fpu softvfp
ARM GAS  /tmp/ccDtGku3.s 			page 95


 3843              	_out_char:
 3844              	.LVL437:
 3845              	.LFB2:
 150:Core/Src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
 3846              		.loc 1 150 1 is_stmt 1 view -0
 3847              		.cfi_startproc
 3848              		@ args = 0, pretend = 0, frame = 0
 3849              		@ frame_needed = 0, uses_anonymous_args = 0
 151:Core/Src/printf.c ****   if (character) {
 3850              		.loc 1 151 3 view .LVU995
 151:Core/Src/printf.c ****   if (character) {
 3851              		.loc 1 151 17 view .LVU996
 151:Core/Src/printf.c ****   if (character) {
 3852              		.loc 1 151 28 view .LVU997
 152:Core/Src/printf.c ****     _putchar(character);
 3853              		.loc 1 152 3 view .LVU998
 152:Core/Src/printf.c ****     _putchar(character);
 3854              		.loc 1 152 6 is_stmt 0 view .LVU999
 3855 0000 00B9     		cbnz	r0, .L331
 3856 0002 7047     		bx	lr
 3857              	.L331:
 150:Core/Src/printf.c ****   (void)buffer; (void)idx; (void)maxlen;
 3858              		.loc 1 150 1 view .LVU1000
 3859 0004 08B5     		push	{r3, lr}
 3860              	.LCFI27:
 3861              		.cfi_def_cfa_offset 8
 3862              		.cfi_offset 3, -8
 3863              		.cfi_offset 14, -4
 153:Core/Src/printf.c ****   }
 3864              		.loc 1 153 5 is_stmt 1 view .LVU1001
 3865 0006 FFF7FEFF 		bl	_putchar
 3866              	.LVL438:
 155:Core/Src/printf.c **** 
 3867              		.loc 1 155 1 is_stmt 0 view .LVU1002
 3868 000a 08BD     		pop	{r3, pc}
 3869              		.cfi_endproc
 3870              	.LFE2:
 3872              		.section	.text.printf_,"ax",%progbits
 3873              		.align	1
 3874              		.global	printf_
 3875              		.syntax unified
 3876              		.thumb
 3877              		.thumb_func
 3878              		.fpu softvfp
 3880              	printf_:
 3881              	.LVL439:
 3882              	.LFB14:
 858:Core/Src/printf.c **** 
 859:Core/Src/printf.c **** 
 860:Core/Src/printf.c **** ///////////////////////////////////////////////////////////////////////////////
 861:Core/Src/printf.c **** 
 862:Core/Src/printf.c **** int printf_(const char* format, ...)
 863:Core/Src/printf.c **** {
 3883              		.loc 1 863 1 is_stmt 1 view -0
 3884              		.cfi_startproc
 3885              		@ args = 4, pretend = 16, frame = 8
 3886              		@ frame_needed = 0, uses_anonymous_args = 1
ARM GAS  /tmp/ccDtGku3.s 			page 96


 3887              		.loc 1 863 1 is_stmt 0 view .LVU1004
 3888 0000 0FB4     		push	{r0, r1, r2, r3}
 3889              	.LCFI28:
 3890              		.cfi_def_cfa_offset 16
 3891              		.cfi_offset 0, -16
 3892              		.cfi_offset 1, -12
 3893              		.cfi_offset 2, -8
 3894              		.cfi_offset 3, -4
 3895 0002 00B5     		push	{lr}
 3896              	.LCFI29:
 3897              		.cfi_def_cfa_offset 20
 3898              		.cfi_offset 14, -20
 3899 0004 85B0     		sub	sp, sp, #20
 3900              	.LCFI30:
 3901              		.cfi_def_cfa_offset 40
 3902 0006 06AA     		add	r2, sp, #24
 3903 0008 52F8043B 		ldr	r3, [r2], #4
 864:Core/Src/printf.c ****   va_list va;
 3904              		.loc 1 864 3 is_stmt 1 view .LVU1005
 865:Core/Src/printf.c ****   va_start(va, format);
 3905              		.loc 1 865 3 view .LVU1006
 3906 000c 0392     		str	r2, [sp, #12]
 866:Core/Src/printf.c ****   char buffer[1];
 3907              		.loc 1 866 3 view .LVU1007
 867:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 3908              		.loc 1 867 3 view .LVU1008
 3909              		.loc 1 867 19 is_stmt 0 view .LVU1009
 3910 000e 0092     		str	r2, [sp]
 3911 0010 4FF0FF32 		mov	r2, #-1
 3912 0014 02A9     		add	r1, sp, #8
 3913 0016 0448     		ldr	r0, .L334
 3914 0018 FFF7FEFF 		bl	_vsnprintf
 3915              	.LVL440:
 868:Core/Src/printf.c ****   va_end(va);
 3916              		.loc 1 868 3 is_stmt 1 view .LVU1010
 869:Core/Src/printf.c ****   return ret;
 3917              		.loc 1 869 3 view .LVU1011
 870:Core/Src/printf.c **** }
 3918              		.loc 1 870 1 is_stmt 0 view .LVU1012
 3919 001c 05B0     		add	sp, sp, #20
 3920              	.LCFI31:
 3921              		.cfi_def_cfa_offset 20
 3922              		@ sp needed
 3923 001e 5DF804EB 		ldr	lr, [sp], #4
 3924              	.LCFI32:
 3925              		.cfi_restore 14
 3926              		.cfi_def_cfa_offset 16
 3927 0022 04B0     		add	sp, sp, #16
 3928              	.LCFI33:
 3929              		.cfi_restore 3
 3930              		.cfi_restore 2
 3931              		.cfi_restore 1
 3932              		.cfi_restore 0
 3933              		.cfi_def_cfa_offset 0
 3934 0024 7047     		bx	lr
 3935              	.L335:
 3936 0026 00BF     		.align	2
ARM GAS  /tmp/ccDtGku3.s 			page 97


 3937              	.L334:
 3938 0028 00000000 		.word	_out_char
 3939              		.cfi_endproc
 3940              	.LFE14:
 3942              		.section	.text.sprintf_,"ax",%progbits
 3943              		.align	1
 3944              		.global	sprintf_
 3945              		.syntax unified
 3946              		.thumb
 3947              		.thumb_func
 3948              		.fpu softvfp
 3950              	sprintf_:
 3951              	.LVL441:
 3952              	.LFB15:
 871:Core/Src/printf.c **** 
 872:Core/Src/printf.c **** 
 873:Core/Src/printf.c **** int sprintf_(char* buffer, const char* format, ...)
 874:Core/Src/printf.c **** {
 3953              		.loc 1 874 1 is_stmt 1 view -0
 3954              		.cfi_startproc
 3955              		@ args = 4, pretend = 12, frame = 8
 3956              		@ frame_needed = 0, uses_anonymous_args = 1
 3957              		.loc 1 874 1 is_stmt 0 view .LVU1014
 3958 0000 0EB4     		push	{r1, r2, r3}
 3959              	.LCFI34:
 3960              		.cfi_def_cfa_offset 12
 3961              		.cfi_offset 1, -12
 3962              		.cfi_offset 2, -8
 3963              		.cfi_offset 3, -4
 3964 0002 00B5     		push	{lr}
 3965              	.LCFI35:
 3966              		.cfi_def_cfa_offset 16
 3967              		.cfi_offset 14, -16
 3968 0004 84B0     		sub	sp, sp, #16
 3969              	.LCFI36:
 3970              		.cfi_def_cfa_offset 32
 3971 0006 0146     		mov	r1, r0
 3972 0008 05AA     		add	r2, sp, #20
 3973 000a 52F8043B 		ldr	r3, [r2], #4
 875:Core/Src/printf.c ****   va_list va;
 3974              		.loc 1 875 3 is_stmt 1 view .LVU1015
 876:Core/Src/printf.c ****   va_start(va, format);
 3975              		.loc 1 876 3 view .LVU1016
 3976 000e 0392     		str	r2, [sp, #12]
 877:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 3977              		.loc 1 877 3 view .LVU1017
 3978              		.loc 1 877 19 is_stmt 0 view .LVU1018
 3979 0010 0092     		str	r2, [sp]
 3980 0012 4FF0FF32 		mov	r2, #-1
 3981 0016 0448     		ldr	r0, .L338
 3982              	.LVL442:
 3983              		.loc 1 877 19 view .LVU1019
 3984 0018 FFF7FEFF 		bl	_vsnprintf
 3985              	.LVL443:
 878:Core/Src/printf.c ****   va_end(va);
 3986              		.loc 1 878 3 is_stmt 1 view .LVU1020
 879:Core/Src/printf.c ****   return ret;
ARM GAS  /tmp/ccDtGku3.s 			page 98


 3987              		.loc 1 879 3 view .LVU1021
 880:Core/Src/printf.c **** }
 3988              		.loc 1 880 1 is_stmt 0 view .LVU1022
 3989 001c 04B0     		add	sp, sp, #16
 3990              	.LCFI37:
 3991              		.cfi_def_cfa_offset 16
 3992              		@ sp needed
 3993 001e 5DF804EB 		ldr	lr, [sp], #4
 3994              	.LCFI38:
 3995              		.cfi_restore 14
 3996              		.cfi_def_cfa_offset 12
 3997 0022 03B0     		add	sp, sp, #12
 3998              	.LCFI39:
 3999              		.cfi_restore 3
 4000              		.cfi_restore 2
 4001              		.cfi_restore 1
 4002              		.cfi_def_cfa_offset 0
 4003 0024 7047     		bx	lr
 4004              	.L339:
 4005 0026 00BF     		.align	2
 4006              	.L338:
 4007 0028 00000000 		.word	_out_buffer
 4008              		.cfi_endproc
 4009              	.LFE15:
 4011              		.section	.text.snprintf_,"ax",%progbits
 4012              		.align	1
 4013              		.global	snprintf_
 4014              		.syntax unified
 4015              		.thumb
 4016              		.thumb_func
 4017              		.fpu softvfp
 4019              	snprintf_:
 4020              	.LVL444:
 4021              	.LFB16:
 881:Core/Src/printf.c **** 
 882:Core/Src/printf.c **** 
 883:Core/Src/printf.c **** int snprintf_(char* buffer, size_t count, const char* format, ...)
 884:Core/Src/printf.c **** {
 4022              		.loc 1 884 1 is_stmt 1 view -0
 4023              		.cfi_startproc
 4024              		@ args = 4, pretend = 8, frame = 8
 4025              		@ frame_needed = 0, uses_anonymous_args = 1
 4026              		.loc 1 884 1 is_stmt 0 view .LVU1024
 4027 0000 0CB4     		push	{r2, r3}
 4028              	.LCFI40:
 4029              		.cfi_def_cfa_offset 8
 4030              		.cfi_offset 2, -8
 4031              		.cfi_offset 3, -4
 4032 0002 10B5     		push	{r4, lr}
 4033              	.LCFI41:
 4034              		.cfi_def_cfa_offset 16
 4035              		.cfi_offset 4, -16
 4036              		.cfi_offset 14, -12
 4037 0004 84B0     		sub	sp, sp, #16
 4038              	.LCFI42:
 4039              		.cfi_def_cfa_offset 32
 4040 0006 0A46     		mov	r2, r1
ARM GAS  /tmp/ccDtGku3.s 			page 99


 4041 0008 06AC     		add	r4, sp, #24
 4042 000a 54F8043B 		ldr	r3, [r4], #4
 885:Core/Src/printf.c ****   va_list va;
 4043              		.loc 1 885 3 is_stmt 1 view .LVU1025
 886:Core/Src/printf.c ****   va_start(va, format);
 4044              		.loc 1 886 3 view .LVU1026
 4045 000e 0394     		str	r4, [sp, #12]
 887:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 4046              		.loc 1 887 3 view .LVU1027
 4047              		.loc 1 887 19 is_stmt 0 view .LVU1028
 4048 0010 0094     		str	r4, [sp]
 4049 0012 0146     		mov	r1, r0
 4050              	.LVL445:
 4051              		.loc 1 887 19 view .LVU1029
 4052 0014 0348     		ldr	r0, .L342
 4053              	.LVL446:
 4054              		.loc 1 887 19 view .LVU1030
 4055 0016 FFF7FEFF 		bl	_vsnprintf
 4056              	.LVL447:
 888:Core/Src/printf.c ****   va_end(va);
 4057              		.loc 1 888 3 is_stmt 1 view .LVU1031
 889:Core/Src/printf.c ****   return ret;
 4058              		.loc 1 889 3 view .LVU1032
 890:Core/Src/printf.c **** }
 4059              		.loc 1 890 1 is_stmt 0 view .LVU1033
 4060 001a 04B0     		add	sp, sp, #16
 4061              	.LCFI43:
 4062              		.cfi_def_cfa_offset 16
 4063              		@ sp needed
 4064 001c BDE81040 		pop	{r4, lr}
 4065              	.LCFI44:
 4066              		.cfi_restore 14
 4067              		.cfi_restore 4
 4068              		.cfi_def_cfa_offset 8
 4069 0020 02B0     		add	sp, sp, #8
 4070              	.LCFI45:
 4071              		.cfi_restore 3
 4072              		.cfi_restore 2
 4073              		.cfi_def_cfa_offset 0
 4074 0022 7047     		bx	lr
 4075              	.L343:
 4076              		.align	2
 4077              	.L342:
 4078 0024 00000000 		.word	_out_buffer
 4079              		.cfi_endproc
 4080              	.LFE16:
 4082              		.section	.text.vprintf_,"ax",%progbits
 4083              		.align	1
 4084              		.global	vprintf_
 4085              		.syntax unified
 4086              		.thumb
 4087              		.thumb_func
 4088              		.fpu softvfp
 4090              	vprintf_:
 4091              	.LVL448:
 4092              	.LFB17:
 891:Core/Src/printf.c **** 
ARM GAS  /tmp/ccDtGku3.s 			page 100


 892:Core/Src/printf.c **** 
 893:Core/Src/printf.c **** int vprintf_(const char* format, va_list va)
 894:Core/Src/printf.c **** {
 4093              		.loc 1 894 1 is_stmt 1 view -0
 4094              		.cfi_startproc
 4095              		@ args = 0, pretend = 0, frame = 8
 4096              		@ frame_needed = 0, uses_anonymous_args = 0
 4097              		.loc 1 894 1 is_stmt 0 view .LVU1035
 4098 0000 00B5     		push	{lr}
 4099              	.LCFI46:
 4100              		.cfi_def_cfa_offset 4
 4101              		.cfi_offset 14, -4
 4102 0002 85B0     		sub	sp, sp, #20
 4103              	.LCFI47:
 4104              		.cfi_def_cfa_offset 24
 4105 0004 0346     		mov	r3, r0
 895:Core/Src/printf.c ****   char buffer[1];
 4106              		.loc 1 895 3 is_stmt 1 view .LVU1036
 896:Core/Src/printf.c ****   return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 4107              		.loc 1 896 3 view .LVU1037
 4108              		.loc 1 896 10 is_stmt 0 view .LVU1038
 4109 0006 0091     		str	r1, [sp]
 4110 0008 4FF0FF32 		mov	r2, #-1
 4111 000c 03A9     		add	r1, sp, #12
 4112              	.LVL449:
 4113              		.loc 1 896 10 view .LVU1039
 4114 000e 0348     		ldr	r0, .L346
 4115              	.LVL450:
 4116              		.loc 1 896 10 view .LVU1040
 4117 0010 FFF7FEFF 		bl	_vsnprintf
 4118              	.LVL451:
 897:Core/Src/printf.c **** }
 4119              		.loc 1 897 1 view .LVU1041
 4120 0014 05B0     		add	sp, sp, #20
 4121              	.LCFI48:
 4122              		.cfi_def_cfa_offset 4
 4123              		@ sp needed
 4124 0016 5DF804FB 		ldr	pc, [sp], #4
 4125              	.L347:
 4126 001a 00BF     		.align	2
 4127              	.L346:
 4128 001c 00000000 		.word	_out_char
 4129              		.cfi_endproc
 4130              	.LFE17:
 4132              		.section	.text.vsnprintf_,"ax",%progbits
 4133              		.align	1
 4134              		.global	vsnprintf_
 4135              		.syntax unified
 4136              		.thumb
 4137              		.thumb_func
 4138              		.fpu softvfp
 4140              	vsnprintf_:
 4141              	.LVL452:
 4142              	.LFB18:
 898:Core/Src/printf.c **** 
 899:Core/Src/printf.c **** 
 900:Core/Src/printf.c **** int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
ARM GAS  /tmp/ccDtGku3.s 			page 101


 901:Core/Src/printf.c **** {
 4143              		.loc 1 901 1 is_stmt 1 view -0
 4144              		.cfi_startproc
 4145              		@ args = 0, pretend = 0, frame = 0
 4146              		@ frame_needed = 0, uses_anonymous_args = 0
 4147              		.loc 1 901 1 is_stmt 0 view .LVU1043
 4148 0000 00B5     		push	{lr}
 4149              	.LCFI49:
 4150              		.cfi_def_cfa_offset 4
 4151              		.cfi_offset 14, -4
 4152 0002 83B0     		sub	sp, sp, #12
 4153              	.LCFI50:
 4154              		.cfi_def_cfa_offset 16
 902:Core/Src/printf.c ****   return _vsnprintf(_out_buffer, buffer, count, format, va);
 4155              		.loc 1 902 3 is_stmt 1 view .LVU1044
 4156              		.loc 1 902 10 is_stmt 0 view .LVU1045
 4157 0004 0093     		str	r3, [sp]
 4158 0006 1346     		mov	r3, r2
 4159              	.LVL453:
 4160              		.loc 1 902 10 view .LVU1046
 4161 0008 0A46     		mov	r2, r1
 4162              	.LVL454:
 4163              		.loc 1 902 10 view .LVU1047
 4164 000a 0146     		mov	r1, r0
 4165              	.LVL455:
 4166              		.loc 1 902 10 view .LVU1048
 4167 000c 0248     		ldr	r0, .L350
 4168              	.LVL456:
 4169              		.loc 1 902 10 view .LVU1049
 4170 000e FFF7FEFF 		bl	_vsnprintf
 4171              	.LVL457:
 903:Core/Src/printf.c **** }
 4172              		.loc 1 903 1 view .LVU1050
 4173 0012 03B0     		add	sp, sp, #12
 4174              	.LCFI51:
 4175              		.cfi_def_cfa_offset 4
 4176              		@ sp needed
 4177 0014 5DF804FB 		ldr	pc, [sp], #4
 4178              	.L351:
 4179              		.align	2
 4180              	.L350:
 4181 0018 00000000 		.word	_out_buffer
 4182              		.cfi_endproc
 4183              	.LFE18:
 4185              		.section	.text.fctprintf,"ax",%progbits
 4186              		.align	1
 4187              		.global	fctprintf
 4188              		.syntax unified
 4189              		.thumb
 4190              		.thumb_func
 4191              		.fpu softvfp
 4193              	fctprintf:
 4194              	.LVL458:
 4195              	.LFB19:
 904:Core/Src/printf.c **** 
 905:Core/Src/printf.c **** 
 906:Core/Src/printf.c **** int fctprintf(void (*out)(char character, void* arg), void* arg, const char* format, ...)
ARM GAS  /tmp/ccDtGku3.s 			page 102


 907:Core/Src/printf.c **** {
 4196              		.loc 1 907 1 is_stmt 1 view -0
 4197              		.cfi_startproc
 4198              		@ args = 4, pretend = 8, frame = 16
 4199              		@ frame_needed = 0, uses_anonymous_args = 1
 4200              		.loc 1 907 1 is_stmt 0 view .LVU1052
 4201 0000 0CB4     		push	{r2, r3}
 4202              	.LCFI52:
 4203              		.cfi_def_cfa_offset 8
 4204              		.cfi_offset 2, -8
 4205              		.cfi_offset 3, -4
 4206 0002 00B5     		push	{lr}
 4207              	.LCFI53:
 4208              		.cfi_def_cfa_offset 12
 4209              		.cfi_offset 14, -12
 4210 0004 87B0     		sub	sp, sp, #28
 4211              	.LCFI54:
 4212              		.cfi_def_cfa_offset 40
 4213 0006 08AA     		add	r2, sp, #32
 4214 0008 52F8043B 		ldr	r3, [r2], #4
 908:Core/Src/printf.c ****   va_list va;
 4215              		.loc 1 908 3 is_stmt 1 view .LVU1053
 909:Core/Src/printf.c ****   va_start(va, format);
 4216              		.loc 1 909 3 view .LVU1054
 4217 000c 0592     		str	r2, [sp, #20]
 910:Core/Src/printf.c ****   const out_fct_wrap_type out_fct_wrap = { out, arg };
 4218              		.loc 1 910 3 view .LVU1055
 4219              		.loc 1 910 27 is_stmt 0 view .LVU1056
 4220 000e 0390     		str	r0, [sp, #12]
 4221 0010 0491     		str	r1, [sp, #16]
 911:Core/Src/printf.c ****   const int ret = _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 4222              		.loc 1 911 3 is_stmt 1 view .LVU1057
 4223              		.loc 1 911 19 is_stmt 0 view .LVU1058
 4224 0012 0092     		str	r2, [sp]
 4225 0014 4FF0FF32 		mov	r2, #-1
 4226 0018 03A9     		add	r1, sp, #12
 4227 001a 0448     		ldr	r0, .L354
 4228              	.LVL459:
 4229              		.loc 1 911 19 view .LVU1059
 4230 001c FFF7FEFF 		bl	_vsnprintf
 4231              	.LVL460:
 912:Core/Src/printf.c ****   va_end(va);
 4232              		.loc 1 912 3 is_stmt 1 view .LVU1060
 913:Core/Src/printf.c ****   return ret;
 4233              		.loc 1 913 3 view .LVU1061
 914:Core/Src/printf.c **** }
 4234              		.loc 1 914 1 is_stmt 0 view .LVU1062
 4235 0020 07B0     		add	sp, sp, #28
 4236              	.LCFI55:
 4237              		.cfi_def_cfa_offset 12
 4238              		@ sp needed
 4239 0022 5DF804EB 		ldr	lr, [sp], #4
 4240              	.LCFI56:
 4241              		.cfi_restore 14
 4242              		.cfi_def_cfa_offset 8
 4243 0026 02B0     		add	sp, sp, #8
 4244              	.LCFI57:
ARM GAS  /tmp/ccDtGku3.s 			page 103


 4245              		.cfi_restore 3
 4246              		.cfi_restore 2
 4247              		.cfi_def_cfa_offset 0
 4248 0028 7047     		bx	lr
 4249              	.L355:
 4250 002a 00BF     		.align	2
 4251              	.L354:
 4252 002c 00000000 		.word	_out_fct
 4253              		.cfi_endproc
 4254              	.LFE19:
 4256              		.section	.rodata.pow10.0,"a"
 4257              		.align	3
 4258              		.set	.LANCHOR0,. + 0
 4261              	pow10.0:
 4262 0000 00000000 		.word	0
 4263 0004 0000F03F 		.word	1072693248
 4264 0008 00000000 		.word	0
 4265 000c 00002440 		.word	1076101120
 4266 0010 00000000 		.word	0
 4267 0014 00005940 		.word	1079574528
 4268 0018 00000000 		.word	0
 4269 001c 00408F40 		.word	1083129856
 4270 0020 00000000 		.word	0
 4271 0024 0088C340 		.word	1086556160
 4272 0028 00000000 		.word	0
 4273 002c 006AF840 		.word	1090021888
 4274 0030 00000000 		.word	0
 4275 0034 80842E41 		.word	1093567616
 4276 0038 00000000 		.word	0
 4277 003c D0126341 		.word	1097011920
 4278 0040 00000000 		.word	0
 4279 0044 84D79741 		.word	1100470148
 4280 0048 00000000 		.word	0
 4281 004c 65CDCD41 		.word	1104006501
 4282              		.text
 4283              	.Letext0:
 4284              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 4285              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4286              		.file 4 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4287              		.file 5 "<built-in>"
 4288              		.file 6 "Core/Inc/printf.h"
ARM GAS  /tmp/ccDtGku3.s 			page 104


DEFINED SYMBOLS
                            *ABS*:0000000000000000 printf.c
     /tmp/ccDtGku3.s:16     .text._out_buffer:0000000000000000 $t
     /tmp/ccDtGku3.s:23     .text._out_buffer:0000000000000000 _out_buffer
     /tmp/ccDtGku3.s:46     .text._out_null:0000000000000000 $t
     /tmp/ccDtGku3.s:52     .text._out_null:0000000000000000 _out_null
     /tmp/ccDtGku3.s:70     .text._out_fct:0000000000000000 $t
     /tmp/ccDtGku3.s:76     .text._out_fct:0000000000000000 _out_fct
     /tmp/ccDtGku3.s:118    .text._atoi:0000000000000000 $t
     /tmp/ccDtGku3.s:124    .text._atoi:0000000000000000 _atoi
     /tmp/ccDtGku3.s:189    .text._out_rev:0000000000000000 $t
     /tmp/ccDtGku3.s:195    .text._out_rev:0000000000000000 _out_rev
     /tmp/ccDtGku3.s:329    .text._ntoa_format:0000000000000000 $t
     /tmp/ccDtGku3.s:335    .text._ntoa_format:0000000000000000 _ntoa_format
     /tmp/ccDtGku3.s:613    .text._ntoa_long:0000000000000000 $t
     /tmp/ccDtGku3.s:619    .text._ntoa_long:0000000000000000 _ntoa_long
     /tmp/ccDtGku3.s:767    .text._ntoa_long_long:0000000000000000 $t
     /tmp/ccDtGku3.s:773    .text._ntoa_long_long:0000000000000000 _ntoa_long_long
     /tmp/ccDtGku3.s:954    .text._etoa:0000000000000000 $t
     /tmp/ccDtGku3.s:960    .text._etoa:0000000000000000 _etoa
     /tmp/ccDtGku3.s:1646   .text._ftoa:0000000000000000 _ftoa
     /tmp/ccDtGku3.s:1439   .text._etoa:00000000000002a8 $d
     /tmp/ccDtGku3.s:1465   .text._etoa:0000000000000304 $t
     /tmp/ccDtGku3.s:1624   .rodata._ftoa.str1.4:0000000000000000 $d
     /tmp/ccDtGku3.s:1640   .text._ftoa:0000000000000000 $t
     /tmp/ccDtGku3.s:2168   .text._ftoa:00000000000002a8 $d
     /tmp/ccDtGku3.s:2183   .text._ftoa:00000000000002dc $t
     /tmp/ccDtGku3.s:2330   .text._vsnprintf:0000000000000000 $t
     /tmp/ccDtGku3.s:2336   .text._vsnprintf:0000000000000000 _vsnprintf
     /tmp/ccDtGku3.s:2432   .text._vsnprintf:000000000000004e $d
     /tmp/ccDtGku3.s:2501   .text._vsnprintf:000000000000008c $d
     /tmp/ccDtGku3.s:2790   .text._vsnprintf:000000000000018a $d
     /tmp/ccDtGku3.s:2874   .text._vsnprintf:0000000000000232 $t
     /tmp/ccDtGku3.s:3832   .text._vsnprintf:0000000000000678 $d
     /tmp/ccDtGku3.s:3837   .text._out_char:0000000000000000 $t
     /tmp/ccDtGku3.s:3843   .text._out_char:0000000000000000 _out_char
     /tmp/ccDtGku3.s:3873   .text.printf_:0000000000000000 $t
     /tmp/ccDtGku3.s:3880   .text.printf_:0000000000000000 printf_
     /tmp/ccDtGku3.s:3938   .text.printf_:0000000000000028 $d
     /tmp/ccDtGku3.s:3943   .text.sprintf_:0000000000000000 $t
     /tmp/ccDtGku3.s:3950   .text.sprintf_:0000000000000000 sprintf_
     /tmp/ccDtGku3.s:4007   .text.sprintf_:0000000000000028 $d
     /tmp/ccDtGku3.s:4012   .text.snprintf_:0000000000000000 $t
     /tmp/ccDtGku3.s:4019   .text.snprintf_:0000000000000000 snprintf_
     /tmp/ccDtGku3.s:4078   .text.snprintf_:0000000000000024 $d
     /tmp/ccDtGku3.s:4083   .text.vprintf_:0000000000000000 $t
     /tmp/ccDtGku3.s:4090   .text.vprintf_:0000000000000000 vprintf_
     /tmp/ccDtGku3.s:4128   .text.vprintf_:000000000000001c $d
     /tmp/ccDtGku3.s:4133   .text.vsnprintf_:0000000000000000 $t
     /tmp/ccDtGku3.s:4140   .text.vsnprintf_:0000000000000000 vsnprintf_
     /tmp/ccDtGku3.s:4181   .text.vsnprintf_:0000000000000018 $d
     /tmp/ccDtGku3.s:4186   .text.fctprintf:0000000000000000 $t
     /tmp/ccDtGku3.s:4193   .text.fctprintf:0000000000000000 fctprintf
     /tmp/ccDtGku3.s:4252   .text.fctprintf:000000000000002c $d
     /tmp/ccDtGku3.s:4257   .rodata.pow10.0:0000000000000000 $d
     /tmp/ccDtGku3.s:4261   .rodata.pow10.0:0000000000000000 pow10.0
     /tmp/ccDtGku3.s:2449   .text._vsnprintf:000000000000005f $d
ARM GAS  /tmp/ccDtGku3.s 			page 105


     /tmp/ccDtGku3.s:2449   .text._vsnprintf:0000000000000060 $t
     /tmp/ccDtGku3.s:2521   .text._vsnprintf:000000000000009f $d
     /tmp/ccDtGku3.s:2521   .text._vsnprintf:00000000000000a0 $t

UNDEFINED SYMBOLS
__aeabi_uldivmod
__aeabi_dcmpeq
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_dsub
__aeabi_d2iz
__aeabi_ddiv
__aeabi_dcmpge
__aeabi_d2uiz
__aeabi_ui2d
__aeabi_dcmple
_putchar

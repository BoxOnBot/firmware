ARM GAS  /tmp/cc6ZXLtF.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_fsub
  16              		.global	__aeabi_fmul
  17              		.global	__aeabi_fadd
  18              		.section	.text.FusionCalibrationInertial,"ax",%progbits
  19              		.align	1
  20              		.arch armv7-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu softvfp
  26              	FusionCalibrationInertial:
  27              	.LVL0:
  28              	.LFB87:
  29              		.file 1 "Core/Inc/Fusion/FusionCalibration.h"
   1:Core/Inc/Fusion/FusionCalibration.h **** /**
   2:Core/Inc/Fusion/FusionCalibration.h ****  * @file FusionCalibration.h
   3:Core/Inc/Fusion/FusionCalibration.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionCalibration.h ****  * @brief Gyroscope, accelerometer, and magnetometer calibration models.
   5:Core/Inc/Fusion/FusionCalibration.h ****  */
   6:Core/Inc/Fusion/FusionCalibration.h **** 
   7:Core/Inc/Fusion/FusionCalibration.h **** #ifndef FUSION_CALIBRATION_H
   8:Core/Inc/Fusion/FusionCalibration.h **** #define FUSION_CALIBRATION_H
   9:Core/Inc/Fusion/FusionCalibration.h **** 
  10:Core/Inc/Fusion/FusionCalibration.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionCalibration.h **** // Includes
  12:Core/Inc/Fusion/FusionCalibration.h **** 
  13:Core/Inc/Fusion/FusionCalibration.h **** #include "FusionMath.h"
  14:Core/Inc/Fusion/FusionCalibration.h **** 
  15:Core/Inc/Fusion/FusionCalibration.h **** //------------------------------------------------------------------------------
  16:Core/Inc/Fusion/FusionCalibration.h **** // Inline functions
  17:Core/Inc/Fusion/FusionCalibration.h **** 
  18:Core/Inc/Fusion/FusionCalibration.h **** /**
  19:Core/Inc/Fusion/FusionCalibration.h ****  * @brief Gyroscope and accelerometer calibration model.
  20:Core/Inc/Fusion/FusionCalibration.h ****  * @param uncalibrated Uncalibrated measurement.
  21:Core/Inc/Fusion/FusionCalibration.h ****  * @param misalignment Misalignment matrix.
  22:Core/Inc/Fusion/FusionCalibration.h ****  * @param sensitivity Sensitivity.
  23:Core/Inc/Fusion/FusionCalibration.h ****  * @param offset Offset.
  24:Core/Inc/Fusion/FusionCalibration.h ****  * @return Calibrated measurement.
  25:Core/Inc/Fusion/FusionCalibration.h ****  */
  26:Core/Inc/Fusion/FusionCalibration.h **** static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionM
  30              		.loc 1 26 179 view -0
  31              		.cfi_startproc
  32              		@ args = 60, pretend = 0, frame = 104
ARM GAS  /tmp/cc6ZXLtF.s 			page 2


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 26 179 is_stmt 0 view .LVU1
  35 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 32
  38              		.cfi_offset 4, -32
  39              		.cfi_offset 5, -28
  40              		.cfi_offset 6, -24
  41              		.cfi_offset 7, -20
  42              		.cfi_offset 8, -16
  43              		.cfi_offset 9, -12
  44              		.cfi_offset 10, -8
  45              		.cfi_offset 14, -4
  46 0004 9AB0     		sub	sp, sp, #104
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 136
  49 0006 0746     		mov	r7, r0
  50 0008 01A8     		add	r0, sp, #4
  51              	.LVL1:
  52              		.loc 1 26 179 view .LVU2
  53 000a 80E80E00 		stm	r0, {r1, r2, r3}
  27:Core/Inc/Fusion/FusionCalibration.h ****     return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtrac
  54              		.loc 1 27 5 is_stmt 1 view .LVU3
  55 000e 05AE     		add	r6, sp, #20
  56 0010 07C8     		ldm	r0, {r0, r1, r2}
  57 0012 86E80B00 		stm	r6, {r0, r1, r3}
  58 0016 08AD     		add	r5, sp, #32
  59 0018 2EAB     		add	r3, sp, #184
  60 001a 93E80700 		ldm	r3, {r0, r1, r2}
  61 001e 85E80700 		stm	r5, {r0, r1, r2}
  62              	.LBB29:
  63              	.LBI29:
  64              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
ARM GAS  /tmp/cc6ZXLtF.s 			page 3


  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
ARM GAS  /tmp/cc6ZXLtF.s 			page 4


  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/cc6ZXLtF.s 			page 5


 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
ARM GAS  /tmp/cc6ZXLtF.s 			page 6


 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
  65              		.loc 2 215 28 view .LVU4
  66              	.LBB30:
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
  67              		.loc 2 216 5 view .LVU5
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
  68              		.loc 2 217 5 view .LVU6
  69              		.loc 2 217 36 is_stmt 0 view .LVU7
  70 0022 0899     		ldr	r1, [sp, #32]	@ float
  71 0024 0598     		ldr	r0, [sp, #20]	@ float
  72 0026 FFF7FEFF 		bl	__aeabi_fsub
  73              	.LVL2:
  74 002a 8246     		mov	r10, r0
  75              		.loc 2 217 19 view .LVU8
  76 002c 0B90     		str	r0, [sp, #44]	@ float
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
  77              		.loc 2 218 5 is_stmt 1 view .LVU9
  78              		.loc 2 218 36 is_stmt 0 view .LVU10
  79 002e 0999     		ldr	r1, [sp, #36]	@ float
  80 0030 0698     		ldr	r0, [sp, #24]	@ float
  81 0032 FFF7FEFF 		bl	__aeabi_fsub
  82              	.LVL3:
  83 0036 8146     		mov	r9, r0
  84              		.loc 2 218 19 view .LVU11
  85 0038 0C90     		str	r0, [sp, #48]	@ float
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
  86              		.loc 2 219 5 is_stmt 1 view .LVU12
  87              		.loc 2 219 36 is_stmt 0 view .LVU13
  88 003a 0A99     		ldr	r1, [sp, #40]	@ float
  89 003c 0798     		ldr	r0, [sp, #28]	@ float
  90 003e FFF7FEFF 		bl	__aeabi_fsub
  91              	.LVL4:
  92 0042 8046     		mov	r8, r0
  93              		.loc 2 219 19 view .LVU14
  94 0044 0D90     		str	r0, [sp, #52]	@ float
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
  95              		.loc 2 220 5 is_stmt 1 view .LVU15
  96              		.loc 2 220 12 is_stmt 0 view .LVU16
ARM GAS  /tmp/cc6ZXLtF.s 			page 7


  97 0046 14AB     		add	r3, sp, #80
  98 0048 0BAC     		add	r4, sp, #44
  99 004a 94E80700 		ldm	r4, {r0, r1, r2}
 100 004e 83E80700 		stm	r3, {r0, r1, r2}
 101 0052 86E80700 		stm	r6, {r0, r1, r2}
 102 0056 2BAB     		add	r3, sp, #172
 103 0058 93E80700 		ldm	r3, {r0, r1, r2}
 104 005c 85E80700 		stm	r5, {r0, r1, r2}
 105              	.LBE30:
 106              	.LBE29:
 107              	.LBB31:
 108              	.LBI31:
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 244:Core/Inc/Fusion/FusionMath.h **** }
 245:Core/Inc/Fusion/FusionMath.h **** 
 246:Core/Inc/Fusion/FusionMath.h **** /**
 247:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 248:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 249:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 250:Core/Inc/Fusion/FusionMath.h ****  * @return Hadamard product.
 251:Core/Inc/Fusion/FusionMath.h ****  */
 252:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 109              		.loc 2 252 28 is_stmt 1 view .LVU17
 110              	.LBB32:
 253:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 111              		.loc 2 253 5 view .LVU18
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 112              		.loc 2 254 5 view .LVU19
 113              		.loc 2 254 36 is_stmt 0 view .LVU20
 114 0060 5146     		mov	r1, r10
 115 0062 0898     		ldr	r0, [sp, #32]	@ float
 116 0064 FFF7FEFF 		bl	__aeabi_fmul
 117              	.LVL5:
 118              		.loc 2 254 19 view .LVU21
 119 0068 0B90     		str	r0, [sp, #44]	@ float
ARM GAS  /tmp/cc6ZXLtF.s 			page 8


 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 120              		.loc 2 255 5 is_stmt 1 view .LVU22
 121              		.loc 2 255 36 is_stmt 0 view .LVU23
 122 006a 4946     		mov	r1, r9
 123 006c 0998     		ldr	r0, [sp, #36]	@ float
 124 006e FFF7FEFF 		bl	__aeabi_fmul
 125              	.LVL6:
 126              		.loc 2 255 19 view .LVU24
 127 0072 0C90     		str	r0, [sp, #48]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 128              		.loc 2 256 5 is_stmt 1 view .LVU25
 129              		.loc 2 256 36 is_stmt 0 view .LVU26
 130 0074 4146     		mov	r1, r8
 131 0076 0A98     		ldr	r0, [sp, #40]	@ float
 132 0078 FFF7FEFF 		bl	__aeabi_fmul
 133              	.LVL7:
 134              		.loc 2 256 19 view .LVU27
 135 007c 0D90     		str	r0, [sp, #52]	@ float
 257:Core/Inc/Fusion/FusionMath.h ****     return result;
 136              		.loc 2 257 5 is_stmt 1 view .LVU28
 137              		.loc 2 257 12 is_stmt 0 view .LVU29
 138 007e 0DF15C0E 		add	lr, sp, #92
 139 0082 94E80700 		ldm	r4, {r0, r1, r2}
 140 0086 8EE80700 		stm	lr, {r0, r1, r2}
 141 008a A446     		mov	ip, r4
 142 008c 22AC     		add	r4, sp, #136
 143 008e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 144 0090 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 145 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 146 0096 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 147 009a 2368     		ldr	r3, [r4]
 148 009c CCF80030 		str	r3, [ip]
 149 00a0 9EE80700 		ldm	lr, {r0, r1, r2}
 150 00a4 86E80700 		stm	r6, {r0, r1, r2}
 151              	.LBE32:
 152              	.LBE31:
 153              	.LBB33:
 154              	.LBI33:
 258:Core/Inc/Fusion/FusionMath.h **** }
 259:Core/Inc/Fusion/FusionMath.h **** 
 260:Core/Inc/Fusion/FusionMath.h **** /**
 261:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the cross product.
 262:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 263:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 264:Core/Inc/Fusion/FusionMath.h ****  * @return Cross product.
 265:Core/Inc/Fusion/FusionMath.h ****  */
 266:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
 267:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 268:Core/Inc/Fusion/FusionMath.h **** #define B vectorB.axis
 269:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 272:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 273:Core/Inc/Fusion/FusionMath.h ****     return result;
 274:Core/Inc/Fusion/FusionMath.h **** #undef A
 275:Core/Inc/Fusion/FusionMath.h **** #undef B
 276:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/cc6ZXLtF.s 			page 9


 277:Core/Inc/Fusion/FusionMath.h **** 
 278:Core/Inc/Fusion/FusionMath.h **** /**
 279:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 280:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 281:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude squared.
 282:Core/Inc/Fusion/FusionMath.h ****  */
 283:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 284:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 285:Core/Inc/Fusion/FusionMath.h **** }
 286:Core/Inc/Fusion/FusionMath.h **** 
 287:Core/Inc/Fusion/FusionMath.h **** /**
 288:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude.
 289:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 290:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude.
 291:Core/Inc/Fusion/FusionMath.h ****  */
 292:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 293:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 294:Core/Inc/Fusion/FusionMath.h **** }
 295:Core/Inc/Fusion/FusionMath.h **** 
 296:Core/Inc/Fusion/FusionMath.h **** /**
 297:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised vector.
 298:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 299:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised vector.
 300:Core/Inc/Fusion/FusionMath.h ****  */
 301:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 302:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 303:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 304:Core/Inc/Fusion/FusionMath.h **** #else
 305:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 306:Core/Inc/Fusion/FusionMath.h **** #endif
 307:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 308:Core/Inc/Fusion/FusionMath.h **** }
 309:Core/Inc/Fusion/FusionMath.h **** 
 310:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 311:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Quaternion operations
 312:Core/Inc/Fusion/FusionMath.h **** 
 313:Core/Inc/Fusion/FusionMath.h **** /**
 314:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 315:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A.
 316:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B.
 317:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two quaternions.
 318:Core/Inc/Fusion/FusionMath.h ****  */
 319:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 320:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.w = quaternionA.element.w + quaternionB.element.w;
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 324:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 325:Core/Inc/Fusion/FusionMath.h ****     return result;
 326:Core/Inc/Fusion/FusionMath.h **** }
 327:Core/Inc/Fusion/FusionMath.h **** 
 328:Core/Inc/Fusion/FusionMath.h **** /**
 329:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 330:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 331:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 332:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of two quaternions.
 333:Core/Inc/Fusion/FusionMath.h ****  */
ARM GAS  /tmp/cc6ZXLtF.s 			page 10


 334:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 335:Core/Inc/Fusion/FusionMath.h **** #define A quaternionA.element
 336:Core/Inc/Fusion/FusionMath.h **** #define B quaternionB.element
 337:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 338:Core/Inc/Fusion/FusionMath.h ****     result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 339:Core/Inc/Fusion/FusionMath.h ****     result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 340:Core/Inc/Fusion/FusionMath.h ****     result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 341:Core/Inc/Fusion/FusionMath.h ****     result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 342:Core/Inc/Fusion/FusionMath.h ****     return result;
 343:Core/Inc/Fusion/FusionMath.h **** #undef A
 344:Core/Inc/Fusion/FusionMath.h **** #undef B
 345:Core/Inc/Fusion/FusionMath.h **** }
 346:Core/Inc/Fusion/FusionMath.h **** 
 347:Core/Inc/Fusion/FusionMath.h **** /**
 348:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 349:Core/Inc/Fusion/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 350:Core/Inc/Fusion/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 351:Core/Inc/Fusion/FusionMath.h ****  * multiplied by the vector.
 352:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 353:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 354:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 355:Core/Inc/Fusion/FusionMath.h ****  */
 356:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 357:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 358:Core/Inc/Fusion/FusionMath.h **** #define V vector.axis
 359:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 360:Core/Inc/Fusion/FusionMath.h ****     result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 361:Core/Inc/Fusion/FusionMath.h ****     result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 362:Core/Inc/Fusion/FusionMath.h ****     result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 363:Core/Inc/Fusion/FusionMath.h ****     result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 364:Core/Inc/Fusion/FusionMath.h ****     return result;
 365:Core/Inc/Fusion/FusionMath.h **** #undef Q
 366:Core/Inc/Fusion/FusionMath.h **** #undef V
 367:Core/Inc/Fusion/FusionMath.h **** }
 368:Core/Inc/Fusion/FusionMath.h **** 
 369:Core/Inc/Fusion/FusionMath.h **** /**
 370:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised quaternion.
 371:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 372:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised quaternion.
 373:Core/Inc/Fusion/FusionMath.h ****  */
 374:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 375:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 376:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 377:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 378:Core/Inc/Fusion/FusionMath.h **** #else
 379:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 380:Core/Inc/Fusion/FusionMath.h **** #endif
 381:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion normalisedQuaternion;
 382:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 383:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 384:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 385:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 386:Core/Inc/Fusion/FusionMath.h ****     return normalisedQuaternion;
 387:Core/Inc/Fusion/FusionMath.h **** #undef Q
 388:Core/Inc/Fusion/FusionMath.h **** }
 389:Core/Inc/Fusion/FusionMath.h **** 
 390:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
ARM GAS  /tmp/cc6ZXLtF.s 			page 11


 391:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Matrix operations
 392:Core/Inc/Fusion/FusionMath.h **** 
 393:Core/Inc/Fusion/FusionMath.h **** /**
 394:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a matrix with a vector.
 395:Core/Inc/Fusion/FusionMath.h ****  * @param matrix Matrix.
 396:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 397:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a matrix with a vector.
 398:Core/Inc/Fusion/FusionMath.h ****  */
 399:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector
 155              		.loc 2 399 28 is_stmt 1 view .LVU30
 156              	.LBB34:
 400:Core/Inc/Fusion/FusionMath.h **** #define R matrix.element
 401:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 157              		.loc 2 401 5 view .LVU31
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 158              		.loc 2 402 5 view .LVU32
 159              		.loc 2 402 39 is_stmt 0 view .LVU33
 160 00a8 059C     		ldr	r4, [sp, #20]	@ float
 161              		.loc 2 402 26 view .LVU34
 162 00aa 2146     		mov	r1, r4
 163 00ac 0B98     		ldr	r0, [sp, #44]	@ float
 164 00ae FFF7FEFF 		bl	__aeabi_fmul
 165              	.LVL8:
 166 00b2 0646     		mov	r6, r0
 167              		.loc 2 402 62 view .LVU35
 168 00b4 DDF81880 		ldr	r8, [sp, #24]	@ float
 169              		.loc 2 402 49 view .LVU36
 170 00b8 4146     		mov	r1, r8
 171 00ba 0C98     		ldr	r0, [sp, #48]	@ float
 172 00bc FFF7FEFF 		bl	__aeabi_fmul
 173              	.LVL9:
 174 00c0 0146     		mov	r1, r0
 175              		.loc 2 402 42 view .LVU37
 176 00c2 3046     		mov	r0, r6
 177 00c4 FFF7FEFF 		bl	__aeabi_fadd
 178              	.LVL10:
 179 00c8 8146     		mov	r9, r0
 180              		.loc 2 402 85 view .LVU38
 181 00ca 079E     		ldr	r6, [sp, #28]	@ float
 182              		.loc 2 402 72 view .LVU39
 183 00cc 3146     		mov	r1, r6
 184 00ce 0D98     		ldr	r0, [sp, #52]	@ float
 185 00d0 FFF7FEFF 		bl	__aeabi_fmul
 186              	.LVL11:
 187 00d4 0146     		mov	r1, r0
 188              		.loc 2 402 65 view .LVU40
 189 00d6 4846     		mov	r0, r9
 190 00d8 FFF7FEFF 		bl	__aeabi_fadd
 191              	.LVL12:
 192              		.loc 2 402 19 view .LVU41
 193 00dc 0890     		str	r0, [sp, #32]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 194              		.loc 2 403 5 is_stmt 1 view .LVU42
 195              		.loc 2 403 26 is_stmt 0 view .LVU43
 196 00de 0E99     		ldr	r1, [sp, #56]	@ float
 197 00e0 2046     		mov	r0, r4
 198 00e2 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/cc6ZXLtF.s 			page 12


 199              	.LVL13:
 200 00e6 8146     		mov	r9, r0
 201              		.loc 2 403 49 view .LVU44
 202 00e8 0F99     		ldr	r1, [sp, #60]	@ float
 203 00ea 4046     		mov	r0, r8
 204 00ec FFF7FEFF 		bl	__aeabi_fmul
 205              	.LVL14:
 206 00f0 0146     		mov	r1, r0
 207              		.loc 2 403 42 view .LVU45
 208 00f2 4846     		mov	r0, r9
 209 00f4 FFF7FEFF 		bl	__aeabi_fadd
 210              	.LVL15:
 211 00f8 8146     		mov	r9, r0
 212              		.loc 2 403 72 view .LVU46
 213 00fa 1099     		ldr	r1, [sp, #64]	@ float
 214 00fc 3046     		mov	r0, r6
 215 00fe FFF7FEFF 		bl	__aeabi_fmul
 216              	.LVL16:
 217 0102 0146     		mov	r1, r0
 218              		.loc 2 403 65 view .LVU47
 219 0104 4846     		mov	r0, r9
 220 0106 FFF7FEFF 		bl	__aeabi_fadd
 221              	.LVL17:
 222              		.loc 2 403 19 view .LVU48
 223 010a 0990     		str	r0, [sp, #36]	@ float
 404:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 224              		.loc 2 404 5 is_stmt 1 view .LVU49
 225              		.loc 2 404 26 is_stmt 0 view .LVU50
 226 010c 1199     		ldr	r1, [sp, #68]	@ float
 227 010e 2046     		mov	r0, r4
 228 0110 FFF7FEFF 		bl	__aeabi_fmul
 229              	.LVL18:
 230 0114 0446     		mov	r4, r0
 231              		.loc 2 404 49 view .LVU51
 232 0116 1299     		ldr	r1, [sp, #72]	@ float
 233 0118 4046     		mov	r0, r8
 234 011a FFF7FEFF 		bl	__aeabi_fmul
 235              	.LVL19:
 236 011e 0146     		mov	r1, r0
 237              		.loc 2 404 42 view .LVU52
 238 0120 2046     		mov	r0, r4
 239 0122 FFF7FEFF 		bl	__aeabi_fadd
 240              	.LVL20:
 241 0126 0446     		mov	r4, r0
 242              		.loc 2 404 72 view .LVU53
 243 0128 1399     		ldr	r1, [sp, #76]	@ float
 244 012a 3046     		mov	r0, r6
 245 012c FFF7FEFF 		bl	__aeabi_fmul
 246              	.LVL21:
 247 0130 0146     		mov	r1, r0
 248              		.loc 2 404 65 view .LVU54
 249 0132 2046     		mov	r0, r4
 250 0134 FFF7FEFF 		bl	__aeabi_fadd
 251              	.LVL22:
 252              		.loc 2 404 19 view .LVU55
 253 0138 0A90     		str	r0, [sp, #40]	@ float
 405:Core/Inc/Fusion/FusionMath.h ****     return result;
ARM GAS  /tmp/cc6ZXLtF.s 			page 13


 254              		.loc 2 405 5 is_stmt 1 view .LVU56
 255              		.loc 2 405 12 is_stmt 0 view .LVU57
 256 013a 95E80700 		ldm	r5, {r0, r1, r2}
 257 013e 87E80700 		stm	r7, {r0, r1, r2}
 258              	.LBE34:
 259              	.LBE33:
  28:Core/Inc/Fusion/FusionCalibration.h **** }
 260              		.loc 1 28 1 view .LVU58
 261 0142 3846     		mov	r0, r7
 262 0144 1AB0     		add	sp, sp, #104
 263              	.LCFI2:
 264              		.cfi_def_cfa_offset 32
 265              		@ sp needed
 266 0146 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 267              		.loc 1 28 1 view .LVU59
 268              		.cfi_endproc
 269              	.LFE87:
 271              		.section	.text.Error_Handler,"ax",%progbits
 272              		.align	1
 273              		.global	Error_Handler
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 279              	Error_Handler:
 280              	.LFB91:
 281              		.file 3 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "gpio.h"
  22:Core/Src/main.c **** #include "i2c.h"
  23:Core/Src/main.c **** #include "stm32f1xx_hal_uart.h"
  24:Core/Src/main.c **** #include "usart.h"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  29:Core/Src/main.c **** #include "mpu_9250.h"
  30:Core/Src/main.c **** #include "printf.h"
ARM GAS  /tmp/cc6ZXLtF.s 			page 14


  31:Core/Src/main.c **** #include <string.h>
  32:Core/Src/main.c **** #include "Fusion/Fusion.h"
  33:Core/Src/main.c **** /* USER CODE END Includes */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** #define SAMPLE_RATE (100)
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE BEGIN PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PV */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  57:Core/Src/main.c **** void SystemClock_Config(void);
  58:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  59:Core/Src/main.c **** /* USER CODE END PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  62:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE END 0 */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /**
  67:Core/Src/main.c ****  * @brief  The application entry point.
  68:Core/Src/main.c ****  * @retval int
  69:Core/Src/main.c ****  */
  70:Core/Src/main.c **** int main(void) {
  71:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  72:Core/Src/main.c ****   dataHandleIMU himu1;
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   char msg[100] = "";
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   uint32_t previousTimestamp = 0;
  77:Core/Src/main.c ****   uint32_t timestamp = 0;
  78:Core/Src/main.c ****   /* USER CODE END 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick.
  83:Core/Src/main.c ****    */
  84:Core/Src/main.c ****   HAL_Init();
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  87:Core/Src/main.c **** 
ARM GAS  /tmp/cc6ZXLtF.s 			page 15


  88:Core/Src/main.c ****   /* USER CODE END Init */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Configure the system clock */
  91:Core/Src/main.c ****   SystemClock_Config();
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END SysInit */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Initialize all configured peripherals */
  98:Core/Src/main.c ****   MX_GPIO_Init();
  99:Core/Src/main.c ****   MX_I2C1_Init();
 100:Core/Src/main.c ****   MX_USART3_UART_Init();
 101:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 102:Core/Src/main.c ****   MPU_9250_Init();
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   // Define calibration
 105:Core/Src/main.c ****   // sensitivity and alignment taken into account in mpu_9250.c
 106:Core/Src/main.c ****   const FusionMatrix gyroscopeMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f}
 107:Core/Src/main.c ****   const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
 108:Core/Src/main.c ****   const FusionVector gyroscopeOffset = {-26.0f, 4.83f, 1.34f};
 109:Core/Src/main.c ****   const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1
 110:Core/Src/main.c ****   const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
 111:Core/Src/main.c ****   const FusionVector accelerometerOffset = {0.0f, 0.0f, 0.07f};
 112:Core/Src/main.c ****   const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
 113:Core/Src/main.c ****   const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   // Initialise algorithms
 116:Core/Src/main.c ****   FusionOffset offset;
 117:Core/Src/main.c ****   FusionAhrs ahrs;
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   FusionOffsetInitialise(&offset, SAMPLE_RATE);
 120:Core/Src/main.c ****   FusionAhrsInitialise(&ahrs);
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   // Set AHRS algorithm settings
 123:Core/Src/main.c ****   const FusionAhrsSettings settings = {
 124:Core/Src/main.c ****           .gain = 0.5f,
 125:Core/Src/main.c ****           .accelerationRejection = 10.0f,
 126:Core/Src/main.c ****           .magneticRejection = 20.0f,
 127:Core/Src/main.c ****           .rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
 128:Core/Src/main.c ****   };
 129:Core/Src/main.c ****   FusionAhrsSetSettings(&ahrs, &settings);
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   /* USER CODE END 2 */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   /* Infinite loop */
 134:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 135:Core/Src/main.c ****   while (1) {
 136:Core/Src/main.c ****     IMU_measure(&himu1);
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****     // Acquire latest sensor data
 139:Core/Src/main.c ****     timestamp = HAL_GetTick();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****     FusionVector gyroscope = {himu1.gx, himu1.gy, himu1.gz}; // gyroscope data in degrees/s
 142:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 143:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 144:Core/Src/main.c **** 
ARM GAS  /tmp/cc6ZXLtF.s 			page 16


 145:Core/Src/main.c ****     // Apply calibration
 146:Core/Src/main.c ****     gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity, g
 147:Core/Src/main.c ****     accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, acceleromet
 148:Core/Src/main.c ****     magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****     // swap to axes of system
 151:Core/Src/main.c ****     gyroscope = FusionAxesSwap(gyroscope, FusionAxesAlignmentPYNXPZ);
 152:Core/Src/main.c ****     accelerometer = FusionAxesSwap(accelerometer, FusionAxesAlignmentPYNXPZ);
 153:Core/Src/main.c ****     magnetometer = FusionAxesSwap(magnetometer, FusionAxesAlignmentPYNXPZ);
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****     // Update gyroscope offset correction algorithm
 156:Core/Src/main.c ****     gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****     // Calculate delta time (in seconds) to account for gyroscope sample clock error
 159:Core/Src/main.c ****     const float deltaTime = (float) (timestamp - previousTimestamp) / (float) 1000;
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****     previousTimestamp = timestamp;
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****     // Update gyroscope AHRS algorithm
 164:Core/Src/main.c ****     FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****     // algorithm outputs
 167:Core/Src/main.c ****     const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 168:Core/Src/main.c ****     const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****     // print algo outputs
 171:Core/Src/main.c ****     sprintf_(msg,"Roll %0.1f, Pitch %0.1f, Yaw %0.1f, X %0.1f, Y %0.1f, Z %0.1f\n", euler.angle.rol
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     HAL_UART_Transmit_IT(&huart3, (uint8_t *)msg, (uint16_t)100);
 174:Core/Src/main.c ****     /* USER CODE END WHILE */
 175:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 176:Core/Src/main.c ****   }
 177:Core/Src/main.c ****   /* USER CODE END 3 */
 178:Core/Src/main.c **** }
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /**
 181:Core/Src/main.c ****  * @brief System Clock Configuration
 182:Core/Src/main.c ****  * @retval None
 183:Core/Src/main.c ****  */
 184:Core/Src/main.c **** void SystemClock_Config(void) {
 185:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 186:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 189:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 190:Core/Src/main.c ****    */
 191:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 197:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 198:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 199:Core/Src/main.c ****     Error_Handler();
 200:Core/Src/main.c ****   }
 201:Core/Src/main.c **** 
ARM GAS  /tmp/cc6ZXLtF.s 			page 17


 202:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 203:Core/Src/main.c ****    */
 204:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 205:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 206:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 207:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 209:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 212:Core/Src/main.c ****     Error_Handler();
 213:Core/Src/main.c ****   }
 214:Core/Src/main.c **** }
 215:Core/Src/main.c **** 
 216:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 217:Core/Src/main.c **** // legacy dump
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** // sprintf_(msg, ">%0.2f, %0.2f, %0.2f;%0.2f, %0.2f, %0.2f;%0.2f, %02f, %0.2f<\n", himu1.ax, himu1.
 220:Core/Src/main.c **** 
 221:Core/Src/main.c **** // HAL_UART_Transmit_IT(&huart3, (uint8_t *)msg, (uint16_t)100);
 222:Core/Src/main.c **** /* USER CODE END 4 */
 223:Core/Src/main.c **** 
 224:Core/Src/main.c **** /**
 225:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 226:Core/Src/main.c ****  * @retval None
 227:Core/Src/main.c ****  */
 228:Core/Src/main.c **** void Error_Handler(void) {
 282              		.loc 3 228 26 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ Volatile: function does not return.
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 229:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 230:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 231:Core/Src/main.c ****   __disable_irq();
 288              		.loc 3 231 3 view .LVU61
 289              	.LBB35:
 290              	.LBI35:
 291              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/cc6ZXLtF.s 			page 18


  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/cc6ZXLtF.s 			page 19


  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/cc6ZXLtF.s 			page 20


 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 292              		.loc 4 140 27 view .LVU62
 293              	.LBB36:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 294              		.loc 4 142 3 view .LVU63
 295              		.syntax unified
 296              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 297 0000 72B6     		cpsid i
 298              	@ 0 "" 2
 299              		.thumb
 300              		.syntax unified
 301              	.L4:
 302              	.LBE36:
 303              	.LBE35:
 232:Core/Src/main.c ****   while (1) {
 304              		.loc 3 232 3 discriminator 1 view .LVU64
 233:Core/Src/main.c ****   }
 305              		.loc 3 233 3 discriminator 1 view .LVU65
 232:Core/Src/main.c ****   while (1) {
 306              		.loc 3 232 9 discriminator 1 view .LVU66
 307 0002 FEE7     		b	.L4
 308              		.cfi_endproc
 309              	.LFE91:
 311              		.section	.text.SystemClock_Config,"ax",%progbits
 312              		.align	1
 313              		.global	SystemClock_Config
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu softvfp
 319              	SystemClock_Config:
 320              	.LFB90:
 184:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 321              		.loc 3 184 31 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 64
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 00B5     		push	{lr}
 326              	.LCFI3:
 327              		.cfi_def_cfa_offset 4
 328              		.cfi_offset 14, -4
 329 0002 91B0     		sub	sp, sp, #68
 330              	.LCFI4:
 331              		.cfi_def_cfa_offset 72
 185:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 332              		.loc 3 185 3 view .LVU68
 185:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 333              		.loc 3 185 22 is_stmt 0 view .LVU69
ARM GAS  /tmp/cc6ZXLtF.s 			page 21


 334 0004 2822     		movs	r2, #40
 335 0006 0021     		movs	r1, #0
 336 0008 06A8     		add	r0, sp, #24
 337 000a FFF7FEFF 		bl	memset
 338              	.LVL23:
 186:Core/Src/main.c **** 
 339              		.loc 3 186 3 is_stmt 1 view .LVU70
 186:Core/Src/main.c **** 
 340              		.loc 3 186 22 is_stmt 0 view .LVU71
 341 000e 0023     		movs	r3, #0
 342 0010 0193     		str	r3, [sp, #4]
 343 0012 0293     		str	r3, [sp, #8]
 344 0014 0393     		str	r3, [sp, #12]
 345 0016 0493     		str	r3, [sp, #16]
 346 0018 0593     		str	r3, [sp, #20]
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 347              		.loc 3 191 3 is_stmt 1 view .LVU72
 191:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 348              		.loc 3 191 36 is_stmt 0 view .LVU73
 349 001a 0122     		movs	r2, #1
 350 001c 0692     		str	r2, [sp, #24]
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 351              		.loc 3 192 3 is_stmt 1 view .LVU74
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 352              		.loc 3 192 30 is_stmt 0 view .LVU75
 353 001e 4FF48033 		mov	r3, #65536
 354 0022 0793     		str	r3, [sp, #28]
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 355              		.loc 3 193 3 is_stmt 1 view .LVU76
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 356              		.loc 3 194 3 view .LVU77
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 357              		.loc 3 194 30 is_stmt 0 view .LVU78
 358 0024 0A92     		str	r2, [sp, #40]
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 359              		.loc 3 195 3 is_stmt 1 view .LVU79
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 360              		.loc 3 195 34 is_stmt 0 view .LVU80
 361 0026 0222     		movs	r2, #2
 362 0028 0D92     		str	r2, [sp, #52]
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 363              		.loc 3 196 3 is_stmt 1 view .LVU81
 196:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 364              		.loc 3 196 35 is_stmt 0 view .LVU82
 365 002a 0E93     		str	r3, [sp, #56]
 197:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 366              		.loc 3 197 3 is_stmt 1 view .LVU83
 197:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 367              		.loc 3 197 32 is_stmt 0 view .LVU84
 368 002c 4FF4E013 		mov	r3, #1835008
 369 0030 0F93     		str	r3, [sp, #60]
 198:Core/Src/main.c ****     Error_Handler();
 370              		.loc 3 198 3 is_stmt 1 view .LVU85
 198:Core/Src/main.c ****     Error_Handler();
 371              		.loc 3 198 7 is_stmt 0 view .LVU86
 372 0032 06A8     		add	r0, sp, #24
 373 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  /tmp/cc6ZXLtF.s 			page 22


 374              	.LVL24:
 198:Core/Src/main.c ****     Error_Handler();
 375              		.loc 3 198 6 view .LVU87
 376 0038 80B9     		cbnz	r0, .L9
 204:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 377              		.loc 3 204 3 is_stmt 1 view .LVU88
 204:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 378              		.loc 3 204 31 is_stmt 0 view .LVU89
 379 003a 0F23     		movs	r3, #15
 380 003c 0193     		str	r3, [sp, #4]
 206:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 381              		.loc 3 206 3 is_stmt 1 view .LVU90
 206:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 382              		.loc 3 206 34 is_stmt 0 view .LVU91
 383 003e 0221     		movs	r1, #2
 384 0040 0291     		str	r1, [sp, #8]
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 385              		.loc 3 207 3 is_stmt 1 view .LVU92
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 386              		.loc 3 207 35 is_stmt 0 view .LVU93
 387 0042 0023     		movs	r3, #0
 388 0044 0393     		str	r3, [sp, #12]
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 389              		.loc 3 208 3 is_stmt 1 view .LVU94
 208:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 390              		.loc 3 208 36 is_stmt 0 view .LVU95
 391 0046 4FF48062 		mov	r2, #1024
 392 004a 0492     		str	r2, [sp, #16]
 209:Core/Src/main.c **** 
 393              		.loc 3 209 3 is_stmt 1 view .LVU96
 209:Core/Src/main.c **** 
 394              		.loc 3 209 36 is_stmt 0 view .LVU97
 395 004c 0593     		str	r3, [sp, #20]
 211:Core/Src/main.c ****     Error_Handler();
 396              		.loc 3 211 3 is_stmt 1 view .LVU98
 211:Core/Src/main.c ****     Error_Handler();
 397              		.loc 3 211 7 is_stmt 0 view .LVU99
 398 004e 01A8     		add	r0, sp, #4
 399 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 400              	.LVL25:
 211:Core/Src/main.c ****     Error_Handler();
 401              		.loc 3 211 6 view .LVU100
 402 0054 20B9     		cbnz	r0, .L10
 214:Core/Src/main.c **** 
 403              		.loc 3 214 1 view .LVU101
 404 0056 11B0     		add	sp, sp, #68
 405              	.LCFI5:
 406              		.cfi_remember_state
 407              		.cfi_def_cfa_offset 4
 408              		@ sp needed
 409 0058 5DF804FB 		ldr	pc, [sp], #4
 410              	.L9:
 411              	.LCFI6:
 412              		.cfi_restore_state
 199:Core/Src/main.c ****   }
 413              		.loc 3 199 5 is_stmt 1 view .LVU102
 414 005c FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc6ZXLtF.s 			page 23


 415              	.LVL26:
 416              	.L10:
 212:Core/Src/main.c ****   }
 417              		.loc 3 212 5 view .LVU103
 418 0060 FFF7FEFF 		bl	Error_Handler
 419              	.LVL27:
 420              		.cfi_endproc
 421              	.LFE90:
 423              		.global	__aeabi_ui2f
 424              		.global	__aeabi_fdiv
 425              		.global	__aeabi_fcmple
 426              		.global	__aeabi_fcmpge
 427              		.global	__aeabi_f2d
 428              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 429              		.align	2
 430              	.LC1:
 431 0000 526F6C6C 		.ascii	"Roll %0.1f, Pitch %0.1f, Yaw %0.1f, X %0.1f, Y %0.1"
 431      2025302E 
 431      31662C20 
 431      50697463 
 431      68202530 
 432 0033 662C205A 		.ascii	"f, Z %0.1f\012\000"
 432      2025302E 
 432      31660A00 
 433              		.section	.text.main,"ax",%progbits
 434              		.align	1
 435              		.global	main
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu softvfp
 441              	main:
 442              	.LFB89:
  70:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 443              		.loc 3 70 16 view -0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 528
 446              		@ frame_needed = 0, uses_anonymous_args = 0
 447 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 448              	.LCFI7:
 449              		.cfi_def_cfa_offset 36
 450              		.cfi_offset 4, -36
 451              		.cfi_offset 5, -32
 452              		.cfi_offset 6, -28
 453              		.cfi_offset 7, -24
 454              		.cfi_offset 8, -20
 455              		.cfi_offset 9, -16
 456              		.cfi_offset 10, -12
 457              		.cfi_offset 11, -8
 458              		.cfi_offset 14, -4
 459 0004 ADF5157D 		sub	sp, sp, #596
 460              	.LCFI8:
 461              		.cfi_def_cfa_offset 632
  72:Core/Src/main.c **** 
 462              		.loc 3 72 3 view .LVU105
  74:Core/Src/main.c **** 
 463              		.loc 3 74 3 view .LVU106
ARM GAS  /tmp/cc6ZXLtF.s 			page 24


  74:Core/Src/main.c **** 
 464              		.loc 3 74 8 is_stmt 0 view .LVU107
 465 0008 0025     		movs	r5, #0
 466 000a 6B95     		str	r5, [sp, #428]
 467 000c 6022     		movs	r2, #96
 468 000e 2946     		mov	r1, r5
 469 0010 6CA8     		add	r0, sp, #432
 470 0012 FFF7FEFF 		bl	memset
 471              	.LVL28:
  76:Core/Src/main.c ****   uint32_t timestamp = 0;
 472              		.loc 3 76 3 is_stmt 1 view .LVU108
  77:Core/Src/main.c ****   /* USER CODE END 1 */
 473              		.loc 3 77 3 view .LVU109
  84:Core/Src/main.c **** 
 474              		.loc 3 84 3 view .LVU110
 475 0016 FFF7FEFF 		bl	HAL_Init
 476              	.LVL29:
  91:Core/Src/main.c **** 
 477              		.loc 3 91 3 view .LVU111
 478 001a FFF7FEFF 		bl	SystemClock_Config
 479              	.LVL30:
  98:Core/Src/main.c ****   MX_I2C1_Init();
 480              		.loc 3 98 3 view .LVU112
 481 001e FFF7FEFF 		bl	MX_GPIO_Init
 482              	.LVL31:
  99:Core/Src/main.c ****   MX_USART3_UART_Init();
 483              		.loc 3 99 3 view .LVU113
 484 0022 FFF7FEFF 		bl	MX_I2C1_Init
 485              	.LVL32:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 486              		.loc 3 100 3 view .LVU114
 487 0026 FFF7FEFF 		bl	MX_USART3_UART_Init
 488              	.LVL33:
 102:Core/Src/main.c **** 
 489              		.loc 3 102 3 view .LVU115
 490 002a FFF7FEFF 		bl	MPU_9250_Init
 491              	.LVL34:
 106:Core/Src/main.c ****   const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
 492              		.loc 3 106 3 view .LVU116
 107:Core/Src/main.c ****   const FusionVector gyroscopeOffset = {-26.0f, 4.83f, 1.34f};
 493              		.loc 3 107 3 view .LVU117
 108:Core/Src/main.c ****   const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1
 494              		.loc 3 108 3 view .LVU118
 109:Core/Src/main.c ****   const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
 495              		.loc 3 109 3 view .LVU119
 110:Core/Src/main.c ****   const FusionVector accelerometerOffset = {0.0f, 0.0f, 0.07f};
 496              		.loc 3 110 3 view .LVU120
 111:Core/Src/main.c ****   const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
 497              		.loc 3 111 3 view .LVU121
 111:Core/Src/main.c ****   const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
 498              		.loc 3 111 22 is_stmt 0 view .LVU122
 499 002e 0023     		movs	r3, #0
 500 0030 6893     		str	r3, [sp, #416]	@ float
 501 0032 6993     		str	r3, [sp, #420]	@ float
 502 0034 0B4A     		ldr	r2, .L18
 503 0036 6A92     		str	r2, [sp, #424]	@ float
 112:Core/Src/main.c ****   const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
ARM GAS  /tmp/cc6ZXLtF.s 			page 25


 504              		.loc 3 112 3 is_stmt 1 view .LVU123
 113:Core/Src/main.c **** 
 505              		.loc 3 113 3 view .LVU124
 113:Core/Src/main.c **** 
 506              		.loc 3 113 22 is_stmt 0 view .LVU125
 507 0038 6593     		str	r3, [sp, #404]	@ float
 508 003a 6693     		str	r3, [sp, #408]	@ float
 509 003c 6793     		str	r3, [sp, #412]	@ float
 116:Core/Src/main.c ****   FusionAhrs ahrs;
 510              		.loc 3 116 3 is_stmt 1 view .LVU126
 117:Core/Src/main.c **** 
 511              		.loc 3 117 3 view .LVU127
 119:Core/Src/main.c ****   FusionAhrsInitialise(&ahrs);
 512              		.loc 3 119 3 view .LVU128
 513 003e 6421     		movs	r1, #100
 514 0040 5FA8     		add	r0, sp, #380
 515 0042 FFF7FEFF 		bl	FusionOffsetInitialise
 516              	.LVL35:
 120:Core/Src/main.c **** 
 517              		.loc 3 120 3 view .LVU129
 518 0046 46A8     		add	r0, sp, #280
 519 0048 FFF7FEFF 		bl	FusionAhrsInitialise
 520              	.LVL36:
 123:Core/Src/main.c ****           .gain = 0.5f,
 521              		.loc 3 123 3 view .LVU130
 123:Core/Src/main.c ****           .gain = 0.5f,
 522              		.loc 3 123 28 is_stmt 0 view .LVU131
 523 004c 42AC     		add	r4, sp, #264
 524 004e 064B     		ldr	r3, .L18+4
 525 0050 0FCB     		ldm	r3, {r0, r1, r2, r3}
 526 0052 84E80F00 		stm	r4, {r0, r1, r2, r3}
 129:Core/Src/main.c **** 
 527              		.loc 3 129 3 is_stmt 1 view .LVU132
 528 0056 2146     		mov	r1, r4
 529 0058 46A8     		add	r0, sp, #280
 530 005a FFF7FEFF 		bl	FusionAhrsSetSettings
 531              	.LVL37:
  76:Core/Src/main.c ****   uint32_t timestamp = 0;
 532              		.loc 3 76 12 is_stmt 0 view .LVU133
 533 005e 1495     		str	r5, [sp, #80]
 534 0060 67E0     		b	.L13
 535              	.L19:
 536 0062 00BF     		.align	2
 537              	.L18:
 538 0064 295C8F3D 		.word	1032805417
 539 0068 00000000 		.word	.LANCHOR0
 540              	.LVL38:
 541              	.L17:
 542              	.LBB60:
 543              	.LBB61:
 544              	.LBB62:
 545              	.LBB63:
 546              	.LBB64:
 155:Core/Inc/Fusion/FusionMath.h **** }
 547              		.loc 2 155 5 is_stmt 1 view .LVU134
 155:Core/Inc/Fusion/FusionMath.h **** }
 548              		.loc 2 155 12 is_stmt 0 view .LVU135
ARM GAS  /tmp/cc6ZXLtF.s 			page 26


 549 006c 4846     		mov	r0, r9
 550 006e FFF7FEFF 		bl	asinf
 551              	.LVL39:
 552              	.L12:
 155:Core/Inc/Fusion/FusionMath.h **** }
 553              		.loc 2 155 12 view .LVU136
 554              	.LBE64:
 555              	.LBE63:
 556              	.LBB66:
 557              	.LBI66:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 558              		.loc 2 136 21 is_stmt 1 view .LVU137
 559              	.LBB67:
 137:Core/Inc/Fusion/FusionMath.h **** }
 560              		.loc 2 137 5 view .LVU138
 137:Core/Inc/Fusion/FusionMath.h **** }
 561              		.loc 2 137 20 is_stmt 0 view .LVU139
 562 0072 BB49     		ldr	r1, .L20
 563 0074 FFF7FEFF 		bl	__aeabi_fmul
 564              	.LVL40:
 137:Core/Inc/Fusion/FusionMath.h **** }
 565              		.loc 2 137 20 view .LVU140
 566              	.LBE67:
 567              	.LBE66:
 406:Core/Inc/Fusion/FusionMath.h **** #undef R
 407:Core/Inc/Fusion/FusionMath.h **** }
 408:Core/Inc/Fusion/FusionMath.h **** 
 409:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 410:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Conversion operations
 411:Core/Inc/Fusion/FusionMath.h **** 
 412:Core/Inc/Fusion/FusionMath.h **** /**
 413:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts a quaternion to a rotation matrix.
 414:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 415:Core/Inc/Fusion/FusionMath.h ****  * @return Rotation matrix.
 416:Core/Inc/Fusion/FusionMath.h ****  */
 417:Core/Inc/Fusion/FusionMath.h **** static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 418:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 419:Core/Inc/Fusion/FusionMath.h ****     const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 420:Core/Inc/Fusion/FusionMath.h ****     const float qwqx = Q.w * Q.x;
 421:Core/Inc/Fusion/FusionMath.h ****     const float qwqy = Q.w * Q.y;
 422:Core/Inc/Fusion/FusionMath.h ****     const float qwqz = Q.w * Q.z;
 423:Core/Inc/Fusion/FusionMath.h ****     const float qxqy = Q.x * Q.y;
 424:Core/Inc/Fusion/FusionMath.h ****     const float qxqz = Q.x * Q.z;
 425:Core/Inc/Fusion/FusionMath.h ****     const float qyqz = Q.y * Q.z;
 426:Core/Inc/Fusion/FusionMath.h ****     FusionMatrix matrix;
 427:Core/Inc/Fusion/FusionMath.h ****     matrix.element.xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x);
 428:Core/Inc/Fusion/FusionMath.h ****     matrix.element.xy = 2.0f * (qxqy - qwqz);
 429:Core/Inc/Fusion/FusionMath.h ****     matrix.element.xz = 2.0f * (qxqz + qwqy);
 430:Core/Inc/Fusion/FusionMath.h ****     matrix.element.yx = 2.0f * (qxqy + qwqz);
 431:Core/Inc/Fusion/FusionMath.h ****     matrix.element.yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y);
 432:Core/Inc/Fusion/FusionMath.h ****     matrix.element.yz = 2.0f * (qyqz - qwqx);
 433:Core/Inc/Fusion/FusionMath.h ****     matrix.element.zx = 2.0f * (qxqz - qwqy);
 434:Core/Inc/Fusion/FusionMath.h ****     matrix.element.zy = 2.0f * (qyqz + qwqx);
 435:Core/Inc/Fusion/FusionMath.h ****     matrix.element.zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z);
 436:Core/Inc/Fusion/FusionMath.h ****     return matrix;
 437:Core/Inc/Fusion/FusionMath.h **** #undef Q
 438:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/cc6ZXLtF.s 			page 27


 439:Core/Inc/Fusion/FusionMath.h **** 
 440:Core/Inc/Fusion/FusionMath.h **** /**
 441:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts a quaternion to ZYX Euler angles in degrees.
 442:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 443:Core/Inc/Fusion/FusionMath.h ****  * @return Euler angles in degrees.
 444:Core/Inc/Fusion/FusionMath.h ****  */
 445:Core/Inc/Fusion/FusionMath.h **** static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 446:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 447:Core/Inc/Fusion/FusionMath.h ****     const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated 
 448:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 568              		.loc 2 450 23 view .LVU141
 569 0078 0DF1C009 		add	r9, sp, #192
 570 007c 3190     		str	r0, [sp, #196]	@ float
 451:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 571              		.loc 2 451 5 is_stmt 1 view .LVU142
 572              		.loc 2 451 57 is_stmt 0 view .LVU143
 573 007e 2146     		mov	r1, r4
 574 0080 4046     		mov	r0, r8
 575 0082 FFF7FEFF 		bl	__aeabi_fmul
 576              	.LVL41:
 577 0086 8046     		mov	r8, r0
 578              		.loc 2 451 69 view .LVU144
 579 0088 3146     		mov	r1, r6
 580 008a 2846     		mov	r0, r5
 581 008c FFF7FEFF 		bl	__aeabi_fmul
 582              	.LVL42:
 583 0090 0546     		mov	r5, r0
 584              		.loc 2 451 101 view .LVU145
 585 0092 2146     		mov	r1, r4
 586 0094 2046     		mov	r0, r4
 587 0096 FFF7FEFF 		bl	__aeabi_fmul
 588              	.LVL43:
 589 009a 0146     		mov	r1, r0
 590              		.loc 2 451 23 view .LVU146
 591 009c 3846     		mov	r0, r7
 592 009e FFF7FEFF 		bl	__aeabi_fsub
 593              	.LVL44:
 594 00a2 0446     		mov	r4, r0
 595 00a4 2946     		mov	r1, r5
 596 00a6 4046     		mov	r0, r8
 597 00a8 FFF7FEFF 		bl	__aeabi_fadd
 598              	.LVL45:
 599 00ac 2146     		mov	r1, r4
 600 00ae FFF7FEFF 		bl	atan2f
 601              	.LVL46:
 602              	.LBB68:
 603              	.LBI68:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 604              		.loc 2 136 21 is_stmt 1 view .LVU147
 605              	.LBB69:
 137:Core/Inc/Fusion/FusionMath.h **** }
 606              		.loc 2 137 5 view .LVU148
 137:Core/Inc/Fusion/FusionMath.h **** }
 607              		.loc 2 137 20 is_stmt 0 view .LVU149
 608 00b2 AB49     		ldr	r1, .L20
ARM GAS  /tmp/cc6ZXLtF.s 			page 28


 609 00b4 FFF7FEFF 		bl	__aeabi_fmul
 610              	.LVL47:
 137:Core/Inc/Fusion/FusionMath.h **** }
 611              		.loc 2 137 20 view .LVU150
 612              	.LBE69:
 613              	.LBE68:
 614              		.loc 2 451 21 view .LVU151
 615 00b8 3290     		str	r0, [sp, #200]	@ float
 452:Core/Inc/Fusion/FusionMath.h ****     return euler;
 616              		.loc 2 452 5 is_stmt 1 view .LVU152
 617              		.loc 2 452 12 is_stmt 0 view .LVU153
 618 00ba 2DAC     		add	r4, sp, #180
 619 00bc 99E80700 		ldm	r9, {r0, r1, r2}
 620 00c0 84E80700 		stm	r4, {r0, r1, r2}
 621              	.LVL48:
 622              		.loc 2 452 12 view .LVU154
 623              	.LBE62:
 624              	.LBE61:
 168:Core/Src/main.c **** 
 625              		.loc 3 168 5 is_stmt 1 view .LVU155
 168:Core/Src/main.c **** 
 626              		.loc 3 168 32 is_stmt 0 view .LVU156
 627 00c4 46A9     		add	r1, sp, #280
 628 00c6 39A8     		add	r0, sp, #228
 629 00c8 FFF7FEFF 		bl	FusionAhrsGetEarthAcceleration
 630              	.LVL49:
 171:Core/Src/main.c **** 
 631              		.loc 3 171 5 is_stmt 1 view .LVU157
 171:Core/Src/main.c **** 
 632              		.loc 3 171 114 is_stmt 0 view .LVU158
 633 00cc 6668     		ldr	r6, [r4, #4]	@ float
 171:Core/Src/main.c **** 
 634              		.loc 3 171 133 view .LVU159
 635 00ce A768     		ldr	r7, [r4, #8]	@ float
 171:Core/Src/main.c **** 
 636              		.loc 3 171 149 view .LVU160
 637 00d0 DDF8E480 		ldr	r8, [sp, #228]	@ float
 171:Core/Src/main.c **** 
 638              		.loc 3 171 163 view .LVU161
 639 00d4 DDF8E890 		ldr	r9, [sp, #232]	@ float
 171:Core/Src/main.c **** 
 640              		.loc 3 171 177 view .LVU162
 641 00d8 DDF8ECA0 		ldr	r10, [sp, #236]	@ float
 171:Core/Src/main.c **** 
 642              		.loc 3 171 5 view .LVU163
 643 00dc 2068     		ldr	r0, [r4]	@ float
 644 00de FFF7FEFF 		bl	__aeabi_f2d
 645              	.LVL50:
 646 00e2 0446     		mov	r4, r0
 647 00e4 0D46     		mov	r5, r1
 648 00e6 5046     		mov	r0, r10
 649 00e8 FFF7FEFF 		bl	__aeabi_f2d
 650              	.LVL51:
 651 00ec CDE90801 		strd	r0, [sp, #32]
 652 00f0 4846     		mov	r0, r9
 653 00f2 FFF7FEFF 		bl	__aeabi_f2d
 654              	.LVL52:
ARM GAS  /tmp/cc6ZXLtF.s 			page 29


 655 00f6 CDE90601 		strd	r0, [sp, #24]
 656 00fa 4046     		mov	r0, r8
 657 00fc FFF7FEFF 		bl	__aeabi_f2d
 658              	.LVL53:
 659 0100 CDE90401 		strd	r0, [sp, #16]
 660 0104 3846     		mov	r0, r7
 661 0106 FFF7FEFF 		bl	__aeabi_f2d
 662              	.LVL54:
 663 010a CDE90201 		strd	r0, [sp, #8]
 664 010e 3046     		mov	r0, r6
 665 0110 FFF7FEFF 		bl	__aeabi_f2d
 666              	.LVL55:
 667 0114 CDE90001 		strd	r0, [sp]
 668 0118 2246     		mov	r2, r4
 669 011a 2B46     		mov	r3, r5
 670 011c 9149     		ldr	r1, .L20+4
 671 011e 6BA8     		add	r0, sp, #428
 672 0120 FFF7FEFF 		bl	sprintf_
 673              	.LVL56:
 173:Core/Src/main.c ****     /* USER CODE END WHILE */
 674              		.loc 3 173 5 is_stmt 1 view .LVU164
 675 0124 6422     		movs	r2, #100
 676 0126 6BA9     		add	r1, sp, #428
 677 0128 8F48     		ldr	r0, .L20+8
 678 012a FFF7FEFF 		bl	HAL_UART_Transmit_IT
 679              	.LVL57:
 680              	.LBE60:
 135:Core/Src/main.c ****     IMU_measure(&himu1);
 681              		.loc 3 135 9 view .LVU165
 682              	.LBB87:
 161:Core/Src/main.c **** 
 683              		.loc 3 161 23 is_stmt 0 view .LVU166
 684 012e 119B     		ldr	r3, [sp, #68]
 685 0130 1493     		str	r3, [sp, #80]
 686              	.LVL58:
 687              	.L13:
 161:Core/Src/main.c **** 
 688              		.loc 3 161 23 view .LVU167
 689              	.LBE87:
 135:Core/Src/main.c ****     IMU_measure(&himu1);
 690              		.loc 3 135 3 is_stmt 1 discriminator 1 view .LVU168
 691              	.LBB88:
 136:Core/Src/main.c **** 
 692              		.loc 3 136 5 discriminator 1 view .LVU169
 693 0132 84A8     		add	r0, sp, #528
 694 0134 FFF7FEFF 		bl	IMU_measure
 695              	.LVL59:
 139:Core/Src/main.c **** 
 696              		.loc 3 139 5 discriminator 1 view .LVU170
 139:Core/Src/main.c **** 
 697              		.loc 3 139 17 is_stmt 0 discriminator 1 view .LVU171
 698 0138 FFF7FEFF 		bl	HAL_GetTick
 699              	.LVL60:
 700 013c 1190     		str	r0, [sp, #68]
 701              	.LVL61:
 141:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 702              		.loc 3 141 5 is_stmt 1 discriminator 1 view .LVU172
ARM GAS  /tmp/cc6ZXLtF.s 			page 30


 141:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 703              		.loc 3 141 18 is_stmt 0 discriminator 1 view .LVU173
 704 013e 1BAD     		add	r5, sp, #108
 705 0140 879B     		ldr	r3, [sp, #540]	@ float
 706 0142 2B60     		str	r3, [r5]	@ float
 141:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 707              		.loc 3 141 46 discriminator 1 view .LVU174
 708 0144 889B     		ldr	r3, [sp, #544]	@ float
 141:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 709              		.loc 3 141 18 discriminator 1 view .LVU175
 710 0146 6B60     		str	r3, [r5, #4]	@ float
 141:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 711              		.loc 3 141 56 discriminator 1 view .LVU176
 712 0148 899B     		ldr	r3, [sp, #548]	@ float
 141:Core/Src/main.c ****     FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 713              		.loc 3 141 18 discriminator 1 view .LVU177
 714 014a AB60     		str	r3, [r5, #8]	@ float
 142:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 715              		.loc 3 142 5 is_stmt 1 discriminator 1 view .LVU178
 142:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 716              		.loc 3 142 18 is_stmt 0 discriminator 1 view .LVU179
 717 014c 1EAF     		add	r7, sp, #120
 718 014e 849B     		ldr	r3, [sp, #528]	@ float
 719 0150 1E93     		str	r3, [sp, #120]	@ float
 142:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 720              		.loc 3 142 50 discriminator 1 view .LVU180
 721 0152 859B     		ldr	r3, [sp, #532]	@ float
 142:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 722              		.loc 3 142 18 discriminator 1 view .LVU181
 723 0154 1F93     		str	r3, [sp, #124]	@ float
 142:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 724              		.loc 3 142 60 discriminator 1 view .LVU182
 725 0156 869B     		ldr	r3, [sp, #536]	@ float
 142:Core/Src/main.c ****     FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary u
 726              		.loc 3 142 18 discriminator 1 view .LVU183
 727 0158 2093     		str	r3, [sp, #128]	@ float
 143:Core/Src/main.c **** 
 728              		.loc 3 143 5 is_stmt 1 discriminator 1 view .LVU184
 143:Core/Src/main.c **** 
 729              		.loc 3 143 18 is_stmt 0 discriminator 1 view .LVU185
 730 015a 21AE     		add	r6, sp, #132
 731 015c 8A9B     		ldr	r3, [sp, #552]	@ float
 732 015e 3360     		str	r3, [r6]	@ float
 143:Core/Src/main.c **** 
 733              		.loc 3 143 49 discriminator 1 view .LVU186
 734 0160 8B9B     		ldr	r3, [sp, #556]	@ float
 143:Core/Src/main.c **** 
 735              		.loc 3 143 18 discriminator 1 view .LVU187
 736 0162 7360     		str	r3, [r6, #4]	@ float
 143:Core/Src/main.c **** 
 737              		.loc 3 143 59 discriminator 1 view .LVU188
 738 0164 8C9B     		ldr	r3, [sp, #560]	@ float
 143:Core/Src/main.c **** 
 739              		.loc 3 143 18 discriminator 1 view .LVU189
 740 0166 B360     		str	r3, [r6, #8]	@ float
 146:Core/Src/main.c ****     accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, acceleromet
 741              		.loc 3 146 5 is_stmt 1 discriminator 1 view .LVU190
ARM GAS  /tmp/cc6ZXLtF.s 			page 31


 146:Core/Src/main.c ****     accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, acceleromet
 742              		.loc 3 146 17 is_stmt 0 discriminator 1 view .LVU191
 743 0168 804B     		ldr	r3, .L20+12
 744 016a 0DF13009 		add	r9, sp, #48
 745 016e 93E80700 		ldm	r3, {r0, r1, r2}
 746              	.LVL62:
 146:Core/Src/main.c ****     accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, acceleromet
 747              		.loc 3 146 17 discriminator 1 view .LVU192
 748 0172 89E80700 		stm	r9, {r0, r1, r2}
 749 0176 7E4B     		ldr	r3, .L20+16
 750 0178 0DF12408 		add	r8, sp, #36
 751 017c 93E80700 		ldm	r3, {r0, r1, r2}
 752 0180 88E80700 		stm	r8, {r0, r1, r2}
 753 0184 6C46     		mov	r4, sp
 754 0186 DFF8ECC1 		ldr	ip, .L20+20
 755 018a BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 756 018e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 757 0190 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 758 0194 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 759 0196 DCF80030 		ldr	r3, [ip]
 760 019a 2360     		str	r3, [r4]
 761 019c 95E80E00 		ldm	r5, {r1, r2, r3}
 762 01a0 2846     		mov	r0, r5
 763 01a2 FFF7FEFF 		bl	FusionCalibrationInertial
 764              	.LVL63:
 147:Core/Src/main.c ****     magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 765              		.loc 3 147 5 is_stmt 1 discriminator 1 view .LVU193
 147:Core/Src/main.c ****     magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 766              		.loc 3 147 21 is_stmt 0 discriminator 1 view .LVU194
 767 01a6 68AB     		add	r3, sp, #416
 768 01a8 93E80700 		ldm	r3, {r0, r1, r2}
 769 01ac 89E80700 		stm	r9, {r0, r1, r2}
 770 01b0 714B     		ldr	r3, .L20+24
 771 01b2 93E80700 		ldm	r3, {r0, r1, r2}
 772 01b6 88E80700 		stm	r8, {r0, r1, r2}
 773 01ba 6C46     		mov	r4, sp
 774 01bc DFF8BCC1 		ldr	ip, .L20+28
 775 01c0 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 776 01c4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 777 01c6 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 778 01ca 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 779 01cc DCF80030 		ldr	r3, [ip]
 780 01d0 2360     		str	r3, [r4]
 781 01d2 97E80E00 		ldm	r7, {r1, r2, r3}
 782 01d6 3846     		mov	r0, r7
 783 01d8 FFF7FEFF 		bl	FusionCalibrationInertial
 784              	.LVL64:
 148:Core/Src/main.c **** 
 785              		.loc 3 148 5 is_stmt 1 discriminator 1 view .LVU195
 786 01dc 0DF1900E 		add	lr, sp, #144
 787 01e0 96E80700 		ldm	r6, {r0, r1, r2}
 788 01e4 8EE80700 		stm	lr, {r0, r1, r2}
 789 01e8 0DF1C00B 		add	fp, sp, #192
 790 01ec 5C46     		mov	r4, fp
 791 01ee DFF890C1 		ldr	ip, .L20+32
 792 01f2 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 793 01f6 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/cc6ZXLtF.s 			page 32


 794 01f8 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 795 01fc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 796 01fe DCF80030 		ldr	r3, [ip]
 797 0202 2360     		str	r3, [r4]
 798 0204 65AB     		add	r3, sp, #404
 799 0206 93E80700 		ldm	r3, {r0, r1, r2}
 800 020a 27AC     		add	r4, sp, #156
 801 020c 84E80700 		stm	r4, {r0, r1, r2}
 802              	.LBB74:
 803              	.LBI74:
  29:Core/Inc/Fusion/FusionCalibration.h **** 
  30:Core/Inc/Fusion/FusionCalibration.h **** /**
  31:Core/Inc/Fusion/FusionCalibration.h ****  * @brief Magnetometer calibration model.
  32:Core/Inc/Fusion/FusionCalibration.h ****  * @param uncalibrated Uncalibrated measurement.
  33:Core/Inc/Fusion/FusionCalibration.h ****  * @param softIronMatrix Soft-iron matrix.
  34:Core/Inc/Fusion/FusionCalibration.h ****  * @param hardIronOffset Hard-iron offset.
  35:Core/Inc/Fusion/FusionCalibration.h ****  * @return Calibrated measurement.
  36:Core/Inc/Fusion/FusionCalibration.h ****  */
  37:Core/Inc/Fusion/FusionCalibration.h **** static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionM
 804              		.loc 1 37 28 discriminator 1 view .LVU196
 805              	.LBB75:
  38:Core/Inc/Fusion/FusionCalibration.h ****     return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronO
 806              		.loc 1 38 5 discriminator 1 view .LVU197
 807 0210 39AC     		add	r4, sp, #228
 808 0212 A446     		mov	ip, r4
 809 0214 D846     		mov	r8, fp
 810 0216 B8E80F00 		ldmia	r8!, {r0, r1, r2, r3}
 811 021a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 812 021e B8E80F00 		ldmia	r8!, {r0, r1, r2, r3}
 813 0222 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 814 0226 D8F80030 		ldr	r3, [r8]
 815 022a CCF80030 		str	r3, [ip]
 816 022e 0DF1A809 		add	r9, sp, #168
 817 0232 9EE80700 		ldm	lr, {r0, r1, r2}
 818 0236 89E80700 		stm	r9, {r0, r1, r2}
 819              	.LBB76:
 820              	.LBI76:
 399:Core/Inc/Fusion/FusionMath.h **** #define R matrix.element
 821              		.loc 2 399 28 discriminator 1 view .LVU198
 822              	.LBB77:
 401:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 823              		.loc 2 401 5 discriminator 1 view .LVU199
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 824              		.loc 2 402 5 discriminator 1 view .LVU200
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 825              		.loc 2 402 39 is_stmt 0 discriminator 1 view .LVU201
 826 023a D9F80020 		ldr	r2, [r9]	@ float
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 827              		.loc 2 402 26 discriminator 1 view .LVU202
 828 023e 1292     		str	r2, [sp, #72]	@ float
 829 0240 1146     		mov	r1, r2
 830 0242 2068     		ldr	r0, [r4]	@ float
 831 0244 FFF7FEFF 		bl	__aeabi_fmul
 832              	.LVL65:
 833 0248 8046     		mov	r8, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 834              		.loc 2 402 62 discriminator 1 view .LVU203
ARM GAS  /tmp/cc6ZXLtF.s 			page 33


 835 024a D9F804A0 		ldr	r10, [r9, #4]	@ float
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 836              		.loc 2 402 49 discriminator 1 view .LVU204
 837 024e 5146     		mov	r1, r10
 838 0250 6068     		ldr	r0, [r4, #4]	@ float
 839 0252 FFF7FEFF 		bl	__aeabi_fmul
 840              	.LVL66:
 841 0256 0146     		mov	r1, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 842              		.loc 2 402 42 discriminator 1 view .LVU205
 843 0258 4046     		mov	r0, r8
 844 025a FFF7FEFF 		bl	__aeabi_fadd
 845              	.LVL67:
 846 025e 8046     		mov	r8, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 847              		.loc 2 402 85 discriminator 1 view .LVU206
 848 0260 D9F808C0 		ldr	ip, [r9, #8]	@ float
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 849              		.loc 2 402 72 discriminator 1 view .LVU207
 850 0264 CDF84CC0 		str	ip, [sp, #76]	@ float
 851 0268 6146     		mov	r1, ip
 852 026a A068     		ldr	r0, [r4, #8]	@ float
 853 026c FFF7FEFF 		bl	__aeabi_fmul
 854              	.LVL68:
 855 0270 0146     		mov	r1, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 856              		.loc 2 402 65 discriminator 1 view .LVU208
 857 0272 4046     		mov	r0, r8
 858 0274 FFF7FEFF 		bl	__aeabi_fadd
 859              	.LVL69:
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 860              		.loc 2 402 19 discriminator 1 view .LVU209
 861 0278 0DF1B408 		add	r8, sp, #180
 862 027c 2D90     		str	r0, [sp, #180]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 863              		.loc 2 403 5 is_stmt 1 discriminator 1 view .LVU210
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 864              		.loc 2 403 26 is_stmt 0 discriminator 1 view .LVU211
 865 027e E168     		ldr	r1, [r4, #12]	@ float
 866 0280 1298     		ldr	r0, [sp, #72]	@ float
 867 0282 FFF7FEFF 		bl	__aeabi_fmul
 868              	.LVL70:
 869 0286 1590     		str	r0, [sp, #84]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 870              		.loc 2 403 49 discriminator 1 view .LVU212
 871 0288 2169     		ldr	r1, [r4, #16]	@ float
 872 028a 5046     		mov	r0, r10
 873 028c FFF7FEFF 		bl	__aeabi_fmul
 874              	.LVL71:
 875 0290 0146     		mov	r1, r0
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 876              		.loc 2 403 42 discriminator 1 view .LVU213
 877 0292 1598     		ldr	r0, [sp, #84]	@ float
 878 0294 FFF7FEFF 		bl	__aeabi_fadd
 879              	.LVL72:
 880 0298 1590     		str	r0, [sp, #84]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
ARM GAS  /tmp/cc6ZXLtF.s 			page 34


 881              		.loc 2 403 72 discriminator 1 view .LVU214
 882 029a 6169     		ldr	r1, [r4, #20]	@ float
 883 029c 1398     		ldr	r0, [sp, #76]	@ float
 884 029e FFF7FEFF 		bl	__aeabi_fmul
 885              	.LVL73:
 886 02a2 0146     		mov	r1, r0
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 887              		.loc 2 403 65 discriminator 1 view .LVU215
 888 02a4 1598     		ldr	r0, [sp, #84]	@ float
 889 02a6 FFF7FEFF 		bl	__aeabi_fadd
 890              	.LVL74:
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 891              		.loc 2 403 19 discriminator 1 view .LVU216
 892 02aa 2E90     		str	r0, [sp, #184]	@ float
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 893              		.loc 2 404 5 is_stmt 1 discriminator 1 view .LVU217
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 894              		.loc 2 404 26 is_stmt 0 discriminator 1 view .LVU218
 895 02ac A169     		ldr	r1, [r4, #24]	@ float
 896 02ae 1298     		ldr	r0, [sp, #72]	@ float
 897 02b0 FFF7FEFF 		bl	__aeabi_fmul
 898              	.LVL75:
 899 02b4 1290     		str	r0, [sp, #72]	@ float
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 900              		.loc 2 404 49 discriminator 1 view .LVU219
 901 02b6 E169     		ldr	r1, [r4, #28]	@ float
 902 02b8 5046     		mov	r0, r10
 903 02ba FFF7FEFF 		bl	__aeabi_fmul
 904              	.LVL76:
 905 02be 0146     		mov	r1, r0
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 906              		.loc 2 404 42 discriminator 1 view .LVU220
 907 02c0 1298     		ldr	r0, [sp, #72]	@ float
 908 02c2 FFF7FEFF 		bl	__aeabi_fadd
 909              	.LVL77:
 910 02c6 8246     		mov	r10, r0
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 911              		.loc 2 404 72 discriminator 1 view .LVU221
 912 02c8 216A     		ldr	r1, [r4, #32]	@ float
 913 02ca 1398     		ldr	r0, [sp, #76]	@ float
 914 02cc FFF7FEFF 		bl	__aeabi_fmul
 915              	.LVL78:
 916 02d0 0146     		mov	r1, r0
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 917              		.loc 2 404 65 discriminator 1 view .LVU222
 918 02d2 5046     		mov	r0, r10
 919 02d4 FFF7FEFF 		bl	__aeabi_fadd
 920              	.LVL79:
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 921              		.loc 2 404 19 discriminator 1 view .LVU223
 922 02d8 2F90     		str	r0, [sp, #188]	@ float
 405:Core/Inc/Fusion/FusionMath.h **** #undef R
 923              		.loc 2 405 5 is_stmt 1 discriminator 1 view .LVU224
 405:Core/Inc/Fusion/FusionMath.h **** #undef R
 924              		.loc 2 405 12 is_stmt 0 discriminator 1 view .LVU225
 925 02da 91AB     		add	r3, sp, #580
 926 02dc 98E80700 		ldm	r8, {r0, r1, r2}
ARM GAS  /tmp/cc6ZXLtF.s 			page 35


 927 02e0 83E80700 		stm	r3, {r0, r1, r2}
 928 02e4 27AA     		add	r2, sp, #156
 929 02e6 07CA     		ldm	r2, {r0, r1, r2}
 930 02e8 89E80700 		stm	r9, {r0, r1, r2}
 931              	.LBE77:
 932              	.LBE76:
 933              	.LBB78:
 934              	.LBI78:
 215:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 935              		.loc 2 215 28 is_stmt 1 discriminator 1 view .LVU226
 936              	.LBB79:
 216:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 937              		.loc 2 216 5 discriminator 1 view .LVU227
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 938              		.loc 2 217 5 discriminator 1 view .LVU228
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 939              		.loc 2 217 36 is_stmt 0 discriminator 1 view .LVU229
 940 02ec D9F80010 		ldr	r1, [r9]	@ float
 941 02f0 D8F80000 		ldr	r0, [r8]	@ float
 942 02f4 FFF7FEFF 		bl	__aeabi_fsub
 943              	.LVL80:
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 944              		.loc 2 217 19 discriminator 1 view .LVU230
 945 02f8 2060     		str	r0, [r4]	@ float
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 946              		.loc 2 218 5 is_stmt 1 discriminator 1 view .LVU231
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 947              		.loc 2 218 36 is_stmt 0 discriminator 1 view .LVU232
 948 02fa D9F80410 		ldr	r1, [r9, #4]	@ float
 949 02fe D8F80400 		ldr	r0, [r8, #4]	@ float
 950 0302 FFF7FEFF 		bl	__aeabi_fsub
 951              	.LVL81:
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 952              		.loc 2 218 19 discriminator 1 view .LVU233
 953 0306 6060     		str	r0, [r4, #4]	@ float
 219:Core/Inc/Fusion/FusionMath.h ****     return result;
 954              		.loc 2 219 5 is_stmt 1 discriminator 1 view .LVU234
 219:Core/Inc/Fusion/FusionMath.h ****     return result;
 955              		.loc 2 219 36 is_stmt 0 discriminator 1 view .LVU235
 956 0308 D9F80810 		ldr	r1, [r9, #8]	@ float
 957 030c D8F80800 		ldr	r0, [r8, #8]	@ float
 958 0310 FFF7FEFF 		bl	__aeabi_fsub
 959              	.LVL82:
 219:Core/Inc/Fusion/FusionMath.h ****     return result;
 960              		.loc 2 219 19 discriminator 1 view .LVU236
 961 0314 A060     		str	r0, [r4, #8]	@ float
 220:Core/Inc/Fusion/FusionMath.h **** }
 962              		.loc 2 220 5 is_stmt 1 discriminator 1 view .LVU237
 220:Core/Inc/Fusion/FusionMath.h **** }
 963              		.loc 2 220 12 is_stmt 0 discriminator 1 view .LVU238
 964 0316 94E80700 		ldm	r4, {r0, r1, r2}
 965 031a 86E80700 		stm	r6, {r0, r1, r2}
 966              	.LBE79:
 967              	.LBE78:
 968              	.LBE75:
 969              	.LBE74:
 151:Core/Src/main.c ****     accelerometer = FusionAxesSwap(accelerometer, FusionAxesAlignmentPYNXPZ);
ARM GAS  /tmp/cc6ZXLtF.s 			page 36


 970              		.loc 3 151 5 is_stmt 1 discriminator 1 view .LVU239
 971 031e 95E80700 		ldm	r5, {r0, r1, r2}
 972 0322 8BE80700 		stm	fp, {r0, r1, r2}
 973              	.LVL83:
 974              	.LBB80:
 975              	.LBI80:
 976              		.file 5 "Core/Inc/Fusion/FusionAxes.h"
   1:Core/Inc/Fusion/FusionAxes.h **** /**
   2:Core/Inc/Fusion/FusionAxes.h ****  * @file FusionAxes.h
   3:Core/Inc/Fusion/FusionAxes.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionAxes.h ****  * @brief Swaps sensor axes for alignment with the body axes.
   5:Core/Inc/Fusion/FusionAxes.h ****  */
   6:Core/Inc/Fusion/FusionAxes.h **** 
   7:Core/Inc/Fusion/FusionAxes.h **** #ifndef FUSION_AXES_H
   8:Core/Inc/Fusion/FusionAxes.h **** #define FUSION_AXES_H
   9:Core/Inc/Fusion/FusionAxes.h **** 
  10:Core/Inc/Fusion/FusionAxes.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionAxes.h **** // Includes
  12:Core/Inc/Fusion/FusionAxes.h **** 
  13:Core/Inc/Fusion/FusionAxes.h **** #include "FusionMath.h"
  14:Core/Inc/Fusion/FusionAxes.h **** 
  15:Core/Inc/Fusion/FusionAxes.h **** //------------------------------------------------------------------------------
  16:Core/Inc/Fusion/FusionAxes.h **** // Definitions
  17:Core/Inc/Fusion/FusionAxes.h **** 
  18:Core/Inc/Fusion/FusionAxes.h **** /**
  19:Core/Inc/Fusion/FusionAxes.h ****  * @brief Axes alignment describing the sensor axes relative to the body axes.
  20:Core/Inc/Fusion/FusionAxes.h ****  * For example, if the body X axis is aligned with the sensor Y axis and the
  21:Core/Inc/Fusion/FusionAxes.h ****  * body Y axis is aligned with sensor X axis but pointing the opposite direction
  22:Core/Inc/Fusion/FusionAxes.h ****  * then alignment is +Y-X+Z.
  23:Core/Inc/Fusion/FusionAxes.h ****  */
  24:Core/Inc/Fusion/FusionAxes.h **** typedef enum {
  25:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXPYPZ, /* +X+Y+Z */
  26:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXNZPY, /* +X-Z+Y */
  27:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXNYNZ, /* +X-Y-Z */
  28:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXPZNY, /* +X+Z-Y */
  29:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXPYNZ, /* -X+Y-Z */
  30:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXPZPY, /* -X+Z+Y */
  31:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXNYPZ, /* -X-Y+Z */
  32:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXNZNY, /* -X-Z-Y */
  33:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYNXPZ, /* +Y-X+Z */
  34:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYNZNX, /* +Y-Z-X */
  35:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYPXNZ, /* +Y+X-Z */
  36:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYPZPX, /* +Y+Z+X */
  37:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYPXPZ, /* -Y+X+Z */
  38:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYNZPX, /* -Y-Z+X */
  39:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYNXNZ, /* -Y-X-Z */
  40:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYPZNX, /* -Y+Z-X */
  41:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZPYNX, /* +Z+Y-X */
  42:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZPXPY, /* +Z+X+Y */
  43:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZNYPX, /* +Z-Y+X */
  44:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZNXNY, /* +Z-X-Y */
  45:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZPYPX, /* -Z+Y+X */
  46:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZNXPY, /* -Z-X+Y */
  47:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZNYNX, /* -Z-Y-X */
  48:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZPXNY, /* -Z+X-Y */
  49:Core/Inc/Fusion/FusionAxes.h **** } FusionAxesAlignment;
  50:Core/Inc/Fusion/FusionAxes.h **** 
ARM GAS  /tmp/cc6ZXLtF.s 			page 37


  51:Core/Inc/Fusion/FusionAxes.h **** //------------------------------------------------------------------------------
  52:Core/Inc/Fusion/FusionAxes.h **** // Inline functions
  53:Core/Inc/Fusion/FusionAxes.h **** 
  54:Core/Inc/Fusion/FusionAxes.h **** /**
  55:Core/Inc/Fusion/FusionAxes.h ****  * @brief Swaps sensor axes for alignment with the body axes.
  56:Core/Inc/Fusion/FusionAxes.h ****  * @param sensor Sensor axes.
  57:Core/Inc/Fusion/FusionAxes.h ****  * @param alignment Axes alignment.
  58:Core/Inc/Fusion/FusionAxes.h ****  * @return Sensor axes aligned with the body axes.
  59:Core/Inc/Fusion/FusionAxes.h ****  */
  60:Core/Inc/Fusion/FusionAxes.h **** static inline FusionVector FusionAxesSwap(const FusionVector sensor, const FusionAxesAlignment alig
 977              		.loc 5 60 28 discriminator 1 view .LVU240
 978              	.LBB81:
  61:Core/Inc/Fusion/FusionAxes.h ****     FusionVector result;
 979              		.loc 5 61 5 discriminator 1 view .LVU241
  62:Core/Inc/Fusion/FusionAxes.h ****     switch (alignment) {
 980              		.loc 5 62 5 discriminator 1 view .LVU242
  63:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPYPZ:
  64:Core/Inc/Fusion/FusionAxes.h ****             break;
  65:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXNZPY:
  66:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.x;
  67:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.z;
  68:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.y;
  69:Core/Inc/Fusion/FusionAxes.h ****             return result;
  70:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXNYNZ:
  71:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.x;
  72:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.y;
  73:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.z;
  74:Core/Inc/Fusion/FusionAxes.h ****             return result;
  75:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPZNY:
  76:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.x;
  77:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = +sensor.axis.z;
  78:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.y;
  79:Core/Inc/Fusion/FusionAxes.h ****             return result;
  80:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXPYNZ:
  81:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  82:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = +sensor.axis.y;
  83:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.z;
  84:Core/Inc/Fusion/FusionAxes.h ****             return result;
  85:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXPZPY:
  86:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  87:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = +sensor.axis.z;
  88:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.y;
  89:Core/Inc/Fusion/FusionAxes.h ****             return result;
  90:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXNYPZ:
  91:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  92:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.y;
  93:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
  94:Core/Inc/Fusion/FusionAxes.h ****             return result;
  95:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXNZNY:
  96:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  97:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.z;
  98:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.y;
  99:Core/Inc/Fusion/FusionAxes.h ****             return result;
 100:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPYNXPZ:
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.y;
 981              		.loc 5 101 13 discriminator 1 view .LVU243
 982              		.loc 5 101 29 is_stmt 0 discriminator 1 view .LVU244
ARM GAS  /tmp/cc6ZXLtF.s 			page 38


 983 0326 DBF80430 		ldr	r3, [fp, #4]	@ float
 984              		.loc 5 101 27 discriminator 1 view .LVU245
 985 032a 2360     		str	r3, [r4]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 986              		.loc 5 102 13 is_stmt 1 discriminator 1 view .LVU246
 987              		.loc 5 102 41 is_stmt 0 discriminator 1 view .LVU247
 988 032c DBF80030 		ldr	r3, [fp]	@ float
 989              		.loc 5 102 29 discriminator 1 view .LVU248
 990 0330 03F10043 		add	r3, r3, #-2147483648
 991              		.loc 5 102 27 discriminator 1 view .LVU249
 992 0334 6360     		str	r3, [r4, #4]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 993              		.loc 5 103 13 is_stmt 1 discriminator 1 view .LVU250
 994              		.loc 5 103 29 is_stmt 0 discriminator 1 view .LVU251
 995 0336 DBF80830 		ldr	r3, [fp, #8]	@ float
 996              		.loc 5 103 27 discriminator 1 view .LVU252
 997 033a A360     		str	r3, [r4, #8]	@ float
 104:Core/Inc/Fusion/FusionAxes.h ****             return result;
 998              		.loc 5 104 13 is_stmt 1 discriminator 1 view .LVU253
 999              		.loc 5 104 20 is_stmt 0 discriminator 1 view .LVU254
 1000 033c 94E80700 		ldm	r4, {r0, r1, r2}
 1001 0340 85E80700 		stm	r5, {r0, r1, r2}
 1002              	.LVL84:
 1003              		.loc 5 104 20 discriminator 1 view .LVU255
 1004              	.LBE81:
 1005              	.LBE80:
 152:Core/Src/main.c ****     magnetometer = FusionAxesSwap(magnetometer, FusionAxesAlignmentPYNXPZ);
 1006              		.loc 3 152 5 is_stmt 1 discriminator 1 view .LVU256
 1007 0344 97E80700 		ldm	r7, {r0, r1, r2}
 1008 0348 8BE80700 		stm	fp, {r0, r1, r2}
 1009              	.LVL85:
 1010              	.LBB82:
 1011              	.LBI82:
  60:Core/Inc/Fusion/FusionAxes.h ****     FusionVector result;
 1012              		.loc 5 60 28 discriminator 1 view .LVU257
 1013              	.LBB83:
  61:Core/Inc/Fusion/FusionAxes.h ****     switch (alignment) {
 1014              		.loc 5 61 5 discriminator 1 view .LVU258
  62:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPYPZ:
 1015              		.loc 5 62 5 discriminator 1 view .LVU259
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1016              		.loc 5 101 13 discriminator 1 view .LVU260
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1017              		.loc 5 101 29 is_stmt 0 discriminator 1 view .LVU261
 1018 034c DBF80430 		ldr	r3, [fp, #4]	@ float
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1019              		.loc 5 101 27 discriminator 1 view .LVU262
 1020 0350 2360     		str	r3, [r4]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1021              		.loc 5 102 13 is_stmt 1 discriminator 1 view .LVU263
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1022              		.loc 5 102 41 is_stmt 0 discriminator 1 view .LVU264
 1023 0352 DBF80030 		ldr	r3, [fp]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1024              		.loc 5 102 29 discriminator 1 view .LVU265
 1025 0356 03F10043 		add	r3, r3, #-2147483648
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
ARM GAS  /tmp/cc6ZXLtF.s 			page 39


 1026              		.loc 5 102 27 discriminator 1 view .LVU266
 1027 035a 6360     		str	r3, [r4, #4]	@ float
 1028 035c 12E0     		b	.L21
 1029              	.L22:
 1030 035e 00BF     		.align	2
 1031              	.L20:
 1032 0360 E02E6542 		.word	1113927392
 1033 0364 00000000 		.word	.LC1
 1034 0368 00000000 		.word	huart3
 1035 036c 00000000 		.word	.LANCHOR1
 1036 0370 00000000 		.word	.LANCHOR2
 1037 0374 00000000 		.word	.LANCHOR3
 1038 0378 00000000 		.word	.LANCHOR4
 1039 037c 00000000 		.word	.LANCHOR5
 1040 0380 00000000 		.word	.LANCHOR6
 1041              	.L21:
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1042              		.loc 5 103 13 is_stmt 1 discriminator 1 view .LVU267
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1043              		.loc 5 103 29 is_stmt 0 discriminator 1 view .LVU268
 1044 0384 DBF80830 		ldr	r3, [fp, #8]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1045              		.loc 5 103 27 discriminator 1 view .LVU269
 1046 0388 A360     		str	r3, [r4, #8]	@ float
 1047              		.loc 5 104 13 is_stmt 1 discriminator 1 view .LVU270
 1048              		.loc 5 104 20 is_stmt 0 discriminator 1 view .LVU271
 1049 038a 94E80700 		ldm	r4, {r0, r1, r2}
 1050 038e 87E80700 		stm	r7, {r0, r1, r2}
 1051              	.LVL86:
 1052              		.loc 5 104 20 discriminator 1 view .LVU272
 1053              	.LBE83:
 1054              	.LBE82:
 153:Core/Src/main.c **** 
 1055              		.loc 3 153 5 is_stmt 1 discriminator 1 view .LVU273
 1056 0392 96E80700 		ldm	r6, {r0, r1, r2}
 1057 0396 8BE80700 		stm	fp, {r0, r1, r2}
 1058              	.LVL87:
 1059              	.LBB84:
 1060              	.LBI84:
  60:Core/Inc/Fusion/FusionAxes.h ****     FusionVector result;
 1061              		.loc 5 60 28 discriminator 1 view .LVU274
 1062              	.LBB85:
  61:Core/Inc/Fusion/FusionAxes.h ****     switch (alignment) {
 1063              		.loc 5 61 5 discriminator 1 view .LVU275
  62:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPYPZ:
 1064              		.loc 5 62 5 discriminator 1 view .LVU276
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1065              		.loc 5 101 13 discriminator 1 view .LVU277
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1066              		.loc 5 101 29 is_stmt 0 discriminator 1 view .LVU278
 1067 039a DBF80430 		ldr	r3, [fp, #4]	@ float
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1068              		.loc 5 101 27 discriminator 1 view .LVU279
 1069 039e 2360     		str	r3, [r4]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1070              		.loc 5 102 13 is_stmt 1 discriminator 1 view .LVU280
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
ARM GAS  /tmp/cc6ZXLtF.s 			page 40


 1071              		.loc 5 102 41 is_stmt 0 discriminator 1 view .LVU281
 1072 03a0 DBF80030 		ldr	r3, [fp]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1073              		.loc 5 102 29 discriminator 1 view .LVU282
 1074 03a4 03F10043 		add	r3, r3, #-2147483648
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1075              		.loc 5 102 27 discriminator 1 view .LVU283
 1076 03a8 6360     		str	r3, [r4, #4]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1077              		.loc 5 103 13 is_stmt 1 discriminator 1 view .LVU284
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1078              		.loc 5 103 29 is_stmt 0 discriminator 1 view .LVU285
 1079 03aa DBF80830 		ldr	r3, [fp, #8]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1080              		.loc 5 103 27 discriminator 1 view .LVU286
 1081 03ae A360     		str	r3, [r4, #8]	@ float
 1082              		.loc 5 104 13 is_stmt 1 discriminator 1 view .LVU287
 1083              		.loc 5 104 20 is_stmt 0 discriminator 1 view .LVU288
 1084 03b0 94E80700 		ldm	r4, {r0, r1, r2}
 1085 03b4 86E80700 		stm	r6, {r0, r1, r2}
 1086              	.LVL88:
 1087              		.loc 5 104 20 discriminator 1 view .LVU289
 1088              	.LBE85:
 1089              	.LBE84:
 156:Core/Src/main.c **** 
 1090              		.loc 3 156 5 is_stmt 1 discriminator 1 view .LVU290
 156:Core/Src/main.c **** 
 1091              		.loc 3 156 17 is_stmt 0 discriminator 1 view .LVU291
 1092 03b8 0DF15808 		add	r8, sp, #88
 1093 03bc AB68     		ldr	r3, [r5, #8]
 1094 03be 0093     		str	r3, [sp]
 1095 03c0 95E80C00 		ldm	r5, {r2, r3}
 1096 03c4 5FA9     		add	r1, sp, #380
 1097 03c6 4046     		mov	r0, r8
 1098 03c8 FFF7FEFF 		bl	FusionOffsetUpdate
 1099              	.LVL89:
 1100 03cc 98E80700 		ldm	r8, {r0, r1, r2}
 1101 03d0 85E80700 		stm	r5, {r0, r1, r2}
 159:Core/Src/main.c **** 
 1102              		.loc 3 159 5 is_stmt 1 discriminator 1 view .LVU292
 159:Core/Src/main.c **** 
 1103              		.loc 3 159 29 is_stmt 0 discriminator 1 view .LVU293
 1104 03d4 119B     		ldr	r3, [sp, #68]
 1105 03d6 149A     		ldr	r2, [sp, #80]
 1106 03d8 981A     		subs	r0, r3, r2
 1107 03da FFF7FEFF 		bl	__aeabi_ui2f
 1108              	.LVL90:
 159:Core/Src/main.c **** 
 1109              		.loc 3 159 17 discriminator 1 view .LVU294
 1110 03de 3549     		ldr	r1, .L23
 1111 03e0 FFF7FEFF 		bl	__aeabi_fdiv
 1112              	.LVL91:
 161:Core/Src/main.c **** 
 1113              		.loc 3 161 5 is_stmt 1 discriminator 1 view .LVU295
 164:Core/Src/main.c **** 
 1114              		.loc 3 164 5 discriminator 1 view .LVU296
 1115 03e4 0690     		str	r0, [sp, #24]	@ float
ARM GAS  /tmp/cc6ZXLtF.s 			page 41


 1116 03e6 03AB     		add	r3, sp, #12
 1117 03e8 96E80700 		ldm	r6, {r0, r1, r2}
 1118              	.LVL92:
 164:Core/Src/main.c **** 
 1119              		.loc 3 164 5 is_stmt 0 discriminator 1 view .LVU297
 1120 03ec 83E80700 		stm	r3, {r0, r1, r2}
 1121 03f0 97E80700 		ldm	r7, {r0, r1, r2}
 1122 03f4 8DE80700 		stm	sp, {r0, r1, r2}
 1123 03f8 95E80E00 		ldm	r5, {r1, r2, r3}
 1124 03fc 46A8     		add	r0, sp, #280
 1125 03fe FFF7FEFF 		bl	FusionAhrsUpdate
 1126              	.LVL93:
 167:Core/Src/main.c ****     const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
 1127              		.loc 3 167 5 is_stmt 1 discriminator 1 view .LVU298
 167:Core/Src/main.c ****     const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
 1128              		.loc 3 167 31 is_stmt 0 discriminator 1 view .LVU299
 1129 0402 8DAD     		add	r5, sp, #564
 1130 0404 46A9     		add	r1, sp, #280
 1131 0406 2846     		mov	r0, r5
 1132 0408 FFF7FEFF 		bl	FusionAhrsGetQuaternion
 1133              	.LVL94:
 1134 040c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1135 0410 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1136              	.LBB86:
 1137              	.LBI61:
 445:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 1138              		.loc 2 445 27 is_stmt 1 discriminator 1 view .LVU300
 1139              	.LBB73:
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1140              		.loc 2 447 5 discriminator 1 view .LVU301
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1141              		.loc 2 447 46 is_stmt 0 discriminator 1 view .LVU302
 1142 0414 A568     		ldr	r5, [r4, #8]	@ float
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1143              		.loc 2 447 49 discriminator 1 view .LVU303
 1144 0416 2946     		mov	r1, r5
 1145 0418 2846     		mov	r0, r5
 1146 041a FFF7FEFF 		bl	__aeabi_fmul
 1147              	.LVL95:
 1148 041e 0146     		mov	r1, r0
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1149              		.loc 2 447 17 discriminator 1 view .LVU304
 1150 0420 4FF07C50 		mov	r0, #1056964608
 1151 0424 FFF7FEFF 		bl	__aeabi_fsub
 1152              	.LVL96:
 1153 0428 0746     		mov	r7, r0
 1154              	.LVL97:
 448:Core/Inc/Fusion/FusionMath.h ****     euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.
 1155              		.loc 2 448 5 is_stmt 1 discriminator 1 view .LVU305
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1156              		.loc 2 449 5 discriminator 1 view .LVU306
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1157              		.loc 2 449 55 is_stmt 0 discriminator 1 view .LVU307
 1158 042a D4F80080 		ldr	r8, [r4]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1159              		.loc 2 449 61 discriminator 1 view .LVU308
 1160 042e 6668     		ldr	r6, [r4, #4]	@ float
ARM GAS  /tmp/cc6ZXLtF.s 			page 42


 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1161              		.loc 2 449 58 discriminator 1 view .LVU309
 1162 0430 3146     		mov	r1, r6
 1163 0432 4046     		mov	r0, r8
 1164              	.LVL98:
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1165              		.loc 2 449 58 discriminator 1 view .LVU310
 1166 0434 FFF7FEFF 		bl	__aeabi_fmul
 1167              	.LVL99:
 1168 0438 8246     		mov	r10, r0
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1169              		.loc 2 449 73 discriminator 1 view .LVU311
 1170 043a E468     		ldr	r4, [r4, #12]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1171              		.loc 2 449 70 discriminator 1 view .LVU312
 1172 043c 2146     		mov	r1, r4
 1173 043e 2846     		mov	r0, r5
 1174 0440 FFF7FEFF 		bl	__aeabi_fmul
 1175              	.LVL100:
 1176 0444 1290     		str	r0, [sp, #72]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1177              		.loc 2 449 102 discriminator 1 view .LVU313
 1178 0446 3146     		mov	r1, r6
 1179 0448 3046     		mov	r0, r6
 1180 044a FFF7FEFF 		bl	__aeabi_fmul
 1181              	.LVL101:
 1182 044e 0146     		mov	r1, r0
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1183              		.loc 2 449 24 discriminator 1 view .LVU314
 1184 0450 3846     		mov	r0, r7
 1185 0452 FFF7FEFF 		bl	__aeabi_fsub
 1186              	.LVL102:
 1187 0456 8146     		mov	r9, r0
 1188 0458 1299     		ldr	r1, [sp, #72]	@ float
 1189 045a 5046     		mov	r0, r10
 1190 045c FFF7FEFF 		bl	__aeabi_fadd
 1191              	.LVL103:
 1192 0460 4946     		mov	r1, r9
 1193 0462 FFF7FEFF 		bl	atan2f
 1194              	.LVL104:
 1195              	.LBB70:
 1196              	.LBI70:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 1197              		.loc 2 136 21 is_stmt 1 discriminator 1 view .LVU315
 1198              	.LBB71:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1199              		.loc 2 137 5 discriminator 1 view .LVU316
 137:Core/Inc/Fusion/FusionMath.h **** }
 1200              		.loc 2 137 20 is_stmt 0 discriminator 1 view .LVU317
 1201 0466 1449     		ldr	r1, .L23+4
 1202 0468 FFF7FEFF 		bl	__aeabi_fmul
 1203              	.LVL105:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1204              		.loc 2 137 20 discriminator 1 view .LVU318
 1205              	.LBE71:
 1206              	.LBE70:
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
ARM GAS  /tmp/cc6ZXLtF.s 			page 43


 1207              		.loc 2 449 22 discriminator 1 view .LVU319
 1208 046c CBF80000 		str	r0, [fp]	@ float
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1209              		.loc 2 450 5 is_stmt 1 discriminator 1 view .LVU320
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1210              		.loc 2 450 71 is_stmt 0 discriminator 1 view .LVU321
 1211 0470 4146     		mov	r1, r8
 1212 0472 2846     		mov	r0, r5
 1213 0474 FFF7FEFF 		bl	__aeabi_fmul
 1214              	.LVL106:
 1215 0478 8146     		mov	r9, r0
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1216              		.loc 2 450 83 discriminator 1 view .LVU322
 1217 047a 2146     		mov	r1, r4
 1218 047c 3046     		mov	r0, r6
 1219 047e FFF7FEFF 		bl	__aeabi_fmul
 1220              	.LVL107:
 1221 0482 0146     		mov	r1, r0
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1222              		.loc 2 450 77 discriminator 1 view .LVU323
 1223 0484 4846     		mov	r0, r9
 1224 0486 FFF7FEFF 		bl	__aeabi_fsub
 1225              	.LVL108:
 1226 048a 0146     		mov	r1, r0
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1227              		.loc 2 450 25 discriminator 1 view .LVU324
 1228 048c FFF7FEFF 		bl	__aeabi_fadd
 1229              	.LVL109:
 1230 0490 8146     		mov	r9, r0
 1231              	.LVL110:
 1232              	.LBB72:
 1233              	.LBI63:
 148:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 1234              		.loc 2 148 21 is_stmt 1 discriminator 1 view .LVU325
 1235              	.LBB65:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1236              		.loc 2 149 5 discriminator 1 view .LVU326
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1237              		.loc 2 149 8 is_stmt 0 discriminator 1 view .LVU327
 1238 0492 0A49     		ldr	r1, .L23+8
 1239 0494 FFF7FEFF 		bl	__aeabi_fcmple
 1240              	.LVL111:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1241              		.loc 2 149 8 discriminator 1 view .LVU328
 1242 0498 48B9     		cbnz	r0, .L14
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 1243              		.loc 2 152 5 is_stmt 1 view .LVU329
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 1244              		.loc 2 152 8 is_stmt 0 view .LVU330
 1245 049a 4FF07E51 		mov	r1, #1065353216
 1246 049e 4846     		mov	r0, r9
 1247 04a0 FFF7FEFF 		bl	__aeabi_fcmpge
 1248              	.LVL112:
 1249 04a4 0028     		cmp	r0, #0
 1250 04a6 3FF4E1AD 		beq	.L17
 153:Core/Inc/Fusion/FusionMath.h ****     }
 1251              		.loc 2 153 29 view .LVU331
ARM GAS  /tmp/cc6ZXLtF.s 			page 44


 1252 04aa 0548     		ldr	r0, .L23+12
 1253 04ac E1E5     		b	.L12
 1254              	.L14:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 1255              		.loc 2 150 29 view .LVU332
 1256 04ae 0548     		ldr	r0, .L23+16
 1257 04b0 DFE5     		b	.L12
 1258              	.L24:
 1259 04b2 00BF     		.align	2
 1260              	.L23:
 1261 04b4 00007A44 		.word	1148846080
 1262 04b8 E02E6542 		.word	1113927392
 1263 04bc 000080BF 		.word	-1082130432
 1264 04c0 DB0FC93F 		.word	1070141403
 1265 04c4 DB0FC9BF 		.word	-1077342245
 1266              	.LBE65:
 1267              	.LBE72:
 1268              	.LBE73:
 1269              	.LBE86:
 1270              	.LBE88:
 1271              		.cfi_endproc
 1272              	.LFE89:
 1274              		.section	.rodata
 1275              		.align	2
 1276              		.set	.LANCHOR0,. + 0
 1277              	.LC0:
 1278 0000 0000003F 		.word	1056964608
 1279 0004 00002041 		.word	1092616192
 1280 0008 0000A041 		.word	1101004800
 1281 000c F4010000 		.word	500
 1282              		.section	.rodata.accelerometerMisalignment.3,"a"
 1283              		.align	2
 1284              		.set	.LANCHOR5,. + 0
 1287              	accelerometerMisalignment.3:
 1288 0000 0000803F 		.word	1065353216
 1289 0004 00000000 		.word	0
 1290 0008 00000000 		.word	0
 1291 000c 00000000 		.word	0
 1292 0010 0000803F 		.word	1065353216
 1293 0014 00000000 		.word	0
 1294 0018 00000000 		.word	0
 1295 001c 00000000 		.word	0
 1296 0020 0000803F 		.word	1065353216
 1297              		.section	.rodata.accelerometerSensitivity.4,"a"
 1298              		.align	2
 1299              		.set	.LANCHOR4,. + 0
 1302              	accelerometerSensitivity.4:
 1303 0000 0000803F 		.word	1065353216
 1304 0004 0000803F 		.word	1065353216
 1305 0008 0000803F 		.word	1065353216
 1306              		.section	.rodata.gyroscopeMisalignment.0,"a"
 1307              		.align	2
 1308              		.set	.LANCHOR3,. + 0
 1311              	gyroscopeMisalignment.0:
 1312 0000 0000803F 		.word	1065353216
 1313 0004 00000000 		.word	0
 1314 0008 00000000 		.word	0
ARM GAS  /tmp/cc6ZXLtF.s 			page 45


 1315 000c 00000000 		.word	0
 1316 0010 0000803F 		.word	1065353216
 1317 0014 00000000 		.word	0
 1318 0018 00000000 		.word	0
 1319 001c 00000000 		.word	0
 1320 0020 0000803F 		.word	1065353216
 1321              		.section	.rodata.gyroscopeOffset.2,"a"
 1322              		.align	2
 1323              		.set	.LANCHOR1,. + 0
 1326              	gyroscopeOffset.2:
 1327 0000 0000D0C1 		.word	-1043333120
 1328 0004 5C8F9A40 		.word	1083871068
 1329 0008 1F85AB3F 		.word	1068205343
 1330              		.section	.rodata.gyroscopeSensitivity.1,"a"
 1331              		.align	2
 1332              		.set	.LANCHOR2,. + 0
 1335              	gyroscopeSensitivity.1:
 1336 0000 0000803F 		.word	1065353216
 1337 0004 0000803F 		.word	1065353216
 1338 0008 0000803F 		.word	1065353216
 1339              		.section	.rodata.softIronMatrix.5,"a"
 1340              		.align	2
 1341              		.set	.LANCHOR6,. + 0
 1344              	softIronMatrix.5:
 1345 0000 0000803F 		.word	1065353216
 1346 0004 00000000 		.word	0
 1347 0008 00000000 		.word	0
 1348 000c 00000000 		.word	0
 1349 0010 0000803F 		.word	1065353216
 1350 0014 00000000 		.word	0
 1351 0018 00000000 		.word	0
 1352 001c 00000000 		.word	0
 1353 0020 0000803F 		.word	1065353216
 1354              		.text
 1355              	.Letext0:
 1356              		.file 6 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1357              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1358              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1359              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1360              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1361              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1362              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1363              		.file 13 "Core/Inc/mpu_9250.h"
 1364              		.file 14 "Core/Inc/Fusion/FusionAhrs.h"
 1365              		.file 15 "Core/Inc/Fusion/FusionOffset.h"
 1366              		.file 16 "Core/Inc/usart.h"
 1367              		.file 17 "/usr/include/newlib/math.h"
 1368              		.file 18 "Core/Inc/printf.h"
 1369              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1370              		.file 20 "Core/Inc/gpio.h"
 1371              		.file 21 "Core/Inc/i2c.h"
 1372              		.file 22 "<built-in>"
ARM GAS  /tmp/cc6ZXLtF.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc6ZXLtF.s:19     .text.FusionCalibrationInertial:0000000000000000 $t
     /tmp/cc6ZXLtF.s:26     .text.FusionCalibrationInertial:0000000000000000 FusionCalibrationInertial
     /tmp/cc6ZXLtF.s:272    .text.Error_Handler:0000000000000000 $t
     /tmp/cc6ZXLtF.s:279    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc6ZXLtF.s:312    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc6ZXLtF.s:319    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc6ZXLtF.s:429    .rodata.main.str1.4:0000000000000000 $d
     /tmp/cc6ZXLtF.s:434    .text.main:0000000000000000 $t
     /tmp/cc6ZXLtF.s:441    .text.main:0000000000000000 main
     /tmp/cc6ZXLtF.s:538    .text.main:0000000000000064 $d
     /tmp/cc6ZXLtF.s:549    .text.main:000000000000006c $t
     /tmp/cc6ZXLtF.s:1032   .text.main:0000000000000360 $d
     /tmp/cc6ZXLtF.s:1044   .text.main:0000000000000384 $t
     /tmp/cc6ZXLtF.s:1261   .text.main:00000000000004b4 $d
     /tmp/cc6ZXLtF.s:1275   .rodata:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1283   .rodata.accelerometerMisalignment.3:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1287   .rodata.accelerometerMisalignment.3:0000000000000000 accelerometerMisalignment.3
     /tmp/cc6ZXLtF.s:1298   .rodata.accelerometerSensitivity.4:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1302   .rodata.accelerometerSensitivity.4:0000000000000000 accelerometerSensitivity.4
     /tmp/cc6ZXLtF.s:1307   .rodata.gyroscopeMisalignment.0:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1311   .rodata.gyroscopeMisalignment.0:0000000000000000 gyroscopeMisalignment.0
     /tmp/cc6ZXLtF.s:1322   .rodata.gyroscopeOffset.2:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1326   .rodata.gyroscopeOffset.2:0000000000000000 gyroscopeOffset.2
     /tmp/cc6ZXLtF.s:1331   .rodata.gyroscopeSensitivity.1:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1335   .rodata.gyroscopeSensitivity.1:0000000000000000 gyroscopeSensitivity.1
     /tmp/cc6ZXLtF.s:1340   .rodata.softIronMatrix.5:0000000000000000 $d
     /tmp/cc6ZXLtF.s:1344   .rodata.softIronMatrix.5:0000000000000000 softIronMatrix.5

UNDEFINED SYMBOLS
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_ui2f
__aeabi_fdiv
__aeabi_fcmple
__aeabi_fcmpge
__aeabi_f2d
HAL_Init
MX_GPIO_Init
MX_I2C1_Init
MX_USART3_UART_Init
MPU_9250_Init
FusionOffsetInitialise
FusionAhrsInitialise
FusionAhrsSetSettings
asinf
atan2f
FusionAhrsGetEarthAcceleration
sprintf_
HAL_UART_Transmit_IT
IMU_measure
HAL_GetTick
ARM GAS  /tmp/cc6ZXLtF.s 			page 47


huart3
FusionOffsetUpdate
FusionAhrsUpdate
FusionAhrsGetQuaternion

ARM GAS  /tmp/ccP4y1SB.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	__aeabi_fsub
  16              		.global	__aeabi_fmul
  17              		.global	__aeabi_fadd
  18              		.section	.text.FusionCalibrationInertial,"ax",%progbits
  19              		.align	1
  20              		.arch armv7-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu softvfp
  26              	FusionCalibrationInertial:
  27              	.LVL0:
  28              	.LFB87:
  29              		.file 1 "Core/Inc/Fusion/FusionCalibration.h"
   1:Core/Inc/Fusion/FusionCalibration.h **** /**
   2:Core/Inc/Fusion/FusionCalibration.h ****  * @file FusionCalibration.h
   3:Core/Inc/Fusion/FusionCalibration.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionCalibration.h ****  * @brief Gyroscope, accelerometer, and magnetometer calibration models.
   5:Core/Inc/Fusion/FusionCalibration.h ****  */
   6:Core/Inc/Fusion/FusionCalibration.h **** 
   7:Core/Inc/Fusion/FusionCalibration.h **** #ifndef FUSION_CALIBRATION_H
   8:Core/Inc/Fusion/FusionCalibration.h **** #define FUSION_CALIBRATION_H
   9:Core/Inc/Fusion/FusionCalibration.h **** 
  10:Core/Inc/Fusion/FusionCalibration.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionCalibration.h **** // Includes
  12:Core/Inc/Fusion/FusionCalibration.h **** 
  13:Core/Inc/Fusion/FusionCalibration.h **** #include "FusionMath.h"
  14:Core/Inc/Fusion/FusionCalibration.h **** 
  15:Core/Inc/Fusion/FusionCalibration.h **** //------------------------------------------------------------------------------
  16:Core/Inc/Fusion/FusionCalibration.h **** // Inline functions
  17:Core/Inc/Fusion/FusionCalibration.h **** 
  18:Core/Inc/Fusion/FusionCalibration.h **** /**
  19:Core/Inc/Fusion/FusionCalibration.h ****  * @brief Gyroscope and accelerometer calibration model.
  20:Core/Inc/Fusion/FusionCalibration.h ****  * @param uncalibrated Uncalibrated measurement.
  21:Core/Inc/Fusion/FusionCalibration.h ****  * @param misalignment Misalignment matrix.
  22:Core/Inc/Fusion/FusionCalibration.h ****  * @param sensitivity Sensitivity.
  23:Core/Inc/Fusion/FusionCalibration.h ****  * @param offset Offset.
  24:Core/Inc/Fusion/FusionCalibration.h ****  * @return Calibrated measurement.
  25:Core/Inc/Fusion/FusionCalibration.h ****  */
  26:Core/Inc/Fusion/FusionCalibration.h **** static inline FusionVector FusionCalibrationInertial(const FusionVector uncalibrated, const FusionM
  30              		.loc 1 26 179 view -0
  31              		.cfi_startproc
  32              		@ args = 60, pretend = 0, frame = 104
ARM GAS  /tmp/ccP4y1SB.s 			page 2


  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 26 179 is_stmt 0 view .LVU1
  35 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 32
  38              		.cfi_offset 4, -32
  39              		.cfi_offset 5, -28
  40              		.cfi_offset 6, -24
  41              		.cfi_offset 7, -20
  42              		.cfi_offset 8, -16
  43              		.cfi_offset 9, -12
  44              		.cfi_offset 10, -8
  45              		.cfi_offset 14, -4
  46 0004 9AB0     		sub	sp, sp, #104
  47              	.LCFI1:
  48              		.cfi_def_cfa_offset 136
  49 0006 0746     		mov	r7, r0
  50 0008 01A8     		add	r0, sp, #4
  51              	.LVL1:
  52              		.loc 1 26 179 view .LVU2
  53 000a 80E80E00 		stm	r0, {r1, r2, r3}
  27:Core/Inc/Fusion/FusionCalibration.h ****     return FusionMatrixMultiplyVector(misalignment, FusionVectorHadamardProduct(FusionVectorSubtrac
  54              		.loc 1 27 5 is_stmt 1 view .LVU3
  55 000e 05AE     		add	r6, sp, #20
  56 0010 07C8     		ldm	r0, {r0, r1, r2}
  57 0012 86E80B00 		stm	r6, {r0, r1, r3}
  58 0016 08AD     		add	r5, sp, #32
  59 0018 2EAB     		add	r3, sp, #184
  60 001a 93E80700 		ldm	r3, {r0, r1, r2}
  61 001e 85E80700 		stm	r5, {r0, r1, r2}
  62              	.LBB29:
  63              	.LBI29:
  64              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
ARM GAS  /tmp/ccP4y1SB.s 			page 3


  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
ARM GAS  /tmp/ccP4y1SB.s 			page 4


  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/ccP4y1SB.s 			page 5


 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
ARM GAS  /tmp/ccP4y1SB.s 			page 6


 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
  65              		.loc 2 215 28 view .LVU4
  66              	.LBB30:
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
  67              		.loc 2 216 5 view .LVU5
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
  68              		.loc 2 217 5 view .LVU6
  69              		.loc 2 217 36 is_stmt 0 view .LVU7
  70 0022 0899     		ldr	r1, [sp, #32]	@ float
  71 0024 0598     		ldr	r0, [sp, #20]	@ float
  72 0026 FFF7FEFF 		bl	__aeabi_fsub
  73              	.LVL2:
  74 002a 8246     		mov	r10, r0
  75              		.loc 2 217 19 view .LVU8
  76 002c 0B90     		str	r0, [sp, #44]	@ float
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
  77              		.loc 2 218 5 is_stmt 1 view .LVU9
  78              		.loc 2 218 36 is_stmt 0 view .LVU10
  79 002e 0999     		ldr	r1, [sp, #36]	@ float
  80 0030 0698     		ldr	r0, [sp, #24]	@ float
  81 0032 FFF7FEFF 		bl	__aeabi_fsub
  82              	.LVL3:
  83 0036 8146     		mov	r9, r0
  84              		.loc 2 218 19 view .LVU11
  85 0038 0C90     		str	r0, [sp, #48]	@ float
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
  86              		.loc 2 219 5 is_stmt 1 view .LVU12
  87              		.loc 2 219 36 is_stmt 0 view .LVU13
  88 003a 0A99     		ldr	r1, [sp, #40]	@ float
  89 003c 0798     		ldr	r0, [sp, #28]	@ float
  90 003e FFF7FEFF 		bl	__aeabi_fsub
  91              	.LVL4:
  92 0042 8046     		mov	r8, r0
  93              		.loc 2 219 19 view .LVU14
  94 0044 0D90     		str	r0, [sp, #52]	@ float
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
  95              		.loc 2 220 5 is_stmt 1 view .LVU15
  96              		.loc 2 220 12 is_stmt 0 view .LVU16
ARM GAS  /tmp/ccP4y1SB.s 			page 7


  97 0046 14AB     		add	r3, sp, #80
  98 0048 0BAC     		add	r4, sp, #44
  99 004a 94E80700 		ldm	r4, {r0, r1, r2}
 100 004e 83E80700 		stm	r3, {r0, r1, r2}
 101 0052 86E80700 		stm	r6, {r0, r1, r2}
 102 0056 2BAB     		add	r3, sp, #172
 103 0058 93E80700 		ldm	r3, {r0, r1, r2}
 104 005c 85E80700 		stm	r5, {r0, r1, r2}
 105              	.LBE30:
 106              	.LBE29:
 107              	.LBB31:
 108              	.LBI31:
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 244:Core/Inc/Fusion/FusionMath.h **** }
 245:Core/Inc/Fusion/FusionMath.h **** 
 246:Core/Inc/Fusion/FusionMath.h **** /**
 247:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 248:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 249:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 250:Core/Inc/Fusion/FusionMath.h ****  * @return Hadamard product.
 251:Core/Inc/Fusion/FusionMath.h ****  */
 252:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 109              		.loc 2 252 28 is_stmt 1 view .LVU17
 110              	.LBB32:
 253:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 111              		.loc 2 253 5 view .LVU18
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 112              		.loc 2 254 5 view .LVU19
 113              		.loc 2 254 36 is_stmt 0 view .LVU20
 114 0060 5146     		mov	r1, r10
 115 0062 0898     		ldr	r0, [sp, #32]	@ float
 116 0064 FFF7FEFF 		bl	__aeabi_fmul
 117              	.LVL5:
 118              		.loc 2 254 19 view .LVU21
 119 0068 0B90     		str	r0, [sp, #44]	@ float
ARM GAS  /tmp/ccP4y1SB.s 			page 8


 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 120              		.loc 2 255 5 is_stmt 1 view .LVU22
 121              		.loc 2 255 36 is_stmt 0 view .LVU23
 122 006a 4946     		mov	r1, r9
 123 006c 0998     		ldr	r0, [sp, #36]	@ float
 124 006e FFF7FEFF 		bl	__aeabi_fmul
 125              	.LVL6:
 126              		.loc 2 255 19 view .LVU24
 127 0072 0C90     		str	r0, [sp, #48]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 128              		.loc 2 256 5 is_stmt 1 view .LVU25
 129              		.loc 2 256 36 is_stmt 0 view .LVU26
 130 0074 4146     		mov	r1, r8
 131 0076 0A98     		ldr	r0, [sp, #40]	@ float
 132 0078 FFF7FEFF 		bl	__aeabi_fmul
 133              	.LVL7:
 134              		.loc 2 256 19 view .LVU27
 135 007c 0D90     		str	r0, [sp, #52]	@ float
 257:Core/Inc/Fusion/FusionMath.h ****     return result;
 136              		.loc 2 257 5 is_stmt 1 view .LVU28
 137              		.loc 2 257 12 is_stmt 0 view .LVU29
 138 007e 0DF15C0E 		add	lr, sp, #92
 139 0082 94E80700 		ldm	r4, {r0, r1, r2}
 140 0086 8EE80700 		stm	lr, {r0, r1, r2}
 141 008a A446     		mov	ip, r4
 142 008c 22AC     		add	r4, sp, #136
 143 008e 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 144 0090 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 145 0094 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 146 0096 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 147 009a 2368     		ldr	r3, [r4]
 148 009c CCF80030 		str	r3, [ip]
 149 00a0 9EE80700 		ldm	lr, {r0, r1, r2}
 150 00a4 86E80700 		stm	r6, {r0, r1, r2}
 151              	.LBE32:
 152              	.LBE31:
 153              	.LBB33:
 154              	.LBI33:
 258:Core/Inc/Fusion/FusionMath.h **** }
 259:Core/Inc/Fusion/FusionMath.h **** 
 260:Core/Inc/Fusion/FusionMath.h **** /**
 261:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the cross product.
 262:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 263:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 264:Core/Inc/Fusion/FusionMath.h ****  * @return Cross product.
 265:Core/Inc/Fusion/FusionMath.h ****  */
 266:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
 267:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 268:Core/Inc/Fusion/FusionMath.h **** #define B vectorB.axis
 269:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 272:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 273:Core/Inc/Fusion/FusionMath.h ****     return result;
 274:Core/Inc/Fusion/FusionMath.h **** #undef A
 275:Core/Inc/Fusion/FusionMath.h **** #undef B
 276:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/ccP4y1SB.s 			page 9


 277:Core/Inc/Fusion/FusionMath.h **** 
 278:Core/Inc/Fusion/FusionMath.h **** /**
 279:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 280:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 281:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude squared.
 282:Core/Inc/Fusion/FusionMath.h ****  */
 283:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 284:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 285:Core/Inc/Fusion/FusionMath.h **** }
 286:Core/Inc/Fusion/FusionMath.h **** 
 287:Core/Inc/Fusion/FusionMath.h **** /**
 288:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude.
 289:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 290:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude.
 291:Core/Inc/Fusion/FusionMath.h ****  */
 292:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 293:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 294:Core/Inc/Fusion/FusionMath.h **** }
 295:Core/Inc/Fusion/FusionMath.h **** 
 296:Core/Inc/Fusion/FusionMath.h **** /**
 297:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised vector.
 298:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 299:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised vector.
 300:Core/Inc/Fusion/FusionMath.h ****  */
 301:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 302:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 303:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 304:Core/Inc/Fusion/FusionMath.h **** #else
 305:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 306:Core/Inc/Fusion/FusionMath.h **** #endif
 307:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 308:Core/Inc/Fusion/FusionMath.h **** }
 309:Core/Inc/Fusion/FusionMath.h **** 
 310:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 311:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Quaternion operations
 312:Core/Inc/Fusion/FusionMath.h **** 
 313:Core/Inc/Fusion/FusionMath.h **** /**
 314:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 315:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A.
 316:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B.
 317:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two quaternions.
 318:Core/Inc/Fusion/FusionMath.h ****  */
 319:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 320:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.w = quaternionA.element.w + quaternionB.element.w;
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 324:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 325:Core/Inc/Fusion/FusionMath.h ****     return result;
 326:Core/Inc/Fusion/FusionMath.h **** }
 327:Core/Inc/Fusion/FusionMath.h **** 
 328:Core/Inc/Fusion/FusionMath.h **** /**
 329:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 330:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 331:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 332:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of two quaternions.
 333:Core/Inc/Fusion/FusionMath.h ****  */
ARM GAS  /tmp/ccP4y1SB.s 			page 10


 334:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 335:Core/Inc/Fusion/FusionMath.h **** #define A quaternionA.element
 336:Core/Inc/Fusion/FusionMath.h **** #define B quaternionB.element
 337:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 338:Core/Inc/Fusion/FusionMath.h ****     result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 339:Core/Inc/Fusion/FusionMath.h ****     result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 340:Core/Inc/Fusion/FusionMath.h ****     result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 341:Core/Inc/Fusion/FusionMath.h ****     result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 342:Core/Inc/Fusion/FusionMath.h ****     return result;
 343:Core/Inc/Fusion/FusionMath.h **** #undef A
 344:Core/Inc/Fusion/FusionMath.h **** #undef B
 345:Core/Inc/Fusion/FusionMath.h **** }
 346:Core/Inc/Fusion/FusionMath.h **** 
 347:Core/Inc/Fusion/FusionMath.h **** /**
 348:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 349:Core/Inc/Fusion/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 350:Core/Inc/Fusion/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 351:Core/Inc/Fusion/FusionMath.h ****  * multiplied by the vector.
 352:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 353:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 354:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 355:Core/Inc/Fusion/FusionMath.h ****  */
 356:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 357:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 358:Core/Inc/Fusion/FusionMath.h **** #define V vector.axis
 359:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 360:Core/Inc/Fusion/FusionMath.h ****     result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 361:Core/Inc/Fusion/FusionMath.h ****     result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 362:Core/Inc/Fusion/FusionMath.h ****     result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 363:Core/Inc/Fusion/FusionMath.h ****     result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 364:Core/Inc/Fusion/FusionMath.h ****     return result;
 365:Core/Inc/Fusion/FusionMath.h **** #undef Q
 366:Core/Inc/Fusion/FusionMath.h **** #undef V
 367:Core/Inc/Fusion/FusionMath.h **** }
 368:Core/Inc/Fusion/FusionMath.h **** 
 369:Core/Inc/Fusion/FusionMath.h **** /**
 370:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised quaternion.
 371:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 372:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised quaternion.
 373:Core/Inc/Fusion/FusionMath.h ****  */
 374:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 375:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 376:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 377:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 378:Core/Inc/Fusion/FusionMath.h **** #else
 379:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 380:Core/Inc/Fusion/FusionMath.h **** #endif
 381:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion normalisedQuaternion;
 382:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 383:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 384:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 385:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 386:Core/Inc/Fusion/FusionMath.h ****     return normalisedQuaternion;
 387:Core/Inc/Fusion/FusionMath.h **** #undef Q
 388:Core/Inc/Fusion/FusionMath.h **** }
 389:Core/Inc/Fusion/FusionMath.h **** 
 390:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
ARM GAS  /tmp/ccP4y1SB.s 			page 11


 391:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Matrix operations
 392:Core/Inc/Fusion/FusionMath.h **** 
 393:Core/Inc/Fusion/FusionMath.h **** /**
 394:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a matrix with a vector.
 395:Core/Inc/Fusion/FusionMath.h ****  * @param matrix Matrix.
 396:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 397:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a matrix with a vector.
 398:Core/Inc/Fusion/FusionMath.h ****  */
 399:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionMatrixMultiplyVector(const FusionMatrix matrix, const FusionVector
 155              		.loc 2 399 28 is_stmt 1 view .LVU30
 156              	.LBB34:
 400:Core/Inc/Fusion/FusionMath.h **** #define R matrix.element
 401:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 157              		.loc 2 401 5 view .LVU31
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 158              		.loc 2 402 5 view .LVU32
 159              		.loc 2 402 39 is_stmt 0 view .LVU33
 160 00a8 059C     		ldr	r4, [sp, #20]	@ float
 161              		.loc 2 402 26 view .LVU34
 162 00aa 2146     		mov	r1, r4
 163 00ac 0B98     		ldr	r0, [sp, #44]	@ float
 164 00ae FFF7FEFF 		bl	__aeabi_fmul
 165              	.LVL8:
 166 00b2 0646     		mov	r6, r0
 167              		.loc 2 402 62 view .LVU35
 168 00b4 DDF81880 		ldr	r8, [sp, #24]	@ float
 169              		.loc 2 402 49 view .LVU36
 170 00b8 4146     		mov	r1, r8
 171 00ba 0C98     		ldr	r0, [sp, #48]	@ float
 172 00bc FFF7FEFF 		bl	__aeabi_fmul
 173              	.LVL9:
 174 00c0 0146     		mov	r1, r0
 175              		.loc 2 402 42 view .LVU37
 176 00c2 3046     		mov	r0, r6
 177 00c4 FFF7FEFF 		bl	__aeabi_fadd
 178              	.LVL10:
 179 00c8 8146     		mov	r9, r0
 180              		.loc 2 402 85 view .LVU38
 181 00ca 079E     		ldr	r6, [sp, #28]	@ float
 182              		.loc 2 402 72 view .LVU39
 183 00cc 3146     		mov	r1, r6
 184 00ce 0D98     		ldr	r0, [sp, #52]	@ float
 185 00d0 FFF7FEFF 		bl	__aeabi_fmul
 186              	.LVL11:
 187 00d4 0146     		mov	r1, r0
 188              		.loc 2 402 65 view .LVU40
 189 00d6 4846     		mov	r0, r9
 190 00d8 FFF7FEFF 		bl	__aeabi_fadd
 191              	.LVL12:
 192              		.loc 2 402 19 view .LVU41
 193 00dc 0890     		str	r0, [sp, #32]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 194              		.loc 2 403 5 is_stmt 1 view .LVU42
 195              		.loc 2 403 26 is_stmt 0 view .LVU43
 196 00de 0E99     		ldr	r1, [sp, #56]	@ float
 197 00e0 2046     		mov	r0, r4
 198 00e2 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/ccP4y1SB.s 			page 12


 199              	.LVL13:
 200 00e6 8146     		mov	r9, r0
 201              		.loc 2 403 49 view .LVU44
 202 00e8 0F99     		ldr	r1, [sp, #60]	@ float
 203 00ea 4046     		mov	r0, r8
 204 00ec FFF7FEFF 		bl	__aeabi_fmul
 205              	.LVL14:
 206 00f0 0146     		mov	r1, r0
 207              		.loc 2 403 42 view .LVU45
 208 00f2 4846     		mov	r0, r9
 209 00f4 FFF7FEFF 		bl	__aeabi_fadd
 210              	.LVL15:
 211 00f8 8146     		mov	r9, r0
 212              		.loc 2 403 72 view .LVU46
 213 00fa 1099     		ldr	r1, [sp, #64]	@ float
 214 00fc 3046     		mov	r0, r6
 215 00fe FFF7FEFF 		bl	__aeabi_fmul
 216              	.LVL16:
 217 0102 0146     		mov	r1, r0
 218              		.loc 2 403 65 view .LVU47
 219 0104 4846     		mov	r0, r9
 220 0106 FFF7FEFF 		bl	__aeabi_fadd
 221              	.LVL17:
 222              		.loc 2 403 19 view .LVU48
 223 010a 0990     		str	r0, [sp, #36]	@ float
 404:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 224              		.loc 2 404 5 is_stmt 1 view .LVU49
 225              		.loc 2 404 26 is_stmt 0 view .LVU50
 226 010c 1199     		ldr	r1, [sp, #68]	@ float
 227 010e 2046     		mov	r0, r4
 228 0110 FFF7FEFF 		bl	__aeabi_fmul
 229              	.LVL18:
 230 0114 0446     		mov	r4, r0
 231              		.loc 2 404 49 view .LVU51
 232 0116 1299     		ldr	r1, [sp, #72]	@ float
 233 0118 4046     		mov	r0, r8
 234 011a FFF7FEFF 		bl	__aeabi_fmul
 235              	.LVL19:
 236 011e 0146     		mov	r1, r0
 237              		.loc 2 404 42 view .LVU52
 238 0120 2046     		mov	r0, r4
 239 0122 FFF7FEFF 		bl	__aeabi_fadd
 240              	.LVL20:
 241 0126 0446     		mov	r4, r0
 242              		.loc 2 404 72 view .LVU53
 243 0128 1399     		ldr	r1, [sp, #76]	@ float
 244 012a 3046     		mov	r0, r6
 245 012c FFF7FEFF 		bl	__aeabi_fmul
 246              	.LVL21:
 247 0130 0146     		mov	r1, r0
 248              		.loc 2 404 65 view .LVU54
 249 0132 2046     		mov	r0, r4
 250 0134 FFF7FEFF 		bl	__aeabi_fadd
 251              	.LVL22:
 252              		.loc 2 404 19 view .LVU55
 253 0138 0A90     		str	r0, [sp, #40]	@ float
 405:Core/Inc/Fusion/FusionMath.h ****     return result;
ARM GAS  /tmp/ccP4y1SB.s 			page 13


 254              		.loc 2 405 5 is_stmt 1 view .LVU56
 255              		.loc 2 405 12 is_stmt 0 view .LVU57
 256 013a 95E80700 		ldm	r5, {r0, r1, r2}
 257 013e 87E80700 		stm	r7, {r0, r1, r2}
 258              	.LBE34:
 259              	.LBE33:
  28:Core/Inc/Fusion/FusionCalibration.h **** }
 260              		.loc 1 28 1 view .LVU58
 261 0142 3846     		mov	r0, r7
 262 0144 1AB0     		add	sp, sp, #104
 263              	.LCFI2:
 264              		.cfi_def_cfa_offset 32
 265              		@ sp needed
 266 0146 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 267              		.loc 1 28 1 view .LVU59
 268              		.cfi_endproc
 269              	.LFE87:
 271              		.section	.text.Error_Handler,"ax",%progbits
 272              		.align	1
 273              		.global	Error_Handler
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 279              	Error_Handler:
 280              	.LFB91:
 281              		.file 3 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "i2c.h"
  22:Core/Src/main.c **** #include "usart.h"
  23:Core/Src/main.c **** #include "gpio.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** #include "mpu_9250.h"
  28:Core/Src/main.c **** #include "printf.h"
  29:Core/Src/main.c **** #include "Fusion/Fusion.h"
  30:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /tmp/ccP4y1SB.s 			page 14


  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PD */
  39:Core/Src/main.c **** #define SAMPLE_RATE (100)
  40:Core/Src/main.c **** #define MSG_MAX_LEN 120
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  57:Core/Src/main.c **** /* USER CODE END PFP */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  60:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END 0 */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /**
  65:Core/Src/main.c ****   * @brief  The application entry point.
  66:Core/Src/main.c ****   * @retval int
  67:Core/Src/main.c ****   */
  68:Core/Src/main.c **** int main(void)
  69:Core/Src/main.c **** {
  70:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  71:Core/Src/main.c ****   dataHandleIMU himu1;
  72:Core/Src/main.c **** 
  73:Core/Src/main.c ****   char msg[MSG_MAX_LEN] = {'\0'};
  74:Core/Src/main.c ****   uint16_t msgLen = 0;
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   uint32_t prevPoll = 0;
  77:Core/Src/main.c ****   uint32_t currPoll = 0;
  78:Core/Src/main.c ****   /* USER CODE END 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Core/Src/main.c ****   HAL_Init();
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END Init */
ARM GAS  /tmp/ccP4y1SB.s 			page 15


  88:Core/Src/main.c **** 
  89:Core/Src/main.c ****   /* Configure the system clock */
  90:Core/Src/main.c ****   SystemClock_Config();
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Initialize all configured peripherals */
  97:Core/Src/main.c ****   MX_GPIO_Init();
  98:Core/Src/main.c ****   MX_I2C1_Init();
  99:Core/Src/main.c ****   MX_USART3_UART_Init();
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 101:Core/Src/main.c ****   MPU_9250_Init();
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   // Define calibration
 104:Core/Src/main.c ****   // sensitivity and alignment taken into account in mpu_9250.c
 105:Core/Src/main.c ****   const FusionMatrix gyroscopeMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f}
 106:Core/Src/main.c ****   const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
 107:Core/Src/main.c ****   const FusionVector gyroscopeOffset = {26.17f, -9.3f, -3.0f};
 108:Core/Src/main.c ****   const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1
 109:Core/Src/main.c ****   const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
 110:Core/Src/main.c ****   const FusionVector accelerometerOffset = {-0.005f, 0.025f, -0.07f};
 111:Core/Src/main.c ****   const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
 112:Core/Src/main.c ****   const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   // Initialise algorithms
 115:Core/Src/main.c ****   FusionOffset offset;
 116:Core/Src/main.c ****   FusionAhrs ahrs;
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   FusionOffsetInitialise(&offset, SAMPLE_RATE);
 119:Core/Src/main.c ****   FusionAhrsInitialise(&ahrs);
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   // Set AHRS algorithm settings
 122:Core/Src/main.c ****   const FusionAhrsSettings settings = {
 123:Core/Src/main.c ****           .gain = 1.0f,
 124:Core/Src/main.c ****           .accelerationRejection = 10.0f,
 125:Core/Src/main.c ****           .magneticRejection = 20.0f,
 126:Core/Src/main.c ****           .rejectionTimeout = 5 * SAMPLE_RATE, /* 5 seconds */
 127:Core/Src/main.c ****   };
 128:Core/Src/main.c ****   FusionAhrsSetSettings(&ahrs, &settings);
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   /* USER CODE END 2 */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c ****   /* Infinite loop */
 133:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 134:Core/Src/main.c ****   while (1) {
 135:Core/Src/main.c ****     currPoll = HAL_GetTick();
 136:Core/Src/main.c ****     
 137:Core/Src/main.c ****     if ((currPoll - prevPoll) >= (1/SAMPLE_RATE)*1000){
 138:Core/Src/main.c ****       IMU_measure(&himu1);
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****       FusionVector gyroscope = {himu1.gx, himu1.gy, himu1.gz}; // gyroscope data in degrees/s
 141:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 142:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 143:Core/Src/main.c **** 
 144:Core/Src/main.c ****       // Apply calibration
ARM GAS  /tmp/ccP4y1SB.s 			page 16


 145:Core/Src/main.c ****       gyroscope = FusionCalibrationInertial(gyroscope, gyroscopeMisalignment, gyroscopeSensitivity,
 146:Core/Src/main.c ****       accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerom
 147:Core/Src/main.c ****       magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****       // swap imu axes to axes of system
 150:Core/Src/main.c ****       gyroscope = FusionAxesSwap(gyroscope, FusionAxesAlignmentPYNXPZ);
 151:Core/Src/main.c ****       accelerometer = FusionAxesSwap(accelerometer, FusionAxesAlignmentPYNXPZ);
 152:Core/Src/main.c ****       magnetometer = FusionAxesSwap(magnetometer, FusionAxesAlignmentPYNXPZ);
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****       // Update gyroscope offset correction algorithm
 155:Core/Src/main.c ****       gyroscope = FusionOffsetUpdate(&offset, gyroscope);
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****       // Calculate delta time (in seconds) to account for gyroscope sample clock error
 158:Core/Src/main.c ****       const float deltaTime = (float) (currPoll - prevPoll) / (float) 1000;
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****       // Update gyroscope AHRS algorithm
 161:Core/Src/main.c ****       // FusionAhrsUpdate(&ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****       FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, deltaTime);
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****       // algorithm outputs
 166:Core/Src/main.c ****       const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
 167:Core/Src/main.c ****       // const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****       // print algo outputs
 170:Core/Src/main.c ****       // msgLen = sprintf_(msg, "[[%0.2f, %0.2f, %0.2f],[%0.2f, %0.2f, %0.2f],[%0.2f, %0.2f, %0.2f]
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****       msgLen = sprintf_(msg,"Roll %0.1f, Pitch %0.1f, Yaw %0.1f\n", euler.angle.roll, euler.angle.p
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****       HAL_UART_Transmit(&huart3, (uint8_t *)msg, (uint16_t)msgLen, 0xFFFF);
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****       prevPoll = currPoll;
 177:Core/Src/main.c ****     }
 178:Core/Src/main.c ****     /* USER CODE END WHILE */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c ****   /* USER CODE END 3 */
 183:Core/Src/main.c **** }
 184:Core/Src/main.c **** 
 185:Core/Src/main.c **** /**
 186:Core/Src/main.c ****   * @brief System Clock Configuration
 187:Core/Src/main.c ****   * @retval None
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c **** void SystemClock_Config(void)
 190:Core/Src/main.c **** {
 191:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 195:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 200:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccP4y1SB.s 			page 17


 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 203:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 204:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 205:Core/Src/main.c ****   {
 206:Core/Src/main.c ****     Error_Handler();
 207:Core/Src/main.c ****   }
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 210:Core/Src/main.c ****   */
 211:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 212:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 213:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 214:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 215:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 216:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 219:Core/Src/main.c ****   {
 220:Core/Src/main.c ****     Error_Handler();
 221:Core/Src/main.c ****   }
 222:Core/Src/main.c **** }
 223:Core/Src/main.c **** 
 224:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** // legacy dump
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** // sprintf_(msg, ">%0.2f, %0.2f, %0.2f;%0.2f, %0.2f, %0.2f;%0.2f, %02f, %0.2f<\n", himu1.ax, himu1.
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** // msgLen = sprintf_(msg, "[[%0.2f, %0.2f, %0.2f],[%0.2f, %0.2f, %0.2f]]\r\n", himu1.ax, himu1.ay, 
 231:Core/Src/main.c **** 
 232:Core/Src/main.c **** // msgLen = sprintf_(msg, "[[%0.2f, %0.2f, %0.2f]]\r\n", himu1.ax, himu1.ay, himu1.az);
 233:Core/Src/main.c **** 
 234:Core/Src/main.c **** // HAL_UART_Transmit_IT(&huart3, (uint8_t *)msg, (uint16_t)100);
 235:Core/Src/main.c **** 
 236:Core/Src/main.c **** /* USER CODE END 4 */
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** /**
 239:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 240:Core/Src/main.c ****   * @retval None
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c **** void Error_Handler(void)
 243:Core/Src/main.c **** {
 282              		.loc 3 243 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ Volatile: function does not return.
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 244:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 245:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 246:Core/Src/main.c ****   __disable_irq();
 288              		.loc 3 246 3 view .LVU61
 289              	.LBB35:
 290              	.LBI35:
 291              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
ARM GAS  /tmp/ccP4y1SB.s 			page 18


   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
ARM GAS  /tmp/ccP4y1SB.s 			page 19


  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccP4y1SB.s 			page 20


 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 292              		.loc 4 140 27 view .LVU62
 293              	.LBB36:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 294              		.loc 4 142 3 view .LVU63
 295              		.syntax unified
 296              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 297 0000 72B6     		cpsid i
 298              	@ 0 "" 2
 299              		.thumb
 300              		.syntax unified
 301              	.L4:
 302              	.LBE36:
 303              	.LBE35:
 247:Core/Src/main.c ****   while (1) {
 304              		.loc 3 247 3 discriminator 1 view .LVU64
 248:Core/Src/main.c ****   }
 305              		.loc 3 248 3 discriminator 1 view .LVU65
 247:Core/Src/main.c ****   while (1) {
 306              		.loc 3 247 9 discriminator 1 view .LVU66
 307 0002 FEE7     		b	.L4
 308              		.cfi_endproc
 309              	.LFE91:
 311              		.section	.text.SystemClock_Config,"ax",%progbits
 312              		.align	1
 313              		.global	SystemClock_Config
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu softvfp
 319              	SystemClock_Config:
 320              	.LFB90:
 190:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
ARM GAS  /tmp/ccP4y1SB.s 			page 21


 321              		.loc 3 190 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 64
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 00B5     		push	{lr}
 326              	.LCFI3:
 327              		.cfi_def_cfa_offset 4
 328              		.cfi_offset 14, -4
 329 0002 91B0     		sub	sp, sp, #68
 330              	.LCFI4:
 331              		.cfi_def_cfa_offset 72
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 332              		.loc 3 191 3 view .LVU68
 191:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 333              		.loc 3 191 22 is_stmt 0 view .LVU69
 334 0004 2822     		movs	r2, #40
 335 0006 0021     		movs	r1, #0
 336 0008 06A8     		add	r0, sp, #24
 337 000a FFF7FEFF 		bl	memset
 338              	.LVL23:
 192:Core/Src/main.c **** 
 339              		.loc 3 192 3 is_stmt 1 view .LVU70
 192:Core/Src/main.c **** 
 340              		.loc 3 192 22 is_stmt 0 view .LVU71
 341 000e 0023     		movs	r3, #0
 342 0010 0193     		str	r3, [sp, #4]
 343 0012 0293     		str	r3, [sp, #8]
 344 0014 0393     		str	r3, [sp, #12]
 345 0016 0493     		str	r3, [sp, #16]
 346 0018 0593     		str	r3, [sp, #20]
 197:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 347              		.loc 3 197 3 is_stmt 1 view .LVU72
 197:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 348              		.loc 3 197 36 is_stmt 0 view .LVU73
 349 001a 0122     		movs	r2, #1
 350 001c 0692     		str	r2, [sp, #24]
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 351              		.loc 3 198 3 is_stmt 1 view .LVU74
 198:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 352              		.loc 3 198 30 is_stmt 0 view .LVU75
 353 001e 4FF48033 		mov	r3, #65536
 354 0022 0793     		str	r3, [sp, #28]
 199:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 355              		.loc 3 199 3 is_stmt 1 view .LVU76
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 356              		.loc 3 200 3 view .LVU77
 200:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 357              		.loc 3 200 30 is_stmt 0 view .LVU78
 358 0024 0A92     		str	r2, [sp, #40]
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 359              		.loc 3 201 3 is_stmt 1 view .LVU79
 201:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 360              		.loc 3 201 34 is_stmt 0 view .LVU80
 361 0026 0222     		movs	r2, #2
 362 0028 0D92     		str	r2, [sp, #52]
 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 363              		.loc 3 202 3 is_stmt 1 view .LVU81
ARM GAS  /tmp/ccP4y1SB.s 			page 22


 202:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 364              		.loc 3 202 35 is_stmt 0 view .LVU82
 365 002a 0E93     		str	r3, [sp, #56]
 203:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 366              		.loc 3 203 3 is_stmt 1 view .LVU83
 203:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 367              		.loc 3 203 32 is_stmt 0 view .LVU84
 368 002c 4FF4E013 		mov	r3, #1835008
 369 0030 0F93     		str	r3, [sp, #60]
 204:Core/Src/main.c ****   {
 370              		.loc 3 204 3 is_stmt 1 view .LVU85
 204:Core/Src/main.c ****   {
 371              		.loc 3 204 7 is_stmt 0 view .LVU86
 372 0032 06A8     		add	r0, sp, #24
 373 0034 FFF7FEFF 		bl	HAL_RCC_OscConfig
 374              	.LVL24:
 204:Core/Src/main.c ****   {
 375              		.loc 3 204 6 view .LVU87
 376 0038 80B9     		cbnz	r0, .L9
 211:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 377              		.loc 3 211 3 is_stmt 1 view .LVU88
 211:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 378              		.loc 3 211 31 is_stmt 0 view .LVU89
 379 003a 0F23     		movs	r3, #15
 380 003c 0193     		str	r3, [sp, #4]
 213:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 381              		.loc 3 213 3 is_stmt 1 view .LVU90
 213:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 382              		.loc 3 213 34 is_stmt 0 view .LVU91
 383 003e 0221     		movs	r1, #2
 384 0040 0291     		str	r1, [sp, #8]
 214:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 385              		.loc 3 214 3 is_stmt 1 view .LVU92
 214:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 386              		.loc 3 214 35 is_stmt 0 view .LVU93
 387 0042 0023     		movs	r3, #0
 388 0044 0393     		str	r3, [sp, #12]
 215:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 389              		.loc 3 215 3 is_stmt 1 view .LVU94
 215:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 390              		.loc 3 215 36 is_stmt 0 view .LVU95
 391 0046 4FF48062 		mov	r2, #1024
 392 004a 0492     		str	r2, [sp, #16]
 216:Core/Src/main.c **** 
 393              		.loc 3 216 3 is_stmt 1 view .LVU96
 216:Core/Src/main.c **** 
 394              		.loc 3 216 36 is_stmt 0 view .LVU97
 395 004c 0593     		str	r3, [sp, #20]
 218:Core/Src/main.c ****   {
 396              		.loc 3 218 3 is_stmt 1 view .LVU98
 218:Core/Src/main.c ****   {
 397              		.loc 3 218 7 is_stmt 0 view .LVU99
 398 004e 01A8     		add	r0, sp, #4
 399 0050 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 400              	.LVL25:
 218:Core/Src/main.c ****   {
 401              		.loc 3 218 6 view .LVU100
ARM GAS  /tmp/ccP4y1SB.s 			page 23


 402 0054 20B9     		cbnz	r0, .L10
 222:Core/Src/main.c **** 
 403              		.loc 3 222 1 view .LVU101
 404 0056 11B0     		add	sp, sp, #68
 405              	.LCFI5:
 406              		.cfi_remember_state
 407              		.cfi_def_cfa_offset 4
 408              		@ sp needed
 409 0058 5DF804FB 		ldr	pc, [sp], #4
 410              	.L9:
 411              	.LCFI6:
 412              		.cfi_restore_state
 206:Core/Src/main.c ****   }
 413              		.loc 3 206 5 is_stmt 1 view .LVU102
 414 005c FFF7FEFF 		bl	Error_Handler
 415              	.LVL26:
 416              	.L10:
 220:Core/Src/main.c ****   }
 417              		.loc 3 220 5 view .LVU103
 418 0060 FFF7FEFF 		bl	Error_Handler
 419              	.LVL27:
 420              		.cfi_endproc
 421              	.LFE90:
 423              		.global	__aeabi_ui2f
 424              		.global	__aeabi_fdiv
 425              		.global	__aeabi_fcmple
 426              		.global	__aeabi_fcmpge
 427              		.global	__aeabi_f2d
 428              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 429              		.align	2
 430              	.LC1:
 431 0000 526F6C6C 		.ascii	"Roll %0.1f, Pitch %0.1f, Yaw %0.1f\012\000"
 431      2025302E 
 431      31662C20 
 431      50697463 
 431      68202530 
 432              		.section	.text.main,"ax",%progbits
 433              		.align	1
 434              		.global	main
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu softvfp
 440              	main:
 441              	.LFB89:
  69:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 442              		.loc 3 69 1 view -0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 536
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 447              	.LCFI7:
 448              		.cfi_def_cfa_offset 36
 449              		.cfi_offset 4, -36
 450              		.cfi_offset 5, -32
 451              		.cfi_offset 6, -28
 452              		.cfi_offset 7, -24
ARM GAS  /tmp/ccP4y1SB.s 			page 24


 453              		.cfi_offset 8, -20
 454              		.cfi_offset 9, -16
 455              		.cfi_offset 10, -12
 456              		.cfi_offset 11, -8
 457              		.cfi_offset 14, -4
 458 0004 ADF5177D 		sub	sp, sp, #604
 459              	.LCFI8:
 460              		.cfi_def_cfa_offset 640
  71:Core/Src/main.c **** 
 461              		.loc 3 71 3 view .LVU105
  73:Core/Src/main.c ****   uint16_t msgLen = 0;
 462              		.loc 3 73 3 view .LVU106
  73:Core/Src/main.c ****   uint16_t msgLen = 0;
 463              		.loc 3 73 8 is_stmt 0 view .LVU107
 464 0008 0025     		movs	r5, #0
 465 000a 6895     		str	r5, [sp, #416]
 466 000c 7422     		movs	r2, #116
 467 000e 2946     		mov	r1, r5
 468 0010 69A8     		add	r0, sp, #420
 469 0012 FFF7FEFF 		bl	memset
 470              	.LVL28:
  74:Core/Src/main.c **** 
 471              		.loc 3 74 3 is_stmt 1 view .LVU108
  76:Core/Src/main.c ****   uint32_t currPoll = 0;
 472              		.loc 3 76 3 view .LVU109
  77:Core/Src/main.c ****   /* USER CODE END 1 */
 473              		.loc 3 77 3 view .LVU110
  83:Core/Src/main.c **** 
 474              		.loc 3 83 3 view .LVU111
 475 0016 FFF7FEFF 		bl	HAL_Init
 476              	.LVL29:
  90:Core/Src/main.c **** 
 477              		.loc 3 90 3 view .LVU112
 478 001a FFF7FEFF 		bl	SystemClock_Config
 479              	.LVL30:
  97:Core/Src/main.c ****   MX_I2C1_Init();
 480              		.loc 3 97 3 view .LVU113
 481 001e FFF7FEFF 		bl	MX_GPIO_Init
 482              	.LVL31:
  98:Core/Src/main.c ****   MX_USART3_UART_Init();
 483              		.loc 3 98 3 view .LVU114
 484 0022 FFF7FEFF 		bl	MX_I2C1_Init
 485              	.LVL32:
  99:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 486              		.loc 3 99 3 view .LVU115
 487 0026 FFF7FEFF 		bl	MX_USART3_UART_Init
 488              	.LVL33:
 101:Core/Src/main.c **** 
 489              		.loc 3 101 3 view .LVU116
 490 002a FFF7FEFF 		bl	MPU_9250_Init
 491              	.LVL34:
 105:Core/Src/main.c ****   const FusionVector gyroscopeSensitivity = {1.0f, 1.0f, 1.0f};
 492              		.loc 3 105 3 view .LVU117
 106:Core/Src/main.c ****   const FusionVector gyroscopeOffset = {26.17f, -9.3f, -3.0f};
 493              		.loc 3 106 3 view .LVU118
 107:Core/Src/main.c ****   const FusionMatrix accelerometerMisalignment = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1
 494              		.loc 3 107 3 view .LVU119
ARM GAS  /tmp/ccP4y1SB.s 			page 25


 108:Core/Src/main.c ****   const FusionVector accelerometerSensitivity = {1.0f, 1.0f, 1.0f};
 495              		.loc 3 108 3 view .LVU120
 109:Core/Src/main.c ****   const FusionVector accelerometerOffset = {-0.005f, 0.025f, -0.07f};
 496              		.loc 3 109 3 view .LVU121
 110:Core/Src/main.c ****   const FusionMatrix softIronMatrix = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
 497              		.loc 3 110 3 view .LVU122
 111:Core/Src/main.c ****   const FusionVector hardIronOffset = {0.0f, 0.0f, 0.0f};
 498              		.loc 3 111 3 view .LVU123
 112:Core/Src/main.c **** 
 499              		.loc 3 112 3 view .LVU124
 112:Core/Src/main.c **** 
 500              		.loc 3 112 22 is_stmt 0 view .LVU125
 501 002e 0023     		movs	r3, #0
 502 0030 6593     		str	r3, [sp, #404]	@ float
 503 0032 6693     		str	r3, [sp, #408]	@ float
 504 0034 6793     		str	r3, [sp, #412]	@ float
 115:Core/Src/main.c ****   FusionAhrs ahrs;
 505              		.loc 3 115 3 is_stmt 1 view .LVU126
 116:Core/Src/main.c **** 
 506              		.loc 3 116 3 view .LVU127
 118:Core/Src/main.c ****   FusionAhrsInitialise(&ahrs);
 507              		.loc 3 118 3 view .LVU128
 508 0036 6421     		movs	r1, #100
 509 0038 5FA8     		add	r0, sp, #380
 510 003a FFF7FEFF 		bl	FusionOffsetInitialise
 511              	.LVL35:
 119:Core/Src/main.c **** 
 512              		.loc 3 119 3 view .LVU129
 513 003e 46A8     		add	r0, sp, #280
 514 0040 FFF7FEFF 		bl	FusionAhrsInitialise
 515              	.LVL36:
 122:Core/Src/main.c ****           .gain = 1.0f,
 516              		.loc 3 122 3 view .LVU130
 122:Core/Src/main.c ****           .gain = 1.0f,
 517              		.loc 3 122 28 is_stmt 0 view .LVU131
 518 0044 42AC     		add	r4, sp, #264
 519 0046 054B     		ldr	r3, .L18
 520 0048 0FCB     		ldm	r3, {r0, r1, r2, r3}
 521 004a 84E80F00 		stm	r4, {r0, r1, r2, r3}
 128:Core/Src/main.c **** 
 522              		.loc 3 128 3 is_stmt 1 view .LVU132
 523 004e 2146     		mov	r1, r4
 524 0050 46A8     		add	r0, sp, #280
 525 0052 FFF7FEFF 		bl	FusionAhrsSetSettings
 526              	.LVL37:
  76:Core/Src/main.c ****   uint32_t currPoll = 0;
 527              		.loc 3 76 12 is_stmt 0 view .LVU133
 528 0056 1495     		str	r5, [sp, #80]
 529 0058 4EE0     		b	.L13
 530              	.L19:
 531 005a 00BF     		.align	2
 532              	.L18:
 533 005c 00000000 		.word	.LANCHOR0
 534              	.LVL38:
 535              	.L17:
 536              	.LBB60:
 537              	.LBB61:
ARM GAS  /tmp/ccP4y1SB.s 			page 26


 538              	.LBB62:
 539              	.LBB63:
 540              	.LBB64:
 155:Core/Inc/Fusion/FusionMath.h **** }
 541              		.loc 2 155 5 is_stmt 1 view .LVU134
 155:Core/Inc/Fusion/FusionMath.h **** }
 542              		.loc 2 155 12 is_stmt 0 view .LVU135
 543 0060 4846     		mov	r0, r9
 544 0062 FFF7FEFF 		bl	asinf
 545              	.LVL39:
 546              	.L12:
 155:Core/Inc/Fusion/FusionMath.h **** }
 547              		.loc 2 155 12 view .LVU136
 548              	.LBE64:
 549              	.LBE63:
 550              	.LBB66:
 551              	.LBI66:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 552              		.loc 2 136 21 is_stmt 1 view .LVU137
 553              	.LBB67:
 137:Core/Inc/Fusion/FusionMath.h **** }
 554              		.loc 2 137 5 view .LVU138
 137:Core/Inc/Fusion/FusionMath.h **** }
 555              		.loc 2 137 20 is_stmt 0 view .LVU139
 556 0066 BD49     		ldr	r1, .L20
 557 0068 FFF7FEFF 		bl	__aeabi_fmul
 558              	.LVL40:
 137:Core/Inc/Fusion/FusionMath.h **** }
 559              		.loc 2 137 20 view .LVU140
 560              	.LBE67:
 561              	.LBE66:
 406:Core/Inc/Fusion/FusionMath.h **** #undef R
 407:Core/Inc/Fusion/FusionMath.h **** }
 408:Core/Inc/Fusion/FusionMath.h **** 
 409:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 410:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Conversion operations
 411:Core/Inc/Fusion/FusionMath.h **** 
 412:Core/Inc/Fusion/FusionMath.h **** /**
 413:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts a quaternion to a rotation matrix.
 414:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 415:Core/Inc/Fusion/FusionMath.h ****  * @return Rotation matrix.
 416:Core/Inc/Fusion/FusionMath.h ****  */
 417:Core/Inc/Fusion/FusionMath.h **** static inline FusionMatrix FusionQuaternionToMatrix(const FusionQuaternion quaternion) {
 418:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 419:Core/Inc/Fusion/FusionMath.h ****     const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 420:Core/Inc/Fusion/FusionMath.h ****     const float qwqx = Q.w * Q.x;
 421:Core/Inc/Fusion/FusionMath.h ****     const float qwqy = Q.w * Q.y;
 422:Core/Inc/Fusion/FusionMath.h ****     const float qwqz = Q.w * Q.z;
 423:Core/Inc/Fusion/FusionMath.h ****     const float qxqy = Q.x * Q.y;
 424:Core/Inc/Fusion/FusionMath.h ****     const float qxqz = Q.x * Q.z;
 425:Core/Inc/Fusion/FusionMath.h ****     const float qyqz = Q.y * Q.z;
 426:Core/Inc/Fusion/FusionMath.h ****     FusionMatrix matrix;
 427:Core/Inc/Fusion/FusionMath.h ****     matrix.element.xx = 2.0f * (qwqw - 0.5f + Q.x * Q.x);
 428:Core/Inc/Fusion/FusionMath.h ****     matrix.element.xy = 2.0f * (qxqy - qwqz);
 429:Core/Inc/Fusion/FusionMath.h ****     matrix.element.xz = 2.0f * (qxqz + qwqy);
 430:Core/Inc/Fusion/FusionMath.h ****     matrix.element.yx = 2.0f * (qxqy + qwqz);
 431:Core/Inc/Fusion/FusionMath.h ****     matrix.element.yy = 2.0f * (qwqw - 0.5f + Q.y * Q.y);
ARM GAS  /tmp/ccP4y1SB.s 			page 27


 432:Core/Inc/Fusion/FusionMath.h ****     matrix.element.yz = 2.0f * (qyqz - qwqx);
 433:Core/Inc/Fusion/FusionMath.h ****     matrix.element.zx = 2.0f * (qxqz - qwqy);
 434:Core/Inc/Fusion/FusionMath.h ****     matrix.element.zy = 2.0f * (qyqz + qwqx);
 435:Core/Inc/Fusion/FusionMath.h ****     matrix.element.zz = 2.0f * (qwqw - 0.5f + Q.z * Q.z);
 436:Core/Inc/Fusion/FusionMath.h ****     return matrix;
 437:Core/Inc/Fusion/FusionMath.h **** #undef Q
 438:Core/Inc/Fusion/FusionMath.h **** }
 439:Core/Inc/Fusion/FusionMath.h **** 
 440:Core/Inc/Fusion/FusionMath.h **** /**
 441:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts a quaternion to ZYX Euler angles in degrees.
 442:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 443:Core/Inc/Fusion/FusionMath.h ****  * @return Euler angles in degrees.
 444:Core/Inc/Fusion/FusionMath.h ****  */
 445:Core/Inc/Fusion/FusionMath.h **** static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
 446:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 447:Core/Inc/Fusion/FusionMath.h ****     const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated 
 448:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 562              		.loc 2 450 23 view .LVU141
 563 006c 0DF1C009 		add	r9, sp, #192
 564 0070 3190     		str	r0, [sp, #196]	@ float
 451:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 565              		.loc 2 451 5 is_stmt 1 view .LVU142
 566              		.loc 2 451 57 is_stmt 0 view .LVU143
 567 0072 2146     		mov	r1, r4
 568 0074 4046     		mov	r0, r8
 569 0076 FFF7FEFF 		bl	__aeabi_fmul
 570              	.LVL41:
 571 007a 8046     		mov	r8, r0
 572              		.loc 2 451 69 view .LVU144
 573 007c 3146     		mov	r1, r6
 574 007e 2846     		mov	r0, r5
 575 0080 FFF7FEFF 		bl	__aeabi_fmul
 576              	.LVL42:
 577 0084 0546     		mov	r5, r0
 578              		.loc 2 451 101 view .LVU145
 579 0086 2146     		mov	r1, r4
 580 0088 2046     		mov	r0, r4
 581 008a FFF7FEFF 		bl	__aeabi_fmul
 582              	.LVL43:
 583 008e 0146     		mov	r1, r0
 584              		.loc 2 451 23 view .LVU146
 585 0090 3846     		mov	r0, r7
 586 0092 FFF7FEFF 		bl	__aeabi_fsub
 587              	.LVL44:
 588 0096 0446     		mov	r4, r0
 589 0098 2946     		mov	r1, r5
 590 009a 4046     		mov	r0, r8
 591 009c FFF7FEFF 		bl	__aeabi_fadd
 592              	.LVL45:
 593 00a0 2146     		mov	r1, r4
 594 00a2 FFF7FEFF 		bl	atan2f
 595              	.LVL46:
 596              	.LBB68:
 597              	.LBI68:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
ARM GAS  /tmp/ccP4y1SB.s 			page 28


 598              		.loc 2 136 21 is_stmt 1 view .LVU147
 599              	.LBB69:
 137:Core/Inc/Fusion/FusionMath.h **** }
 600              		.loc 2 137 5 view .LVU148
 137:Core/Inc/Fusion/FusionMath.h **** }
 601              		.loc 2 137 20 is_stmt 0 view .LVU149
 602 00a6 AD49     		ldr	r1, .L20
 603 00a8 FFF7FEFF 		bl	__aeabi_fmul
 604              	.LVL47:
 137:Core/Inc/Fusion/FusionMath.h **** }
 605              		.loc 2 137 20 view .LVU150
 606              	.LBE69:
 607              	.LBE68:
 608              		.loc 2 451 21 view .LVU151
 609 00ac 3290     		str	r0, [sp, #200]	@ float
 452:Core/Inc/Fusion/FusionMath.h ****     return euler;
 610              		.loc 2 452 5 is_stmt 1 view .LVU152
 611              		.loc 2 452 12 is_stmt 0 view .LVU153
 612 00ae 2DAB     		add	r3, sp, #180
 613 00b0 99E80700 		ldm	r9, {r0, r1, r2}
 614 00b4 83E80700 		stm	r3, {r0, r1, r2}
 615              	.LVL48:
 616              		.loc 2 452 12 view .LVU154
 617              	.LBE62:
 618              	.LBE61:
 172:Core/Src/main.c **** 
 619              		.loc 3 172 7 is_stmt 1 view .LVU155
 172:Core/Src/main.c **** 
 620              		.loc 3 172 98 is_stmt 0 view .LVU156
 621 00b8 5E68     		ldr	r6, [r3, #4]	@ float
 172:Core/Src/main.c **** 
 622              		.loc 3 172 117 view .LVU157
 623 00ba 9F68     		ldr	r7, [r3, #8]	@ float
 172:Core/Src/main.c **** 
 624              		.loc 3 172 16 view .LVU158
 625 00bc 1868     		ldr	r0, [r3]	@ float
 626 00be FFF7FEFF 		bl	__aeabi_f2d
 627              	.LVL49:
 628 00c2 0446     		mov	r4, r0
 629 00c4 0D46     		mov	r5, r1
 630 00c6 3846     		mov	r0, r7
 631 00c8 FFF7FEFF 		bl	__aeabi_f2d
 632              	.LVL50:
 633 00cc CDE90201 		strd	r0, [sp, #8]
 634 00d0 3046     		mov	r0, r6
 635 00d2 FFF7FEFF 		bl	__aeabi_f2d
 636              	.LVL51:
 637 00d6 CDE90001 		strd	r0, [sp]
 638 00da 2246     		mov	r2, r4
 639 00dc 2B46     		mov	r3, r5
 640 00de A049     		ldr	r1, .L20+4
 641 00e0 68A8     		add	r0, sp, #416
 642 00e2 FFF7FEFF 		bl	sprintf_
 643              	.LVL52:
 174:Core/Src/main.c **** 
 644              		.loc 3 174 7 is_stmt 1 view .LVU159
 645 00e6 4FF6FF73 		movw	r3, #65535
ARM GAS  /tmp/ccP4y1SB.s 			page 29


 646 00ea 82B2     		uxth	r2, r0
 647 00ec 68A9     		add	r1, sp, #416
 648 00ee 9D48     		ldr	r0, .L20+8
 649              	.LVL53:
 174:Core/Src/main.c **** 
 650              		.loc 3 174 7 is_stmt 0 view .LVU160
 651 00f0 FFF7FEFF 		bl	HAL_UART_Transmit
 652              	.LVL54:
 176:Core/Src/main.c ****     }
 653              		.loc 3 176 7 is_stmt 1 view .LVU161
 176:Core/Src/main.c ****     }
 654              		.loc 3 176 16 is_stmt 0 view .LVU162
 655 00f4 119B     		ldr	r3, [sp, #68]
 656 00f6 1493     		str	r3, [sp, #80]
 657              	.LVL55:
 658              	.L13:
 176:Core/Src/main.c ****     }
 659              		.loc 3 176 16 view .LVU163
 660              	.LBE60:
 134:Core/Src/main.c ****     currPoll = HAL_GetTick();
 661              		.loc 3 134 3 is_stmt 1 view .LVU164
 135:Core/Src/main.c ****     
 662              		.loc 3 135 5 view .LVU165
 135:Core/Src/main.c ****     
 663              		.loc 3 135 16 is_stmt 0 view .LVU166
 664 00f8 FFF7FEFF 		bl	HAL_GetTick
 665              	.LVL56:
 666 00fc 1190     		str	r0, [sp, #68]
 667              	.LVL57:
 137:Core/Src/main.c ****       IMU_measure(&himu1);
 668              		.loc 3 137 5 is_stmt 1 view .LVU167
 669              	.LBB87:
 138:Core/Src/main.c **** 
 670              		.loc 3 138 7 view .LVU168
 671 00fe 86A8     		add	r0, sp, #536
 672              	.LVL58:
 138:Core/Src/main.c **** 
 673              		.loc 3 138 7 is_stmt 0 view .LVU169
 674 0100 FFF7FEFF 		bl	IMU_measure
 675              	.LVL59:
 140:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 676              		.loc 3 140 7 is_stmt 1 view .LVU170
 140:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 677              		.loc 3 140 20 is_stmt 0 view .LVU171
 678 0104 1BAD     		add	r5, sp, #108
 679 0106 899B     		ldr	r3, [sp, #548]	@ float
 680 0108 2B60     		str	r3, [r5]	@ float
 140:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 681              		.loc 3 140 48 view .LVU172
 682 010a 8A9B     		ldr	r3, [sp, #552]	@ float
 140:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 683              		.loc 3 140 20 view .LVU173
 684 010c 6B60     		str	r3, [r5, #4]	@ float
 140:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
 685              		.loc 3 140 58 view .LVU174
 686 010e 8B9B     		ldr	r3, [sp, #556]	@ float
 140:Core/Src/main.c ****       FusionVector accelerometer = {himu1.ax, himu1.ay, himu1.az}; // accelerometer data in g
ARM GAS  /tmp/ccP4y1SB.s 			page 30


 687              		.loc 3 140 20 view .LVU175
 688 0110 AB60     		str	r3, [r5, #8]	@ float
 141:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 689              		.loc 3 141 7 is_stmt 1 view .LVU176
 141:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 690              		.loc 3 141 20 is_stmt 0 view .LVU177
 691 0112 1EAE     		add	r6, sp, #120
 692 0114 869B     		ldr	r3, [sp, #536]	@ float
 693 0116 1E93     		str	r3, [sp, #120]	@ float
 141:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 694              		.loc 3 141 52 view .LVU178
 695 0118 879B     		ldr	r3, [sp, #540]	@ float
 141:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 696              		.loc 3 141 20 view .LVU179
 697 011a 1F93     		str	r3, [sp, #124]	@ float
 141:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 698              		.loc 3 141 62 view .LVU180
 699 011c 889B     		ldr	r3, [sp, #544]	@ float
 141:Core/Src/main.c ****       FusionVector magnetometer = {himu1.mx, himu1.my, himu1.mz}; // magnetometer data in arbitrary
 700              		.loc 3 141 20 view .LVU181
 701 011e 2093     		str	r3, [sp, #128]	@ float
 142:Core/Src/main.c **** 
 702              		.loc 3 142 7 is_stmt 1 view .LVU182
 142:Core/Src/main.c **** 
 703              		.loc 3 142 20 is_stmt 0 view .LVU183
 704 0120 21AF     		add	r7, sp, #132
 705 0122 8C9B     		ldr	r3, [sp, #560]	@ float
 706 0124 2193     		str	r3, [sp, #132]	@ float
 142:Core/Src/main.c **** 
 707              		.loc 3 142 51 view .LVU184
 708 0126 8D9B     		ldr	r3, [sp, #564]	@ float
 142:Core/Src/main.c **** 
 709              		.loc 3 142 20 view .LVU185
 710 0128 2293     		str	r3, [sp, #136]	@ float
 142:Core/Src/main.c **** 
 711              		.loc 3 142 61 view .LVU186
 712 012a 8E9B     		ldr	r3, [sp, #568]	@ float
 142:Core/Src/main.c **** 
 713              		.loc 3 142 20 view .LVU187
 714 012c 2393     		str	r3, [sp, #140]	@ float
 145:Core/Src/main.c ****       accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerom
 715              		.loc 3 145 7 is_stmt 1 view .LVU188
 145:Core/Src/main.c ****       accelerometer = FusionCalibrationInertial(accelerometer, accelerometerMisalignment, accelerom
 716              		.loc 3 145 19 is_stmt 0 view .LVU189
 717 012e 8E4B     		ldr	r3, .L20+12
 718 0130 0DF13009 		add	r9, sp, #48
 719 0134 93E80700 		ldm	r3, {r0, r1, r2}
 720 0138 89E80700 		stm	r9, {r0, r1, r2}
 721 013c 8B4B     		ldr	r3, .L20+16
 722 013e 0DF12408 		add	r8, sp, #36
 723 0142 93E80700 		ldm	r3, {r0, r1, r2}
 724 0146 88E80700 		stm	r8, {r0, r1, r2}
 725 014a 6C46     		mov	r4, sp
 726 014c DFF820C2 		ldr	ip, .L20+20
 727 0150 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 728 0154 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 729 0156 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccP4y1SB.s 			page 31


 730 015a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 731 015c DCF80030 		ldr	r3, [ip]
 732 0160 2360     		str	r3, [r4]
 733 0162 95E80E00 		ldm	r5, {r1, r2, r3}
 734 0166 2846     		mov	r0, r5
 735 0168 FFF7FEFF 		bl	FusionCalibrationInertial
 736              	.LVL60:
 146:Core/Src/main.c ****       magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 737              		.loc 3 146 7 is_stmt 1 view .LVU190
 146:Core/Src/main.c ****       magnetometer = FusionCalibrationMagnetic(magnetometer, softIronMatrix, hardIronOffset);
 738              		.loc 3 146 23 is_stmt 0 view .LVU191
 739 016c 814B     		ldr	r3, .L20+24
 740 016e 93E80700 		ldm	r3, {r0, r1, r2}
 741 0172 89E80700 		stm	r9, {r0, r1, r2}
 742 0176 804B     		ldr	r3, .L20+28
 743 0178 93E80700 		ldm	r3, {r0, r1, r2}
 744 017c 88E80700 		stm	r8, {r0, r1, r2}
 745 0180 6C46     		mov	r4, sp
 746 0182 DFF8F8C1 		ldr	ip, .L20+32
 747 0186 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 748 018a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 749 018c BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 750 0190 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 751 0192 DCF80030 		ldr	r3, [ip]
 752 0196 2360     		str	r3, [r4]
 753 0198 96E80E00 		ldm	r6, {r1, r2, r3}
 754 019c 3046     		mov	r0, r6
 755 019e FFF7FEFF 		bl	FusionCalibrationInertial
 756              	.LVL61:
 147:Core/Src/main.c **** 
 757              		.loc 3 147 7 is_stmt 1 view .LVU192
 758 01a2 0DF1900E 		add	lr, sp, #144
 759 01a6 97E80700 		ldm	r7, {r0, r1, r2}
 760 01aa 8EE80700 		stm	lr, {r0, r1, r2}
 761 01ae 0DF1C00B 		add	fp, sp, #192
 762 01b2 5C46     		mov	r4, fp
 763 01b4 DFF8C8C1 		ldr	ip, .L20+36
 764 01b8 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 765 01bc 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 766 01be BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 767 01c2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 768 01c4 DCF80030 		ldr	r3, [ip]
 769 01c8 2360     		str	r3, [r4]
 770 01ca 65AB     		add	r3, sp, #404
 771 01cc 93E80700 		ldm	r3, {r0, r1, r2}
 772 01d0 27AC     		add	r4, sp, #156
 773 01d2 84E80700 		stm	r4, {r0, r1, r2}
 774              	.LBB74:
 775              	.LBI74:
  29:Core/Inc/Fusion/FusionCalibration.h **** 
  30:Core/Inc/Fusion/FusionCalibration.h **** /**
  31:Core/Inc/Fusion/FusionCalibration.h ****  * @brief Magnetometer calibration model.
  32:Core/Inc/Fusion/FusionCalibration.h ****  * @param uncalibrated Uncalibrated measurement.
  33:Core/Inc/Fusion/FusionCalibration.h ****  * @param softIronMatrix Soft-iron matrix.
  34:Core/Inc/Fusion/FusionCalibration.h ****  * @param hardIronOffset Hard-iron offset.
  35:Core/Inc/Fusion/FusionCalibration.h ****  * @return Calibrated measurement.
  36:Core/Inc/Fusion/FusionCalibration.h ****  */
ARM GAS  /tmp/ccP4y1SB.s 			page 32


  37:Core/Inc/Fusion/FusionCalibration.h **** static inline FusionVector FusionCalibrationMagnetic(const FusionVector uncalibrated, const FusionM
 776              		.loc 1 37 28 view .LVU193
 777              	.LBB75:
  38:Core/Inc/Fusion/FusionCalibration.h ****     return FusionVectorSubtract(FusionMatrixMultiplyVector(softIronMatrix, uncalibrated), hardIronO
 778              		.loc 1 38 5 view .LVU194
 779 01d6 39AC     		add	r4, sp, #228
 780 01d8 A446     		mov	ip, r4
 781 01da D846     		mov	r8, fp
 782 01dc B8E80F00 		ldmia	r8!, {r0, r1, r2, r3}
 783 01e0 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 784 01e4 B8E80F00 		ldmia	r8!, {r0, r1, r2, r3}
 785 01e8 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 786 01ec D8F80030 		ldr	r3, [r8]
 787 01f0 CCF80030 		str	r3, [ip]
 788 01f4 0DF1A809 		add	r9, sp, #168
 789 01f8 9EE80700 		ldm	lr, {r0, r1, r2}
 790 01fc 89E80700 		stm	r9, {r0, r1, r2}
 791              	.LBB76:
 792              	.LBI76:
 399:Core/Inc/Fusion/FusionMath.h **** #define R matrix.element
 793              		.loc 2 399 28 view .LVU195
 794              	.LBB77:
 401:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = R.xx * vector.axis.x + R.xy * vector.axis.y + R.xz * vector.axis.z;
 795              		.loc 2 401 5 view .LVU196
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 796              		.loc 2 402 5 view .LVU197
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 797              		.loc 2 402 39 is_stmt 0 view .LVU198
 798 0200 D9F80020 		ldr	r2, [r9]	@ float
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 799              		.loc 2 402 26 view .LVU199
 800 0204 1292     		str	r2, [sp, #72]	@ float
 801 0206 1146     		mov	r1, r2
 802 0208 2068     		ldr	r0, [r4]	@ float
 803 020a FFF7FEFF 		bl	__aeabi_fmul
 804              	.LVL62:
 805 020e 8046     		mov	r8, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 806              		.loc 2 402 62 view .LVU200
 807 0210 D9F804A0 		ldr	r10, [r9, #4]	@ float
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 808              		.loc 2 402 49 view .LVU201
 809 0214 5146     		mov	r1, r10
 810 0216 6068     		ldr	r0, [r4, #4]	@ float
 811 0218 FFF7FEFF 		bl	__aeabi_fmul
 812              	.LVL63:
 813 021c 0146     		mov	r1, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 814              		.loc 2 402 42 view .LVU202
 815 021e 4046     		mov	r0, r8
 816 0220 FFF7FEFF 		bl	__aeabi_fadd
 817              	.LVL64:
 818 0224 8046     		mov	r8, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 819              		.loc 2 402 85 view .LVU203
 820 0226 D9F808C0 		ldr	ip, [r9, #8]	@ float
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
ARM GAS  /tmp/ccP4y1SB.s 			page 33


 821              		.loc 2 402 72 view .LVU204
 822 022a CDF84CC0 		str	ip, [sp, #76]	@ float
 823 022e 6146     		mov	r1, ip
 824 0230 A068     		ldr	r0, [r4, #8]	@ float
 825 0232 FFF7FEFF 		bl	__aeabi_fmul
 826              	.LVL65:
 827 0236 0146     		mov	r1, r0
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 828              		.loc 2 402 65 view .LVU205
 829 0238 4046     		mov	r0, r8
 830 023a FFF7FEFF 		bl	__aeabi_fadd
 831              	.LVL66:
 402:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = R.yx * vector.axis.x + R.yy * vector.axis.y + R.yz * vector.axis.z;
 832              		.loc 2 402 19 view .LVU206
 833 023e 0DF1B408 		add	r8, sp, #180
 834 0242 2D90     		str	r0, [sp, #180]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 835              		.loc 2 403 5 is_stmt 1 view .LVU207
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 836              		.loc 2 403 26 is_stmt 0 view .LVU208
 837 0244 E168     		ldr	r1, [r4, #12]	@ float
 838 0246 1298     		ldr	r0, [sp, #72]	@ float
 839 0248 FFF7FEFF 		bl	__aeabi_fmul
 840              	.LVL67:
 841 024c 1590     		str	r0, [sp, #84]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 842              		.loc 2 403 49 view .LVU209
 843 024e 2169     		ldr	r1, [r4, #16]	@ float
 844 0250 5046     		mov	r0, r10
 845 0252 FFF7FEFF 		bl	__aeabi_fmul
 846              	.LVL68:
 847 0256 0146     		mov	r1, r0
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 848              		.loc 2 403 42 view .LVU210
 849 0258 1598     		ldr	r0, [sp, #84]	@ float
 850 025a FFF7FEFF 		bl	__aeabi_fadd
 851              	.LVL69:
 852 025e 1590     		str	r0, [sp, #84]	@ float
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 853              		.loc 2 403 72 view .LVU211
 854 0260 6169     		ldr	r1, [r4, #20]	@ float
 855 0262 1398     		ldr	r0, [sp, #76]	@ float
 856 0264 FFF7FEFF 		bl	__aeabi_fmul
 857              	.LVL70:
 858 0268 0146     		mov	r1, r0
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 859              		.loc 2 403 65 view .LVU212
 860 026a 1598     		ldr	r0, [sp, #84]	@ float
 861 026c FFF7FEFF 		bl	__aeabi_fadd
 862              	.LVL71:
 403:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = R.zx * vector.axis.x + R.zy * vector.axis.y + R.zz * vector.axis.z;
 863              		.loc 2 403 19 view .LVU213
 864 0270 2E90     		str	r0, [sp, #184]	@ float
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 865              		.loc 2 404 5 is_stmt 1 view .LVU214
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 866              		.loc 2 404 26 is_stmt 0 view .LVU215
ARM GAS  /tmp/ccP4y1SB.s 			page 34


 867 0272 A169     		ldr	r1, [r4, #24]	@ float
 868 0274 1298     		ldr	r0, [sp, #72]	@ float
 869 0276 FFF7FEFF 		bl	__aeabi_fmul
 870              	.LVL72:
 871 027a 1290     		str	r0, [sp, #72]	@ float
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 872              		.loc 2 404 49 view .LVU216
 873 027c E169     		ldr	r1, [r4, #28]	@ float
 874 027e 5046     		mov	r0, r10
 875 0280 FFF7FEFF 		bl	__aeabi_fmul
 876              	.LVL73:
 877 0284 0146     		mov	r1, r0
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 878              		.loc 2 404 42 view .LVU217
 879 0286 1298     		ldr	r0, [sp, #72]	@ float
 880 0288 FFF7FEFF 		bl	__aeabi_fadd
 881              	.LVL74:
 882 028c 8246     		mov	r10, r0
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 883              		.loc 2 404 72 view .LVU218
 884 028e 216A     		ldr	r1, [r4, #32]	@ float
 885 0290 1398     		ldr	r0, [sp, #76]	@ float
 886 0292 FFF7FEFF 		bl	__aeabi_fmul
 887              	.LVL75:
 888 0296 0146     		mov	r1, r0
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 889              		.loc 2 404 65 view .LVU219
 890 0298 5046     		mov	r0, r10
 891 029a FFF7FEFF 		bl	__aeabi_fadd
 892              	.LVL76:
 404:Core/Inc/Fusion/FusionMath.h ****     return result;
 893              		.loc 2 404 19 view .LVU220
 894 029e 2F90     		str	r0, [sp, #188]	@ float
 405:Core/Inc/Fusion/FusionMath.h **** #undef R
 895              		.loc 2 405 5 is_stmt 1 view .LVU221
 405:Core/Inc/Fusion/FusionMath.h **** #undef R
 896              		.loc 2 405 12 is_stmt 0 view .LVU222
 897 02a0 93AB     		add	r3, sp, #588
 898 02a2 98E80700 		ldm	r8, {r0, r1, r2}
 899 02a6 83E80700 		stm	r3, {r0, r1, r2}
 900 02aa 27AA     		add	r2, sp, #156
 901 02ac 07CA     		ldm	r2, {r0, r1, r2}
 902 02ae 89E80700 		stm	r9, {r0, r1, r2}
 903              	.LBE77:
 904              	.LBE76:
 905              	.LBB78:
 906              	.LBI78:
 215:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 907              		.loc 2 215 28 is_stmt 1 view .LVU223
 908              	.LBB79:
 216:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 909              		.loc 2 216 5 view .LVU224
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 910              		.loc 2 217 5 view .LVU225
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 911              		.loc 2 217 36 is_stmt 0 view .LVU226
 912 02b2 D9F80010 		ldr	r1, [r9]	@ float
ARM GAS  /tmp/ccP4y1SB.s 			page 35


 913 02b6 D8F80000 		ldr	r0, [r8]	@ float
 914 02ba FFF7FEFF 		bl	__aeabi_fsub
 915              	.LVL77:
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 916              		.loc 2 217 19 view .LVU227
 917 02be 2060     		str	r0, [r4]	@ float
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 918              		.loc 2 218 5 is_stmt 1 view .LVU228
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 919              		.loc 2 218 36 is_stmt 0 view .LVU229
 920 02c0 D9F80410 		ldr	r1, [r9, #4]	@ float
 921 02c4 D8F80400 		ldr	r0, [r8, #4]	@ float
 922 02c8 FFF7FEFF 		bl	__aeabi_fsub
 923              	.LVL78:
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 924              		.loc 2 218 19 view .LVU230
 925 02cc 6060     		str	r0, [r4, #4]	@ float
 219:Core/Inc/Fusion/FusionMath.h ****     return result;
 926              		.loc 2 219 5 is_stmt 1 view .LVU231
 219:Core/Inc/Fusion/FusionMath.h ****     return result;
 927              		.loc 2 219 36 is_stmt 0 view .LVU232
 928 02ce D9F80810 		ldr	r1, [r9, #8]	@ float
 929 02d2 D8F80800 		ldr	r0, [r8, #8]	@ float
 930 02d6 FFF7FEFF 		bl	__aeabi_fsub
 931              	.LVL79:
 219:Core/Inc/Fusion/FusionMath.h ****     return result;
 932              		.loc 2 219 19 view .LVU233
 933 02da A060     		str	r0, [r4, #8]	@ float
 220:Core/Inc/Fusion/FusionMath.h **** }
 934              		.loc 2 220 5 is_stmt 1 view .LVU234
 220:Core/Inc/Fusion/FusionMath.h **** }
 935              		.loc 2 220 12 is_stmt 0 view .LVU235
 936 02dc 94E80700 		ldm	r4, {r0, r1, r2}
 937 02e0 87E80700 		stm	r7, {r0, r1, r2}
 938              	.LBE79:
 939              	.LBE78:
 940              	.LBE75:
 941              	.LBE74:
 150:Core/Src/main.c ****       accelerometer = FusionAxesSwap(accelerometer, FusionAxesAlignmentPYNXPZ);
 942              		.loc 3 150 7 is_stmt 1 view .LVU236
 943 02e4 95E80700 		ldm	r5, {r0, r1, r2}
 944 02e8 8BE80700 		stm	fp, {r0, r1, r2}
 945              	.LVL80:
 946              	.LBB80:
 947              	.LBI80:
 948              		.file 5 "Core/Inc/Fusion/FusionAxes.h"
   1:Core/Inc/Fusion/FusionAxes.h **** /**
   2:Core/Inc/Fusion/FusionAxes.h ****  * @file FusionAxes.h
   3:Core/Inc/Fusion/FusionAxes.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionAxes.h ****  * @brief Swaps sensor axes for alignment with the body axes.
   5:Core/Inc/Fusion/FusionAxes.h ****  */
   6:Core/Inc/Fusion/FusionAxes.h **** 
   7:Core/Inc/Fusion/FusionAxes.h **** #ifndef FUSION_AXES_H
   8:Core/Inc/Fusion/FusionAxes.h **** #define FUSION_AXES_H
   9:Core/Inc/Fusion/FusionAxes.h **** 
  10:Core/Inc/Fusion/FusionAxes.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionAxes.h **** // Includes
ARM GAS  /tmp/ccP4y1SB.s 			page 36


  12:Core/Inc/Fusion/FusionAxes.h **** 
  13:Core/Inc/Fusion/FusionAxes.h **** #include "FusionMath.h"
  14:Core/Inc/Fusion/FusionAxes.h **** 
  15:Core/Inc/Fusion/FusionAxes.h **** //------------------------------------------------------------------------------
  16:Core/Inc/Fusion/FusionAxes.h **** // Definitions
  17:Core/Inc/Fusion/FusionAxes.h **** 
  18:Core/Inc/Fusion/FusionAxes.h **** /**
  19:Core/Inc/Fusion/FusionAxes.h ****  * @brief Axes alignment describing the sensor axes relative to the body axes.
  20:Core/Inc/Fusion/FusionAxes.h ****  * For example, if the body X axis is aligned with the sensor Y axis and the
  21:Core/Inc/Fusion/FusionAxes.h ****  * body Y axis is aligned with sensor X axis but pointing the opposite direction
  22:Core/Inc/Fusion/FusionAxes.h ****  * then alignment is +Y-X+Z.
  23:Core/Inc/Fusion/FusionAxes.h ****  */
  24:Core/Inc/Fusion/FusionAxes.h **** typedef enum {
  25:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXPYPZ, /* +X+Y+Z */
  26:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXNZPY, /* +X-Z+Y */
  27:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXNYNZ, /* +X-Y-Z */
  28:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPXPZNY, /* +X+Z-Y */
  29:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXPYNZ, /* -X+Y-Z */
  30:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXPZPY, /* -X+Z+Y */
  31:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXNYPZ, /* -X-Y+Z */
  32:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNXNZNY, /* -X-Z-Y */
  33:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYNXPZ, /* +Y-X+Z */
  34:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYNZNX, /* +Y-Z-X */
  35:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYPXNZ, /* +Y+X-Z */
  36:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPYPZPX, /* +Y+Z+X */
  37:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYPXPZ, /* -Y+X+Z */
  38:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYNZPX, /* -Y-Z+X */
  39:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYNXNZ, /* -Y-X-Z */
  40:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNYPZNX, /* -Y+Z-X */
  41:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZPYNX, /* +Z+Y-X */
  42:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZPXPY, /* +Z+X+Y */
  43:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZNYPX, /* +Z-Y+X */
  44:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentPZNXNY, /* +Z-X-Y */
  45:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZPYPX, /* -Z+Y+X */
  46:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZNXPY, /* -Z-X+Y */
  47:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZNYNX, /* -Z-Y-X */
  48:Core/Inc/Fusion/FusionAxes.h ****     FusionAxesAlignmentNZPXNY, /* -Z+X-Y */
  49:Core/Inc/Fusion/FusionAxes.h **** } FusionAxesAlignment;
  50:Core/Inc/Fusion/FusionAxes.h **** 
  51:Core/Inc/Fusion/FusionAxes.h **** //------------------------------------------------------------------------------
  52:Core/Inc/Fusion/FusionAxes.h **** // Inline functions
  53:Core/Inc/Fusion/FusionAxes.h **** 
  54:Core/Inc/Fusion/FusionAxes.h **** /**
  55:Core/Inc/Fusion/FusionAxes.h ****  * @brief Swaps sensor axes for alignment with the body axes.
  56:Core/Inc/Fusion/FusionAxes.h ****  * @param sensor Sensor axes.
  57:Core/Inc/Fusion/FusionAxes.h ****  * @param alignment Axes alignment.
  58:Core/Inc/Fusion/FusionAxes.h ****  * @return Sensor axes aligned with the body axes.
  59:Core/Inc/Fusion/FusionAxes.h ****  */
  60:Core/Inc/Fusion/FusionAxes.h **** static inline FusionVector FusionAxesSwap(const FusionVector sensor, const FusionAxesAlignment alig
 949              		.loc 5 60 28 view .LVU237
 950              	.LBB81:
  61:Core/Inc/Fusion/FusionAxes.h ****     FusionVector result;
 951              		.loc 5 61 5 view .LVU238
  62:Core/Inc/Fusion/FusionAxes.h ****     switch (alignment) {
 952              		.loc 5 62 5 view .LVU239
  63:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPYPZ:
  64:Core/Inc/Fusion/FusionAxes.h ****             break;
ARM GAS  /tmp/ccP4y1SB.s 			page 37


  65:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXNZPY:
  66:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.x;
  67:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.z;
  68:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.y;
  69:Core/Inc/Fusion/FusionAxes.h ****             return result;
  70:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXNYNZ:
  71:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.x;
  72:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.y;
  73:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.z;
  74:Core/Inc/Fusion/FusionAxes.h ****             return result;
  75:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPZNY:
  76:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.x;
  77:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = +sensor.axis.z;
  78:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.y;
  79:Core/Inc/Fusion/FusionAxes.h ****             return result;
  80:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXPYNZ:
  81:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  82:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = +sensor.axis.y;
  83:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.z;
  84:Core/Inc/Fusion/FusionAxes.h ****             return result;
  85:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXPZPY:
  86:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  87:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = +sensor.axis.z;
  88:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.y;
  89:Core/Inc/Fusion/FusionAxes.h ****             return result;
  90:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXNYPZ:
  91:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  92:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.y;
  93:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
  94:Core/Inc/Fusion/FusionAxes.h ****             return result;
  95:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentNXNZNY:
  96:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = -sensor.axis.x;
  97:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.z;
  98:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = -sensor.axis.y;
  99:Core/Inc/Fusion/FusionAxes.h ****             return result;
 100:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPYNXPZ:
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.x = +sensor.axis.y;
 953              		.loc 5 101 13 view .LVU240
 954              		.loc 5 101 29 is_stmt 0 view .LVU241
 955 02ec DBF80430 		ldr	r3, [fp, #4]	@ float
 956              		.loc 5 101 27 view .LVU242
 957 02f0 2360     		str	r3, [r4]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 958              		.loc 5 102 13 is_stmt 1 view .LVU243
 959              		.loc 5 102 41 is_stmt 0 view .LVU244
 960 02f2 DBF80030 		ldr	r3, [fp]	@ float
 961              		.loc 5 102 29 view .LVU245
 962 02f6 03F10043 		add	r3, r3, #-2147483648
 963              		.loc 5 102 27 view .LVU246
 964 02fa 6360     		str	r3, [r4, #4]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 965              		.loc 5 103 13 is_stmt 1 view .LVU247
 966              		.loc 5 103 29 is_stmt 0 view .LVU248
 967 02fc DBF80830 		ldr	r3, [fp, #8]	@ float
 968              		.loc 5 103 27 view .LVU249
 969 0300 A360     		str	r3, [r4, #8]	@ float
 104:Core/Inc/Fusion/FusionAxes.h ****             return result;
ARM GAS  /tmp/ccP4y1SB.s 			page 38


 970              		.loc 5 104 13 is_stmt 1 view .LVU250
 971              		.loc 5 104 20 is_stmt 0 view .LVU251
 972 0302 94E80700 		ldm	r4, {r0, r1, r2}
 973 0306 85E80700 		stm	r5, {r0, r1, r2}
 974              	.LVL81:
 975              		.loc 5 104 20 view .LVU252
 976              	.LBE81:
 977              	.LBE80:
 151:Core/Src/main.c ****       magnetometer = FusionAxesSwap(magnetometer, FusionAxesAlignmentPYNXPZ);
 978              		.loc 3 151 7 is_stmt 1 view .LVU253
 979 030a 96E80700 		ldm	r6, {r0, r1, r2}
 980 030e 8BE80700 		stm	fp, {r0, r1, r2}
 981              	.LVL82:
 982              	.LBB82:
 983              	.LBI82:
  60:Core/Inc/Fusion/FusionAxes.h ****     FusionVector result;
 984              		.loc 5 60 28 view .LVU254
 985              	.LBB83:
  61:Core/Inc/Fusion/FusionAxes.h ****     switch (alignment) {
 986              		.loc 5 61 5 view .LVU255
  62:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPYPZ:
 987              		.loc 5 62 5 view .LVU256
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 988              		.loc 5 101 13 view .LVU257
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 989              		.loc 5 101 29 is_stmt 0 view .LVU258
 990 0312 DBF80430 		ldr	r3, [fp, #4]	@ float
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 991              		.loc 5 101 27 view .LVU259
 992 0316 2360     		str	r3, [r4]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 993              		.loc 5 102 13 is_stmt 1 view .LVU260
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 994              		.loc 5 102 41 is_stmt 0 view .LVU261
 995 0318 DBF80030 		ldr	r3, [fp]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 996              		.loc 5 102 29 view .LVU262
 997 031c 03F10043 		add	r3, r3, #-2147483648
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 998              		.loc 5 102 27 view .LVU263
 999 0320 6360     		str	r3, [r4, #4]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1000              		.loc 5 103 13 is_stmt 1 view .LVU264
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1001              		.loc 5 103 29 is_stmt 0 view .LVU265
 1002 0322 DBF80830 		ldr	r3, [fp, #8]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1003              		.loc 5 103 27 view .LVU266
 1004 0326 A360     		str	r3, [r4, #8]	@ float
 1005              		.loc 5 104 13 is_stmt 1 view .LVU267
 1006              		.loc 5 104 20 is_stmt 0 view .LVU268
 1007 0328 94E80700 		ldm	r4, {r0, r1, r2}
 1008 032c 86E80700 		stm	r6, {r0, r1, r2}
 1009              	.LVL83:
 1010              		.loc 5 104 20 view .LVU269
 1011              	.LBE83:
 1012              	.LBE82:
ARM GAS  /tmp/ccP4y1SB.s 			page 39


 152:Core/Src/main.c **** 
 1013              		.loc 3 152 7 is_stmt 1 view .LVU270
 1014 0330 97E80700 		ldm	r7, {r0, r1, r2}
 1015 0334 8BE80700 		stm	fp, {r0, r1, r2}
 1016              	.LVL84:
 1017              	.LBB84:
 1018              	.LBI84:
  60:Core/Inc/Fusion/FusionAxes.h ****     FusionVector result;
 1019              		.loc 5 60 28 view .LVU271
 1020              	.LBB85:
  61:Core/Inc/Fusion/FusionAxes.h ****     switch (alignment) {
 1021              		.loc 5 61 5 view .LVU272
  62:Core/Inc/Fusion/FusionAxes.h ****         case FusionAxesAlignmentPXPYPZ:
 1022              		.loc 5 62 5 view .LVU273
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1023              		.loc 5 101 13 view .LVU274
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1024              		.loc 5 101 29 is_stmt 0 view .LVU275
 1025 0338 DBF80430 		ldr	r3, [fp, #4]	@ float
 101:Core/Inc/Fusion/FusionAxes.h ****             result.axis.y = -sensor.axis.x;
 1026              		.loc 5 101 27 view .LVU276
 1027 033c 2360     		str	r3, [r4]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1028              		.loc 5 102 13 is_stmt 1 view .LVU277
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1029              		.loc 5 102 41 is_stmt 0 view .LVU278
 1030 033e DBF80030 		ldr	r3, [fp]	@ float
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1031              		.loc 5 102 29 view .LVU279
 1032 0342 03F10043 		add	r3, r3, #-2147483648
 102:Core/Inc/Fusion/FusionAxes.h ****             result.axis.z = +sensor.axis.z;
 1033              		.loc 5 102 27 view .LVU280
 1034 0346 6360     		str	r3, [r4, #4]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1035              		.loc 5 103 13 is_stmt 1 view .LVU281
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1036              		.loc 5 103 29 is_stmt 0 view .LVU282
 1037 0348 DBF80830 		ldr	r3, [fp, #8]	@ float
 103:Core/Inc/Fusion/FusionAxes.h ****             return result;
 1038              		.loc 5 103 27 view .LVU283
 1039 034c A360     		str	r3, [r4, #8]	@ float
 1040              		.loc 5 104 13 is_stmt 1 view .LVU284
 1041              		.loc 5 104 20 is_stmt 0 view .LVU285
 1042 034e 94E80700 		ldm	r4, {r0, r1, r2}
 1043 0352 87E80700 		stm	r7, {r0, r1, r2}
 1044              	.LVL85:
 1045              		.loc 5 104 20 view .LVU286
 1046              	.LBE85:
 1047              	.LBE84:
 155:Core/Src/main.c **** 
 1048              		.loc 3 155 7 is_stmt 1 view .LVU287
 155:Core/Src/main.c **** 
 1049              		.loc 3 155 19 is_stmt 0 view .LVU288
 1050 0356 16AF     		add	r7, sp, #88
 1051 0358 14E0     		b	.L21
 1052              	.L22:
 1053 035a 00BF     		.align	2
ARM GAS  /tmp/ccP4y1SB.s 			page 40


 1054              	.L20:
 1055 035c E02E6542 		.word	1113927392
 1056 0360 00000000 		.word	.LC1
 1057 0364 00000000 		.word	huart3
 1058 0368 00000000 		.word	.LANCHOR1
 1059 036c 00000000 		.word	.LANCHOR2
 1060 0370 00000000 		.word	.LANCHOR3
 1061 0374 00000000 		.word	.LANCHOR4
 1062 0378 00000000 		.word	.LANCHOR5
 1063 037c 00000000 		.word	.LANCHOR6
 1064 0380 00000000 		.word	.LANCHOR7
 1065              	.L21:
 1066 0384 AB68     		ldr	r3, [r5, #8]
 1067 0386 0093     		str	r3, [sp]
 1068 0388 95E80C00 		ldm	r5, {r2, r3}
 1069 038c 5FA9     		add	r1, sp, #380
 1070 038e 3846     		mov	r0, r7
 1071 0390 FFF7FEFF 		bl	FusionOffsetUpdate
 1072              	.LVL86:
 1073 0394 97E80700 		ldm	r7, {r0, r1, r2}
 1074 0398 85E80700 		stm	r5, {r0, r1, r2}
 158:Core/Src/main.c **** 
 1075              		.loc 3 158 7 is_stmt 1 view .LVU289
 158:Core/Src/main.c **** 
 1076              		.loc 3 158 31 is_stmt 0 view .LVU290
 1077 039c 119B     		ldr	r3, [sp, #68]
 1078 039e 149A     		ldr	r2, [sp, #80]
 1079 03a0 981A     		subs	r0, r3, r2
 1080 03a2 FFF7FEFF 		bl	__aeabi_ui2f
 1081              	.LVL87:
 158:Core/Src/main.c **** 
 1082              		.loc 3 158 19 view .LVU291
 1083 03a6 3249     		ldr	r1, .L23
 1084 03a8 FFF7FEFF 		bl	__aeabi_fdiv
 1085              	.LVL88:
 163:Core/Src/main.c **** 
 1086              		.loc 3 163 7 is_stmt 1 view .LVU292
 1087 03ac 0390     		str	r0, [sp, #12]	@ float
 1088 03ae 96E80700 		ldm	r6, {r0, r1, r2}
 1089              	.LVL89:
 163:Core/Src/main.c **** 
 1090              		.loc 3 163 7 is_stmt 0 view .LVU293
 1091 03b2 8DE80700 		stm	sp, {r0, r1, r2}
 1092 03b6 95E80E00 		ldm	r5, {r1, r2, r3}
 1093 03ba 46A8     		add	r0, sp, #280
 1094 03bc FFF7FEFF 		bl	FusionAhrsUpdateNoMagnetometer
 1095              	.LVL90:
 166:Core/Src/main.c ****       // const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
 1096              		.loc 3 166 7 is_stmt 1 view .LVU294
 166:Core/Src/main.c ****       // const FusionVector earth = FusionAhrsGetEarthAcceleration(&ahrs);
 1097              		.loc 3 166 33 is_stmt 0 view .LVU295
 1098 03c0 8FAD     		add	r5, sp, #572
 1099 03c2 46A9     		add	r1, sp, #280
 1100 03c4 2846     		mov	r0, r5
 1101 03c6 FFF7FEFF 		bl	FusionAhrsGetQuaternion
 1102              	.LVL91:
 1103 03ca 95E80F00 		ldm	r5, {r0, r1, r2, r3}
ARM GAS  /tmp/ccP4y1SB.s 			page 41


 1104 03ce 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1105              	.LBB86:
 1106              	.LBI61:
 445:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 1107              		.loc 2 445 27 is_stmt 1 view .LVU296
 1108              	.LBB73:
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1109              		.loc 2 447 5 view .LVU297
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1110              		.loc 2 447 46 is_stmt 0 view .LVU298
 1111 03d2 A568     		ldr	r5, [r4, #8]	@ float
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1112              		.loc 2 447 49 view .LVU299
 1113 03d4 2946     		mov	r1, r5
 1114 03d6 2846     		mov	r0, r5
 1115 03d8 FFF7FEFF 		bl	__aeabi_fmul
 1116              	.LVL92:
 1117 03dc 0146     		mov	r1, r0
 447:Core/Inc/Fusion/FusionMath.h ****     FusionEuler euler;
 1118              		.loc 2 447 17 view .LVU300
 1119 03de 4FF07C50 		mov	r0, #1056964608
 1120 03e2 FFF7FEFF 		bl	__aeabi_fsub
 1121              	.LVL93:
 1122 03e6 0746     		mov	r7, r0
 1123              	.LVL94:
 448:Core/Inc/Fusion/FusionMath.h ****     euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.
 1124              		.loc 2 448 5 is_stmt 1 view .LVU301
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1125              		.loc 2 449 5 view .LVU302
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1126              		.loc 2 449 55 is_stmt 0 view .LVU303
 1127 03e8 D4F80080 		ldr	r8, [r4]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1128              		.loc 2 449 61 view .LVU304
 1129 03ec 6668     		ldr	r6, [r4, #4]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1130              		.loc 2 449 58 view .LVU305
 1131 03ee 3146     		mov	r1, r6
 1132 03f0 4046     		mov	r0, r8
 1133              	.LVL95:
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1134              		.loc 2 449 58 view .LVU306
 1135 03f2 FFF7FEFF 		bl	__aeabi_fmul
 1136              	.LVL96:
 1137 03f6 8246     		mov	r10, r0
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1138              		.loc 2 449 73 view .LVU307
 1139 03f8 E468     		ldr	r4, [r4, #12]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1140              		.loc 2 449 70 view .LVU308
 1141 03fa 2146     		mov	r1, r4
 1142 03fc 2846     		mov	r0, r5
 1143 03fe FFF7FEFF 		bl	__aeabi_fmul
 1144              	.LVL97:
 1145 0402 1290     		str	r0, [sp, #72]	@ float
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1146              		.loc 2 449 102 view .LVU309
ARM GAS  /tmp/ccP4y1SB.s 			page 42


 1147 0404 3146     		mov	r1, r6
 1148 0406 3046     		mov	r0, r6
 1149 0408 FFF7FEFF 		bl	__aeabi_fmul
 1150              	.LVL98:
 1151 040c 0146     		mov	r1, r0
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1152              		.loc 2 449 24 view .LVU310
 1153 040e 3846     		mov	r0, r7
 1154 0410 FFF7FEFF 		bl	__aeabi_fsub
 1155              	.LVL99:
 1156 0414 8146     		mov	r9, r0
 1157 0416 1299     		ldr	r1, [sp, #72]	@ float
 1158 0418 5046     		mov	r0, r10
 1159 041a FFF7FEFF 		bl	__aeabi_fadd
 1160              	.LVL100:
 1161 041e 4946     		mov	r1, r9
 1162 0420 FFF7FEFF 		bl	atan2f
 1163              	.LVL101:
 1164              	.LBB70:
 1165              	.LBI70:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 1166              		.loc 2 136 21 is_stmt 1 view .LVU311
 1167              	.LBB71:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1168              		.loc 2 137 5 view .LVU312
 137:Core/Inc/Fusion/FusionMath.h **** }
 1169              		.loc 2 137 20 is_stmt 0 view .LVU313
 1170 0424 1349     		ldr	r1, .L23+4
 1171 0426 FFF7FEFF 		bl	__aeabi_fmul
 1172              	.LVL102:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1173              		.loc 2 137 20 view .LVU314
 1174              	.LBE71:
 1175              	.LBE70:
 449:Core/Inc/Fusion/FusionMath.h ****     euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
 1176              		.loc 2 449 22 view .LVU315
 1177 042a CBF80000 		str	r0, [fp]	@ float
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1178              		.loc 2 450 5 is_stmt 1 view .LVU316
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1179              		.loc 2 450 71 is_stmt 0 view .LVU317
 1180 042e 4146     		mov	r1, r8
 1181 0430 2846     		mov	r0, r5
 1182 0432 FFF7FEFF 		bl	__aeabi_fmul
 1183              	.LVL103:
 1184 0436 8146     		mov	r9, r0
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1185              		.loc 2 450 83 view .LVU318
 1186 0438 2146     		mov	r1, r4
 1187 043a 3046     		mov	r0, r6
 1188 043c FFF7FEFF 		bl	__aeabi_fmul
 1189              	.LVL104:
 1190 0440 0146     		mov	r1, r0
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1191              		.loc 2 450 77 view .LVU319
 1192 0442 4846     		mov	r0, r9
 1193 0444 FFF7FEFF 		bl	__aeabi_fsub
ARM GAS  /tmp/ccP4y1SB.s 			page 43


 1194              	.LVL105:
 1195 0448 0146     		mov	r1, r0
 450:Core/Inc/Fusion/FusionMath.h ****     euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z
 1196              		.loc 2 450 25 view .LVU320
 1197 044a FFF7FEFF 		bl	__aeabi_fadd
 1198              	.LVL106:
 1199 044e 8146     		mov	r9, r0
 1200              	.LVL107:
 1201              	.LBB72:
 1202              	.LBI63:
 148:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 1203              		.loc 2 148 21 is_stmt 1 view .LVU321
 1204              	.LBB65:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1205              		.loc 2 149 5 view .LVU322
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1206              		.loc 2 149 8 is_stmt 0 view .LVU323
 1207 0450 0949     		ldr	r1, .L23+8
 1208 0452 FFF7FEFF 		bl	__aeabi_fcmple
 1209              	.LVL108:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1210              		.loc 2 149 8 view .LVU324
 1211 0456 48B9     		cbnz	r0, .L14
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 1212              		.loc 2 152 5 is_stmt 1 view .LVU325
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 1213              		.loc 2 152 8 is_stmt 0 view .LVU326
 1214 0458 4FF07E51 		mov	r1, #1065353216
 1215 045c 4846     		mov	r0, r9
 1216 045e FFF7FEFF 		bl	__aeabi_fcmpge
 1217              	.LVL109:
 1218 0462 0028     		cmp	r0, #0
 1219 0464 3FF4FCAD 		beq	.L17
 153:Core/Inc/Fusion/FusionMath.h ****     }
 1220              		.loc 2 153 29 view .LVU327
 1221 0468 0448     		ldr	r0, .L23+12
 1222 046a FCE5     		b	.L12
 1223              	.L14:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 1224              		.loc 2 150 29 view .LVU328
 1225 046c 0448     		ldr	r0, .L23+16
 1226 046e FAE5     		b	.L12
 1227              	.L24:
 1228              		.align	2
 1229              	.L23:
 1230 0470 00007A44 		.word	1148846080
 1231 0474 E02E6542 		.word	1113927392
 1232 0478 000080BF 		.word	-1082130432
 1233 047c DB0FC93F 		.word	1070141403
 1234 0480 DB0FC9BF 		.word	-1077342245
 1235              	.LBE65:
 1236              	.LBE72:
 1237              	.LBE73:
 1238              	.LBE86:
 1239              	.LBE87:
 1240              		.cfi_endproc
 1241              	.LFE89:
ARM GAS  /tmp/ccP4y1SB.s 			page 44


 1243              		.section	.rodata
 1244              		.align	2
 1245              		.set	.LANCHOR0,. + 0
 1246              	.LC0:
 1247 0000 0000803F 		.word	1065353216
 1248 0004 00002041 		.word	1092616192
 1249 0008 0000A041 		.word	1101004800
 1250 000c F4010000 		.word	500
 1251              		.section	.rodata.accelerometerMisalignment.3,"a"
 1252              		.align	2
 1253              		.set	.LANCHOR6,. + 0
 1256              	accelerometerMisalignment.3:
 1257 0000 0000803F 		.word	1065353216
 1258 0004 00000000 		.word	0
 1259 0008 00000000 		.word	0
 1260 000c 00000000 		.word	0
 1261 0010 0000803F 		.word	1065353216
 1262 0014 00000000 		.word	0
 1263 0018 00000000 		.word	0
 1264 001c 00000000 		.word	0
 1265 0020 0000803F 		.word	1065353216
 1266              		.section	.rodata.accelerometerOffset.5,"a"
 1267              		.align	2
 1268              		.set	.LANCHOR4,. + 0
 1271              	accelerometerOffset.5:
 1272 0000 0AD7A3BB 		.word	-1146890486
 1273 0004 CDCCCC3C 		.word	1020054733
 1274 0008 295C8FBD 		.word	-1114678231
 1275              		.section	.rodata.accelerometerSensitivity.4,"a"
 1276              		.align	2
 1277              		.set	.LANCHOR5,. + 0
 1280              	accelerometerSensitivity.4:
 1281 0000 0000803F 		.word	1065353216
 1282 0004 0000803F 		.word	1065353216
 1283 0008 0000803F 		.word	1065353216
 1284              		.section	.rodata.gyroscopeMisalignment.0,"a"
 1285              		.align	2
 1286              		.set	.LANCHOR3,. + 0
 1289              	gyroscopeMisalignment.0:
 1290 0000 0000803F 		.word	1065353216
 1291 0004 00000000 		.word	0
 1292 0008 00000000 		.word	0
 1293 000c 00000000 		.word	0
 1294 0010 0000803F 		.word	1065353216
 1295 0014 00000000 		.word	0
 1296 0018 00000000 		.word	0
 1297 001c 00000000 		.word	0
 1298 0020 0000803F 		.word	1065353216
 1299              		.section	.rodata.gyroscopeOffset.2,"a"
 1300              		.align	2
 1301              		.set	.LANCHOR1,. + 0
 1304              	gyroscopeOffset.2:
 1305 0000 295CD141 		.word	1104239657
 1306 0004 CDCC14C1 		.word	-1055601459
 1307 0008 000040C0 		.word	-1069547520
 1308              		.section	.rodata.gyroscopeSensitivity.1,"a"
 1309              		.align	2
ARM GAS  /tmp/ccP4y1SB.s 			page 45


 1310              		.set	.LANCHOR2,. + 0
 1313              	gyroscopeSensitivity.1:
 1314 0000 0000803F 		.word	1065353216
 1315 0004 0000803F 		.word	1065353216
 1316 0008 0000803F 		.word	1065353216
 1317              		.section	.rodata.softIronMatrix.6,"a"
 1318              		.align	2
 1319              		.set	.LANCHOR7,. + 0
 1322              	softIronMatrix.6:
 1323 0000 0000803F 		.word	1065353216
 1324 0004 00000000 		.word	0
 1325 0008 00000000 		.word	0
 1326 000c 00000000 		.word	0
 1327 0010 0000803F 		.word	1065353216
 1328 0014 00000000 		.word	0
 1329 0018 00000000 		.word	0
 1330 001c 00000000 		.word	0
 1331 0020 0000803F 		.word	1065353216
 1332              		.text
 1333              	.Letext0:
 1334              		.file 6 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1335              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1336              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1337              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1338              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1339              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1340              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1341              		.file 13 "Core/Inc/mpu_9250.h"
 1342              		.file 14 "Core/Inc/Fusion/FusionAhrs.h"
 1343              		.file 15 "Core/Inc/Fusion/FusionOffset.h"
 1344              		.file 16 "Core/Inc/usart.h"
 1345              		.file 17 "/usr/include/newlib/math.h"
 1346              		.file 18 "Core/Inc/printf.h"
 1347              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 1348              		.file 20 "Core/Inc/gpio.h"
 1349              		.file 21 "Core/Inc/i2c.h"
 1350              		.file 22 "<built-in>"
ARM GAS  /tmp/ccP4y1SB.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccP4y1SB.s:19     .text.FusionCalibrationInertial:0000000000000000 $t
     /tmp/ccP4y1SB.s:26     .text.FusionCalibrationInertial:0000000000000000 FusionCalibrationInertial
     /tmp/ccP4y1SB.s:272    .text.Error_Handler:0000000000000000 $t
     /tmp/ccP4y1SB.s:279    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccP4y1SB.s:312    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccP4y1SB.s:319    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccP4y1SB.s:429    .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccP4y1SB.s:433    .text.main:0000000000000000 $t
     /tmp/ccP4y1SB.s:440    .text.main:0000000000000000 main
     /tmp/ccP4y1SB.s:533    .text.main:000000000000005c $d
     /tmp/ccP4y1SB.s:543    .text.main:0000000000000060 $t
     /tmp/ccP4y1SB.s:1055   .text.main:000000000000035c $d
     /tmp/ccP4y1SB.s:1066   .text.main:0000000000000384 $t
     /tmp/ccP4y1SB.s:1230   .text.main:0000000000000470 $d
     /tmp/ccP4y1SB.s:1244   .rodata:0000000000000000 $d
     /tmp/ccP4y1SB.s:1252   .rodata.accelerometerMisalignment.3:0000000000000000 $d
     /tmp/ccP4y1SB.s:1256   .rodata.accelerometerMisalignment.3:0000000000000000 accelerometerMisalignment.3
     /tmp/ccP4y1SB.s:1267   .rodata.accelerometerOffset.5:0000000000000000 $d
     /tmp/ccP4y1SB.s:1271   .rodata.accelerometerOffset.5:0000000000000000 accelerometerOffset.5
     /tmp/ccP4y1SB.s:1276   .rodata.accelerometerSensitivity.4:0000000000000000 $d
     /tmp/ccP4y1SB.s:1280   .rodata.accelerometerSensitivity.4:0000000000000000 accelerometerSensitivity.4
     /tmp/ccP4y1SB.s:1285   .rodata.gyroscopeMisalignment.0:0000000000000000 $d
     /tmp/ccP4y1SB.s:1289   .rodata.gyroscopeMisalignment.0:0000000000000000 gyroscopeMisalignment.0
     /tmp/ccP4y1SB.s:1300   .rodata.gyroscopeOffset.2:0000000000000000 $d
     /tmp/ccP4y1SB.s:1304   .rodata.gyroscopeOffset.2:0000000000000000 gyroscopeOffset.2
     /tmp/ccP4y1SB.s:1309   .rodata.gyroscopeSensitivity.1:0000000000000000 $d
     /tmp/ccP4y1SB.s:1313   .rodata.gyroscopeSensitivity.1:0000000000000000 gyroscopeSensitivity.1
     /tmp/ccP4y1SB.s:1318   .rodata.softIronMatrix.6:0000000000000000 $d
     /tmp/ccP4y1SB.s:1322   .rodata.softIronMatrix.6:0000000000000000 softIronMatrix.6

UNDEFINED SYMBOLS
__aeabi_fsub
__aeabi_fmul
__aeabi_fadd
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_ui2f
__aeabi_fdiv
__aeabi_fcmple
__aeabi_fcmpge
__aeabi_f2d
HAL_Init
MX_GPIO_Init
MX_I2C1_Init
MX_USART3_UART_Init
MPU_9250_Init
FusionOffsetInitialise
FusionAhrsInitialise
FusionAhrsSetSettings
asinf
atan2f
sprintf_
HAL_UART_Transmit
HAL_GetTick
ARM GAS  /tmp/ccP4y1SB.s 			page 47


IMU_measure
huart3
FusionOffsetUpdate
FusionAhrsUpdateNoMagnetometer
FusionAhrsGetQuaternion

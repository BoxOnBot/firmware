ARM GAS  /tmp/cc8mw5hc.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"FusionAhrs.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.FusionAhrsReset,"ax",%progbits
  16              		.align	1
  17              		.global	FusionAhrsReset
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	FusionAhrsReset:
  25              	.LVL0:
  26              	.LFB22:
  27              		.file 1 "Core/Src/Fusion/FusionAhrs.c"
   1:Core/Src/Fusion/FusionAhrs.c **** /**
   2:Core/Src/Fusion/FusionAhrs.c ****  * @file FusionAhrs.c
   3:Core/Src/Fusion/FusionAhrs.c ****  * @author Seb Madgwick
   4:Core/Src/Fusion/FusionAhrs.c ****  * @brief AHRS algorithm to combine gyroscope, accelerometer, and magnetometer
   5:Core/Src/Fusion/FusionAhrs.c ****  * measurements into a single measurement of orientation relative to the Earth.
   6:Core/Src/Fusion/FusionAhrs.c ****  */
   7:Core/Src/Fusion/FusionAhrs.c **** 
   8:Core/Src/Fusion/FusionAhrs.c **** //------------------------------------------------------------------------------
   9:Core/Src/Fusion/FusionAhrs.c **** // Includes
  10:Core/Src/Fusion/FusionAhrs.c **** 
  11:Core/Src/Fusion/FusionAhrs.c **** #include <float.h> // FLT_MAX
  12:Core/Src/Fusion/FusionAhrs.c **** #include "FusionAhrs.h"
  13:Core/Src/Fusion/FusionAhrs.c **** #include "FusionCompass.h"
  14:Core/Src/Fusion/FusionAhrs.c **** #include <math.h> // atan2f, cosf, powf, sinf
  15:Core/Src/Fusion/FusionAhrs.c **** 
  16:Core/Src/Fusion/FusionAhrs.c **** //------------------------------------------------------------------------------
  17:Core/Src/Fusion/FusionAhrs.c **** // Definitions
  18:Core/Src/Fusion/FusionAhrs.c **** 
  19:Core/Src/Fusion/FusionAhrs.c **** /**
  20:Core/Src/Fusion/FusionAhrs.c ****  * @brief Initial gain used during the initialisation.
  21:Core/Src/Fusion/FusionAhrs.c ****  */
  22:Core/Src/Fusion/FusionAhrs.c **** #define INITIAL_GAIN (10.0f)
  23:Core/Src/Fusion/FusionAhrs.c **** 
  24:Core/Src/Fusion/FusionAhrs.c **** /**
  25:Core/Src/Fusion/FusionAhrs.c ****  * @brief Initialisation period in seconds.
  26:Core/Src/Fusion/FusionAhrs.c ****  */
  27:Core/Src/Fusion/FusionAhrs.c **** #define INITIALISATION_PERIOD (3.0f)
  28:Core/Src/Fusion/FusionAhrs.c **** 
  29:Core/Src/Fusion/FusionAhrs.c **** //------------------------------------------------------------------------------
  30:Core/Src/Fusion/FusionAhrs.c **** // Functions
  31:Core/Src/Fusion/FusionAhrs.c **** 
ARM GAS  /tmp/cc8mw5hc.s 			page 2


  32:Core/Src/Fusion/FusionAhrs.c **** /**
  33:Core/Src/Fusion/FusionAhrs.c ****  * @brief Initialises the AHRS algorithm structure.
  34:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  35:Core/Src/Fusion/FusionAhrs.c ****  */
  36:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  37:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsSettings settings = {
  38:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
  39:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejection = 90.0f,
  40:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejection = 90.0f,
  41:Core/Src/Fusion/FusionAhrs.c ****             .rejectionTimeout = 0,
  42:Core/Src/Fusion/FusionAhrs.c ****     };
  43:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsSetSettings(ahrs, &settings);
  44:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsReset(ahrs);
  45:Core/Src/Fusion/FusionAhrs.c **** }
  46:Core/Src/Fusion/FusionAhrs.c **** 
  47:Core/Src/Fusion/FusionAhrs.c **** /**
  48:Core/Src/Fusion/FusionAhrs.c ****  * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
  49:Core/Src/Fusion/FusionAhrs.c ****  * algorithm while maintaining the current settings.
  50:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  51:Core/Src/Fusion/FusionAhrs.c ****  */
  52:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsReset(FusionAhrs *const ahrs) {
  28              		.loc 1 52 46 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  53:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  33              		.loc 1 53 5 view .LVU1
  34              		.loc 1 53 22 is_stmt 0 view .LVU2
  35 0000 4FF07E53 		mov	r3, #1065353216
  36 0004 0361     		str	r3, [r0, #16]	@ float
  37 0006 0023     		movs	r3, #0
  38 0008 4361     		str	r3, [r0, #20]	@ float
  39 000a 8361     		str	r3, [r0, #24]	@ float
  40 000c C361     		str	r3, [r0, #28]	@ float
  54:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometer = FUSION_VECTOR_ZERO;
  41              		.loc 1 54 5 is_stmt 1 view .LVU3
  42              		.loc 1 54 25 is_stmt 0 view .LVU4
  43 000e 0362     		str	r3, [r0, #32]	@ float
  44 0010 4362     		str	r3, [r0, #36]	@ float
  45 0012 8362     		str	r3, [r0, #40]	@ float
  55:Core/Src/Fusion/FusionAhrs.c ****     ahrs->initialising = true;
  46              		.loc 1 55 5 is_stmt 1 view .LVU5
  47              		.loc 1 55 24 is_stmt 0 view .LVU6
  48 0014 0122     		movs	r2, #1
  49 0016 80F82C20 		strb	r2, [r0, #44]
  56:Core/Src/Fusion/FusionAhrs.c ****     ahrs->rampedGain = INITIAL_GAIN;
  50              		.loc 1 56 5 is_stmt 1 view .LVU7
  51              		.loc 1 56 22 is_stmt 0 view .LVU8
  52 001a 0A4A     		ldr	r2, .L2
  53 001c 0263     		str	r2, [r0, #48]	@ float
  57:Core/Src/Fusion/FusionAhrs.c ****     ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  54              		.loc 1 57 5 is_stmt 1 view .LVU9
  55              		.loc 1 57 37 is_stmt 0 view .LVU10
  56 001e 8363     		str	r3, [r0, #56]	@ float
  57 0020 C363     		str	r3, [r0, #60]	@ float
  58 0022 0364     		str	r3, [r0, #64]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 3


  58:Core/Src/Fusion/FusionAhrs.c ****     ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  59              		.loc 1 58 5 is_stmt 1 view .LVU11
  60              		.loc 1 58 36 is_stmt 0 view .LVU12
  61 0024 4364     		str	r3, [r0, #68]	@ float
  62 0026 8364     		str	r3, [r0, #72]	@ float
  63 0028 C364     		str	r3, [r0, #76]	@ float
  59:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = false;
  64              		.loc 1 59 5 is_stmt 1 view .LVU13
  65              		.loc 1 59 32 is_stmt 0 view .LVU14
  66 002a 0023     		movs	r3, #0
  67 002c 80F85030 		strb	r3, [r0, #80]
  60:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerationRejectionTimer = 0;
  68              		.loc 1 60 5 is_stmt 1 view .LVU15
  69              		.loc 1 60 38 is_stmt 0 view .LVU16
  70 0030 4365     		str	r3, [r0, #84]
  61:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerationRejectionTimeout = false;
  71              		.loc 1 61 5 is_stmt 1 view .LVU17
  72              		.loc 1 61 40 is_stmt 0 view .LVU18
  73 0032 80F85830 		strb	r3, [r0, #88]
  62:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = false;
  74              		.loc 1 62 5 is_stmt 1 view .LVU19
  75              		.loc 1 62 31 is_stmt 0 view .LVU20
  76 0036 80F85930 		strb	r3, [r0, #89]
  63:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magneticRejectionTimer = 0;
  77              		.loc 1 63 5 is_stmt 1 view .LVU21
  78              		.loc 1 63 34 is_stmt 0 view .LVU22
  79 003a C365     		str	r3, [r0, #92]
  64:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magneticRejectionTimeout = false;
  80              		.loc 1 64 5 is_stmt 1 view .LVU23
  81              		.loc 1 64 36 is_stmt 0 view .LVU24
  82 003c 80F86030 		strb	r3, [r0, #96]
  65:Core/Src/Fusion/FusionAhrs.c **** }
  83              		.loc 1 65 1 view .LVU25
  84 0040 7047     		bx	lr
  85              	.L3:
  86 0042 00BF     		.align	2
  87              	.L2:
  88 0044 00002041 		.word	1092616192
  89              		.cfi_endproc
  90              	.LFE22:
  92              		.global	__aeabi_fcmpeq
  93              		.global	__aeabi_fmul
  94              		.global	__aeabi_fsub
  95              		.global	__aeabi_fdiv
  96              		.section	.text.FusionAhrsSetSettings,"ax",%progbits
  97              		.align	1
  98              		.global	FusionAhrsSetSettings
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu softvfp
 104              	FusionAhrsSetSettings:
 105              	.LVL1:
 106              	.LFB23:
  66:Core/Src/Fusion/FusionAhrs.c **** 
  67:Core/Src/Fusion/FusionAhrs.c **** /**
  68:Core/Src/Fusion/FusionAhrs.c ****  * @brief Sets the AHRS algorithm settings.
ARM GAS  /tmp/cc8mw5hc.s 			page 4


  69:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  70:Core/Src/Fusion/FusionAhrs.c ****  * @param settings Settings.
  71:Core/Src/Fusion/FusionAhrs.c ****  */
  72:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
 107              		.loc 1 72 94 is_stmt 1 view -0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		.loc 1 72 94 is_stmt 0 view .LVU27
 112 0000 70B5     		push	{r4, r5, r6, lr}
 113              	.LCFI0:
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 4, -16
 116              		.cfi_offset 5, -12
 117              		.cfi_offset 6, -8
 118              		.cfi_offset 14, -4
 119 0002 0446     		mov	r4, r0
 120 0004 0D46     		mov	r5, r1
  73:Core/Src/Fusion/FusionAhrs.c ****     ahrs->settings.gain = settings->gain;
 121              		.loc 1 73 5 is_stmt 1 view .LVU28
 122              		.loc 1 73 35 is_stmt 0 view .LVU29
 123 0006 0B68     		ldr	r3, [r1]	@ float
 124              		.loc 1 73 25 view .LVU30
 125 0008 0360     		str	r3, [r0]	@ float
  74:Core/Src/Fusion/FusionAhrs.c ****     if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 126              		.loc 1 74 5 is_stmt 1 view .LVU31
 127              		.loc 1 74 18 is_stmt 0 view .LVU32
 128 000a 4E68     		ldr	r6, [r1, #4]	@ float
 129              		.loc 1 74 8 view .LVU33
 130 000c 0021     		movs	r1, #0
 131              	.LVL2:
 132              		.loc 1 74 8 view .LVU34
 133 000e 3046     		mov	r0, r6
 134              	.LVL3:
 135              		.loc 1 74 8 view .LVU35
 136 0010 FFF7FEFF 		bl	__aeabi_fcmpeq
 137              	.LVL4:
 138 0014 08B9     		cbnz	r0, .L5
 139              		.loc 1 74 63 discriminator 1 view .LVU36
 140 0016 EB68     		ldr	r3, [r5, #12]
 141              		.loc 1 74 51 discriminator 1 view .LVU37
 142 0018 DBB9     		cbnz	r3, .L6
 143              	.L5:
  75:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.accelerationRejection = FLT_MAX;
 144              		.loc 1 75 9 is_stmt 1 view .LVU38
 145              		.loc 1 75 46 is_stmt 0 view .LVU39
 146 001a 1E4B     		ldr	r3, .L13
 147 001c 6360     		str	r3, [r4, #4]	@ float
 148              	.L7:
  76:Core/Src/Fusion/FusionAhrs.c ****     } else {
  77:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->ac
  78:Core/Src/Fusion/FusionAhrs.c ****     }
  79:Core/Src/Fusion/FusionAhrs.c ****     if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
 149              		.loc 1 79 5 is_stmt 1 view .LVU40
 150              		.loc 1 79 18 is_stmt 0 view .LVU41
 151 001e AE68     		ldr	r6, [r5, #8]	@ float
 152              		.loc 1 79 8 view .LVU42
ARM GAS  /tmp/cc8mw5hc.s 			page 5


 153 0020 0021     		movs	r1, #0
 154 0022 3046     		mov	r0, r6
 155 0024 FFF7FEFF 		bl	__aeabi_fcmpeq
 156              	.LVL5:
 157 0028 08B9     		cbnz	r0, .L8
 158              		.loc 1 79 59 discriminator 1 view .LVU43
 159 002a EB68     		ldr	r3, [r5, #12]
 160              		.loc 1 79 47 discriminator 1 view .LVU44
 161 002c 0BBB     		cbnz	r3, .L9
 162              	.L8:
  80:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.magneticRejection = FLT_MAX;
 163              		.loc 1 80 9 is_stmt 1 view .LVU45
 164              		.loc 1 80 42 is_stmt 0 view .LVU46
 165 002e 194B     		ldr	r3, .L13
 166 0030 A360     		str	r3, [r4, #8]	@ float
 167              	.L10:
  81:Core/Src/Fusion/FusionAhrs.c ****     } else {
  82:Core/Src/Fusion/FusionAhrs.c ****         ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magnet
  83:Core/Src/Fusion/FusionAhrs.c ****     }
  84:Core/Src/Fusion/FusionAhrs.c ****     ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
 168              		.loc 1 84 5 is_stmt 1 view .LVU47
 169              		.loc 1 84 47 is_stmt 0 view .LVU48
 170 0032 EB68     		ldr	r3, [r5, #12]
 171              		.loc 1 84 37 view .LVU49
 172 0034 E360     		str	r3, [r4, #12]
  85:Core/Src/Fusion/FusionAhrs.c ****     if (ahrs->initialising == false) {
 173              		.loc 1 85 5 is_stmt 1 view .LVU50
 174              		.loc 1 85 13 is_stmt 0 view .LVU51
 175 0036 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 176              		.loc 1 85 8 view .LVU52
 177 003a 0BB9     		cbnz	r3, .L11
  86:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain = ahrs->settings.gain;
 178              		.loc 1 86 9 is_stmt 1 view .LVU53
 179              		.loc 1 86 42 is_stmt 0 view .LVU54
 180 003c 2368     		ldr	r3, [r4]	@ float
 181              		.loc 1 86 26 view .LVU55
 182 003e 2363     		str	r3, [r4, #48]	@ float
 183              	.L11:
  87:Core/Src/Fusion/FusionAhrs.c ****     }
  88:Core/Src/Fusion/FusionAhrs.c ****     ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
 184              		.loc 1 88 5 is_stmt 1 view .LVU56
 185              		.loc 1 88 42 is_stmt 0 view .LVU57
 186 0040 2168     		ldr	r1, [r4]	@ float
 187 0042 1548     		ldr	r0, .L13+4
 188 0044 FFF7FEFF 		bl	__aeabi_fsub
 189              	.LVL6:
 190              		.loc 1 88 65 view .LVU58
 191 0048 1449     		ldr	r1, .L13+8
 192 004a FFF7FEFF 		bl	__aeabi_fdiv
 193              	.LVL7:
 194              		.loc 1 88 26 view .LVU59
 195 004e 6063     		str	r0, [r4, #52]	@ float
  89:Core/Src/Fusion/FusionAhrs.c **** }
 196              		.loc 1 89 1 view .LVU60
 197 0050 70BD     		pop	{r4, r5, r6, pc}
 198              	.LVL8:
 199              	.L6:
ARM GAS  /tmp/cc8mw5hc.s 			page 6


  77:Core/Src/Fusion/FusionAhrs.c ****     }
 200              		.loc 1 77 9 is_stmt 1 view .LVU61
 201              	.LBB46:
 202              	.LBI46:
 203              		.file 2 "Core/Inc/Fusion/FusionMath.h"
   1:Core/Inc/Fusion/FusionMath.h **** /**
   2:Core/Inc/Fusion/FusionMath.h ****  * @file FusionMath.h
   3:Core/Inc/Fusion/FusionMath.h ****  * @author Seb Madgwick
   4:Core/Inc/Fusion/FusionMath.h ****  * @brief Math library.
   5:Core/Inc/Fusion/FusionMath.h ****  */
   6:Core/Inc/Fusion/FusionMath.h **** 
   7:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_MATH_H
   8:Core/Inc/Fusion/FusionMath.h **** #define FUSION_MATH_H
   9:Core/Inc/Fusion/FusionMath.h **** 
  10:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  11:Core/Inc/Fusion/FusionMath.h **** // Includes
  12:Core/Inc/Fusion/FusionMath.h **** 
  13:Core/Inc/Fusion/FusionMath.h **** #include <math.h> // M_PI, sqrtf, atan2f, asinf
  14:Core/Inc/Fusion/FusionMath.h **** #include <stdbool.h>
  15:Core/Inc/Fusion/FusionMath.h **** #include <stdint.h>
  16:Core/Inc/Fusion/FusionMath.h **** 
  17:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
  18:Core/Inc/Fusion/FusionMath.h **** // Definitions
  19:Core/Inc/Fusion/FusionMath.h **** 
  20:Core/Inc/Fusion/FusionMath.h **** /**
  21:Core/Inc/Fusion/FusionMath.h ****  * @brief 3D vector.
  22:Core/Inc/Fusion/FusionMath.h ****  */
  23:Core/Inc/Fusion/FusionMath.h **** typedef union {
  24:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  25:Core/Inc/Fusion/FusionMath.h **** 
  26:Core/Inc/Fusion/FusionMath.h ****     struct {
  27:Core/Inc/Fusion/FusionMath.h ****         float x;
  28:Core/Inc/Fusion/FusionMath.h ****         float y;
  29:Core/Inc/Fusion/FusionMath.h ****         float z;
  30:Core/Inc/Fusion/FusionMath.h ****     } axis;
  31:Core/Inc/Fusion/FusionMath.h **** } FusionVector;
  32:Core/Inc/Fusion/FusionMath.h **** 
  33:Core/Inc/Fusion/FusionMath.h **** /**
  34:Core/Inc/Fusion/FusionMath.h ****  * @brief Quaternion.
  35:Core/Inc/Fusion/FusionMath.h ****  */
  36:Core/Inc/Fusion/FusionMath.h **** typedef union {
  37:Core/Inc/Fusion/FusionMath.h ****     float array[4];
  38:Core/Inc/Fusion/FusionMath.h **** 
  39:Core/Inc/Fusion/FusionMath.h ****     struct {
  40:Core/Inc/Fusion/FusionMath.h ****         float w;
  41:Core/Inc/Fusion/FusionMath.h ****         float x;
  42:Core/Inc/Fusion/FusionMath.h ****         float y;
  43:Core/Inc/Fusion/FusionMath.h ****         float z;
  44:Core/Inc/Fusion/FusionMath.h ****     } element;
  45:Core/Inc/Fusion/FusionMath.h **** } FusionQuaternion;
  46:Core/Inc/Fusion/FusionMath.h **** 
  47:Core/Inc/Fusion/FusionMath.h **** /**
  48:Core/Inc/Fusion/FusionMath.h ****  * @brief 3x3 matrix in row-major order.
  49:Core/Inc/Fusion/FusionMath.h ****  * See http://en.wikipedia.org/wiki/Row-major_order
  50:Core/Inc/Fusion/FusionMath.h ****  */
  51:Core/Inc/Fusion/FusionMath.h **** typedef union {
  52:Core/Inc/Fusion/FusionMath.h ****     float array[3][3];
ARM GAS  /tmp/cc8mw5hc.s 			page 7


  53:Core/Inc/Fusion/FusionMath.h **** 
  54:Core/Inc/Fusion/FusionMath.h ****     struct {
  55:Core/Inc/Fusion/FusionMath.h ****         float xx;
  56:Core/Inc/Fusion/FusionMath.h ****         float xy;
  57:Core/Inc/Fusion/FusionMath.h ****         float xz;
  58:Core/Inc/Fusion/FusionMath.h ****         float yx;
  59:Core/Inc/Fusion/FusionMath.h ****         float yy;
  60:Core/Inc/Fusion/FusionMath.h ****         float yz;
  61:Core/Inc/Fusion/FusionMath.h ****         float zx;
  62:Core/Inc/Fusion/FusionMath.h ****         float zy;
  63:Core/Inc/Fusion/FusionMath.h ****         float zz;
  64:Core/Inc/Fusion/FusionMath.h ****     } element;
  65:Core/Inc/Fusion/FusionMath.h **** } FusionMatrix;
  66:Core/Inc/Fusion/FusionMath.h **** 
  67:Core/Inc/Fusion/FusionMath.h **** /**
  68:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles.  Roll, pitch, and yaw correspond to rotations around
  69:Core/Inc/Fusion/FusionMath.h ****  * X, Y, and Z respectively.
  70:Core/Inc/Fusion/FusionMath.h ****  */
  71:Core/Inc/Fusion/FusionMath.h **** typedef union {
  72:Core/Inc/Fusion/FusionMath.h ****     float array[3];
  73:Core/Inc/Fusion/FusionMath.h **** 
  74:Core/Inc/Fusion/FusionMath.h ****     struct {
  75:Core/Inc/Fusion/FusionMath.h ****         float roll;
  76:Core/Inc/Fusion/FusionMath.h ****         float pitch;
  77:Core/Inc/Fusion/FusionMath.h ****         float yaw;
  78:Core/Inc/Fusion/FusionMath.h ****     } angle;
  79:Core/Inc/Fusion/FusionMath.h **** } FusionEuler;
  80:Core/Inc/Fusion/FusionMath.h **** 
  81:Core/Inc/Fusion/FusionMath.h **** /**
  82:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of zeros.
  83:Core/Inc/Fusion/FusionMath.h ****  */
  84:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ZERO ((FusionVector){ .array = {0.0f, 0.0f, 0.0f} })
  85:Core/Inc/Fusion/FusionMath.h **** 
  86:Core/Inc/Fusion/FusionMath.h **** /**
  87:Core/Inc/Fusion/FusionMath.h ****  * @brief Vector of ones.
  88:Core/Inc/Fusion/FusionMath.h ****  */
  89:Core/Inc/Fusion/FusionMath.h **** #define FUSION_VECTOR_ONES ((FusionVector){ .array = {1.0f, 1.0f, 1.0f} })
  90:Core/Inc/Fusion/FusionMath.h **** 
  91:Core/Inc/Fusion/FusionMath.h **** /**
  92:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity quaternion.
  93:Core/Inc/Fusion/FusionMath.h ****  */
  94:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_QUATERNION ((FusionQuaternion){ .array = {1.0f, 0.0f, 0.0f, 0.0f} })
  95:Core/Inc/Fusion/FusionMath.h **** 
  96:Core/Inc/Fusion/FusionMath.h **** /**
  97:Core/Inc/Fusion/FusionMath.h ****  * @brief Identity matrix.
  98:Core/Inc/Fusion/FusionMath.h ****  */
  99:Core/Inc/Fusion/FusionMath.h **** #define FUSION_IDENTITY_MATRIX ((FusionMatrix){ .array = {{1.0f, 0.0f, 0.0f}, {0.0f, 1.0f, 0.0f}, {
 100:Core/Inc/Fusion/FusionMath.h **** 
 101:Core/Inc/Fusion/FusionMath.h **** /**
 102:Core/Inc/Fusion/FusionMath.h ****  * @brief Euler angles of zero.
 103:Core/Inc/Fusion/FusionMath.h ****  */
 104:Core/Inc/Fusion/FusionMath.h **** #define FUSION_EULER_ZERO ((FusionEuler){ .array = {0.0f, 0.0f, 0.0f} })
 105:Core/Inc/Fusion/FusionMath.h **** 
 106:Core/Inc/Fusion/FusionMath.h **** /**
 107:Core/Inc/Fusion/FusionMath.h ****  * @brief Pi. May not be defined in math.h.
 108:Core/Inc/Fusion/FusionMath.h ****  */
 109:Core/Inc/Fusion/FusionMath.h **** #ifndef M_PI
ARM GAS  /tmp/cc8mw5hc.s 			page 8


 110:Core/Inc/Fusion/FusionMath.h **** #define M_PI (3.14159265358979323846)
 111:Core/Inc/Fusion/FusionMath.h **** #endif
 112:Core/Inc/Fusion/FusionMath.h **** 
 113:Core/Inc/Fusion/FusionMath.h **** /**
 114:Core/Inc/Fusion/FusionMath.h ****  * @brief Include this definition or add as a preprocessor definition to use
 115:Core/Inc/Fusion/FusionMath.h ****  * normal square root operations.
 116:Core/Inc/Fusion/FusionMath.h ****  */
 117:Core/Inc/Fusion/FusionMath.h **** //#define FUSION_USE_NORMAL_SQRT
 118:Core/Inc/Fusion/FusionMath.h **** 
 119:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 120:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Degrees and radians conversion
 121:Core/Inc/Fusion/FusionMath.h **** 
 122:Core/Inc/Fusion/FusionMath.h **** /**
 123:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts degrees to radians.
 124:Core/Inc/Fusion/FusionMath.h ****  * @param degrees Degrees.
 125:Core/Inc/Fusion/FusionMath.h ****  * @return Radians.
 126:Core/Inc/Fusion/FusionMath.h ****  */
 127:Core/Inc/Fusion/FusionMath.h **** static inline float FusionDegreesToRadians(const float degrees) {
 204              		.loc 2 127 21 view .LVU62
 205              	.LBB47:
 128:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 206              		.loc 2 128 5 view .LVU63
 207              		.loc 2 128 20 is_stmt 0 view .LVU64
 208 0052 1349     		ldr	r1, .L13+12
 209 0054 3046     		mov	r0, r6
 210 0056 FFF7FEFF 		bl	__aeabi_fmul
 211              	.LVL9:
 212              		.loc 2 128 20 view .LVU65
 213              	.LBE47:
 214              	.LBE46:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 215              		.loc 1 77 60 view .LVU66
 216 005a FFF7FEFF 		bl	sinf
 217              	.LVL10:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 218              		.loc 1 77 48 view .LVU67
 219 005e 4FF07C51 		mov	r1, #1056964608
 220 0062 FFF7FEFF 		bl	__aeabi_fmul
 221              	.LVL11:
 222 0066 4FF08041 		mov	r1, #1073741824
 223 006a FFF7FEFF 		bl	powf
 224              	.LVL12:
  77:Core/Src/Fusion/FusionAhrs.c ****     }
 225              		.loc 1 77 46 view .LVU68
 226 006e 6060     		str	r0, [r4, #4]	@ float
 227 0070 D5E7     		b	.L7
 228              	.L9:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 229              		.loc 1 82 9 is_stmt 1 view .LVU69
 230              	.LVL13:
 231              	.LBB48:
 232              	.LBI48:
 127:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 233              		.loc 2 127 21 view .LVU70
 234              	.LBB49:
 235              		.loc 2 128 5 view .LVU71
 236              		.loc 2 128 20 is_stmt 0 view .LVU72
ARM GAS  /tmp/cc8mw5hc.s 			page 9


 237 0072 0B49     		ldr	r1, .L13+12
 238 0074 3046     		mov	r0, r6
 239 0076 FFF7FEFF 		bl	__aeabi_fmul
 240              	.LVL14:
 241              		.loc 2 128 20 view .LVU73
 242              	.LBE49:
 243              	.LBE48:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 244              		.loc 1 82 56 view .LVU74
 245 007a FFF7FEFF 		bl	sinf
 246              	.LVL15:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 247              		.loc 1 82 44 view .LVU75
 248 007e 4FF07C51 		mov	r1, #1056964608
 249 0082 FFF7FEFF 		bl	__aeabi_fmul
 250              	.LVL16:
 251 0086 4FF08041 		mov	r1, #1073741824
 252 008a FFF7FEFF 		bl	powf
 253              	.LVL17:
  82:Core/Src/Fusion/FusionAhrs.c ****     }
 254              		.loc 1 82 42 view .LVU76
 255 008e A060     		str	r0, [r4, #8]	@ float
 256 0090 CFE7     		b	.L10
 257              	.L14:
 258 0092 00BF     		.align	2
 259              	.L13:
 260 0094 FFFF7F7F 		.word	2139095039
 261 0098 00002041 		.word	1092616192
 262 009c 00004040 		.word	1077936128
 263 00a0 35FA8E3C 		.word	1016003125
 264              		.cfi_endproc
 265              	.LFE23:
 267              		.section	.text.FusionAhrsInitialise,"ax",%progbits
 268              		.align	1
 269              		.global	FusionAhrsInitialise
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu softvfp
 275              	FusionAhrsInitialise:
 276              	.LVL18:
 277              	.LFB21:
  36:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsSettings settings = {
 278              		.loc 1 36 51 is_stmt 1 view -0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 16
 281              		@ frame_needed = 0, uses_anonymous_args = 0
  36:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsSettings settings = {
 282              		.loc 1 36 51 is_stmt 0 view .LVU78
 283 0000 10B5     		push	{r4, lr}
 284              	.LCFI1:
 285              		.cfi_def_cfa_offset 8
 286              		.cfi_offset 4, -8
 287              		.cfi_offset 14, -4
 288 0002 84B0     		sub	sp, sp, #16
 289              	.LCFI2:
 290              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc8mw5hc.s 			page 10


 291 0004 0446     		mov	r4, r0
  37:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
 292              		.loc 1 37 5 is_stmt 1 view .LVU79
  37:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
 293              		.loc 1 37 30 is_stmt 0 view .LVU80
 294 0006 074B     		ldr	r3, .L17
 295 0008 EC46     		mov	ip, sp
 296 000a 0FCB     		ldm	r3, {r0, r1, r2, r3}
 297              	.LVL19:
  37:Core/Src/Fusion/FusionAhrs.c ****             .gain = 0.5f,
 298              		.loc 1 37 30 view .LVU81
 299 000c 8CE80F00 		stm	ip, {r0, r1, r2, r3}
  43:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsReset(ahrs);
 300              		.loc 1 43 5 is_stmt 1 view .LVU82
 301 0010 6146     		mov	r1, ip
 302 0012 2046     		mov	r0, r4
 303 0014 FFF7FEFF 		bl	FusionAhrsSetSettings
 304              	.LVL20:
  44:Core/Src/Fusion/FusionAhrs.c **** }
 305              		.loc 1 44 5 view .LVU83
 306 0018 2046     		mov	r0, r4
 307 001a FFF7FEFF 		bl	FusionAhrsReset
 308              	.LVL21:
  45:Core/Src/Fusion/FusionAhrs.c **** 
 309              		.loc 1 45 1 is_stmt 0 view .LVU84
 310 001e 04B0     		add	sp, sp, #16
 311              	.LCFI3:
 312              		.cfi_def_cfa_offset 8
 313              		@ sp needed
 314 0020 10BD     		pop	{r4, pc}
 315              	.LVL22:
 316              	.L18:
  45:Core/Src/Fusion/FusionAhrs.c **** 
 317              		.loc 1 45 1 view .LVU85
 318 0022 00BF     		.align	2
 319              	.L17:
 320 0024 00000000 		.word	.LANCHOR0
 321              		.cfi_endproc
 322              	.LFE21:
 324              		.section	.text.FusionAhrsGetQuaternion,"ax",%progbits
 325              		.align	1
 326              		.global	FusionAhrsGetQuaternion
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu softvfp
 332              	FusionAhrsGetQuaternion:
 333              	.LVL23:
 334              	.LFB27:
  90:Core/Src/Fusion/FusionAhrs.c **** 
  91:Core/Src/Fusion/FusionAhrs.c **** /**
  92:Core/Src/Fusion/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope, accelerometer, and
  93:Core/Src/Fusion/FusionAhrs.c ****  * magnetometer measurements.
  94:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
  95:Core/Src/Fusion/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
  96:Core/Src/Fusion/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
  97:Core/Src/Fusion/FusionAhrs.c ****  * @param magnetometer Magnetometer measurement in arbitrary units.
ARM GAS  /tmp/cc8mw5hc.s 			page 11


  98:Core/Src/Fusion/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
  99:Core/Src/Fusion/FusionAhrs.c ****  */
 100:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector acce
 101:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 102:Core/Src/Fusion/FusionAhrs.c **** 
 103:Core/Src/Fusion/FusionAhrs.c ****     // Store accelerometer
 104:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometer = accelerometer;
 105:Core/Src/Fusion/FusionAhrs.c **** 
 106:Core/Src/Fusion/FusionAhrs.c ****     // Ramp down gain during initialisation
 107:Core/Src/Fusion/FusionAhrs.c ****     if (ahrs->initialising == true) {
 108:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 109:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 110:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 111:Core/Src/Fusion/FusionAhrs.c ****             ahrs->initialising = false;
 112:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = false;
 113:Core/Src/Fusion/FusionAhrs.c ****         }
 114:Core/Src/Fusion/FusionAhrs.c ****     }
 115:Core/Src/Fusion/FusionAhrs.c **** 
 116:Core/Src/Fusion/FusionAhrs.c ****     // Calculate direction of gravity indicated by algorithm
 117:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector halfGravity = {
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 120:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 121:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 122:Core/Src/Fusion/FusionAhrs.c **** 
 123:Core/Src/Fusion/FusionAhrs.c ****     // Calculate accelerometer feedback
 124:Core/Src/Fusion/FusionAhrs.c ****     FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
 125:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 126:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 127:Core/Src/Fusion/FusionAhrs.c **** 
 128:Core/Src/Fusion/FusionAhrs.c ****         // Enter acceleration recovery state if acceleration rejection times out
 129:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
 130:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 131:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsReset(ahrs);
 132:Core/Src/Fusion/FusionAhrs.c ****             ahrs->quaternion = quaternion;
 133:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer = 0;
 134:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = true;
 135:Core/Src/Fusion/FusionAhrs.c ****         }
 136:Core/Src/Fusion/FusionAhrs.c **** 
 137:Core/Src/Fusion/FusionAhrs.c ****         // Calculate accelerometer feedback scaled by 0.5
 138:Core/Src/Fusion/FusionAhrs.c ****         ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerome
 139:Core/Src/Fusion/FusionAhrs.c **** 
 140:Core/Src/Fusion/FusionAhrs.c ****         // Ignore accelerometer if acceleration distortion detected
 141:Core/Src/Fusion/FusionAhrs.c ****         if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFe
 142:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 143:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 144:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 145:Core/Src/Fusion/FusionAhrs.c ****         } else {
 146:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer++;
 147:Core/Src/Fusion/FusionAhrs.c ****         }
 148:Core/Src/Fusion/FusionAhrs.c ****     }
 149:Core/Src/Fusion/FusionAhrs.c **** 
 150:Core/Src/Fusion/FusionAhrs.c ****     // Calculate magnetometer feedback
 151:Core/Src/Fusion/FusionAhrs.c ****     FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
 152:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 153:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 154:Core/Src/Fusion/FusionAhrs.c **** 
ARM GAS  /tmp/cc8mw5hc.s 			page 12


 155:Core/Src/Fusion/FusionAhrs.c ****         // Set to compass heading if magnetic rejection times out
 156:Core/Src/Fusion/FusionAhrs.c ****         ahrs->magneticRejectionTimeout = false;
 157:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 158:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 159:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer = 0;
 160:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimeout = true;
 161:Core/Src/Fusion/FusionAhrs.c ****         }
 162:Core/Src/Fusion/FusionAhrs.c **** 
 163:Core/Src/Fusion/FusionAhrs.c ****         // Compute direction of west indicated by algorithm
 164:Core/Src/Fusion/FusionAhrs.c ****         const FusionVector halfWest = {
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 167:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 168:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 169:Core/Src/Fusion/FusionAhrs.c **** 
 170:Core/Src/Fusion/FusionAhrs.c ****         // Calculate magnetometer feedback scaled by 0.5
 171:Core/Src/Fusion/FusionAhrs.c ****         ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVecto
 172:Core/Src/Fusion/FusionAhrs.c **** 
 173:Core/Src/Fusion/FusionAhrs.c ****         // Ignore magnetometer if magnetic distortion detected
 174:Core/Src/Fusion/FusionAhrs.c ****         if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFee
 175:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 176:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 177:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 178:Core/Src/Fusion/FusionAhrs.c ****         } else {
 179:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer++;
 180:Core/Src/Fusion/FusionAhrs.c ****         }
 181:Core/Src/Fusion/FusionAhrs.c ****     }
 182:Core/Src/Fusion/FusionAhrs.c **** 
 183:Core/Src/Fusion/FusionAhrs.c ****     // Convert gyroscope to radians per second scaled by 0.5
 184:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector halfGyroscope = FusionVectorMultiplyScalar(gyroscope, FusionDegreesToRadians
 185:Core/Src/Fusion/FusionAhrs.c **** 
 186:Core/Src/Fusion/FusionAhrs.c ****     // Apply feedback to gyroscope
 187:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyS
 188:Core/Src/Fusion/FusionAhrs.c **** 
 189:Core/Src/Fusion/FusionAhrs.c ****     // Integrate rate of change of quaternion
 190:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionAdd(ahrs->quaternion, FusionQuaternionMultiplyVector(ahrs->q
 191:Core/Src/Fusion/FusionAhrs.c **** 
 192:Core/Src/Fusion/FusionAhrs.c ****     // Normalise quaternion
 193:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
 194:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 195:Core/Src/Fusion/FusionAhrs.c **** }
 196:Core/Src/Fusion/FusionAhrs.c **** 
 197:Core/Src/Fusion/FusionAhrs.c **** /**
 198:Core/Src/Fusion/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope and accelerometer
 199:Core/Src/Fusion/FusionAhrs.c ****  * measurements only.
 200:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 201:Core/Src/Fusion/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 202:Core/Src/Fusion/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 203:Core/Src/Fusion/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 204:Core/Src/Fusion/FusionAhrs.c ****  */
 205:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const Fus
 206:Core/Src/Fusion/FusionAhrs.c **** 
 207:Core/Src/Fusion/FusionAhrs.c ****     // Update AHRS algorithm
 208:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
 209:Core/Src/Fusion/FusionAhrs.c **** 
 210:Core/Src/Fusion/FusionAhrs.c ****     // Zero heading during initialisation
 211:Core/Src/Fusion/FusionAhrs.c ****     if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
ARM GAS  /tmp/cc8mw5hc.s 			page 13


 212:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 213:Core/Src/Fusion/FusionAhrs.c ****     }
 214:Core/Src/Fusion/FusionAhrs.c **** }
 215:Core/Src/Fusion/FusionAhrs.c **** 
 216:Core/Src/Fusion/FusionAhrs.c **** /**
 217:Core/Src/Fusion/FusionAhrs.c ****  * @brief Updates the AHRS algorithm using the gyroscope, accelerometer, and
 218:Core/Src/Fusion/FusionAhrs.c ****  * heading measurements.
 219:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 220:Core/Src/Fusion/FusionAhrs.c ****  * @param gyroscope Gyroscope measurement in degrees per second.
 221:Core/Src/Fusion/FusionAhrs.c ****  * @param accelerometer Accelerometer measurement in g.
 222:Core/Src/Fusion/FusionAhrs.c ****  * @param heading Heading measurement in degrees.
 223:Core/Src/Fusion/FusionAhrs.c ****  * @param deltaTime Delta time in seconds.
 224:Core/Src/Fusion/FusionAhrs.c ****  */
 225:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsUpdateExternalHeading(FusionAhrs *const ahrs, const FusionVector gyroscope, const Fu
 226:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 227:Core/Src/Fusion/FusionAhrs.c **** 
 228:Core/Src/Fusion/FusionAhrs.c ****     // Calculate roll
 229:Core/Src/Fusion/FusionAhrs.c ****     const float roll = atan2f(Q.w * Q.x + Q.y * Q.z, 0.5f - Q.y * Q.y - Q.x * Q.x);
 230:Core/Src/Fusion/FusionAhrs.c **** 
 231:Core/Src/Fusion/FusionAhrs.c ****     // Calculate magnetometer
 232:Core/Src/Fusion/FusionAhrs.c ****     const float headingRadians = FusionDegreesToRadians(heading);
 233:Core/Src/Fusion/FusionAhrs.c ****     const float sinHeadingRadians = sinf(headingRadians);
 234:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 235:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = -1.0f * cosf(roll) * sinHeadingRadians,
 237:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 238:Core/Src/Fusion/FusionAhrs.c ****     };
 239:Core/Src/Fusion/FusionAhrs.c **** 
 240:Core/Src/Fusion/FusionAhrs.c ****     // Update AHRS algorithm
 241:Core/Src/Fusion/FusionAhrs.c ****     FusionAhrsUpdate(ahrs, gyroscope, accelerometer, magnetometer, deltaTime);
 242:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 243:Core/Src/Fusion/FusionAhrs.c **** }
 244:Core/Src/Fusion/FusionAhrs.c **** 
 245:Core/Src/Fusion/FusionAhrs.c **** /**
 246:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the quaternion describing the sensor relative to the Earth.
 247:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 248:Core/Src/Fusion/FusionAhrs.c ****  * @return Quaternion describing the sensor relative to the Earth.
 249:Core/Src/Fusion/FusionAhrs.c ****  */
 250:Core/Src/Fusion/FusionAhrs.c **** FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
 335              		.loc 1 250 72 is_stmt 1 view -0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              		.loc 1 250 72 is_stmt 0 view .LVU87
 341 0000 8446     		mov	ip, r0
 251:Core/Src/Fusion/FusionAhrs.c ****     return ahrs->quaternion;
 342              		.loc 1 251 5 is_stmt 1 view .LVU88
 343              		.loc 1 251 16 is_stmt 0 view .LVU89
 344 0002 1031     		adds	r1, r1, #16
 345              	.LVL24:
 346              		.loc 1 251 16 view .LVU90
 347 0004 0FC9     		ldm	r1, {r0, r1, r2, r3}
 348              	.LVL25:
 349              		.loc 1 251 16 view .LVU91
 350 0006 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 252:Core/Src/Fusion/FusionAhrs.c **** }
ARM GAS  /tmp/cc8mw5hc.s 			page 14


 351              		.loc 1 252 1 view .LVU92
 352 000a 6046     		mov	r0, ip
 353 000c 7047     		bx	lr
 354              		.cfi_endproc
 355              	.LFE27:
 357              		.global	__aeabi_fadd
 358              		.section	.text.FusionAhrsGetLinearAcceleration,"ax",%progbits
 359              		.align	1
 360              		.global	FusionAhrsGetLinearAcceleration
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu softvfp
 366              	FusionAhrsGetLinearAcceleration:
 367              	.LVL26:
 368              	.LFB28:
 253:Core/Src/Fusion/FusionAhrs.c **** 
 254:Core/Src/Fusion/FusionAhrs.c **** /**
 255:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the linear acceleration measurement equal to the accelerometer
 256:Core/Src/Fusion/FusionAhrs.c ****  * measurement with the 1 g of gravity removed.
 257:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 258:Core/Src/Fusion/FusionAhrs.c ****  * @return Linear acceleration measurement in g.
 259:Core/Src/Fusion/FusionAhrs.c ****  */
 260:Core/Src/Fusion/FusionAhrs.c **** FusionVector FusionAhrsGetLinearAcceleration(const FusionAhrs *const ahrs) {
 369              		.loc 1 260 76 is_stmt 1 view -0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 48
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		.loc 1 260 76 is_stmt 0 view .LVU94
 374 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 375              	.LCFI4:
 376              		.cfi_def_cfa_offset 36
 377              		.cfi_offset 4, -36
 378              		.cfi_offset 5, -32
 379              		.cfi_offset 6, -28
 380              		.cfi_offset 7, -24
 381              		.cfi_offset 8, -20
 382              		.cfi_offset 9, -16
 383              		.cfi_offset 10, -12
 384              		.cfi_offset 11, -8
 385              		.cfi_offset 14, -4
 386 0004 8DB0     		sub	sp, sp, #52
 387              	.LCFI5:
 388              		.cfi_def_cfa_offset 88
 389 0006 0546     		mov	r5, r0
 390 0008 0C46     		mov	r4, r1
 261:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 262:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector gravity = {
 391              		.loc 1 262 5 is_stmt 1 view .LVU95
 263:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 392              		.loc 1 263 32 is_stmt 0 view .LVU96
 393 000a D1F814A0 		ldr	r10, [r1, #20]	@ float
 394              		.loc 1 263 38 view .LVU97
 395 000e CE69     		ldr	r6, [r1, #28]	@ float
 396              		.loc 1 263 35 view .LVU98
 397 0010 3146     		mov	r1, r6
 398              	.LVL27:
ARM GAS  /tmp/cc8mw5hc.s 			page 15


 399              		.loc 1 263 35 view .LVU99
 400 0012 5046     		mov	r0, r10
 401              	.LVL28:
 402              		.loc 1 263 35 view .LVU100
 403 0014 FFF7FEFF 		bl	__aeabi_fmul
 404              	.LVL29:
 405 0018 0746     		mov	r7, r0
 406              		.loc 1 263 44 view .LVU101
 407 001a D4F81090 		ldr	r9, [r4, #16]	@ float
 408              		.loc 1 263 50 view .LVU102
 409 001e D4F818B0 		ldr	fp, [r4, #24]	@ float
 410              		.loc 1 263 47 view .LVU103
 411 0022 5946     		mov	r1, fp
 412 0024 4846     		mov	r0, r9
 413 0026 FFF7FEFF 		bl	__aeabi_fmul
 414              	.LVL30:
 415 002a 0146     		mov	r1, r0
 416              		.loc 1 263 41 view .LVU104
 417 002c 3846     		mov	r0, r7
 418 002e FFF7FEFF 		bl	__aeabi_fsub
 419              	.LVL31:
 420 0032 0146     		mov	r1, r0
 421              		.loc 1 263 28 view .LVU105
 422 0034 FFF7FEFF 		bl	__aeabi_fadd
 423              	.LVL32:
 424 0038 8046     		mov	r8, r0
 262:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 425              		.loc 1 262 24 view .LVU106
 426 003a 0990     		str	r0, [sp, #36]	@ float
 264:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = 2.0f * (Q.y * Q.z + Q.w * Q.x),
 427              		.loc 1 264 35 view .LVU107
 428 003c 5946     		mov	r1, fp
 429 003e 3046     		mov	r0, r6
 430 0040 FFF7FEFF 		bl	__aeabi_fmul
 431              	.LVL33:
 432 0044 0746     		mov	r7, r0
 433              		.loc 1 264 47 view .LVU108
 434 0046 4946     		mov	r1, r9
 435 0048 5046     		mov	r0, r10
 436 004a FFF7FEFF 		bl	__aeabi_fmul
 437              	.LVL34:
 438 004e 0146     		mov	r1, r0
 439              		.loc 1 264 41 view .LVU109
 440 0050 3846     		mov	r0, r7
 441 0052 FFF7FEFF 		bl	__aeabi_fadd
 442              	.LVL35:
 443 0056 0146     		mov	r1, r0
 444              		.loc 1 264 28 view .LVU110
 445 0058 FFF7FEFF 		bl	__aeabi_fadd
 446              	.LVL36:
 447 005c 0746     		mov	r7, r0
 262:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 448              		.loc 1 262 24 view .LVU111
 449 005e 0A90     		str	r0, [sp, #40]	@ float
 265:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = 2.0f * (Q.w * Q.w - 0.5f + Q.z * Q.z),
 450              		.loc 1 265 35 view .LVU112
 451 0060 4946     		mov	r1, r9
ARM GAS  /tmp/cc8mw5hc.s 			page 16


 452 0062 4846     		mov	r0, r9
 453 0064 FFF7FEFF 		bl	__aeabi_fmul
 454              	.LVL37:
 455              		.loc 1 265 41 view .LVU113
 456 0068 4FF07C51 		mov	r1, #1056964608
 457 006c FFF7FEFF 		bl	__aeabi_fsub
 458              	.LVL38:
 459 0070 8146     		mov	r9, r0
 460              		.loc 1 265 54 view .LVU114
 461 0072 3146     		mov	r1, r6
 462 0074 3046     		mov	r0, r6
 463 0076 FFF7FEFF 		bl	__aeabi_fmul
 464              	.LVL39:
 465 007a 0146     		mov	r1, r0
 466              		.loc 1 265 48 view .LVU115
 467 007c 4846     		mov	r0, r9
 468 007e FFF7FEFF 		bl	__aeabi_fadd
 469              	.LVL40:
 470 0082 0146     		mov	r1, r0
 471              		.loc 1 265 28 view .LVU116
 472 0084 FFF7FEFF 		bl	__aeabi_fadd
 473              	.LVL41:
 474 0088 0646     		mov	r6, r0
 262:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * (Q.x * Q.z - Q.w * Q.y),
 475              		.loc 1 262 24 view .LVU117
 476 008a 0B90     		str	r0, [sp, #44]	@ float
 266:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix
 267:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector linearAcceleration = FusionVectorSubtract(ahrs->accelerometer, gravity);
 477              		.loc 1 267 5 is_stmt 1 view .LVU118
 478 008c 6B46     		mov	r3, sp
 479 008e 2034     		adds	r4, r4, #32
 480              	.LVL42:
 481              		.loc 1 267 5 is_stmt 0 view .LVU119
 482 0090 94E80700 		ldm	r4, {r0, r1, r2}
 483 0094 83E80700 		stm	r3, {r0, r1, r2}
 484 0098 03AB     		add	r3, sp, #12
 485 009a 0CAA     		add	r2, sp, #48
 486 009c 12E90700 		ldmdb	r2, {r0, r1, r2}
 487 00a0 83E80700 		stm	r3, {r0, r1, r2}
 488              	.LBB50:
 489              	.LBI50:
 129:Core/Inc/Fusion/FusionMath.h **** }
 130:Core/Inc/Fusion/FusionMath.h **** 
 131:Core/Inc/Fusion/FusionMath.h **** /**
 132:Core/Inc/Fusion/FusionMath.h ****  * @brief Converts radians to degrees.
 133:Core/Inc/Fusion/FusionMath.h ****  * @param radians Radians.
 134:Core/Inc/Fusion/FusionMath.h ****  * @return Degrees.
 135:Core/Inc/Fusion/FusionMath.h ****  */
 136:Core/Inc/Fusion/FusionMath.h **** static inline float FusionRadiansToDegrees(const float radians) {
 137:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 138:Core/Inc/Fusion/FusionMath.h **** }
 139:Core/Inc/Fusion/FusionMath.h **** 
 140:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 141:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Arc sine
 142:Core/Inc/Fusion/FusionMath.h **** 
 143:Core/Inc/Fusion/FusionMath.h **** /**
 144:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the arc sine of the value.
ARM GAS  /tmp/cc8mw5hc.s 			page 17


 145:Core/Inc/Fusion/FusionMath.h ****  * @param value Value.
 146:Core/Inc/Fusion/FusionMath.h ****  * @return Arc sine of the value.
 147:Core/Inc/Fusion/FusionMath.h ****  */
 148:Core/Inc/Fusion/FusionMath.h **** static inline float FusionAsin(const float value) {
 149:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 150:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 151:Core/Inc/Fusion/FusionMath.h ****     }
 152:Core/Inc/Fusion/FusionMath.h ****     if (value >= 1.0f) {
 153:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 154:Core/Inc/Fusion/FusionMath.h ****     }
 155:Core/Inc/Fusion/FusionMath.h ****     return asinf(value);
 156:Core/Inc/Fusion/FusionMath.h **** }
 157:Core/Inc/Fusion/FusionMath.h **** 
 158:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 159:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Fast inverse square root
 160:Core/Inc/Fusion/FusionMath.h **** 
 161:Core/Inc/Fusion/FusionMath.h **** #ifndef FUSION_USE_NORMAL_SQRT
 162:Core/Inc/Fusion/FusionMath.h **** 
 163:Core/Inc/Fusion/FusionMath.h **** /**
 164:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the reciprocal of the square root.
 165:Core/Inc/Fusion/FusionMath.h ****  * See https://pizer.wordpress.com/2008/10/12/fast-inverse-square-root/
 166:Core/Inc/Fusion/FusionMath.h ****  * @param x Operand.
 167:Core/Inc/Fusion/FusionMath.h ****  * @return Reciprocal of the square root of x.
 168:Core/Inc/Fusion/FusionMath.h ****  */
 169:Core/Inc/Fusion/FusionMath.h **** static inline float FusionFastInverseSqrt(const float x) {
 170:Core/Inc/Fusion/FusionMath.h **** 
 171:Core/Inc/Fusion/FusionMath.h ****     typedef union {
 172:Core/Inc/Fusion/FusionMath.h ****         float f;
 173:Core/Inc/Fusion/FusionMath.h ****         int32_t i;
 174:Core/Inc/Fusion/FusionMath.h ****     } Union32;
 175:Core/Inc/Fusion/FusionMath.h **** 
 176:Core/Inc/Fusion/FusionMath.h ****     Union32 union32 = {.f = x};
 177:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 178:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 179:Core/Inc/Fusion/FusionMath.h **** }
 180:Core/Inc/Fusion/FusionMath.h **** 
 181:Core/Inc/Fusion/FusionMath.h **** #endif
 182:Core/Inc/Fusion/FusionMath.h **** 
 183:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 184:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Vector operations
 185:Core/Inc/Fusion/FusionMath.h **** 
 186:Core/Inc/Fusion/FusionMath.h **** /**
 187:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns true if the vector is zero.
 188:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 189:Core/Inc/Fusion/FusionMath.h ****  * @return True if the vector is zero.
 190:Core/Inc/Fusion/FusionMath.h ****  */
 191:Core/Inc/Fusion/FusionMath.h **** static inline bool FusionVectorIsZero(const FusionVector vector) {
 192:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 193:Core/Inc/Fusion/FusionMath.h **** }
 194:Core/Inc/Fusion/FusionMath.h **** 
 195:Core/Inc/Fusion/FusionMath.h **** /**
 196:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two vectors.
 197:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 198:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 199:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two vectors.
 200:Core/Inc/Fusion/FusionMath.h ****  */
 201:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorAdd(const FusionVector vectorA, const FusionVector vectorB) 
ARM GAS  /tmp/cc8mw5hc.s 			page 18


 202:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 205:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 206:Core/Inc/Fusion/FusionMath.h ****     return result;
 207:Core/Inc/Fusion/FusionMath.h **** }
 208:Core/Inc/Fusion/FusionMath.h **** 
 209:Core/Inc/Fusion/FusionMath.h **** /**
 210:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns vector B subtracted from vector A.
 211:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 212:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 213:Core/Inc/Fusion/FusionMath.h ****  * @return Vector B subtracted from vector A.
 214:Core/Inc/Fusion/FusionMath.h ****  */
 215:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorSubtract(const FusionVector vectorA, const FusionVector vect
 490              		.loc 2 215 28 is_stmt 1 view .LVU120
 491              	.LBB51:
 216:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 492              		.loc 2 216 5 view .LVU121
 217:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x - vectorB.axis.x;
 493              		.loc 2 217 5 view .LVU122
 494              		.loc 2 217 36 is_stmt 0 view .LVU123
 495 00a4 4146     		mov	r1, r8
 496 00a6 0098     		ldr	r0, [sp]	@ float
 497 00a8 FFF7FEFF 		bl	__aeabi_fsub
 498              	.LVL43:
 499              		.loc 2 217 19 view .LVU124
 500 00ac 0690     		str	r0, [sp, #24]	@ float
 218:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y - vectorB.axis.y;
 501              		.loc 2 218 5 is_stmt 1 view .LVU125
 502              		.loc 2 218 36 is_stmt 0 view .LVU126
 503 00ae 3946     		mov	r1, r7
 504 00b0 0198     		ldr	r0, [sp, #4]	@ float
 505 00b2 FFF7FEFF 		bl	__aeabi_fsub
 506              	.LVL44:
 507              		.loc 2 218 19 view .LVU127
 508 00b6 0790     		str	r0, [sp, #28]	@ float
 219:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z - vectorB.axis.z;
 509              		.loc 2 219 5 is_stmt 1 view .LVU128
 510              		.loc 2 219 36 is_stmt 0 view .LVU129
 511 00b8 3146     		mov	r1, r6
 512 00ba 0298     		ldr	r0, [sp, #8]	@ float
 513 00bc FFF7FEFF 		bl	__aeabi_fsub
 514              	.LVL45:
 515              		.loc 2 219 19 view .LVU130
 516 00c0 0890     		str	r0, [sp, #32]	@ float
 220:Core/Inc/Fusion/FusionMath.h ****     return result;
 517              		.loc 2 220 5 is_stmt 1 view .LVU131
 518              		.loc 2 220 12 is_stmt 0 view .LVU132
 519 00c2 06AB     		add	r3, sp, #24
 520 00c4 93E80700 		ldm	r3, {r0, r1, r2}
 521 00c8 85E80700 		stm	r5, {r0, r1, r2}
 522              	.LBE51:
 523              	.LBE50:
 268:Core/Src/Fusion/FusionAhrs.c ****     return linearAcceleration;
 524              		.loc 1 268 5 is_stmt 1 view .LVU133
 269:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 270:Core/Src/Fusion/FusionAhrs.c **** }
ARM GAS  /tmp/cc8mw5hc.s 			page 19


 525              		.loc 1 270 1 is_stmt 0 view .LVU134
 526 00cc 2846     		mov	r0, r5
 527 00ce 0DB0     		add	sp, sp, #52
 528              	.LCFI6:
 529              		.cfi_def_cfa_offset 36
 530              		@ sp needed
 531 00d0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 532              		.loc 1 270 1 view .LVU135
 533              		.cfi_endproc
 534              	.LFE28:
 536              		.section	.text.FusionAhrsGetEarthAcceleration,"ax",%progbits
 537              		.align	1
 538              		.global	FusionAhrsGetEarthAcceleration
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 542              		.fpu softvfp
 544              	FusionAhrsGetEarthAcceleration:
 545              	.LVL46:
 546              	.LFB29:
 271:Core/Src/Fusion/FusionAhrs.c **** 
 272:Core/Src/Fusion/FusionAhrs.c **** /**
 273:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the Earth acceleration measurement equal to accelerometer
 274:Core/Src/Fusion/FusionAhrs.c ****  * measurement in the Earth coordinate frame with the 1 g of gravity removed.
 275:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 276:Core/Src/Fusion/FusionAhrs.c ****  * @return Earth acceleration measurement in g.
 277:Core/Src/Fusion/FusionAhrs.c ****  */
 278:Core/Src/Fusion/FusionAhrs.c **** FusionVector FusionAhrsGetEarthAcceleration(const FusionAhrs *const ahrs) {
 547              		.loc 1 278 75 is_stmt 1 view -0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 24
 550              		@ frame_needed = 0, uses_anonymous_args = 0
 551              		.loc 1 278 75 is_stmt 0 view .LVU137
 552 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 553              	.LCFI7:
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564 0004 87B0     		sub	sp, sp, #28
 565              	.LCFI8:
 566              		.cfi_def_cfa_offset 64
 567 0006 0546     		mov	r5, r0
 568 0008 0C46     		mov	r4, r1
 279:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 280:Core/Src/Fusion/FusionAhrs.c **** #define A ahrs->accelerometer.axis
 281:Core/Src/Fusion/FusionAhrs.c ****     const float qwqw = Q.w * Q.w; // calculate common terms to avoid repeated operations
 569              		.loc 1 281 5 is_stmt 1 view .LVU138
 570              		.loc 1 281 25 is_stmt 0 view .LVU139
 571 000a D1F810A0 		ldr	r10, [r1, #16]	@ float
 572              		.loc 1 281 17 view .LVU140
ARM GAS  /tmp/cc8mw5hc.s 			page 20


 573 000e 5146     		mov	r1, r10
 574              	.LVL47:
 575              		.loc 1 281 17 view .LVU141
 576 0010 5046     		mov	r0, r10
 577              	.LVL48:
 578              		.loc 1 281 17 view .LVU142
 579 0012 FFF7FEFF 		bl	__aeabi_fmul
 580              	.LVL49:
 581 0016 0646     		mov	r6, r0
 582              	.LVL50:
 282:Core/Src/Fusion/FusionAhrs.c ****     const float qwqx = Q.w * Q.x;
 583              		.loc 1 282 5 is_stmt 1 view .LVU143
 584              		.loc 1 282 31 is_stmt 0 view .LVU144
 585 0018 D4F81490 		ldr	r9, [r4, #20]	@ float
 586              		.loc 1 282 17 view .LVU145
 587 001c 4946     		mov	r1, r9
 588 001e 5046     		mov	r0, r10
 589              	.LVL51:
 590              		.loc 1 282 17 view .LVU146
 591 0020 FFF7FEFF 		bl	__aeabi_fmul
 592              	.LVL52:
 593 0024 0090     		str	r0, [sp]	@ float
 594              	.LVL53:
 283:Core/Src/Fusion/FusionAhrs.c ****     const float qwqy = Q.w * Q.y;
 595              		.loc 1 283 5 is_stmt 1 view .LVU147
 596              		.loc 1 283 31 is_stmt 0 view .LVU148
 597 0026 D4F81880 		ldr	r8, [r4, #24]	@ float
 598              		.loc 1 283 17 view .LVU149
 599 002a 4146     		mov	r1, r8
 600 002c 5046     		mov	r0, r10
 601              	.LVL54:
 602              		.loc 1 283 17 view .LVU150
 603 002e FFF7FEFF 		bl	__aeabi_fmul
 604              	.LVL55:
 605 0032 0190     		str	r0, [sp, #4]	@ float
 606              	.LVL56:
 284:Core/Src/Fusion/FusionAhrs.c ****     const float qwqz = Q.w * Q.z;
 607              		.loc 1 284 5 is_stmt 1 view .LVU151
 608              		.loc 1 284 31 is_stmt 0 view .LVU152
 609 0034 E769     		ldr	r7, [r4, #28]	@ float
 610              		.loc 1 284 17 view .LVU153
 611 0036 3946     		mov	r1, r7
 612 0038 5046     		mov	r0, r10
 613              	.LVL57:
 614              		.loc 1 284 17 view .LVU154
 615 003a FFF7FEFF 		bl	__aeabi_fmul
 616              	.LVL58:
 617 003e 0290     		str	r0, [sp, #8]	@ float
 618              	.LVL59:
 285:Core/Src/Fusion/FusionAhrs.c ****     const float qxqy = Q.x * Q.y;
 619              		.loc 1 285 5 is_stmt 1 view .LVU155
 620              		.loc 1 285 17 is_stmt 0 view .LVU156
 621 0040 4146     		mov	r1, r8
 622 0042 4846     		mov	r0, r9
 623              	.LVL60:
 624              		.loc 1 285 17 view .LVU157
 625 0044 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/cc8mw5hc.s 			page 21


 626              	.LVL61:
 627 0048 0390     		str	r0, [sp, #12]	@ float
 628              	.LVL62:
 286:Core/Src/Fusion/FusionAhrs.c ****     const float qxqz = Q.x * Q.z;
 629              		.loc 1 286 5 is_stmt 1 view .LVU158
 630              		.loc 1 286 17 is_stmt 0 view .LVU159
 631 004a 3946     		mov	r1, r7
 632 004c 4846     		mov	r0, r9
 633              	.LVL63:
 634              		.loc 1 286 17 view .LVU160
 635 004e FFF7FEFF 		bl	__aeabi_fmul
 636              	.LVL64:
 637 0052 0490     		str	r0, [sp, #16]	@ float
 638              	.LVL65:
 287:Core/Src/Fusion/FusionAhrs.c ****     const float qyqz = Q.y * Q.z;
 639              		.loc 1 287 5 is_stmt 1 view .LVU161
 640              		.loc 1 287 17 is_stmt 0 view .LVU162
 641 0054 3946     		mov	r1, r7
 642 0056 4046     		mov	r0, r8
 643              	.LVL66:
 644              		.loc 1 287 17 view .LVU163
 645 0058 FFF7FEFF 		bl	__aeabi_fmul
 646              	.LVL67:
 647 005c 0590     		str	r0, [sp, #20]	@ float
 648              	.LVL68:
 288:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector earthAcceleration = {
 649              		.loc 1 288 5 is_stmt 1 view .LVU164
 289:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy)
 650              		.loc 1 289 37 is_stmt 0 view .LVU165
 651 005e 4FF07C51 		mov	r1, #1056964608
 652 0062 3046     		mov	r0, r6
 653              	.LVL69:
 654              		.loc 1 289 37 view .LVU166
 655 0064 FFF7FEFF 		bl	__aeabi_fsub
 656              	.LVL70:
 657 0068 0646     		mov	r6, r0
 658              	.LVL71:
 659              		.loc 1 289 50 view .LVU167
 660 006a 4946     		mov	r1, r9
 661 006c 4846     		mov	r0, r9
 662 006e FFF7FEFF 		bl	__aeabi_fmul
 663              	.LVL72:
 664 0072 0146     		mov	r1, r0
 665              		.loc 1 289 44 view .LVU168
 666 0074 3046     		mov	r0, r6
 667 0076 FFF7FEFF 		bl	__aeabi_fadd
 668              	.LVL73:
 669              		.loc 1 289 60 view .LVU169
 670 007a D4F820A0 		ldr	r10, [r4, #32]	@ float
 671              		.loc 1 289 57 view .LVU170
 672 007e 5146     		mov	r1, r10
 673 0080 FFF7FEFF 		bl	__aeabi_fmul
 674              	.LVL74:
 675 0084 8346     		mov	fp, r0
 676              		.loc 1 289 71 view .LVU171
 677 0086 0299     		ldr	r1, [sp, #8]	@ float
 678 0088 0398     		ldr	r0, [sp, #12]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 22


 679 008a FFF7FEFF 		bl	__aeabi_fsub
 680              	.LVL75:
 681              		.loc 1 289 82 view .LVU172
 682 008e D4F82490 		ldr	r9, [r4, #36]	@ float
 683              		.loc 1 289 79 view .LVU173
 684 0092 4946     		mov	r1, r9
 685 0094 FFF7FEFF 		bl	__aeabi_fmul
 686              	.LVL76:
 687 0098 0146     		mov	r1, r0
 688              		.loc 1 289 63 view .LVU174
 689 009a 5846     		mov	r0, fp
 690 009c FFF7FEFF 		bl	__aeabi_fadd
 691              	.LVL77:
 692 00a0 8346     		mov	fp, r0
 693              		.loc 1 289 93 view .LVU175
 694 00a2 0499     		ldr	r1, [sp, #16]	@ float
 695 00a4 0198     		ldr	r0, [sp, #4]	@ float
 696 00a6 FFF7FEFF 		bl	__aeabi_fadd
 697              	.LVL78:
 698              		.loc 1 289 104 view .LVU176
 699 00aa A46A     		ldr	r4, [r4, #40]	@ float
 700              	.LVL79:
 701              		.loc 1 289 101 view .LVU177
 702 00ac 2146     		mov	r1, r4
 703 00ae FFF7FEFF 		bl	__aeabi_fmul
 704              	.LVL80:
 705 00b2 0146     		mov	r1, r0
 706              		.loc 1 289 85 view .LVU178
 707 00b4 5846     		mov	r0, fp
 708 00b6 FFF7FEFF 		bl	__aeabi_fadd
 709              	.LVL81:
 710 00ba 0146     		mov	r1, r0
 711              		.loc 1 289 28 view .LVU179
 712 00bc FFF7FEFF 		bl	__aeabi_fadd
 713              	.LVL82:
 288:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector earthAcceleration = {
 714              		.loc 1 288 24 view .LVU180
 715 00c0 2860     		str	r0, [r5]	@ float
 290:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = 2.0f * ((qxqy + qwqz) * A.x + (qwqw - 0.5f + Q.y * Q.y) * A.y + (qyqz - qwqx)
 716              		.loc 1 290 37 view .LVU181
 717 00c2 0399     		ldr	r1, [sp, #12]	@ float
 718 00c4 0298     		ldr	r0, [sp, #8]	@ float
 719 00c6 FFF7FEFF 		bl	__aeabi_fadd
 720              	.LVL83:
 721 00ca 0146     		mov	r1, r0
 722              		.loc 1 290 45 view .LVU182
 723 00cc 5046     		mov	r0, r10
 724 00ce FFF7FEFF 		bl	__aeabi_fmul
 725              	.LVL84:
 726 00d2 8346     		mov	fp, r0
 727              		.loc 1 290 72 view .LVU183
 728 00d4 4146     		mov	r1, r8
 729 00d6 4046     		mov	r0, r8
 730 00d8 FFF7FEFF 		bl	__aeabi_fmul
 731              	.LVL85:
 732 00dc 0146     		mov	r1, r0
 733              		.loc 1 290 66 view .LVU184
ARM GAS  /tmp/cc8mw5hc.s 			page 23


 734 00de 3046     		mov	r0, r6
 735 00e0 FFF7FEFF 		bl	__aeabi_fadd
 736              	.LVL86:
 737 00e4 0146     		mov	r1, r0
 738              		.loc 1 290 79 view .LVU185
 739 00e6 4846     		mov	r0, r9
 740 00e8 FFF7FEFF 		bl	__aeabi_fmul
 741              	.LVL87:
 742 00ec 0146     		mov	r1, r0
 743              		.loc 1 290 51 view .LVU186
 744 00ee 5846     		mov	r0, fp
 745 00f0 FFF7FEFF 		bl	__aeabi_fadd
 746              	.LVL88:
 747 00f4 8046     		mov	r8, r0
 748              		.loc 1 290 93 view .LVU187
 749 00f6 0099     		ldr	r1, [sp]	@ float
 750 00f8 DDF814B0 		ldr	fp, [sp, #20]	@ float
 751 00fc 5846     		mov	r0, fp
 752 00fe FFF7FEFF 		bl	__aeabi_fsub
 753              	.LVL89:
 754 0102 0146     		mov	r1, r0
 755              		.loc 1 290 101 view .LVU188
 756 0104 2046     		mov	r0, r4
 757 0106 FFF7FEFF 		bl	__aeabi_fmul
 758              	.LVL90:
 759 010a 0146     		mov	r1, r0
 760              		.loc 1 290 85 view .LVU189
 761 010c 4046     		mov	r0, r8
 762 010e FFF7FEFF 		bl	__aeabi_fadd
 763              	.LVL91:
 764 0112 0146     		mov	r1, r0
 765              		.loc 1 290 28 view .LVU190
 766 0114 FFF7FEFF 		bl	__aeabi_fadd
 767              	.LVL92:
 288:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector earthAcceleration = {
 768              		.loc 1 288 24 view .LVU191
 769 0118 6860     		str	r0, [r5, #4]	@ float
 291:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = (2.0f * ((qxqz - qwqy) * A.x + (qyqz + qwqx) * A.y + (qwqw - 0.5f + Q.z * Q.z
 770              		.loc 1 291 38 view .LVU192
 771 011a 0199     		ldr	r1, [sp, #4]	@ float
 772 011c 0498     		ldr	r0, [sp, #16]	@ float
 773 011e FFF7FEFF 		bl	__aeabi_fsub
 774              	.LVL93:
 775 0122 0146     		mov	r1, r0
 776              		.loc 1 291 46 view .LVU193
 777 0124 5046     		mov	r0, r10
 778 0126 FFF7FEFF 		bl	__aeabi_fmul
 779              	.LVL94:
 780 012a 8046     		mov	r8, r0
 781              		.loc 1 291 60 view .LVU194
 782 012c 5946     		mov	r1, fp
 783 012e 0098     		ldr	r0, [sp]	@ float
 784 0130 FFF7FEFF 		bl	__aeabi_fadd
 785              	.LVL95:
 786 0134 0146     		mov	r1, r0
 787              		.loc 1 291 68 view .LVU195
 788 0136 4846     		mov	r0, r9
ARM GAS  /tmp/cc8mw5hc.s 			page 24


 789 0138 FFF7FEFF 		bl	__aeabi_fmul
 790              	.LVL96:
 791 013c 0146     		mov	r1, r0
 792              		.loc 1 291 52 view .LVU196
 793 013e 4046     		mov	r0, r8
 794 0140 FFF7FEFF 		bl	__aeabi_fadd
 795              	.LVL97:
 796 0144 8046     		mov	r8, r0
 797              		.loc 1 291 95 view .LVU197
 798 0146 3946     		mov	r1, r7
 799 0148 3846     		mov	r0, r7
 800 014a FFF7FEFF 		bl	__aeabi_fmul
 801              	.LVL98:
 802 014e 0146     		mov	r1, r0
 803              		.loc 1 291 89 view .LVU198
 804 0150 3046     		mov	r0, r6
 805 0152 FFF7FEFF 		bl	__aeabi_fadd
 806              	.LVL99:
 807 0156 0146     		mov	r1, r0
 808              		.loc 1 291 102 view .LVU199
 809 0158 2046     		mov	r0, r4
 810 015a FFF7FEFF 		bl	__aeabi_fmul
 811              	.LVL100:
 812 015e 0146     		mov	r1, r0
 813              		.loc 1 291 74 view .LVU200
 814 0160 4046     		mov	r0, r8
 815 0162 FFF7FEFF 		bl	__aeabi_fadd
 816              	.LVL101:
 817 0166 0146     		mov	r1, r0
 818              		.loc 1 291 29 view .LVU201
 819 0168 FFF7FEFF 		bl	__aeabi_fadd
 820              	.LVL102:
 821              		.loc 1 291 110 view .LVU202
 822 016c 4FF07E51 		mov	r1, #1065353216
 823 0170 FFF7FEFF 		bl	__aeabi_fsub
 824              	.LVL103:
 288:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = 2.0f * ((qwqw - 0.5f + Q.x * Q.x) * A.x + (qxqy - qwqz) * A.y + (qxqz + qwqy)
 825              		.loc 1 288 24 view .LVU203
 826 0174 A860     		str	r0, [r5, #8]	@ float
 292:Core/Src/Fusion/FusionAhrs.c ****     }; // rotation matrix multiplied with the accelerometer, with 1 g subtracted
 293:Core/Src/Fusion/FusionAhrs.c ****     return earthAcceleration;
 827              		.loc 1 293 5 is_stmt 1 view .LVU204
 294:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 295:Core/Src/Fusion/FusionAhrs.c **** #undef A
 296:Core/Src/Fusion/FusionAhrs.c **** }
 828              		.loc 1 296 1 is_stmt 0 view .LVU205
 829 0176 2846     		mov	r0, r5
 830 0178 07B0     		add	sp, sp, #28
 831              	.LCFI9:
 832              		.cfi_def_cfa_offset 36
 833              	.LVL104:
 834              		.loc 1 296 1 view .LVU206
 835              		@ sp needed
 836 017a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 837              		.loc 1 296 1 view .LVU207
 838              		.cfi_endproc
 839              	.LFE29:
ARM GAS  /tmp/cc8mw5hc.s 			page 25


 841              		.global	__aeabi_fcmple
 842              		.global	__aeabi_fcmpge
 843              		.global	__aeabi_ui2f
 844              		.section	.text.FusionAhrsGetInternalStates,"ax",%progbits
 845              		.align	1
 846              		.global	FusionAhrsGetInternalStates
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu softvfp
 852              	FusionAhrsGetInternalStates:
 853              	.LVL105:
 854              	.LFB30:
 297:Core/Src/Fusion/FusionAhrs.c **** 
 298:Core/Src/Fusion/FusionAhrs.c **** /**
 299:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the AHRS algorithm internal states.
 300:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 301:Core/Src/Fusion/FusionAhrs.c ****  * @return AHRS algorithm internal states.
 302:Core/Src/Fusion/FusionAhrs.c ****  */
 303:Core/Src/Fusion/FusionAhrs.c **** FusionAhrsInternalStates FusionAhrsGetInternalStates(const FusionAhrs *const ahrs) {
 855              		.loc 1 303 84 is_stmt 1 view -0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 88
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		.loc 1 303 84 is_stmt 0 view .LVU209
 860 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 861              	.LCFI10:
 862              		.cfi_def_cfa_offset 24
 863              		.cfi_offset 4, -24
 864              		.cfi_offset 5, -20
 865              		.cfi_offset 6, -16
 866              		.cfi_offset 7, -12
 867              		.cfi_offset 8, -8
 868              		.cfi_offset 14, -4
 869 0004 96B0     		sub	sp, sp, #88
 870              	.LCFI11:
 871              		.cfi_def_cfa_offset 112
 872 0006 0446     		mov	r4, r0
 873 0008 0D46     		mov	r5, r1
 304:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsInternalStates internalStates = {
 874              		.loc 1 304 5 is_stmt 1 view .LVU210
 875 000a 0DF1040C 		add	ip, sp, #4
 876 000e 01F13803 		add	r3, r1, #56
 877 0012 93E80700 		ldm	r3, {r0, r1, r2}
 878              	.LVL106:
 879              		.loc 1 304 5 is_stmt 0 view .LVU211
 880 0016 8CE80700 		stm	ip, {r0, r1, r2}
 881              	.LBB76:
 882              	.LBI76:
 221:Core/Inc/Fusion/FusionMath.h **** }
 222:Core/Inc/Fusion/FusionMath.h **** 
 223:Core/Inc/Fusion/FusionMath.h **** /**
 224:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of the elements.
 225:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 226:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of the elements.
 227:Core/Inc/Fusion/FusionMath.h ****  */
 228:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorSum(const FusionVector vector) {
ARM GAS  /tmp/cc8mw5hc.s 			page 26


 229:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 230:Core/Inc/Fusion/FusionMath.h **** }
 231:Core/Inc/Fusion/FusionMath.h **** 
 232:Core/Inc/Fusion/FusionMath.h **** /**
 233:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a vector by a scalar.
 234:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 235:Core/Inc/Fusion/FusionMath.h ****  * @param scalar Scalar.
 236:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a vector by a scalar.
 237:Core/Inc/Fusion/FusionMath.h ****  */
 238:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorMultiplyScalar(const FusionVector vector, const float scalar
 239:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 242:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 243:Core/Inc/Fusion/FusionMath.h ****     return result;
 244:Core/Inc/Fusion/FusionMath.h **** }
 245:Core/Inc/Fusion/FusionMath.h **** 
 246:Core/Inc/Fusion/FusionMath.h **** /**
 247:Core/Inc/Fusion/FusionMath.h ****  * @brief Calculates the Hadamard product (element-wise multiplication).
 248:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 249:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 250:Core/Inc/Fusion/FusionMath.h ****  * @return Hadamard product.
 251:Core/Inc/Fusion/FusionMath.h ****  */
 252:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorHadamardProduct(const FusionVector vectorA, const FusionVect
 253:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 256:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 257:Core/Inc/Fusion/FusionMath.h ****     return result;
 258:Core/Inc/Fusion/FusionMath.h **** }
 259:Core/Inc/Fusion/FusionMath.h **** 
 260:Core/Inc/Fusion/FusionMath.h **** /**
 261:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the cross product.
 262:Core/Inc/Fusion/FusionMath.h ****  * @param vectorA Vector A.
 263:Core/Inc/Fusion/FusionMath.h ****  * @param vectorB Vector B.
 264:Core/Inc/Fusion/FusionMath.h ****  * @return Cross product.
 265:Core/Inc/Fusion/FusionMath.h ****  */
 266:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorCrossProduct(const FusionVector vectorA, const FusionVector 
 267:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 268:Core/Inc/Fusion/FusionMath.h **** #define B vectorB.axis
 269:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 272:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 273:Core/Inc/Fusion/FusionMath.h ****     return result;
 274:Core/Inc/Fusion/FusionMath.h **** #undef A
 275:Core/Inc/Fusion/FusionMath.h **** #undef B
 276:Core/Inc/Fusion/FusionMath.h **** }
 277:Core/Inc/Fusion/FusionMath.h **** 
 278:Core/Inc/Fusion/FusionMath.h **** /**
 279:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude squared.
 280:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 281:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude squared.
 282:Core/Inc/Fusion/FusionMath.h ****  */
 283:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitudeSquared(const FusionVector vector) {
 284:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 285:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/cc8mw5hc.s 			page 27


 286:Core/Inc/Fusion/FusionMath.h **** 
 287:Core/Inc/Fusion/FusionMath.h **** /**
 288:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the vector magnitude.
 289:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 290:Core/Inc/Fusion/FusionMath.h ****  * @return Vector magnitude.
 291:Core/Inc/Fusion/FusionMath.h ****  */
 292:Core/Inc/Fusion/FusionMath.h **** static inline float FusionVectorMagnitude(const FusionVector vector) {
 883              		.loc 2 292 21 is_stmt 1 view .LVU212
 884              	.LBB77:
 293:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 885              		.loc 2 293 5 view .LVU213
 886 001a 04AB     		add	r3, sp, #16
 887 001c 83E80700 		stm	r3, {r0, r1, r2}
 888              	.LBB78:
 889              	.LBI78:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 890              		.loc 2 283 21 view .LVU214
 891              	.LBB79:
 284:Core/Inc/Fusion/FusionMath.h **** }
 892              		.loc 2 284 5 view .LVU215
 893 0020 0AAE     		add	r6, sp, #40
 894 0022 86E80700 		stm	r6, {r0, r1, r2}
 895 0026 07AE     		add	r6, sp, #28
 896 0028 86E80700 		stm	r6, {r0, r1, r2}
 897              	.LBB80:
 898              	.LBI80:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 899              		.loc 2 252 28 view .LVU216
 900              	.LBB81:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 901              		.loc 2 253 5 view .LVU217
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 902              		.loc 2 254 5 view .LVU218
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 903              		.loc 2 254 36 is_stmt 0 view .LVU219
 904 002c 0799     		ldr	r1, [sp, #28]	@ float
 905 002e 0A98     		ldr	r0, [sp, #40]	@ float
 906 0030 FFF7FEFF 		bl	__aeabi_fmul
 907              	.LVL107:
 908 0034 0746     		mov	r7, r0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 909              		.loc 2 254 19 view .LVU220
 910 0036 0D90     		str	r0, [sp, #52]	@ float
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 911              		.loc 2 255 5 is_stmt 1 view .LVU221
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 912              		.loc 2 255 36 is_stmt 0 view .LVU222
 913 0038 0899     		ldr	r1, [sp, #32]	@ float
 914 003a 0B98     		ldr	r0, [sp, #44]	@ float
 915 003c FFF7FEFF 		bl	__aeabi_fmul
 916              	.LVL108:
 917 0040 8046     		mov	r8, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 918              		.loc 2 255 19 view .LVU223
 919 0042 0E90     		str	r0, [sp, #56]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 920              		.loc 2 256 5 is_stmt 1 view .LVU224
ARM GAS  /tmp/cc8mw5hc.s 			page 28


 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 921              		.loc 2 256 36 is_stmt 0 view .LVU225
 922 0044 0999     		ldr	r1, [sp, #36]	@ float
 923 0046 0C98     		ldr	r0, [sp, #48]	@ float
 924 0048 FFF7FEFF 		bl	__aeabi_fmul
 925              	.LVL109:
 926 004c 0646     		mov	r6, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 927              		.loc 2 256 19 view .LVU226
 928 004e 0F90     		str	r0, [sp, #60]	@ float
 257:Core/Inc/Fusion/FusionMath.h **** }
 929              		.loc 2 257 5 is_stmt 1 view .LVU227
 257:Core/Inc/Fusion/FusionMath.h **** }
 930              		.loc 2 257 12 is_stmt 0 view .LVU228
 931 0050 0DF1400C 		add	ip, sp, #64
 932 0054 0DAB     		add	r3, sp, #52
 933 0056 93E80700 		ldm	r3, {r0, r1, r2}
 934 005a 8CE80700 		stm	ip, {r0, r1, r2}
 935              	.LBE81:
 936              	.LBE80:
 937              	.LBB82:
 938              	.LBI82:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 939              		.loc 2 228 21 is_stmt 1 view .LVU229
 940              	.LBB83:
 229:Core/Inc/Fusion/FusionMath.h **** }
 941              		.loc 2 229 5 view .LVU230
 229:Core/Inc/Fusion/FusionMath.h **** }
 942              		.loc 2 229 26 is_stmt 0 view .LVU231
 943 005e 4146     		mov	r1, r8
 944 0060 3846     		mov	r0, r7
 945 0062 FFF7FEFF 		bl	__aeabi_fadd
 946              	.LVL110:
 947 0066 0146     		mov	r1, r0
 229:Core/Inc/Fusion/FusionMath.h **** }
 948              		.loc 2 229 42 view .LVU232
 949 0068 3046     		mov	r0, r6
 950 006a FFF7FEFF 		bl	__aeabi_fadd
 951              	.LVL111:
 952              	.LBE83:
 953              	.LBE82:
 954              	.LBE79:
 955              	.LBE78:
 956              		.loc 2 293 12 view .LVU233
 957 006e FFF7FEFF 		bl	sqrtf
 958              	.LVL112:
 959 0072 0146     		mov	r1, r0
 960              	.LBE77:
 961              	.LBE76:
 305:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 962              		.loc 1 305 34 view .LVU234
 963 0074 FFF7FEFF 		bl	__aeabi_fadd
 964              	.LVL113:
 965 0078 0646     		mov	r6, r0
 966              	.LVL114:
 967              	.LBB84:
 968              	.LBI84:
ARM GAS  /tmp/cc8mw5hc.s 			page 29


 148:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 969              		.loc 2 148 21 is_stmt 1 view .LVU235
 970              	.LBB85:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 971              		.loc 2 149 5 view .LVU236
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 972              		.loc 2 149 8 is_stmt 0 view .LVU237
 973 007a 4749     		ldr	r1, .L38
 974 007c FFF7FEFF 		bl	__aeabi_fcmple
 975              	.LVL115:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 976              		.loc 2 149 8 view .LVU238
 977 0080 0028     		cmp	r0, #0
 978 0082 7DD1     		bne	.L29
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 979              		.loc 2 152 5 is_stmt 1 view .LVU239
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 980              		.loc 2 152 8 is_stmt 0 view .LVU240
 981 0084 4FF07E51 		mov	r1, #1065353216
 982 0088 3046     		mov	r0, r6
 983 008a FFF7FEFF 		bl	__aeabi_fcmpge
 984              	.LVL116:
 985 008e 0028     		cmp	r0, #0
 986 0090 72D0     		beq	.L36
 153:Core/Inc/Fusion/FusionMath.h ****     }
 987              		.loc 2 153 29 view .LVU241
 988 0092 4248     		ldr	r0, .L38+4
 989              	.L25:
 990              	.LVL117:
 153:Core/Inc/Fusion/FusionMath.h ****     }
 991              		.loc 2 153 29 view .LVU242
 992              	.LBE85:
 993              	.LBE84:
 994              	.LBB87:
 995              	.LBI87:
 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 996              		.loc 2 136 21 is_stmt 1 view .LVU243
 997              	.LBB88:
 137:Core/Inc/Fusion/FusionMath.h **** }
 998              		.loc 2 137 5 view .LVU244
 137:Core/Inc/Fusion/FusionMath.h **** }
 999              		.loc 2 137 20 is_stmt 0 view .LVU245
 1000 0094 4249     		ldr	r1, .L38+8
 1001 0096 FFF7FEFF 		bl	__aeabi_fmul
 1002              	.LVL118:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1003              		.loc 2 137 20 view .LVU246
 1004              	.LBE88:
 1005              	.LBE87:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 1006              		.loc 1 304 36 view .LVU247
 1007 009a 2060     		str	r0, [r4]	@ float
 306:Core/Src/Fusion/FusionAhrs.c ****             .accelerometerIgnored = ahrs->accelerometerIgnored,
 1008              		.loc 1 306 41 view .LVU248
 1009 009c 95F85030 		ldrb	r3, [r5, #80]	@ zero_extendqisi2
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 1010              		.loc 1 304 36 view .LVU249
ARM GAS  /tmp/cc8mw5hc.s 			page 30


 1011 00a0 2371     		strb	r3, [r4, #4]
 307:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejectionTimer = ahrs->settings.rejectionTimeout == 0 ? 0.0f : (float) ahr
 1012              		.loc 1 307 57 view .LVU250
 1013 00a2 EE68     		ldr	r6, [r5, #12]
 1014              		.loc 1 307 87 view .LVU251
 1015 00a4 002E     		cmp	r6, #0
 1016 00a6 6DD0     		beq	.L31
 1017              		.loc 1 307 89 discriminator 1 view .LVU252
 1018 00a8 686D     		ldr	r0, [r5, #84]
 1019 00aa FFF7FEFF 		bl	__aeabi_ui2f
 1020              	.LVL119:
 1021 00ae 0746     		mov	r7, r0
 1022              		.loc 1 307 132 discriminator 1 view .LVU253
 1023 00b0 3046     		mov	r0, r6
 1024 00b2 FFF7FEFF 		bl	__aeabi_ui2f
 1025              	.LVL120:
 1026 00b6 0146     		mov	r1, r0
 1027              		.loc 1 307 87 discriminator 1 view .LVU254
 1028 00b8 3846     		mov	r0, r7
 1029 00ba FFF7FEFF 		bl	__aeabi_fdiv
 1030              	.LVL121:
 1031              	.L26:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 1032              		.loc 1 304 36 view .LVU255
 1033 00be A060     		str	r0, [r4, #8]	@ float
 1034 00c0 0DF1040C 		add	ip, sp, #4
 1035 00c4 05F14403 		add	r3, r5, #68
 1036 00c8 93E80700 		ldm	r3, {r0, r1, r2}
 1037 00cc 8CE80700 		stm	ip, {r0, r1, r2}
 1038              	.LBB89:
 1039              	.LBI89:
 292:Core/Inc/Fusion/FusionMath.h ****     return sqrtf(FusionVectorMagnitudeSquared(vector));
 1040              		.loc 2 292 21 is_stmt 1 view .LVU256
 1041              	.LBB90:
 1042              		.loc 2 293 5 view .LVU257
 1043 00d0 04AB     		add	r3, sp, #16
 1044 00d2 83E80700 		stm	r3, {r0, r1, r2}
 1045              	.LBB91:
 1046              	.LBI91:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 1047              		.loc 2 283 21 view .LVU258
 1048              	.LBB92:
 284:Core/Inc/Fusion/FusionMath.h **** }
 1049              		.loc 2 284 5 view .LVU259
 1050 00d6 0AAE     		add	r6, sp, #40
 1051 00d8 86E80700 		stm	r6, {r0, r1, r2}
 1052 00dc 07AE     		add	r6, sp, #28
 1053 00de 86E80700 		stm	r6, {r0, r1, r2}
 1054              	.LBB93:
 1055              	.LBI93:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 1056              		.loc 2 252 28 view .LVU260
 1057              	.LBB94:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 1058              		.loc 2 253 5 view .LVU261
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1059              		.loc 2 254 5 view .LVU262
ARM GAS  /tmp/cc8mw5hc.s 			page 31


 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1060              		.loc 2 254 36 is_stmt 0 view .LVU263
 1061 00e2 0799     		ldr	r1, [sp, #28]	@ float
 1062 00e4 0A98     		ldr	r0, [sp, #40]	@ float
 1063 00e6 FFF7FEFF 		bl	__aeabi_fmul
 1064              	.LVL122:
 1065 00ea 0746     		mov	r7, r0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1066              		.loc 2 254 19 view .LVU264
 1067 00ec 0D90     		str	r0, [sp, #52]	@ float
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1068              		.loc 2 255 5 is_stmt 1 view .LVU265
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1069              		.loc 2 255 36 is_stmt 0 view .LVU266
 1070 00ee 0899     		ldr	r1, [sp, #32]	@ float
 1071 00f0 0B98     		ldr	r0, [sp, #44]	@ float
 1072 00f2 FFF7FEFF 		bl	__aeabi_fmul
 1073              	.LVL123:
 1074 00f6 8046     		mov	r8, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1075              		.loc 2 255 19 view .LVU267
 1076 00f8 0E90     		str	r0, [sp, #56]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1077              		.loc 2 256 5 is_stmt 1 view .LVU268
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1078              		.loc 2 256 36 is_stmt 0 view .LVU269
 1079 00fa 0999     		ldr	r1, [sp, #36]	@ float
 1080 00fc 0C98     		ldr	r0, [sp, #48]	@ float
 1081 00fe FFF7FEFF 		bl	__aeabi_fmul
 1082              	.LVL124:
 1083 0102 0646     		mov	r6, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1084              		.loc 2 256 19 view .LVU270
 1085 0104 0F90     		str	r0, [sp, #60]	@ float
 257:Core/Inc/Fusion/FusionMath.h **** }
 1086              		.loc 2 257 5 is_stmt 1 view .LVU271
 257:Core/Inc/Fusion/FusionMath.h **** }
 1087              		.loc 2 257 12 is_stmt 0 view .LVU272
 1088 0106 0DF14C0C 		add	ip, sp, #76
 1089 010a 0DAB     		add	r3, sp, #52
 1090 010c 93E80700 		ldm	r3, {r0, r1, r2}
 1091 0110 8CE80700 		stm	ip, {r0, r1, r2}
 1092              	.LBE94:
 1093              	.LBE93:
 1094              	.LBB95:
 1095              	.LBI95:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 1096              		.loc 2 228 21 is_stmt 1 view .LVU273
 1097              	.LBB96:
 229:Core/Inc/Fusion/FusionMath.h **** }
 1098              		.loc 2 229 5 view .LVU274
 229:Core/Inc/Fusion/FusionMath.h **** }
 1099              		.loc 2 229 26 is_stmt 0 view .LVU275
 1100 0114 4146     		mov	r1, r8
 1101 0116 3846     		mov	r0, r7
 1102 0118 FFF7FEFF 		bl	__aeabi_fadd
 1103              	.LVL125:
ARM GAS  /tmp/cc8mw5hc.s 			page 32


 1104 011c 0146     		mov	r1, r0
 229:Core/Inc/Fusion/FusionMath.h **** }
 1105              		.loc 2 229 42 view .LVU276
 1106 011e 3046     		mov	r0, r6
 1107 0120 FFF7FEFF 		bl	__aeabi_fadd
 1108              	.LVL126:
 1109              	.LBE96:
 1110              	.LBE95:
 1111              	.LBE92:
 1112              	.LBE91:
 1113              		.loc 2 293 12 view .LVU277
 1114 0124 FFF7FEFF 		bl	sqrtf
 1115              	.LVL127:
 1116 0128 0146     		mov	r1, r0
 1117              	.LBE90:
 1118              	.LBE89:
 308:Core/Src/Fusion/FusionAhrs.c ****             .magneticError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahrs->h
 1119              		.loc 1 308 30 view .LVU278
 1120 012a FFF7FEFF 		bl	__aeabi_fadd
 1121              	.LVL128:
 1122 012e 0646     		mov	r6, r0
 1123              	.LVL129:
 1124              	.LBB97:
 1125              	.LBI97:
 148:Core/Inc/Fusion/FusionMath.h ****     if (value <= -1.0f) {
 1126              		.loc 2 148 21 is_stmt 1 view .LVU279
 1127              	.LBB98:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1128              		.loc 2 149 5 view .LVU280
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1129              		.loc 2 149 8 is_stmt 0 view .LVU281
 1130 0130 1949     		ldr	r1, .L38
 1131 0132 FFF7FEFF 		bl	__aeabi_fcmple
 1132              	.LVL130:
 149:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / -2.0f;
 1133              		.loc 2 149 8 view .LVU282
 1134 0136 58BB     		cbnz	r0, .L32
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 1135              		.loc 2 152 5 is_stmt 1 view .LVU283
 152:Core/Inc/Fusion/FusionMath.h ****         return (float) M_PI / 2.0f;
 1136              		.loc 2 152 8 is_stmt 0 view .LVU284
 1137 0138 4FF07E51 		mov	r1, #1065353216
 1138 013c 3046     		mov	r0, r6
 1139 013e FFF7FEFF 		bl	__aeabi_fcmpge
 1140              	.LVL131:
 1141 0142 08B3     		cbz	r0, .L37
 153:Core/Inc/Fusion/FusionMath.h ****     }
 1142              		.loc 2 153 29 view .LVU285
 1143 0144 1548     		ldr	r0, .L38+4
 1144              	.L27:
 1145              	.LVL132:
 153:Core/Inc/Fusion/FusionMath.h ****     }
 1146              		.loc 2 153 29 view .LVU286
 1147              	.LBE98:
 1148              	.LBE97:
 1149              	.LBB100:
 1150              	.LBI100:
ARM GAS  /tmp/cc8mw5hc.s 			page 33


 136:Core/Inc/Fusion/FusionMath.h ****     return radians * (180.0f / (float) M_PI);
 1151              		.loc 2 136 21 is_stmt 1 view .LVU287
 1152              	.LBB101:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1153              		.loc 2 137 5 view .LVU288
 137:Core/Inc/Fusion/FusionMath.h **** }
 1154              		.loc 2 137 20 is_stmt 0 view .LVU289
 1155 0146 1649     		ldr	r1, .L38+8
 1156 0148 FFF7FEFF 		bl	__aeabi_fmul
 1157              	.LVL133:
 137:Core/Inc/Fusion/FusionMath.h **** }
 1158              		.loc 2 137 20 view .LVU290
 1159              	.LBE101:
 1160              	.LBE100:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 1161              		.loc 1 304 36 view .LVU291
 1162 014c E060     		str	r0, [r4, #12]	@ float
 309:Core/Src/Fusion/FusionAhrs.c ****             .magnetometerIgnored = ahrs->magnetometerIgnored,
 1163              		.loc 1 309 40 view .LVU292
 1164 014e 95F85930 		ldrb	r3, [r5, #89]	@ zero_extendqisi2
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 1165              		.loc 1 304 36 view .LVU293
 1166 0152 2374     		strb	r3, [r4, #16]
 310:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejectionTimer = ahrs->settings.rejectionTimeout == 0 ? 0.0f : (float) ahrs->m
 1167              		.loc 1 310 53 view .LVU294
 1168 0154 EE68     		ldr	r6, [r5, #12]
 1169              		.loc 1 310 83 view .LVU295
 1170 0156 EEB1     		cbz	r6, .L34
 1171              		.loc 1 310 85 discriminator 1 view .LVU296
 1172 0158 E86D     		ldr	r0, [r5, #92]
 1173 015a FFF7FEFF 		bl	__aeabi_ui2f
 1174              	.LVL134:
 1175 015e 0546     		mov	r5, r0
 1176              	.LVL135:
 1177              		.loc 1 310 124 discriminator 1 view .LVU297
 1178 0160 3046     		mov	r0, r6
 1179 0162 FFF7FEFF 		bl	__aeabi_ui2f
 1180              	.LVL136:
 1181 0166 0146     		mov	r1, r0
 1182              		.loc 1 310 83 discriminator 1 view .LVU298
 1183 0168 2846     		mov	r0, r5
 1184 016a FFF7FEFF 		bl	__aeabi_fdiv
 1185              	.LVL137:
 1186              	.L28:
 304:Core/Src/Fusion/FusionAhrs.c ****             .accelerationError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahr
 1187              		.loc 1 304 36 view .LVU299
 1188 016e 6061     		str	r0, [r4, #20]	@ float
 311:Core/Src/Fusion/FusionAhrs.c ****     };
 312:Core/Src/Fusion/FusionAhrs.c ****     return internalStates;
 1189              		.loc 1 312 5 is_stmt 1 view .LVU300
 313:Core/Src/Fusion/FusionAhrs.c **** }
 1190              		.loc 1 313 1 is_stmt 0 view .LVU301
 1191 0170 2046     		mov	r0, r4
 1192 0172 16B0     		add	sp, sp, #88
 1193              	.LCFI12:
 1194              		.cfi_remember_state
 1195              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc8mw5hc.s 			page 34


 1196              		@ sp needed
 1197 0174 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1198              	.LVL138:
 1199              	.L36:
 1200              	.LCFI13:
 1201              		.cfi_restore_state
 1202              	.LBB102:
 1203              	.LBB86:
 155:Core/Inc/Fusion/FusionMath.h **** }
 1204              		.loc 2 155 5 is_stmt 1 view .LVU302
 155:Core/Inc/Fusion/FusionMath.h **** }
 1205              		.loc 2 155 12 is_stmt 0 view .LVU303
 1206 0178 3046     		mov	r0, r6
 1207 017a FFF7FEFF 		bl	asinf
 1208              	.LVL139:
 1209 017e 89E7     		b	.L25
 1210              	.L29:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 1211              		.loc 2 150 29 view .LVU304
 1212 0180 0848     		ldr	r0, .L38+12
 1213 0182 87E7     		b	.L25
 1214              	.LVL140:
 1215              	.L31:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 1216              		.loc 2 150 29 view .LVU305
 1217              	.LBE86:
 1218              	.LBE102:
 307:Core/Src/Fusion/FusionAhrs.c ****             .magneticError = FusionRadiansToDegrees(FusionAsin(2.0f * FusionVectorMagnitude(ahrs->h
 1219              		.loc 1 307 87 view .LVU306
 1220 0184 0020     		movs	r0, #0
 1221 0186 9AE7     		b	.L26
 1222              	.LVL141:
 1223              	.L37:
 1224              	.LBB103:
 1225              	.LBB99:
 155:Core/Inc/Fusion/FusionMath.h **** }
 1226              		.loc 2 155 5 is_stmt 1 view .LVU307
 155:Core/Inc/Fusion/FusionMath.h **** }
 1227              		.loc 2 155 12 is_stmt 0 view .LVU308
 1228 0188 3046     		mov	r0, r6
 1229 018a FFF7FEFF 		bl	asinf
 1230              	.LVL142:
 1231 018e DAE7     		b	.L27
 1232              	.L32:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 1233              		.loc 2 150 29 view .LVU309
 1234 0190 0448     		ldr	r0, .L38+12
 1235 0192 D8E7     		b	.L27
 1236              	.LVL143:
 1237              	.L34:
 150:Core/Inc/Fusion/FusionMath.h ****     }
 1238              		.loc 2 150 29 view .LVU310
 1239              	.LBE99:
 1240              	.LBE103:
 310:Core/Src/Fusion/FusionAhrs.c ****     };
 1241              		.loc 1 310 83 view .LVU311
 1242 0194 0020     		movs	r0, #0
ARM GAS  /tmp/cc8mw5hc.s 			page 35


 1243 0196 EAE7     		b	.L28
 1244              	.L39:
 1245              		.align	2
 1246              	.L38:
 1247 0198 000080BF 		.word	-1082130432
 1248 019c DB0FC93F 		.word	1070141403
 1249 01a0 E02E6542 		.word	1113927392
 1250 01a4 DB0FC9BF 		.word	-1077342245
 1251              		.cfi_endproc
 1252              	.LFE30:
 1254              		.section	.text.FusionAhrsGetFlags,"ax",%progbits
 1255              		.align	1
 1256              		.global	FusionAhrsGetFlags
 1257              		.syntax unified
 1258              		.thumb
 1259              		.thumb_func
 1260              		.fpu softvfp
 1262              	FusionAhrsGetFlags:
 1263              	.LVL144:
 1264              	.LFB31:
 314:Core/Src/Fusion/FusionAhrs.c **** 
 315:Core/Src/Fusion/FusionAhrs.c **** /**
 316:Core/Src/Fusion/FusionAhrs.c ****  * @brief Returns the AHRS algorithm flags.
 317:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 318:Core/Src/Fusion/FusionAhrs.c ****  * @return AHRS algorithm flags.
 319:Core/Src/Fusion/FusionAhrs.c ****  */
 320:Core/Src/Fusion/FusionAhrs.c **** FusionAhrsFlags FusionAhrsGetFlags(FusionAhrs *const ahrs) {
 1265              		.loc 1 320 60 is_stmt 1 view -0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              		@ link register save eliminated.
 321:Core/Src/Fusion/FusionAhrs.c ****     const unsigned int warningTimeout = ahrs->settings.rejectionTimeout / 4;
 1270              		.loc 1 321 5 view .LVU313
 1271              		.loc 1 321 55 is_stmt 0 view .LVU314
 1272 0000 CA68     		ldr	r2, [r1, #12]
 1273              	.LVL145:
 322:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 1274              		.loc 1 322 5 is_stmt 1 view .LVU315
 323:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1275              		.loc 1 323 33 is_stmt 0 view .LVU316
 1276 0002 91F82CC0 		ldrb	ip, [r1, #44]	@ zero_extendqisi2
 322:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 1277              		.loc 1 322 27 view .LVU317
 1278 0006 80F800C0 		strb	ip, [r0]
 324:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejectionWarning = ahrs->accelerationRejectionTimer > warningTimeout,
 1279              		.loc 1 324 78 view .LVU318
 1280 000a D1F854C0 		ldr	ip, [r1, #84]
 1281 000e BCEB920F 		cmp	ip, r2, lsr #2
 1282 0012 8CBF     		ite	hi
 1283 0014 4FF0010C 		movhi	ip, #1
 1284 0018 4FF0000C 		movls	ip, #0
 322:Core/Src/Fusion/FusionAhrs.c ****     const FusionAhrsFlags flags = {
 1285              		.loc 1 322 27 view .LVU319
 1286 001c 80F801C0 		strb	ip, [r0, #1]
 325:Core/Src/Fusion/FusionAhrs.c ****             .accelerationRejectionTimeout = ahrs->accelerationRejectionTimeout,
 1287              		.loc 1 325 49 view .LVU320
ARM GAS  /tmp/cc8mw5hc.s 			page 36


 1288 0020 91F858C0 		ldrb	ip, [r1, #88]	@ zero_extendqisi2
 322:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1289              		.loc 1 322 27 view .LVU321
 1290 0024 80F802C0 		strb	ip, [r0, #2]
 326:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejectionWarning = ahrs->magneticRejectionTimer > warningTimeout,
 1291              		.loc 1 326 70 view .LVU322
 1292 0028 D1F85CC0 		ldr	ip, [r1, #92]
 1293 002c BCEB920F 		cmp	ip, r2, lsr #2
 1294 0030 8CBF     		ite	hi
 1295 0032 0122     		movhi	r2, #1
 1296              	.LVL146:
 1297              		.loc 1 326 70 view .LVU323
 1298 0034 0022     		movls	r2, #0
 322:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1299              		.loc 1 322 27 view .LVU324
 1300 0036 C270     		strb	r2, [r0, #3]
 327:Core/Src/Fusion/FusionAhrs.c ****             .magneticRejectionTimeout = ahrs->magneticRejectionTimeout,
 1301              		.loc 1 327 45 view .LVU325
 1302 0038 91F86020 		ldrb	r2, [r1, #96]	@ zero_extendqisi2
 322:Core/Src/Fusion/FusionAhrs.c ****             .initialising = ahrs->initialising,
 1303              		.loc 1 322 27 view .LVU326
 1304 003c 0271     		strb	r2, [r0, #4]
 328:Core/Src/Fusion/FusionAhrs.c ****     };
 329:Core/Src/Fusion/FusionAhrs.c ****     return flags;
 1305              		.loc 1 329 5 is_stmt 1 view .LVU327
 330:Core/Src/Fusion/FusionAhrs.c **** }
 1306              		.loc 1 330 1 is_stmt 0 view .LVU328
 1307 003e 7047     		bx	lr
 1308              		.cfi_endproc
 1309              	.LFE31:
 1311              		.section	.text.FusionAhrsSetHeading,"ax",%progbits
 1312              		.align	1
 1313              		.global	FusionAhrsSetHeading
 1314              		.syntax unified
 1315              		.thumb
 1316              		.thumb_func
 1317              		.fpu softvfp
 1319              	FusionAhrsSetHeading:
 1320              	.LVL147:
 1321              	.LFB32:
 331:Core/Src/Fusion/FusionAhrs.c **** 
 332:Core/Src/Fusion/FusionAhrs.c **** /**
 333:Core/Src/Fusion/FusionAhrs.c ****  * @brief Sets the heading of the orientation measurement provided by the AHRS
 334:Core/Src/Fusion/FusionAhrs.c ****  * algorithm.  This function can be used to reset drift in heading when the AHRS
 335:Core/Src/Fusion/FusionAhrs.c ****  * algorithm is being used without a magnetometer.
 336:Core/Src/Fusion/FusionAhrs.c ****  * @param ahrs AHRS algorithm structure.
 337:Core/Src/Fusion/FusionAhrs.c ****  * @param heading Heading angle in degrees.
 338:Core/Src/Fusion/FusionAhrs.c ****  */
 339:Core/Src/Fusion/FusionAhrs.c **** void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
 1322              		.loc 1 339 72 is_stmt 1 view -0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 88
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              		.loc 1 339 72 is_stmt 0 view .LVU330
 1327 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1328              	.LCFI14:
 1329              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cc8mw5hc.s 			page 37


 1330              		.cfi_offset 4, -36
 1331              		.cfi_offset 5, -32
 1332              		.cfi_offset 6, -28
 1333              		.cfi_offset 7, -24
 1334              		.cfi_offset 8, -20
 1335              		.cfi_offset 9, -16
 1336              		.cfi_offset 10, -12
 1337              		.cfi_offset 11, -8
 1338              		.cfi_offset 14, -4
 1339 0004 97B0     		sub	sp, sp, #92
 1340              	.LCFI15:
 1341              		.cfi_def_cfa_offset 128
 1342 0006 0446     		mov	r4, r0
 1343 0008 0E46     		mov	r6, r1
 340:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 341:Core/Src/Fusion/FusionAhrs.c ****     const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
 1344              		.loc 1 341 5 is_stmt 1 view .LVU331
 1345              		.loc 1 341 37 is_stmt 0 view .LVU332
 1346 000a D0F81C90 		ldr	r9, [r0, #28]	@ float
 1347              		.loc 1 341 34 view .LVU333
 1348 000e 4946     		mov	r1, r9
 1349              	.LVL148:
 1350              		.loc 1 341 34 view .LVU334
 1351 0010 0069     		ldr	r0, [r0, #16]	@ float
 1352              	.LVL149:
 1353              		.loc 1 341 34 view .LVU335
 1354 0012 FFF7FEFF 		bl	__aeabi_fmul
 1355              	.LVL150:
 1356 0016 0746     		mov	r7, r0
 1357              		.loc 1 341 49 view .LVU336
 1358 0018 A569     		ldr	r5, [r4, #24]	@ float
 1359              		.loc 1 341 46 view .LVU337
 1360 001a 2946     		mov	r1, r5
 1361 001c 6069     		ldr	r0, [r4, #20]	@ float
 1362 001e FFF7FEFF 		bl	__aeabi_fmul
 1363              	.LVL151:
 1364 0022 8046     		mov	r8, r0
 1365              		.loc 1 341 64 view .LVU338
 1366 0024 2946     		mov	r1, r5
 1367 0026 2846     		mov	r0, r5
 1368 0028 FFF7FEFF 		bl	__aeabi_fmul
 1369              	.LVL152:
 1370 002c 0146     		mov	r1, r0
 1371              		.loc 1 341 58 view .LVU339
 1372 002e 4FF07C50 		mov	r0, #1056964608
 1373 0032 FFF7FEFF 		bl	__aeabi_fsub
 1374              	.LVL153:
 1375 0036 0546     		mov	r5, r0
 1376              		.loc 1 341 76 view .LVU340
 1377 0038 4946     		mov	r1, r9
 1378 003a 4846     		mov	r0, r9
 1379 003c FFF7FEFF 		bl	__aeabi_fmul
 1380              	.LVL154:
 1381 0040 0146     		mov	r1, r0
 1382              		.loc 1 341 23 view .LVU341
 1383 0042 2846     		mov	r0, r5
 1384 0044 FFF7FEFF 		bl	__aeabi_fsub
ARM GAS  /tmp/cc8mw5hc.s 			page 38


 1385              	.LVL155:
 1386 0048 0546     		mov	r5, r0
 1387 004a 4146     		mov	r1, r8
 1388 004c 3846     		mov	r0, r7
 1389 004e FFF7FEFF 		bl	__aeabi_fadd
 1390              	.LVL156:
 1391 0052 2946     		mov	r1, r5
 1392 0054 FFF7FEFF 		bl	atan2f
 1393              	.LVL157:
 1394 0058 0546     		mov	r5, r0
 1395              	.LVL158:
 342:Core/Src/Fusion/FusionAhrs.c ****     const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
 1396              		.loc 1 342 5 is_stmt 1 view .LVU342
 1397              	.LBB108:
 1398              	.LBI108:
 127:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 1399              		.loc 2 127 21 view .LVU343
 1400              	.LBB109:
 128:Core/Inc/Fusion/FusionMath.h **** }
 1401              		.loc 2 128 5 view .LVU344
 128:Core/Inc/Fusion/FusionMath.h **** }
 1402              		.loc 2 128 20 is_stmt 0 view .LVU345
 1403 005a 5E49     		ldr	r1, .L43
 1404 005c 3046     		mov	r0, r6
 1405              	.LVL159:
 128:Core/Inc/Fusion/FusionMath.h **** }
 1406              		.loc 2 128 20 view .LVU346
 1407 005e FFF7FEFF 		bl	__aeabi_fmul
 1408              	.LVL160:
 1409 0062 0146     		mov	r1, r0
 1410              	.LVL161:
 128:Core/Inc/Fusion/FusionMath.h **** }
 1411              		.loc 2 128 20 view .LVU347
 1412              	.LBE109:
 1413              	.LBE108:
 1414              		.loc 1 342 51 view .LVU348
 1415 0064 2846     		mov	r0, r5
 1416 0066 FFF7FEFF 		bl	__aeabi_fsub
 1417              	.LVL162:
 1418              		.loc 1 342 17 view .LVU349
 1419 006a 4FF07C51 		mov	r1, #1056964608
 1420 006e FFF7FEFF 		bl	__aeabi_fmul
 1421              	.LVL163:
 1422 0072 0546     		mov	r5, r0
 1423              	.LVL164:
 343:Core/Src/Fusion/FusionAhrs.c ****     const FusionQuaternion rotation = {
 1424              		.loc 1 343 5 is_stmt 1 view .LVU350
 344:Core/Src/Fusion/FusionAhrs.c ****             .element.w = cosf(halfYawMinusHeading),
 1425              		.loc 1 344 26 is_stmt 0 view .LVU351
 1426 0074 FFF7FEFF 		bl	cosf
 1427              	.LVL165:
 343:Core/Src/Fusion/FusionAhrs.c ****     const FusionQuaternion rotation = {
 1428              		.loc 1 343 28 view .LVU352
 1429 0078 0E90     		str	r0, [sp, #56]	@ float
 1430 007a 0023     		movs	r3, #0
 1431 007c 0F93     		str	r3, [sp, #60]	@ float
 1432 007e 1093     		str	r3, [sp, #64]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 39


 345:Core/Src/Fusion/FusionAhrs.c ****             .element.x = 0.0f,
 346:Core/Src/Fusion/FusionAhrs.c ****             .element.y = 0.0f,
 347:Core/Src/Fusion/FusionAhrs.c ****             .element.z = -1.0f * sinf(halfYawMinusHeading),
 1433              		.loc 1 347 34 view .LVU353
 1434 0080 2846     		mov	r0, r5
 1435 0082 FFF7FEFF 		bl	sinf
 1436              	.LVL166:
 1437              		.loc 1 347 32 view .LVU354
 1438 0086 00F10040 		add	r0, r0, #-2147483648
 343:Core/Src/Fusion/FusionAhrs.c ****             .element.w = cosf(halfYawMinusHeading),
 1439              		.loc 1 343 28 view .LVU355
 1440 008a 1190     		str	r0, [sp, #68]	@ float
 348:Core/Src/Fusion/FusionAhrs.c ****     };
 349:Core/Src/Fusion/FusionAhrs.c ****     ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
 1441              		.loc 1 349 5 is_stmt 1 view .LVU356
 1442 008c 02AD     		add	r5, sp, #8
 1443              	.LVL167:
 1444              		.loc 1 349 5 is_stmt 0 view .LVU357
 1445 008e 0EAB     		add	r3, sp, #56
 1446 0090 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1447 0092 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1448 0096 06AD     		add	r5, sp, #24
 1449 0098 04F11003 		add	r3, r4, #16
 1450 009c 0093     		str	r3, [sp]
 1451 009e 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1452 00a0 85E80F00 		stm	r5, {r0, r1, r2, r3}
 1453              	.LBB110:
 1454              	.LBI110:
 294:Core/Inc/Fusion/FusionMath.h **** }
 295:Core/Inc/Fusion/FusionMath.h **** 
 296:Core/Inc/Fusion/FusionMath.h **** /**
 297:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised vector.
 298:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 299:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised vector.
 300:Core/Inc/Fusion/FusionMath.h ****  */
 301:Core/Inc/Fusion/FusionMath.h **** static inline FusionVector FusionVectorNormalise(const FusionVector vector) {
 302:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 303:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(FusionVectorMagnitudeSquared(vector));
 304:Core/Inc/Fusion/FusionMath.h **** #else
 305:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(FusionVectorMagnitudeSquared(vector));
 306:Core/Inc/Fusion/FusionMath.h **** #endif
 307:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorMultiplyScalar(vector, magnitudeReciprocal);
 308:Core/Inc/Fusion/FusionMath.h **** }
 309:Core/Inc/Fusion/FusionMath.h **** 
 310:Core/Inc/Fusion/FusionMath.h **** //------------------------------------------------------------------------------
 311:Core/Inc/Fusion/FusionMath.h **** // Inline functions - Quaternion operations
 312:Core/Inc/Fusion/FusionMath.h **** 
 313:Core/Inc/Fusion/FusionMath.h **** /**
 314:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the sum of two quaternions.
 315:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A.
 316:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B.
 317:Core/Inc/Fusion/FusionMath.h ****  * @return Sum of two quaternions.
 318:Core/Inc/Fusion/FusionMath.h ****  */
 319:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionAdd(const FusionQuaternion quaternionA, const Fusion
 320:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.w = quaternionA.element.w + quaternionB.element.w;
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
ARM GAS  /tmp/cc8mw5hc.s 			page 40


 323:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 324:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 325:Core/Inc/Fusion/FusionMath.h ****     return result;
 326:Core/Inc/Fusion/FusionMath.h **** }
 327:Core/Inc/Fusion/FusionMath.h **** 
 328:Core/Inc/Fusion/FusionMath.h **** /**
 329:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of two quaternions.
 330:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionA Quaternion A (to be post-multiplied).
 331:Core/Inc/Fusion/FusionMath.h ****  * @param quaternionB Quaternion B (to be pre-multiplied).
 332:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of two quaternions.
 333:Core/Inc/Fusion/FusionMath.h ****  */
 334:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const F
 1455              		.loc 2 334 32 is_stmt 1 view .LVU358
 1456              	.LBB111:
 335:Core/Inc/Fusion/FusionMath.h **** #define A quaternionA.element
 336:Core/Inc/Fusion/FusionMath.h **** #define B quaternionB.element
 337:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 1457              		.loc 2 337 5 view .LVU359
 338:Core/Inc/Fusion/FusionMath.h ****     result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
 1458              		.loc 2 338 5 view .LVU360
 1459              		.loc 2 338 25 is_stmt 0 view .LVU361
 1460 00a4 DDF808A0 		ldr	r10, [sp, #8]	@ float
 1461              		.loc 2 338 31 view .LVU362
 1462 00a8 069C     		ldr	r4, [sp, #24]	@ float
 1463              	.LVL168:
 1464              		.loc 2 338 28 view .LVU363
 1465 00aa 2146     		mov	r1, r4
 1466 00ac 5046     		mov	r0, r10
 1467 00ae FFF7FEFF 		bl	__aeabi_fmul
 1468              	.LVL169:
 1469 00b2 0546     		mov	r5, r0
 1470              		.loc 2 338 37 view .LVU364
 1471 00b4 DDF80C80 		ldr	r8, [sp, #12]	@ float
 1472              		.loc 2 338 43 view .LVU365
 1473 00b8 079E     		ldr	r6, [sp, #28]	@ float
 1474              	.LVL170:
 1475              		.loc 2 338 40 view .LVU366
 1476 00ba 3146     		mov	r1, r6
 1477 00bc 4046     		mov	r0, r8
 1478 00be FFF7FEFF 		bl	__aeabi_fmul
 1479              	.LVL171:
 1480 00c2 0146     		mov	r1, r0
 1481              		.loc 2 338 34 view .LVU367
 1482 00c4 2846     		mov	r0, r5
 1483 00c6 FFF7FEFF 		bl	__aeabi_fsub
 1484              	.LVL172:
 1485 00ca 0546     		mov	r5, r0
 1486              		.loc 2 338 49 view .LVU368
 1487 00cc 049F     		ldr	r7, [sp, #16]	@ float
 1488              		.loc 2 338 55 view .LVU369
 1489 00ce DDF82090 		ldr	r9, [sp, #32]	@ float
 1490              		.loc 2 338 52 view .LVU370
 1491 00d2 4946     		mov	r1, r9
 1492 00d4 3846     		mov	r0, r7
 1493 00d6 FFF7FEFF 		bl	__aeabi_fmul
 1494              	.LVL173:
 1495 00da 0146     		mov	r1, r0
ARM GAS  /tmp/cc8mw5hc.s 			page 41


 1496              		.loc 2 338 46 view .LVU371
 1497 00dc 2846     		mov	r0, r5
 1498 00de FFF7FEFF 		bl	__aeabi_fsub
 1499              	.LVL174:
 1500 00e2 0190     		str	r0, [sp, #4]	@ float
 1501              		.loc 2 338 61 view .LVU372
 1502 00e4 059D     		ldr	r5, [sp, #20]	@ float
 1503              		.loc 2 338 67 view .LVU373
 1504 00e6 DDF824B0 		ldr	fp, [sp, #36]	@ float
 1505              		.loc 2 338 64 view .LVU374
 1506 00ea 5946     		mov	r1, fp
 1507 00ec 2846     		mov	r0, r5
 1508 00ee FFF7FEFF 		bl	__aeabi_fmul
 1509              	.LVL175:
 1510 00f2 0146     		mov	r1, r0
 1511              		.loc 2 338 58 view .LVU375
 1512 00f4 0198     		ldr	r0, [sp, #4]	@ float
 1513 00f6 FFF7FEFF 		bl	__aeabi_fsub
 1514              	.LVL176:
 1515              		.loc 2 338 22 view .LVU376
 1516 00fa 0A90     		str	r0, [sp, #40]	@ float
 339:Core/Inc/Fusion/FusionMath.h ****     result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
 1517              		.loc 2 339 5 is_stmt 1 view .LVU377
 1518              		.loc 2 339 28 is_stmt 0 view .LVU378
 1519 00fc 3146     		mov	r1, r6
 1520 00fe 5046     		mov	r0, r10
 1521 0100 FFF7FEFF 		bl	__aeabi_fmul
 1522              	.LVL177:
 1523 0104 0190     		str	r0, [sp, #4]	@ float
 1524              		.loc 2 339 40 view .LVU379
 1525 0106 4146     		mov	r1, r8
 1526 0108 2046     		mov	r0, r4
 1527 010a FFF7FEFF 		bl	__aeabi_fmul
 1528              	.LVL178:
 1529 010e 0146     		mov	r1, r0
 1530              		.loc 2 339 34 view .LVU380
 1531 0110 0198     		ldr	r0, [sp, #4]	@ float
 1532 0112 FFF7FEFF 		bl	__aeabi_fadd
 1533              	.LVL179:
 1534 0116 0190     		str	r0, [sp, #4]	@ float
 1535              		.loc 2 339 52 view .LVU381
 1536 0118 5946     		mov	r1, fp
 1537 011a 3846     		mov	r0, r7
 1538 011c FFF7FEFF 		bl	__aeabi_fmul
 1539              	.LVL180:
 1540 0120 0146     		mov	r1, r0
 1541              		.loc 2 339 46 view .LVU382
 1542 0122 0198     		ldr	r0, [sp, #4]	@ float
 1543 0124 FFF7FEFF 		bl	__aeabi_fadd
 1544              	.LVL181:
 1545 0128 0190     		str	r0, [sp, #4]	@ float
 1546              		.loc 2 339 64 view .LVU383
 1547 012a 2946     		mov	r1, r5
 1548 012c 4846     		mov	r0, r9
 1549 012e FFF7FEFF 		bl	__aeabi_fmul
 1550              	.LVL182:
 1551 0132 0146     		mov	r1, r0
ARM GAS  /tmp/cc8mw5hc.s 			page 42


 1552              		.loc 2 339 58 view .LVU384
 1553 0134 0198     		ldr	r0, [sp, #4]	@ float
 1554 0136 FFF7FEFF 		bl	__aeabi_fsub
 1555              	.LVL183:
 1556              		.loc 2 339 22 view .LVU385
 1557 013a 0B90     		str	r0, [sp, #44]	@ float
 340:Core/Inc/Fusion/FusionMath.h ****     result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
 1558              		.loc 2 340 5 is_stmt 1 view .LVU386
 1559              		.loc 2 340 28 is_stmt 0 view .LVU387
 1560 013c 4946     		mov	r1, r9
 1561 013e 5046     		mov	r0, r10
 1562 0140 FFF7FEFF 		bl	__aeabi_fmul
 1563              	.LVL184:
 1564 0144 0190     		str	r0, [sp, #4]	@ float
 1565              		.loc 2 340 40 view .LVU388
 1566 0146 5946     		mov	r1, fp
 1567 0148 4046     		mov	r0, r8
 1568 014a FFF7FEFF 		bl	__aeabi_fmul
 1569              	.LVL185:
 1570 014e 0146     		mov	r1, r0
 1571              		.loc 2 340 34 view .LVU389
 1572 0150 0198     		ldr	r0, [sp, #4]	@ float
 1573 0152 FFF7FEFF 		bl	__aeabi_fsub
 1574              	.LVL186:
 1575 0156 0190     		str	r0, [sp, #4]	@ float
 1576              		.loc 2 340 52 view .LVU390
 1577 0158 3946     		mov	r1, r7
 1578 015a 2046     		mov	r0, r4
 1579 015c FFF7FEFF 		bl	__aeabi_fmul
 1580              	.LVL187:
 1581 0160 0146     		mov	r1, r0
 1582              		.loc 2 340 46 view .LVU391
 1583 0162 0198     		ldr	r0, [sp, #4]	@ float
 1584 0164 FFF7FEFF 		bl	__aeabi_fadd
 1585              	.LVL188:
 1586 0168 0190     		str	r0, [sp, #4]	@ float
 1587              		.loc 2 340 64 view .LVU392
 1588 016a 2946     		mov	r1, r5
 1589 016c 3046     		mov	r0, r6
 1590 016e FFF7FEFF 		bl	__aeabi_fmul
 1591              	.LVL189:
 1592 0172 0146     		mov	r1, r0
 1593              		.loc 2 340 58 view .LVU393
 1594 0174 0198     		ldr	r0, [sp, #4]	@ float
 1595 0176 FFF7FEFF 		bl	__aeabi_fadd
 1596              	.LVL190:
 1597              		.loc 2 340 22 view .LVU394
 1598 017a 0C90     		str	r0, [sp, #48]	@ float
 341:Core/Inc/Fusion/FusionMath.h ****     result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
 1599              		.loc 2 341 5 is_stmt 1 view .LVU395
 1600              		.loc 2 341 28 is_stmt 0 view .LVU396
 1601 017c 5946     		mov	r1, fp
 1602 017e 5046     		mov	r0, r10
 1603 0180 FFF7FEFF 		bl	__aeabi_fmul
 1604              	.LVL191:
 1605 0184 8246     		mov	r10, r0
 1606              		.loc 2 341 40 view .LVU397
ARM GAS  /tmp/cc8mw5hc.s 			page 43


 1607 0186 4946     		mov	r1, r9
 1608 0188 4046     		mov	r0, r8
 1609 018a FFF7FEFF 		bl	__aeabi_fmul
 1610              	.LVL192:
 1611 018e 0146     		mov	r1, r0
 1612              		.loc 2 341 34 view .LVU398
 1613 0190 5046     		mov	r0, r10
 1614 0192 FFF7FEFF 		bl	__aeabi_fadd
 1615              	.LVL193:
 1616 0196 8046     		mov	r8, r0
 1617              		.loc 2 341 52 view .LVU399
 1618 0198 3946     		mov	r1, r7
 1619 019a 3046     		mov	r0, r6
 1620 019c FFF7FEFF 		bl	__aeabi_fmul
 1621              	.LVL194:
 1622 01a0 0146     		mov	r1, r0
 1623              		.loc 2 341 46 view .LVU400
 1624 01a2 4046     		mov	r0, r8
 1625 01a4 FFF7FEFF 		bl	__aeabi_fsub
 1626              	.LVL195:
 1627 01a8 0646     		mov	r6, r0
 1628              		.loc 2 341 64 view .LVU401
 1629 01aa 2946     		mov	r1, r5
 1630 01ac 2046     		mov	r0, r4
 1631 01ae FFF7FEFF 		bl	__aeabi_fmul
 1632              	.LVL196:
 1633 01b2 0146     		mov	r1, r0
 1634              		.loc 2 341 58 view .LVU402
 1635 01b4 3046     		mov	r0, r6
 1636 01b6 FFF7FEFF 		bl	__aeabi_fadd
 1637              	.LVL197:
 1638              		.loc 2 341 22 view .LVU403
 1639 01ba 0D90     		str	r0, [sp, #52]	@ float
 342:Core/Inc/Fusion/FusionMath.h ****     return result;
 1640              		.loc 2 342 5 is_stmt 1 view .LVU404
 1641              		.loc 2 342 12 is_stmt 0 view .LVU405
 1642 01bc 12AC     		add	r4, sp, #72
 1643 01be 0AAB     		add	r3, sp, #40
 1644 01c0 0FCB     		ldm	r3, {r0, r1, r2, r3}
 1645 01c2 84E80F00 		stm	r4, {r0, r1, r2, r3}
 1646              	.LBE111:
 1647              	.LBE110:
 1648              		.loc 1 349 24 view .LVU406
 1649 01c6 009C     		ldr	r4, [sp]
 1650 01c8 84E80F00 		stm	r4, {r0, r1, r2, r3}
 350:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 351:Core/Src/Fusion/FusionAhrs.c **** }
 1651              		.loc 1 351 1 view .LVU407
 1652 01cc 17B0     		add	sp, sp, #92
 1653              	.LCFI16:
 1654              		.cfi_def_cfa_offset 36
 1655              	.LVL198:
 1656              		.loc 1 351 1 view .LVU408
 1657              		@ sp needed
 1658 01ce BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1659              	.LVL199:
 1660              	.L44:
ARM GAS  /tmp/cc8mw5hc.s 			page 44


 1661              		.loc 1 351 1 view .LVU409
 1662 01d2 00BF     		.align	2
 1663              	.L43:
 1664 01d4 35FA8E3C 		.word	1016003125
 1665              		.cfi_endproc
 1666              	.LFE32:
 1668              		.global	__aeabi_fcmplt
 1669              		.section	.text.FusionAhrsUpdate,"ax",%progbits
 1670              		.align	1
 1671              		.global	FusionAhrsUpdate
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1675              		.fpu softvfp
 1677              	FusionAhrsUpdate:
 1678              	.LVL200:
 1679              	.LFB24:
 100:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1680              		.loc 1 100 167 is_stmt 1 view -0
 1681              		.cfi_startproc
 1682              		@ args = 28, pretend = 0, frame = 368
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
 100:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1684              		.loc 1 100 167 is_stmt 0 view .LVU411
 1685 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1686              	.LCFI17:
 1687              		.cfi_def_cfa_offset 36
 1688              		.cfi_offset 4, -36
 1689              		.cfi_offset 5, -32
 1690              		.cfi_offset 6, -28
 1691              		.cfi_offset 7, -24
 1692              		.cfi_offset 8, -20
 1693              		.cfi_offset 9, -16
 1694              		.cfi_offset 10, -12
 1695              		.cfi_offset 11, -8
 1696              		.cfi_offset 14, -4
 1697 0004 DFB0     		sub	sp, sp, #380
 1698              	.LCFI18:
 1699              		.cfi_def_cfa_offset 416
 1700 0006 0446     		mov	r4, r0
 1701 0008 07A8     		add	r0, sp, #28
 1702              	.LVL201:
 100:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 1703              		.loc 1 100 167 view .LVU412
 1704 000a 80E80E00 		stm	r0, {r1, r2, r3}
 104:Core/Src/Fusion/FusionAhrs.c **** 
 1705              		.loc 1 104 5 is_stmt 1 view .LVU413
 104:Core/Src/Fusion/FusionAhrs.c **** 
 1706              		.loc 1 104 25 is_stmt 0 view .LVU414
 1707 000e 04F12003 		add	r3, r4, #32
 1708 0012 68AA     		add	r2, sp, #416
 1709              	.LVL202:
 104:Core/Src/Fusion/FusionAhrs.c **** 
 1710              		.loc 1 104 25 view .LVU415
 1711 0014 07CA     		ldm	r2, {r0, r1, r2}
 1712              	.LVL203:
 104:Core/Src/Fusion/FusionAhrs.c **** 
ARM GAS  /tmp/cc8mw5hc.s 			page 45


 1713              		.loc 1 104 25 view .LVU416
 1714 0016 83E80700 		stm	r3, {r0, r1, r2}
 107:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1715              		.loc 1 107 5 is_stmt 1 view .LVU417
 107:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1716              		.loc 1 107 13 is_stmt 0 view .LVU418
 1717 001a 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 107:Core/Src/Fusion/FusionAhrs.c ****         ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
 1718              		.loc 1 107 8 view .LVU419
 1719 001e 9BB1     		cbz	r3, .L46
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1720              		.loc 1 108 9 is_stmt 1 view .LVU420
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1721              		.loc 1 108 50 is_stmt 0 view .LVU421
 1722 0020 6E99     		ldr	r1, [sp, #440]	@ float
 1723 0022 606B     		ldr	r0, [r4, #52]	@ float
 1724 0024 FFF7FEFF 		bl	__aeabi_fmul
 1725              	.LVL204:
 1726 0028 0146     		mov	r1, r0
 108:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->rampedGain < ahrs->settings.gain) {
 1727              		.loc 1 108 26 view .LVU422
 1728 002a 206B     		ldr	r0, [r4, #48]	@ float
 1729 002c FFF7FEFF 		bl	__aeabi_fsub
 1730              	.LVL205:
 1731 0030 2063     		str	r0, [r4, #48]	@ float
 109:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1732              		.loc 1 109 9 is_stmt 1 view .LVU423
 109:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1733              		.loc 1 109 46 is_stmt 0 view .LVU424
 1734 0032 2568     		ldr	r5, [r4]	@ float
 109:Core/Src/Fusion/FusionAhrs.c ****             ahrs->rampedGain = ahrs->settings.gain;
 1735              		.loc 1 109 12 view .LVU425
 1736 0034 2946     		mov	r1, r5
 1737 0036 FFF7FEFF 		bl	__aeabi_fcmplt
 1738              	.LVL206:
 1739 003a 28B1     		cbz	r0, .L46
 110:Core/Src/Fusion/FusionAhrs.c ****             ahrs->initialising = false;
 1740              		.loc 1 110 13 is_stmt 1 view .LVU426
 110:Core/Src/Fusion/FusionAhrs.c ****             ahrs->initialising = false;
 1741              		.loc 1 110 30 is_stmt 0 view .LVU427
 1742 003c 2563     		str	r5, [r4, #48]	@ float
 111:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = false;
 1743              		.loc 1 111 13 is_stmt 1 view .LVU428
 111:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = false;
 1744              		.loc 1 111 32 is_stmt 0 view .LVU429
 1745 003e 0023     		movs	r3, #0
 1746 0040 84F82C30 		strb	r3, [r4, #44]
 112:Core/Src/Fusion/FusionAhrs.c ****         }
 1747              		.loc 1 112 13 is_stmt 1 view .LVU430
 112:Core/Src/Fusion/FusionAhrs.c ****         }
 1748              		.loc 1 112 48 is_stmt 0 view .LVU431
 1749 0044 84F85830 		strb	r3, [r4, #88]
 1750              	.L46:
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1751              		.loc 1 117 5 is_stmt 1 view .LVU432
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1752              		.loc 1 118 24 is_stmt 0 view .LVU433
ARM GAS  /tmp/cc8mw5hc.s 			page 46


 1753 0048 D4F81480 		ldr	r8, [r4, #20]	@ float
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1754              		.loc 1 118 30 view .LVU434
 1755 004c E569     		ldr	r5, [r4, #28]	@ float
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1756              		.loc 1 118 27 view .LVU435
 1757 004e 2946     		mov	r1, r5
 1758 0050 4046     		mov	r0, r8
 1759 0052 FFF7FEFF 		bl	__aeabi_fmul
 1760              	.LVL207:
 1761 0056 0746     		mov	r7, r0
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1762              		.loc 1 118 36 view .LVU436
 1763 0058 2669     		ldr	r6, [r4, #16]	@ float
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1764              		.loc 1 118 42 view .LVU437
 1765 005a D4F81890 		ldr	r9, [r4, #24]	@ float
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1766              		.loc 1 118 39 view .LVU438
 1767 005e 4946     		mov	r1, r9
 1768 0060 3046     		mov	r0, r6
 1769 0062 FFF7FEFF 		bl	__aeabi_fmul
 1770              	.LVL208:
 1771 0066 0146     		mov	r1, r0
 118:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = Q.y * Q.z + Q.w * Q.x,
 1772              		.loc 1 118 33 view .LVU439
 1773 0068 3846     		mov	r0, r7
 1774 006a FFF7FEFF 		bl	__aeabi_fsub
 1775              	.LVL209:
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1776              		.loc 1 117 24 view .LVU440
 1777 006e 2B90     		str	r0, [sp, #172]	@ float
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 1778              		.loc 1 119 27 view .LVU441
 1779 0070 4946     		mov	r1, r9
 1780 0072 2846     		mov	r0, r5
 1781 0074 FFF7FEFF 		bl	__aeabi_fmul
 1782              	.LVL210:
 1783 0078 0746     		mov	r7, r0
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 1784              		.loc 1 119 39 view .LVU442
 1785 007a 3146     		mov	r1, r6
 1786 007c 4046     		mov	r0, r8
 1787 007e FFF7FEFF 		bl	__aeabi_fmul
 1788              	.LVL211:
 1789 0082 0146     		mov	r1, r0
 119:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
 1790              		.loc 1 119 33 view .LVU443
 1791 0084 3846     		mov	r0, r7
 1792 0086 FFF7FEFF 		bl	__aeabi_fadd
 1793              	.LVL212:
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1794              		.loc 1 117 24 view .LVU444
 1795 008a 2C90     		str	r0, [sp, #176]	@ float
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1796              		.loc 1 120 27 view .LVU445
 1797 008c 3146     		mov	r1, r6
ARM GAS  /tmp/cc8mw5hc.s 			page 47


 1798 008e 3046     		mov	r0, r6
 1799 0090 FFF7FEFF 		bl	__aeabi_fmul
 1800              	.LVL213:
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1801              		.loc 1 120 33 view .LVU446
 1802 0094 4FF07C51 		mov	r1, #1056964608
 1803 0098 FFF7FEFF 		bl	__aeabi_fsub
 1804              	.LVL214:
 1805 009c 0646     		mov	r6, r0
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1806              		.loc 1 120 46 view .LVU447
 1807 009e 2946     		mov	r1, r5
 1808 00a0 2846     		mov	r0, r5
 1809 00a2 FFF7FEFF 		bl	__aeabi_fmul
 1810              	.LVL215:
 1811 00a6 0146     		mov	r1, r0
 120:Core/Src/Fusion/FusionAhrs.c ****     }; // third column of transposed rotation matrix scaled by 0.5
 1812              		.loc 1 120 40 view .LVU448
 1813 00a8 3046     		mov	r0, r6
 1814 00aa FFF7FEFF 		bl	__aeabi_fadd
 1815              	.LVL216:
 117:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = Q.x * Q.z - Q.w * Q.y,
 1816              		.loc 1 117 24 view .LVU449
 1817 00ae 2D90     		str	r0, [sp, #180]	@ float
 124:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 1818              		.loc 1 124 5 is_stmt 1 view .LVU450
 124:Core/Src/Fusion/FusionAhrs.c ****     ahrs->accelerometerIgnored = true;
 1819              		.loc 1 124 18 is_stmt 0 view .LVU451
 1820 00b0 0025     		movs	r5, #0
 1821 00b2 2895     		str	r5, [sp, #160]	@ float
 1822 00b4 2995     		str	r5, [sp, #164]	@ float
 1823 00b6 2A95     		str	r5, [sp, #168]	@ float
 125:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 1824              		.loc 1 125 5 is_stmt 1 view .LVU452
 125:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(accelerometer) == false) {
 1825              		.loc 1 125 32 is_stmt 0 view .LVU453
 1826 00b8 0123     		movs	r3, #1
 1827 00ba 84F85030 		strb	r3, [r4, #80]
 126:Core/Src/Fusion/FusionAhrs.c **** 
 1828              		.loc 1 126 5 is_stmt 1 view .LVU454
 1829 00be 1BAB     		add	r3, sp, #108
 1830 00c0 68AA     		add	r2, sp, #416
 1831              	.LVL217:
 126:Core/Src/Fusion/FusionAhrs.c **** 
 1832              		.loc 1 126 5 is_stmt 0 view .LVU455
 1833 00c2 07CA     		ldm	r2, {r0, r1, r2}
 1834              	.LVL218:
 126:Core/Src/Fusion/FusionAhrs.c **** 
 1835              		.loc 1 126 5 view .LVU456
 1836 00c4 83E80700 		stm	r3, {r0, r1, r2}
 1837              	.LBB178:
 1838              	.LBI178:
 191:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 1839              		.loc 2 191 20 is_stmt 1 view .LVU457
 1840              	.LBB179:
 192:Core/Inc/Fusion/FusionMath.h **** }
 1841              		.loc 2 192 5 view .LVU458
ARM GAS  /tmp/cc8mw5hc.s 			page 48


 192:Core/Inc/Fusion/FusionMath.h **** }
 1842              		.loc 2 192 63 is_stmt 0 view .LVU459
 1843 00c8 2946     		mov	r1, r5
 1844 00ca 1868     		ldr	r0, [r3]	@ float
 1845 00cc FFF7FEFF 		bl	__aeabi_fcmpeq
 1846              	.LVL219:
 1847 00d0 78B1     		cbz	r0, .L80
 192:Core/Inc/Fusion/FusionMath.h **** }
 1848              		.loc 2 192 36 view .LVU460
 1849 00d2 2946     		mov	r1, r5
 1850 00d4 1C98     		ldr	r0, [sp, #112]	@ float
 1851 00d6 FFF7FEFF 		bl	__aeabi_fcmpeq
 1852              	.LVL220:
 1853 00da 0028     		cmp	r0, #0
 1854 00dc 00F01681 		beq	.L81
 192:Core/Inc/Fusion/FusionMath.h **** }
 1855              		.loc 2 192 63 view .LVU461
 1856 00e0 2946     		mov	r1, r5
 1857 00e2 1D98     		ldr	r0, [sp, #116]	@ float
 1858 00e4 FFF7FEFF 		bl	__aeabi_fcmpeq
 1859              	.LVL221:
 1860 00e8 0028     		cmp	r0, #0
 1861 00ea 40F01181 		bne	.L69
 1862 00ee 0023     		movs	r3, #0
 1863 00f0 00E0     		b	.L48
 1864              	.L80:
 1865 00f2 0023     		movs	r3, #0
 1866              	.L48:
 1867              	.LBE179:
 1868              	.LBE178:
 126:Core/Src/Fusion/FusionAhrs.c **** 
 1869              		.loc 1 126 8 view .LVU462
 1870 00f4 002B     		cmp	r3, #0
 1871 00f6 40F0E780 		bne	.L51
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1872              		.loc 1 129 9 is_stmt 1 view .LVU463
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1873              		.loc 1 129 17 is_stmt 0 view .LVU464
 1874 00fa 626D     		ldr	r2, [r4, #84]
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1875              		.loc 1 129 62 view .LVU465
 1876 00fc E368     		ldr	r3, [r4, #12]
 129:Core/Src/Fusion/FusionAhrs.c ****             const FusionQuaternion quaternion = ahrs->quaternion;
 1877              		.loc 1 129 12 view .LVU466
 1878 00fe 9A42     		cmp	r2, r3
 1879 0100 00F20881 		bhi	.L87
 1880              	.L52:
 138:Core/Src/Fusion/FusionAhrs.c **** 
 1881              		.loc 1 138 9 is_stmt 1 view .LVU467
 1882 0104 0DF13408 		add	r8, sp, #52
 1883 0108 68AB     		add	r3, sp, #416
 1884              	.LVL222:
 138:Core/Src/Fusion/FusionAhrs.c **** 
 1885              		.loc 1 138 9 is_stmt 0 view .LVU468
 1886 010a 93E80700 		ldm	r3, {r0, r1, r2}
 1887 010e 88E80700 		stm	r8, {r0, r1, r2}
 1888              	.LBB181:
ARM GAS  /tmp/cc8mw5hc.s 			page 49


 1889              	.LBI181:
 301:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 1890              		.loc 2 301 28 is_stmt 1 view .LVU469
 1891              	.LBB182:
 305:Core/Inc/Fusion/FusionMath.h **** #endif
 1892              		.loc 2 305 5 view .LVU470
 1893 0112 10AB     		add	r3, sp, #64
 1894              	.LVL223:
 305:Core/Inc/Fusion/FusionMath.h **** #endif
 1895              		.loc 2 305 5 is_stmt 0 view .LVU471
 1896 0114 83E80700 		stm	r3, {r0, r1, r2}
 1897              	.LBB183:
 1898              	.LBI183:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 1899              		.loc 2 283 21 is_stmt 1 view .LVU472
 1900              	.LBB184:
 284:Core/Inc/Fusion/FusionMath.h **** }
 1901              		.loc 2 284 5 view .LVU473
 1902 0118 17AE     		add	r6, sp, #92
 1903 011a 86E80700 		stm	r6, {r0, r1, r2}
 1904 011e 13AF     		add	r7, sp, #76
 1905 0120 87E80700 		stm	r7, {r0, r1, r2}
 1906              	.LBB185:
 1907              	.LBI185:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 1908              		.loc 2 252 28 view .LVU474
 1909              	.LBB186:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 1910              		.loc 2 253 5 view .LVU475
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1911              		.loc 2 254 5 view .LVU476
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1912              		.loc 2 254 36 is_stmt 0 view .LVU477
 1913 0124 3968     		ldr	r1, [r7]	@ float
 1914 0126 3068     		ldr	r0, [r6]	@ float
 1915 0128 FFF7FEFF 		bl	__aeabi_fmul
 1916              	.LVL224:
 1917 012c 8246     		mov	r10, r0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 1918              		.loc 2 254 19 view .LVU478
 1919 012e 1BAD     		add	r5, sp, #108
 1920 0130 2860     		str	r0, [r5]	@ float
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1921              		.loc 2 255 5 is_stmt 1 view .LVU479
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1922              		.loc 2 255 36 is_stmt 0 view .LVU480
 1923 0132 7968     		ldr	r1, [r7, #4]	@ float
 1924 0134 7068     		ldr	r0, [r6, #4]	@ float
 1925 0136 FFF7FEFF 		bl	__aeabi_fmul
 1926              	.LVL225:
 1927 013a 8346     		mov	fp, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 1928              		.loc 2 255 19 view .LVU481
 1929 013c 6860     		str	r0, [r5, #4]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1930              		.loc 2 256 5 is_stmt 1 view .LVU482
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
ARM GAS  /tmp/cc8mw5hc.s 			page 50


 1931              		.loc 2 256 36 is_stmt 0 view .LVU483
 1932 013e B968     		ldr	r1, [r7, #8]	@ float
 1933 0140 B068     		ldr	r0, [r6, #8]	@ float
 1934 0142 FFF7FEFF 		bl	__aeabi_fmul
 1935              	.LVL226:
 1936 0146 8146     		mov	r9, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 1937              		.loc 2 256 19 view .LVU484
 1938 0148 A860     		str	r0, [r5, #8]	@ float
 257:Core/Inc/Fusion/FusionMath.h **** }
 1939              		.loc 2 257 5 is_stmt 1 view .LVU485
 257:Core/Inc/Fusion/FusionMath.h **** }
 1940              		.loc 2 257 12 is_stmt 0 view .LVU486
 1941 014a 4BAB     		add	r3, sp, #300
 1942 014c 95E80700 		ldm	r5, {r0, r1, r2}
 1943 0150 83E80700 		stm	r3, {r0, r1, r2}
 1944              	.LBE186:
 1945              	.LBE185:
 1946              	.LBB187:
 1947              	.LBI187:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 1948              		.loc 2 228 21 is_stmt 1 view .LVU487
 1949              	.LBB188:
 229:Core/Inc/Fusion/FusionMath.h **** }
 1950              		.loc 2 229 5 view .LVU488
 229:Core/Inc/Fusion/FusionMath.h **** }
 1951              		.loc 2 229 26 is_stmt 0 view .LVU489
 1952 0154 5946     		mov	r1, fp
 1953 0156 5046     		mov	r0, r10
 1954 0158 FFF7FEFF 		bl	__aeabi_fadd
 1955              	.LVL227:
 1956 015c 0146     		mov	r1, r0
 229:Core/Inc/Fusion/FusionMath.h **** }
 1957              		.loc 2 229 42 view .LVU490
 1958 015e 4846     		mov	r0, r9
 1959 0160 FFF7FEFF 		bl	__aeabi_fadd
 1960              	.LVL228:
 229:Core/Inc/Fusion/FusionMath.h **** }
 1961              		.loc 2 229 42 view .LVU491
 1962              	.LBE188:
 1963              	.LBE187:
 1964              	.LBE184:
 1965              	.LBE183:
 1966              	.LBB189:
 1967              	.LBI189:
 169:Core/Inc/Fusion/FusionMath.h **** 
 1968              		.loc 2 169 21 is_stmt 1 view .LVU492
 1969              	.LBB190:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 1970              		.loc 2 171 5 view .LVU493
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 1971              		.loc 2 176 5 view .LVU494
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 1972              		.loc 2 177 5 view .LVU495
 178:Core/Inc/Fusion/FusionMath.h **** }
 1973              		.loc 2 178 5 view .LVU496
 1974 0164 784B     		ldr	r3, .L89
ARM GAS  /tmp/cc8mw5hc.s 			page 51


 1975 0166 A3EB6009 		sub	r9, r3, r0, asr #1
 178:Core/Inc/Fusion/FusionMath.h **** }
 1976              		.loc 2 178 52 is_stmt 0 view .LVU497
 1977 016a 7849     		ldr	r1, .L89+4
 1978 016c FFF7FEFF 		bl	__aeabi_fmul
 1979              	.LVL229:
 178:Core/Inc/Fusion/FusionMath.h **** }
 1980              		.loc 2 178 52 view .LVU498
 1981 0170 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 1982              		.loc 2 178 56 view .LVU499
 1983 0172 4846     		mov	r0, r9
 1984 0174 FFF7FEFF 		bl	__aeabi_fmul
 1985              	.LVL230:
 1986 0178 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 1987              		.loc 2 178 68 view .LVU500
 1988 017a 4846     		mov	r0, r9
 1989 017c FFF7FEFF 		bl	__aeabi_fmul
 1990              	.LVL231:
 1991 0180 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 1992              		.loc 2 178 37 view .LVU501
 1993 0182 7348     		ldr	r0, .L89+8
 1994 0184 FFF7FEFF 		bl	__aeabi_fsub
 1995              	.LVL232:
 1996 0188 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 1997              		.loc 2 178 22 view .LVU502
 1998 018a 4846     		mov	r0, r9
 1999 018c FFF7FEFF 		bl	__aeabi_fmul
 2000              	.LVL233:
 2001 0190 8146     		mov	r9, r0
 2002              	.LVL234:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2003              		.loc 2 178 22 view .LVU503
 2004              	.LBE190:
 2005              	.LBE189:
 307:Core/Inc/Fusion/FusionMath.h **** }
 2006              		.loc 2 307 5 is_stmt 1 view .LVU504
 2007              	.LBB191:
 2008              	.LBI191:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2009              		.loc 2 238 28 view .LVU505
 2010              	.LBB192:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2011              		.loc 2 239 5 view .LVU506
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2012              		.loc 2 240 5 view .LVU507
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2013              		.loc 2 240 35 is_stmt 0 view .LVU508
 2014 0192 3168     		ldr	r1, [r6]	@ float
 2015 0194 FFF7FEFF 		bl	__aeabi_fmul
 2016              	.LVL235:
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2017              		.loc 2 240 19 view .LVU509
 2018 0198 2860     		str	r0, [r5]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 52


 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2019              		.loc 2 241 5 is_stmt 1 view .LVU510
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2020              		.loc 2 241 35 is_stmt 0 view .LVU511
 2021 019a 7168     		ldr	r1, [r6, #4]	@ float
 2022 019c 4846     		mov	r0, r9
 2023 019e FFF7FEFF 		bl	__aeabi_fmul
 2024              	.LVL236:
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2025              		.loc 2 241 19 view .LVU512
 2026 01a2 6860     		str	r0, [r5, #4]	@ float
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2027              		.loc 2 242 5 is_stmt 1 view .LVU513
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2028              		.loc 2 242 35 is_stmt 0 view .LVU514
 2029 01a4 B168     		ldr	r1, [r6, #8]	@ float
 2030 01a6 4846     		mov	r0, r9
 2031 01a8 FFF7FEFF 		bl	__aeabi_fmul
 2032              	.LVL237:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2033              		.loc 2 242 19 view .LVU515
 2034 01ac A860     		str	r0, [r5, #8]	@ float
 243:Core/Inc/Fusion/FusionMath.h **** }
 2035              		.loc 2 243 5 is_stmt 1 view .LVU516
 243:Core/Inc/Fusion/FusionMath.h **** }
 2036              		.loc 2 243 12 is_stmt 0 view .LVU517
 2037 01ae 2EAB     		add	r3, sp, #184
 2038 01b0 95E80700 		ldm	r5, {r0, r1, r2}
 2039 01b4 83E80700 		stm	r3, {r0, r1, r2}
 2040              	.LVL238:
 243:Core/Inc/Fusion/FusionMath.h **** }
 2041              		.loc 2 243 12 view .LVU518
 2042 01b8 87E80700 		stm	r7, {r0, r1, r2}
 2043 01bc 2BAB     		add	r3, sp, #172
 2044 01be 93E80700 		ldm	r3, {r0, r1, r2}
 2045 01c2 86E80700 		stm	r6, {r0, r1, r2}
 2046              	.LBE192:
 2047              	.LBE191:
 2048              	.LBE182:
 2049              	.LBE181:
 2050              	.LBB193:
 2051              	.LBI193:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 2052              		.loc 2 266 28 is_stmt 1 view .LVU519
 2053              	.LBB194:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 2054              		.loc 2 269 5 view .LVU520
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2055              		.loc 2 270 5 view .LVU521
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2056              		.loc 2 270 22 is_stmt 0 view .LVU522
 2057 01c6 D7F80480 		ldr	r8, [r7, #4]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2058              		.loc 2 270 28 view .LVU523
 2059 01ca D6F808A0 		ldr	r10, [r6, #8]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2060              		.loc 2 270 25 view .LVU524
ARM GAS  /tmp/cc8mw5hc.s 			page 53


 2061 01ce 5146     		mov	r1, r10
 2062 01d0 4046     		mov	r0, r8
 2063 01d2 FFF7FEFF 		bl	__aeabi_fmul
 2064              	.LVL239:
 2065 01d6 0390     		str	r0, [sp, #12]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2066              		.loc 2 270 34 view .LVU525
 2067 01d8 D7F808B0 		ldr	fp, [r7, #8]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2068              		.loc 2 270 40 view .LVU526
 2069 01dc D6F80490 		ldr	r9, [r6, #4]	@ float
 2070              	.LVL240:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2071              		.loc 2 270 37 view .LVU527
 2072 01e0 4946     		mov	r1, r9
 2073 01e2 5846     		mov	r0, fp
 2074 01e4 FFF7FEFF 		bl	__aeabi_fmul
 2075              	.LVL241:
 2076 01e8 0146     		mov	r1, r0
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2077              		.loc 2 270 31 view .LVU528
 2078 01ea 0398     		ldr	r0, [sp, #12]	@ float
 2079 01ec FFF7FEFF 		bl	__aeabi_fsub
 2080              	.LVL242:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2081              		.loc 2 270 19 view .LVU529
 2082 01f0 2860     		str	r0, [r5]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2083              		.loc 2 271 5 is_stmt 1 view .LVU530
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2084              		.loc 2 271 28 is_stmt 0 view .LVU531
 2085 01f2 3668     		ldr	r6, [r6]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2086              		.loc 2 271 25 view .LVU532
 2087 01f4 3146     		mov	r1, r6
 2088 01f6 5846     		mov	r0, fp
 2089 01f8 FFF7FEFF 		bl	__aeabi_fmul
 2090              	.LVL243:
 2091 01fc 8346     		mov	fp, r0
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2092              		.loc 2 271 34 view .LVU533
 2093 01fe 3F68     		ldr	r7, [r7]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2094              		.loc 2 271 37 view .LVU534
 2095 0200 3946     		mov	r1, r7
 2096 0202 5046     		mov	r0, r10
 2097 0204 FFF7FEFF 		bl	__aeabi_fmul
 2098              	.LVL244:
 2099 0208 0146     		mov	r1, r0
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2100              		.loc 2 271 31 view .LVU535
 2101 020a 5846     		mov	r0, fp
 2102 020c FFF7FEFF 		bl	__aeabi_fsub
 2103              	.LVL245:
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2104              		.loc 2 271 19 view .LVU536
 2105 0210 6860     		str	r0, [r5, #4]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 54


 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2106              		.loc 2 272 5 is_stmt 1 view .LVU537
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2107              		.loc 2 272 25 is_stmt 0 view .LVU538
 2108 0212 3946     		mov	r1, r7
 2109 0214 4846     		mov	r0, r9
 2110 0216 FFF7FEFF 		bl	__aeabi_fmul
 2111              	.LVL246:
 2112 021a 0746     		mov	r7, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2113              		.loc 2 272 37 view .LVU539
 2114 021c 3146     		mov	r1, r6
 2115 021e 4046     		mov	r0, r8
 2116 0220 FFF7FEFF 		bl	__aeabi_fmul
 2117              	.LVL247:
 2118 0224 0146     		mov	r1, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2119              		.loc 2 272 31 view .LVU540
 2120 0226 3846     		mov	r0, r7
 2121 0228 FFF7FEFF 		bl	__aeabi_fsub
 2122              	.LVL248:
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2123              		.loc 2 272 19 view .LVU541
 2124 022c A860     		str	r0, [r5, #8]	@ float
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2125              		.loc 2 273 5 is_stmt 1 view .LVU542
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2126              		.loc 2 273 12 is_stmt 0 view .LVU543
 2127 022e 48AB     		add	r3, sp, #288
 2128 0230 95E80700 		ldm	r5, {r0, r1, r2}
 2129 0234 83E80700 		stm	r3, {r0, r1, r2}
 2130              	.LBE194:
 2131              	.LBE193:
 138:Core/Src/Fusion/FusionAhrs.c **** 
 2132              		.loc 1 138 43 view .LVU544
 2133 0238 04F13805 		add	r5, r4, #56
 2134 023c 85E80700 		stm	r5, {r0, r1, r2}
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 2135              		.loc 1 141 9 is_stmt 1 view .LVU545
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 2136              		.loc 1 141 18 is_stmt 0 view .LVU546
 2137 0240 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 2138              		.loc 1 141 12 view .LVU547
 2139 0244 002B     		cmp	r3, #0
 2140 0246 30D1     		bne	.L53
 2141 0248 10AB     		add	r3, sp, #64
 2142 024a 95E80700 		ldm	r5, {r0, r1, r2}
 2143 024e 83E80700 		stm	r3, {r0, r1, r2}
 2144              	.LBB195:
 2145              	.LBI195:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 2146              		.loc 2 283 21 is_stmt 1 discriminator 1 view .LVU548
 2147              	.LBB196:
 284:Core/Inc/Fusion/FusionMath.h **** }
 2148              		.loc 2 284 5 discriminator 1 view .LVU549
 2149 0252 17AE     		add	r6, sp, #92
ARM GAS  /tmp/cc8mw5hc.s 			page 55


 2150 0254 86E80700 		stm	r6, {r0, r1, r2}
 2151 0258 13AF     		add	r7, sp, #76
 2152 025a 87E80700 		stm	r7, {r0, r1, r2}
 2153              	.LBB197:
 2154              	.LBI197:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2155              		.loc 2 252 28 discriminator 1 view .LVU550
 2156              	.LBB198:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 2157              		.loc 2 253 5 discriminator 1 view .LVU551
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2158              		.loc 2 254 5 discriminator 1 view .LVU552
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2159              		.loc 2 254 36 is_stmt 0 discriminator 1 view .LVU553
 2160 025e 3968     		ldr	r1, [r7]	@ float
 2161 0260 3068     		ldr	r0, [r6]	@ float
 2162 0262 FFF7FEFF 		bl	__aeabi_fmul
 2163              	.LVL249:
 2164 0266 8046     		mov	r8, r0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2165              		.loc 2 254 19 discriminator 1 view .LVU554
 2166 0268 1BAD     		add	r5, sp, #108
 2167 026a 1B90     		str	r0, [sp, #108]	@ float
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2168              		.loc 2 255 5 is_stmt 1 discriminator 1 view .LVU555
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2169              		.loc 2 255 36 is_stmt 0 discriminator 1 view .LVU556
 2170 026c 7968     		ldr	r1, [r7, #4]	@ float
 2171 026e 7068     		ldr	r0, [r6, #4]	@ float
 2172 0270 FFF7FEFF 		bl	__aeabi_fmul
 2173              	.LVL250:
 2174 0274 8146     		mov	r9, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2175              		.loc 2 255 19 discriminator 1 view .LVU557
 2176 0276 1C90     		str	r0, [sp, #112]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2177              		.loc 2 256 5 is_stmt 1 discriminator 1 view .LVU558
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2178              		.loc 2 256 36 is_stmt 0 discriminator 1 view .LVU559
 2179 0278 B968     		ldr	r1, [r7, #8]	@ float
 2180 027a B068     		ldr	r0, [r6, #8]	@ float
 2181 027c FFF7FEFF 		bl	__aeabi_fmul
 2182              	.LVL251:
 2183 0280 0646     		mov	r6, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2184              		.loc 2 256 19 discriminator 1 view .LVU560
 2185 0282 1D90     		str	r0, [sp, #116]	@ float
 257:Core/Inc/Fusion/FusionMath.h **** }
 2186              		.loc 2 257 5 is_stmt 1 discriminator 1 view .LVU561
 257:Core/Inc/Fusion/FusionMath.h **** }
 2187              		.loc 2 257 12 is_stmt 0 discriminator 1 view .LVU562
 2188 0284 4EAB     		add	r3, sp, #312
 2189 0286 95E80700 		ldm	r5, {r0, r1, r2}
 2190 028a 83E80700 		stm	r3, {r0, r1, r2}
 2191              	.LBE198:
 2192              	.LBE197:
 2193              	.LBB199:
ARM GAS  /tmp/cc8mw5hc.s 			page 56


 2194              	.LBI199:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 2195              		.loc 2 228 21 is_stmt 1 discriminator 1 view .LVU563
 2196              	.LBB200:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2197              		.loc 2 229 5 discriminator 1 view .LVU564
 229:Core/Inc/Fusion/FusionMath.h **** }
 2198              		.loc 2 229 26 is_stmt 0 discriminator 1 view .LVU565
 2199 028e 4946     		mov	r1, r9
 2200 0290 4046     		mov	r0, r8
 2201 0292 FFF7FEFF 		bl	__aeabi_fadd
 2202              	.LVL252:
 2203 0296 0146     		mov	r1, r0
 229:Core/Inc/Fusion/FusionMath.h **** }
 2204              		.loc 2 229 42 discriminator 1 view .LVU566
 2205 0298 3046     		mov	r0, r6
 2206 029a FFF7FEFF 		bl	__aeabi_fadd
 2207              	.LVL253:
 2208 029e 0146     		mov	r1, r0
 2209              	.LBE200:
 2210              	.LBE199:
 2211              	.LBE196:
 2212              	.LBE195:
 141:Core/Src/Fusion/FusionAhrs.c ****             halfAccelerometerFeedback = ahrs->halfAccelerometerFeedback;
 2213              		.loc 1 141 42 discriminator 1 view .LVU567
 2214 02a0 6068     		ldr	r0, [r4, #4]	@ float
 2215 02a2 FFF7FEFF 		bl	__aeabi_fcmpge
 2216              	.LVL254:
 2217 02a6 0028     		cmp	r0, #0
 2218 02a8 4AD0     		beq	.L82
 2219              	.L53:
 142:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 2220              		.loc 1 142 13 is_stmt 1 view .LVU568
 142:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerometerIgnored = false;
 2221              		.loc 1 142 39 is_stmt 0 view .LVU569
 2222 02aa 28AB     		add	r3, sp, #160
 2223 02ac 04F13802 		add	r2, r4, #56
 2224 02b0 07CA     		ldm	r2, {r0, r1, r2}
 2225 02b2 83E80700 		stm	r3, {r0, r1, r2}
 143:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 2226              		.loc 1 143 13 is_stmt 1 view .LVU570
 143:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
 2227              		.loc 1 143 40 is_stmt 0 view .LVU571
 2228 02b6 0023     		movs	r3, #0
 2229 02b8 84F85030 		strb	r3, [r4, #80]
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2230              		.loc 1 144 13 is_stmt 1 view .LVU572
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2231              		.loc 1 144 46 is_stmt 0 view .LVU573
 2232 02bc 636D     		ldr	r3, [r4, #84]
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2233              		.loc 1 144 93 view .LVU574
 2234 02be 092B     		cmp	r3, #9
 2235 02c0 3CD9     		bls	.L70
 2236 02c2 0A22     		movs	r2, #10
 2237              	.L56:
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
ARM GAS  /tmp/cc8mw5hc.s 			page 57


 2238              		.loc 1 144 46 discriminator 4 view .LVU575
 2239 02c4 9B1A     		subs	r3, r3, r2
 2240 02c6 6365     		str	r3, [r4, #84]
 2241              	.L51:
 151:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 2242              		.loc 1 151 5 is_stmt 1 view .LVU576
 151:Core/Src/Fusion/FusionAhrs.c ****     ahrs->magnetometerIgnored = true;
 2243              		.loc 1 151 18 is_stmt 0 view .LVU577
 2244 02c8 0025     		movs	r5, #0
 2245 02ca 2595     		str	r5, [sp, #148]	@ float
 2246 02cc 2695     		str	r5, [sp, #152]	@ float
 2247 02ce 2795     		str	r5, [sp, #156]	@ float
 152:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 2248              		.loc 1 152 5 is_stmt 1 view .LVU578
 152:Core/Src/Fusion/FusionAhrs.c ****     if (FusionVectorIsZero(magnetometer) == false) {
 2249              		.loc 1 152 31 is_stmt 0 view .LVU579
 2250 02d0 0123     		movs	r3, #1
 2251 02d2 84F85930 		strb	r3, [r4, #89]
 153:Core/Src/Fusion/FusionAhrs.c **** 
 2252              		.loc 1 153 5 is_stmt 1 view .LVU580
 2253 02d6 1BAB     		add	r3, sp, #108
 2254 02d8 6BAA     		add	r2, sp, #428
 2255 02da 07CA     		ldm	r2, {r0, r1, r2}
 2256 02dc 83E80700 		stm	r3, {r0, r1, r2}
 2257              	.LBB201:
 2258              	.LBI201:
 191:Core/Inc/Fusion/FusionMath.h ****     return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
 2259              		.loc 2 191 20 view .LVU581
 2260              	.LBB202:
 192:Core/Inc/Fusion/FusionMath.h **** }
 2261              		.loc 2 192 5 view .LVU582
 192:Core/Inc/Fusion/FusionMath.h **** }
 2262              		.loc 2 192 63 is_stmt 0 view .LVU583
 2263 02e0 2946     		mov	r1, r5
 2264 02e2 1868     		ldr	r0, [r3]	@ float
 2265 02e4 FFF7FEFF 		bl	__aeabi_fcmpeq
 2266              	.LVL255:
 2267 02e8 0028     		cmp	r0, #0
 2268 02ea 33D0     		beq	.L83
 192:Core/Inc/Fusion/FusionMath.h **** }
 2269              		.loc 2 192 36 view .LVU584
 2270 02ec 2946     		mov	r1, r5
 2271 02ee 1C98     		ldr	r0, [sp, #112]	@ float
 2272 02f0 FFF7FEFF 		bl	__aeabi_fcmpeq
 2273              	.LVL256:
 2274 02f4 0028     		cmp	r0, #0
 2275 02f6 00F02A83 		beq	.L84
 192:Core/Inc/Fusion/FusionMath.h **** }
 2276              		.loc 2 192 63 view .LVU585
 2277 02fa 2946     		mov	r1, r5
 2278 02fc 1D98     		ldr	r0, [sp, #116]	@ float
 2279 02fe FFF7FEFF 		bl	__aeabi_fcmpeq
 2280              	.LVL257:
 2281 0302 0028     		cmp	r0, #0
 2282 0304 40F02583 		bne	.L73
 2283 0308 0023     		movs	r3, #0
 2284 030a 24E0     		b	.L57
ARM GAS  /tmp/cc8mw5hc.s 			page 58


 2285              	.L81:
 192:Core/Inc/Fusion/FusionMath.h **** }
 2286              		.loc 2 192 63 view .LVU586
 2287              	.LBE202:
 2288              	.LBE201:
 2289              	.LBB205:
 2290              	.LBB180:
 2291 030c 0023     		movs	r3, #0
 2292 030e F1E6     		b	.L48
 2293              	.L69:
 2294 0310 0123     		movs	r3, #1
 2295 0312 EFE6     		b	.L48
 2296              	.L87:
 192:Core/Inc/Fusion/FusionMath.h **** }
 2297              		.loc 2 192 63 view .LVU587
 2298              	.LBE180:
 2299              	.LBE205:
 2300              	.LBB206:
 130:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsReset(ahrs);
 2301              		.loc 1 130 13 is_stmt 1 view .LVU588
 130:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsReset(ahrs);
 2302              		.loc 1 130 36 is_stmt 0 view .LVU589
 2303 0314 1BAE     		add	r6, sp, #108
 2304 0316 04F11005 		add	r5, r4, #16
 2305 031a 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2306 031e 86E80F00 		stm	r6, {r0, r1, r2, r3}
 131:Core/Src/Fusion/FusionAhrs.c ****             ahrs->quaternion = quaternion;
 2307              		.loc 1 131 13 is_stmt 1 view .LVU590
 2308 0322 2046     		mov	r0, r4
 2309 0324 FFF7FEFF 		bl	FusionAhrsReset
 2310              	.LVL258:
 132:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer = 0;
 2311              		.loc 1 132 13 view .LVU591
 132:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimer = 0;
 2312              		.loc 1 132 30 is_stmt 0 view .LVU592
 2313 0328 96E80F00 		ldm	r6, {r0, r1, r2, r3}
 2314 032c 85E80F00 		stm	r5, {r0, r1, r2, r3}
 133:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = true;
 2315              		.loc 1 133 13 is_stmt 1 view .LVU593
 133:Core/Src/Fusion/FusionAhrs.c ****             ahrs->accelerationRejectionTimeout = true;
 2316              		.loc 1 133 46 is_stmt 0 view .LVU594
 2317 0330 0023     		movs	r3, #0
 2318 0332 6365     		str	r3, [r4, #84]
 134:Core/Src/Fusion/FusionAhrs.c ****         }
 2319              		.loc 1 134 13 is_stmt 1 view .LVU595
 134:Core/Src/Fusion/FusionAhrs.c ****         }
 2320              		.loc 1 134 48 is_stmt 0 view .LVU596
 2321 0334 0123     		movs	r3, #1
 2322 0336 84F85830 		strb	r3, [r4, #88]
 2323 033a E3E6     		b	.L52
 2324              	.L70:
 134:Core/Src/Fusion/FusionAhrs.c ****         }
 2325              		.loc 1 134 48 view .LVU597
 2326              	.LBE206:
 144:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2327              		.loc 1 144 93 view .LVU598
 2328 033c 0022     		movs	r2, #0
ARM GAS  /tmp/cc8mw5hc.s 			page 59


 2329 033e C1E7     		b	.L56
 2330              	.L82:
 146:Core/Src/Fusion/FusionAhrs.c ****         }
 2331              		.loc 1 146 13 is_stmt 1 view .LVU599
 146:Core/Src/Fusion/FusionAhrs.c ****         }
 2332              		.loc 1 146 17 is_stmt 0 view .LVU600
 2333 0340 636D     		ldr	r3, [r4, #84]
 146:Core/Src/Fusion/FusionAhrs.c ****         }
 2334              		.loc 1 146 45 view .LVU601
 2335 0342 0133     		adds	r3, r3, #1
 2336 0344 6365     		str	r3, [r4, #84]
 2337 0346 BFE7     		b	.L51
 2338              	.L90:
 2339              		.align	2
 2340              	.L89:
 2341 0348 12141F5F 		.word	1595872274
 2342 034c 12D3363F 		.word	1060557586
 2343 0350 FF51D83F 		.word	1071141375
 2344              	.L83:
 2345              	.LBB207:
 2346              	.LBB203:
 192:Core/Inc/Fusion/FusionMath.h **** }
 2347              		.loc 2 192 63 view .LVU602
 2348 0354 0023     		movs	r3, #0
 2349              	.L57:
 2350              	.LBE203:
 2351              	.LBE207:
 153:Core/Src/Fusion/FusionAhrs.c **** 
 2352              		.loc 1 153 8 view .LVU603
 2353 0356 002B     		cmp	r3, #0
 2354 0358 40F06181 		bne	.L60
 2355              	.LBB208:
 156:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 2356              		.loc 1 156 9 is_stmt 1 view .LVU604
 156:Core/Src/Fusion/FusionAhrs.c ****         if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
 2357              		.loc 1 156 40 is_stmt 0 view .LVU605
 2358 035c 84F86030 		strb	r3, [r4, #96]
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 2359              		.loc 1 157 9 is_stmt 1 view .LVU606
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 2360              		.loc 1 157 17 is_stmt 0 view .LVU607
 2361 0360 E26D     		ldr	r2, [r4, #92]
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 2362              		.loc 1 157 58 view .LVU608
 2363 0362 E368     		ldr	r3, [r4, #12]
 157:Core/Src/Fusion/FusionAhrs.c ****             FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
 2364              		.loc 1 157 12 view .LVU609
 2365 0364 9A42     		cmp	r2, r3
 2366 0366 00F2F682 		bhi	.L88
 2367              	.L61:
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 2368              		.loc 1 164 9 is_stmt 1 view .LVU610
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2369              		.loc 1 165 28 is_stmt 0 view .LVU611
 2370 036a 6769     		ldr	r7, [r4, #20]	@ float
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2371              		.loc 1 165 34 view .LVU612
ARM GAS  /tmp/cc8mw5hc.s 			page 60


 2372 036c A669     		ldr	r6, [r4, #24]	@ float
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2373              		.loc 1 165 31 view .LVU613
 2374 036e 3146     		mov	r1, r6
 2375 0370 3846     		mov	r0, r7
 2376 0372 FFF7FEFF 		bl	__aeabi_fmul
 2377              	.LVL259:
 2378 0376 8046     		mov	r8, r0
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2379              		.loc 1 165 40 view .LVU614
 2380 0378 2569     		ldr	r5, [r4, #16]	@ float
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2381              		.loc 1 165 46 view .LVU615
 2382 037a D4F81CA0 		ldr	r10, [r4, #28]	@ float
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2383              		.loc 1 165 43 view .LVU616
 2384 037e 5146     		mov	r1, r10
 2385 0380 2846     		mov	r0, r5
 2386 0382 FFF7FEFF 		bl	__aeabi_fmul
 2387              	.LVL260:
 2388 0386 0146     		mov	r1, r0
 165:Core/Src/Fusion/FusionAhrs.c ****                 .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
 2389              		.loc 1 165 37 view .LVU617
 2390 0388 4046     		mov	r0, r8
 2391 038a FFF7FEFF 		bl	__aeabi_fadd
 2392              	.LVL261:
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 2393              		.loc 1 164 28 view .LVU618
 2394 038e 0DF12809 		add	r9, sp, #40
 2395 0392 0A90     		str	r0, [sp, #40]	@ float
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 2396              		.loc 1 166 31 view .LVU619
 2397 0394 2946     		mov	r1, r5
 2398 0396 2846     		mov	r0, r5
 2399 0398 FFF7FEFF 		bl	__aeabi_fmul
 2400              	.LVL262:
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 2401              		.loc 1 166 37 view .LVU620
 2402 039c 4FF07C51 		mov	r1, #1056964608
 2403 03a0 FFF7FEFF 		bl	__aeabi_fsub
 2404              	.LVL263:
 2405 03a4 8046     		mov	r8, r0
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 2406              		.loc 1 166 50 view .LVU621
 2407 03a6 3146     		mov	r1, r6
 2408 03a8 3046     		mov	r0, r6
 2409 03aa FFF7FEFF 		bl	__aeabi_fmul
 2410              	.LVL264:
 2411 03ae 0146     		mov	r1, r0
 166:Core/Src/Fusion/FusionAhrs.c ****                 .axis.z = Q.y * Q.z - Q.w * Q.x
 2412              		.loc 1 166 44 view .LVU622
 2413 03b0 4046     		mov	r0, r8
 2414 03b2 FFF7FEFF 		bl	__aeabi_fadd
 2415              	.LVL265:
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 2416              		.loc 1 164 28 view .LVU623
 2417 03b6 0B90     		str	r0, [sp, #44]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 61


 167:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 2418              		.loc 1 167 31 view .LVU624
 2419 03b8 5146     		mov	r1, r10
 2420 03ba 3046     		mov	r0, r6
 2421 03bc FFF7FEFF 		bl	__aeabi_fmul
 2422              	.LVL266:
 2423 03c0 0646     		mov	r6, r0
 167:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 2424              		.loc 1 167 43 view .LVU625
 2425 03c2 2946     		mov	r1, r5
 2426 03c4 3846     		mov	r0, r7
 2427 03c6 FFF7FEFF 		bl	__aeabi_fmul
 2428              	.LVL267:
 2429 03ca 0146     		mov	r1, r0
 167:Core/Src/Fusion/FusionAhrs.c ****         }; // second column of transposed rotation matrix scaled by 0.5
 2430              		.loc 1 167 37 view .LVU626
 2431 03cc 3046     		mov	r0, r6
 2432 03ce FFF7FEFF 		bl	__aeabi_fsub
 2433              	.LVL268:
 164:Core/Src/Fusion/FusionAhrs.c ****                 .axis.x = Q.x * Q.y + Q.w * Q.z,
 2434              		.loc 1 164 28 view .LVU627
 2435 03d2 0C90     		str	r0, [sp, #48]	@ float
 171:Core/Src/Fusion/FusionAhrs.c **** 
 2436              		.loc 1 171 9 is_stmt 1 view .LVU628
 2437 03d4 13AF     		add	r7, sp, #76
 2438 03d6 2BAB     		add	r3, sp, #172
 2439 03d8 93E80700 		ldm	r3, {r0, r1, r2}
 2440 03dc 87E80700 		stm	r7, {r0, r1, r2}
 2441 03e0 17AE     		add	r6, sp, #92
 2442 03e2 6BAB     		add	r3, sp, #428
 2443 03e4 93E80700 		ldm	r3, {r0, r1, r2}
 2444 03e8 86E80700 		stm	r6, {r0, r1, r2}
 2445              	.LBB209:
 2446              	.LBI209:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 2447              		.loc 2 266 28 view .LVU629
 2448              	.LBB210:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 2449              		.loc 2 269 5 view .LVU630
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2450              		.loc 2 270 5 view .LVU631
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2451              		.loc 2 270 22 is_stmt 0 view .LVU632
 2452 03ec 7B68     		ldr	r3, [r7, #4]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2453              		.loc 2 270 28 view .LVU633
 2454 03ee D6F808B0 		ldr	fp, [r6, #8]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2455              		.loc 2 270 25 view .LVU634
 2456 03f2 5946     		mov	r1, fp
 2457 03f4 0393     		str	r3, [sp, #12]	@ float
 2458 03f6 1846     		mov	r0, r3
 2459 03f8 FFF7FEFF 		bl	__aeabi_fmul
 2460              	.LVL269:
 2461 03fc 0546     		mov	r5, r0
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2462              		.loc 2 270 34 view .LVU635
ARM GAS  /tmp/cc8mw5hc.s 			page 62


 2463 03fe D7F808A0 		ldr	r10, [r7, #8]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2464              		.loc 2 270 40 view .LVU636
 2465 0402 7268     		ldr	r2, [r6, #4]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2466              		.loc 2 270 37 view .LVU637
 2467 0404 0492     		str	r2, [sp, #16]	@ float
 2468 0406 1146     		mov	r1, r2
 2469 0408 5046     		mov	r0, r10
 2470 040a FFF7FEFF 		bl	__aeabi_fmul
 2471              	.LVL270:
 2472 040e 0146     		mov	r1, r0
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2473              		.loc 2 270 31 view .LVU638
 2474 0410 2846     		mov	r0, r5
 2475 0412 FFF7FEFF 		bl	__aeabi_fsub
 2476              	.LVL271:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2477              		.loc 2 270 19 view .LVU639
 2478 0416 1BAD     		add	r5, sp, #108
 2479 0418 2860     		str	r0, [r5]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2480              		.loc 2 271 5 is_stmt 1 view .LVU640
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2481              		.loc 2 271 28 is_stmt 0 view .LVU641
 2482 041a D6F80080 		ldr	r8, [r6]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2483              		.loc 2 271 25 view .LVU642
 2484 041e 4146     		mov	r1, r8
 2485 0420 5046     		mov	r0, r10
 2486 0422 FFF7FEFF 		bl	__aeabi_fmul
 2487              	.LVL272:
 2488 0426 0590     		str	r0, [sp, #20]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2489              		.loc 2 271 34 view .LVU643
 2490 0428 D7F800A0 		ldr	r10, [r7]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2491              		.loc 2 271 37 view .LVU644
 2492 042c 5146     		mov	r1, r10
 2493 042e 5846     		mov	r0, fp
 2494 0430 FFF7FEFF 		bl	__aeabi_fmul
 2495              	.LVL273:
 2496 0434 0146     		mov	r1, r0
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2497              		.loc 2 271 31 view .LVU645
 2498 0436 0598     		ldr	r0, [sp, #20]	@ float
 2499 0438 FFF7FEFF 		bl	__aeabi_fsub
 2500              	.LVL274:
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2501              		.loc 2 271 19 view .LVU646
 2502 043c 6860     		str	r0, [r5, #4]	@ float
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2503              		.loc 2 272 5 is_stmt 1 view .LVU647
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2504              		.loc 2 272 25 is_stmt 0 view .LVU648
 2505 043e 5146     		mov	r1, r10
 2506 0440 0498     		ldr	r0, [sp, #16]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 63


 2507 0442 FFF7FEFF 		bl	__aeabi_fmul
 2508              	.LVL275:
 2509 0446 8246     		mov	r10, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2510              		.loc 2 272 37 view .LVU649
 2511 0448 4146     		mov	r1, r8
 2512 044a 0398     		ldr	r0, [sp, #12]	@ float
 2513 044c FFF7FEFF 		bl	__aeabi_fmul
 2514              	.LVL276:
 2515 0450 0146     		mov	r1, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2516              		.loc 2 272 31 view .LVU650
 2517 0452 5046     		mov	r0, r10
 2518 0454 FFF7FEFF 		bl	__aeabi_fsub
 2519              	.LVL277:
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2520              		.loc 2 272 19 view .LVU651
 2521 0458 A860     		str	r0, [r5, #8]	@ float
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2522              		.loc 2 273 5 is_stmt 1 view .LVU652
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2523              		.loc 2 273 12 is_stmt 0 view .LVU653
 2524 045a 31AB     		add	r3, sp, #196
 2525 045c 95E80700 		ldm	r5, {r0, r1, r2}
 2526 0460 83E80700 		stm	r3, {r0, r1, r2}
 2527 0464 0DF13408 		add	r8, sp, #52
 2528 0468 88E80700 		stm	r8, {r0, r1, r2}
 2529              	.LBE210:
 2530              	.LBE209:
 2531              	.LBB211:
 2532              	.LBI211:
 301:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 2533              		.loc 2 301 28 is_stmt 1 view .LVU654
 2534              	.LBB212:
 305:Core/Inc/Fusion/FusionMath.h **** #endif
 2535              		.loc 2 305 5 view .LVU655
 2536 046c 10AB     		add	r3, sp, #64
 2537 046e 83E80700 		stm	r3, {r0, r1, r2}
 2538              	.LBB213:
 2539              	.LBI213:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 2540              		.loc 2 283 21 view .LVU656
 2541              	.LBB214:
 284:Core/Inc/Fusion/FusionMath.h **** }
 2542              		.loc 2 284 5 view .LVU657
 2543 0472 86E80700 		stm	r6, {r0, r1, r2}
 2544 0476 87E80700 		stm	r7, {r0, r1, r2}
 2545              	.LBB215:
 2546              	.LBI215:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2547              		.loc 2 252 28 view .LVU658
 2548              	.LBB216:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 2549              		.loc 2 253 5 view .LVU659
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2550              		.loc 2 254 5 view .LVU660
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
ARM GAS  /tmp/cc8mw5hc.s 			page 64


 2551              		.loc 2 254 36 is_stmt 0 view .LVU661
 2552 047a 3968     		ldr	r1, [r7]	@ float
 2553 047c 3068     		ldr	r0, [r6]	@ float
 2554 047e FFF7FEFF 		bl	__aeabi_fmul
 2555              	.LVL278:
 2556 0482 8246     		mov	r10, r0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2557              		.loc 2 254 19 view .LVU662
 2558 0484 2860     		str	r0, [r5]	@ float
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2559              		.loc 2 255 5 is_stmt 1 view .LVU663
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2560              		.loc 2 255 36 is_stmt 0 view .LVU664
 2561 0486 7968     		ldr	r1, [r7, #4]	@ float
 2562 0488 7068     		ldr	r0, [r6, #4]	@ float
 2563 048a FFF7FEFF 		bl	__aeabi_fmul
 2564              	.LVL279:
 2565 048e 8346     		mov	fp, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2566              		.loc 2 255 19 view .LVU665
 2567 0490 6860     		str	r0, [r5, #4]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2568              		.loc 2 256 5 is_stmt 1 view .LVU666
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2569              		.loc 2 256 36 is_stmt 0 view .LVU667
 2570 0492 B968     		ldr	r1, [r7, #8]	@ float
 2571 0494 B068     		ldr	r0, [r6, #8]	@ float
 2572 0496 FFF7FEFF 		bl	__aeabi_fmul
 2573              	.LVL280:
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2574              		.loc 2 256 19 view .LVU668
 2575 049a 0390     		str	r0, [sp, #12]	@ float
 2576 049c A860     		str	r0, [r5, #8]	@ float
 257:Core/Inc/Fusion/FusionMath.h **** }
 2577              		.loc 2 257 5 is_stmt 1 view .LVU669
 257:Core/Inc/Fusion/FusionMath.h **** }
 2578              		.loc 2 257 12 is_stmt 0 view .LVU670
 2579 049e 54AB     		add	r3, sp, #336
 2580 04a0 95E80700 		ldm	r5, {r0, r1, r2}
 2581 04a4 83E80700 		stm	r3, {r0, r1, r2}
 2582              	.LBE216:
 2583              	.LBE215:
 2584              	.LBB217:
 2585              	.LBI217:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 2586              		.loc 2 228 21 is_stmt 1 view .LVU671
 2587              	.LBB218:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2588              		.loc 2 229 5 view .LVU672
 229:Core/Inc/Fusion/FusionMath.h **** }
 2589              		.loc 2 229 26 is_stmt 0 view .LVU673
 2590 04a8 5946     		mov	r1, fp
 2591 04aa 5046     		mov	r0, r10
 2592 04ac FFF7FEFF 		bl	__aeabi_fadd
 2593              	.LVL281:
 2594 04b0 0146     		mov	r1, r0
 229:Core/Inc/Fusion/FusionMath.h **** }
ARM GAS  /tmp/cc8mw5hc.s 			page 65


 2595              		.loc 2 229 42 view .LVU674
 2596 04b2 0398     		ldr	r0, [sp, #12]	@ float
 2597 04b4 FFF7FEFF 		bl	__aeabi_fadd
 2598              	.LVL282:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2599              		.loc 2 229 42 view .LVU675
 2600              	.LBE218:
 2601              	.LBE217:
 2602              	.LBE214:
 2603              	.LBE213:
 2604              	.LBB219:
 2605              	.LBI219:
 169:Core/Inc/Fusion/FusionMath.h **** 
 2606              		.loc 2 169 21 is_stmt 1 view .LVU676
 2607              	.LBB220:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 2608              		.loc 2 171 5 view .LVU677
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 2609              		.loc 2 176 5 view .LVU678
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 2610              		.loc 2 177 5 view .LVU679
 178:Core/Inc/Fusion/FusionMath.h **** }
 2611              		.loc 2 178 5 view .LVU680
 2612 04b8 B14B     		ldr	r3, .L91
 2613 04ba A3EB600A 		sub	r10, r3, r0, asr #1
 178:Core/Inc/Fusion/FusionMath.h **** }
 2614              		.loc 2 178 52 is_stmt 0 view .LVU681
 2615 04be B149     		ldr	r1, .L91+4
 2616 04c0 FFF7FEFF 		bl	__aeabi_fmul
 2617              	.LVL283:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2618              		.loc 2 178 52 view .LVU682
 2619 04c4 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 2620              		.loc 2 178 56 view .LVU683
 2621 04c6 5046     		mov	r0, r10
 2622 04c8 FFF7FEFF 		bl	__aeabi_fmul
 2623              	.LVL284:
 2624 04cc 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 2625              		.loc 2 178 68 view .LVU684
 2626 04ce 5046     		mov	r0, r10
 2627 04d0 FFF7FEFF 		bl	__aeabi_fmul
 2628              	.LVL285:
 2629 04d4 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 2630              		.loc 2 178 37 view .LVU685
 2631 04d6 AC48     		ldr	r0, .L91+8
 2632 04d8 FFF7FEFF 		bl	__aeabi_fsub
 2633              	.LVL286:
 2634 04dc 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 2635              		.loc 2 178 22 view .LVU686
 2636 04de 5046     		mov	r0, r10
 2637 04e0 FFF7FEFF 		bl	__aeabi_fmul
 2638              	.LVL287:
 2639 04e4 8246     		mov	r10, r0
ARM GAS  /tmp/cc8mw5hc.s 			page 66


 2640              	.LVL288:
 178:Core/Inc/Fusion/FusionMath.h **** }
 2641              		.loc 2 178 22 view .LVU687
 2642              	.LBE220:
 2643              	.LBE219:
 307:Core/Inc/Fusion/FusionMath.h **** }
 2644              		.loc 2 307 5 is_stmt 1 view .LVU688
 2645              	.LBB221:
 2646              	.LBI221:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2647              		.loc 2 238 28 view .LVU689
 2648              	.LBB222:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2649              		.loc 2 239 5 view .LVU690
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2650              		.loc 2 240 5 view .LVU691
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2651              		.loc 2 240 35 is_stmt 0 view .LVU692
 2652 04e6 3168     		ldr	r1, [r6]	@ float
 2653 04e8 FFF7FEFF 		bl	__aeabi_fmul
 2654              	.LVL289:
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2655              		.loc 2 240 19 view .LVU693
 2656 04ec 2860     		str	r0, [r5]	@ float
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2657              		.loc 2 241 5 is_stmt 1 view .LVU694
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2658              		.loc 2 241 35 is_stmt 0 view .LVU695
 2659 04ee 7168     		ldr	r1, [r6, #4]	@ float
 2660 04f0 5046     		mov	r0, r10
 2661 04f2 FFF7FEFF 		bl	__aeabi_fmul
 2662              	.LVL290:
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2663              		.loc 2 241 19 view .LVU696
 2664 04f6 6860     		str	r0, [r5, #4]	@ float
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2665              		.loc 2 242 5 is_stmt 1 view .LVU697
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2666              		.loc 2 242 35 is_stmt 0 view .LVU698
 2667 04f8 B168     		ldr	r1, [r6, #8]	@ float
 2668 04fa 5046     		mov	r0, r10
 2669 04fc FFF7FEFF 		bl	__aeabi_fmul
 2670              	.LVL291:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2671              		.loc 2 242 19 view .LVU699
 2672 0500 A860     		str	r0, [r5, #8]	@ float
 243:Core/Inc/Fusion/FusionMath.h **** }
 2673              		.loc 2 243 5 is_stmt 1 view .LVU700
 243:Core/Inc/Fusion/FusionMath.h **** }
 2674              		.loc 2 243 12 is_stmt 0 view .LVU701
 2675 0502 34AB     		add	r3, sp, #208
 2676 0504 95E80700 		ldm	r5, {r0, r1, r2}
 2677 0508 83E80700 		stm	r3, {r0, r1, r2}
 2678              	.LVL292:
 243:Core/Inc/Fusion/FusionMath.h **** }
 2679              		.loc 2 243 12 view .LVU702
 2680 050c 87E80700 		stm	r7, {r0, r1, r2}
ARM GAS  /tmp/cc8mw5hc.s 			page 67


 2681 0510 99E80700 		ldm	r9, {r0, r1, r2}
 2682 0514 86E80700 		stm	r6, {r0, r1, r2}
 2683              	.LBE222:
 2684              	.LBE221:
 2685              	.LBE212:
 2686              	.LBE211:
 2687              	.LBB223:
 2688              	.LBI223:
 266:Core/Inc/Fusion/FusionMath.h **** #define A vectorA.axis
 2689              		.loc 2 266 28 is_stmt 1 view .LVU703
 2690              	.LBB224:
 269:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = A.y * B.z - A.z * B.y;
 2691              		.loc 2 269 5 view .LVU704
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2692              		.loc 2 270 5 view .LVU705
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2693              		.loc 2 270 22 is_stmt 0 view .LVU706
 2694 0518 D7F80480 		ldr	r8, [r7, #4]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2695              		.loc 2 270 28 view .LVU707
 2696 051c D6F808A0 		ldr	r10, [r6, #8]	@ float
 2697              	.LVL293:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2698              		.loc 2 270 25 view .LVU708
 2699 0520 5146     		mov	r1, r10
 2700 0522 4046     		mov	r0, r8
 2701 0524 FFF7FEFF 		bl	__aeabi_fmul
 2702              	.LVL294:
 2703 0528 0390     		str	r0, [sp, #12]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2704              		.loc 2 270 34 view .LVU709
 2705 052a D7F808B0 		ldr	fp, [r7, #8]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2706              		.loc 2 270 40 view .LVU710
 2707 052e D6F80490 		ldr	r9, [r6, #4]	@ float
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2708              		.loc 2 270 37 view .LVU711
 2709 0532 4946     		mov	r1, r9
 2710 0534 5846     		mov	r0, fp
 2711 0536 FFF7FEFF 		bl	__aeabi_fmul
 2712              	.LVL295:
 2713 053a 0146     		mov	r1, r0
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2714              		.loc 2 270 31 view .LVU712
 2715 053c 0398     		ldr	r0, [sp, #12]	@ float
 2716 053e FFF7FEFF 		bl	__aeabi_fsub
 2717              	.LVL296:
 270:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = A.z * B.x - A.x * B.z;
 2718              		.loc 2 270 19 view .LVU713
 2719 0542 2860     		str	r0, [r5]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2720              		.loc 2 271 5 is_stmt 1 view .LVU714
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2721              		.loc 2 271 28 is_stmt 0 view .LVU715
 2722 0544 3668     		ldr	r6, [r6]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2723              		.loc 2 271 25 view .LVU716
ARM GAS  /tmp/cc8mw5hc.s 			page 68


 2724 0546 3146     		mov	r1, r6
 2725 0548 5846     		mov	r0, fp
 2726 054a FFF7FEFF 		bl	__aeabi_fmul
 2727              	.LVL297:
 2728 054e 8346     		mov	fp, r0
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2729              		.loc 2 271 34 view .LVU717
 2730 0550 3F68     		ldr	r7, [r7]	@ float
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2731              		.loc 2 271 37 view .LVU718
 2732 0552 3946     		mov	r1, r7
 2733 0554 5046     		mov	r0, r10
 2734 0556 FFF7FEFF 		bl	__aeabi_fmul
 2735              	.LVL298:
 2736 055a 0146     		mov	r1, r0
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2737              		.loc 2 271 31 view .LVU719
 2738 055c 5846     		mov	r0, fp
 2739 055e FFF7FEFF 		bl	__aeabi_fsub
 2740              	.LVL299:
 271:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = A.x * B.y - A.y * B.x;
 2741              		.loc 2 271 19 view .LVU720
 2742 0562 6860     		str	r0, [r5, #4]	@ float
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2743              		.loc 2 272 5 is_stmt 1 view .LVU721
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2744              		.loc 2 272 25 is_stmt 0 view .LVU722
 2745 0564 3946     		mov	r1, r7
 2746 0566 4846     		mov	r0, r9
 2747 0568 FFF7FEFF 		bl	__aeabi_fmul
 2748              	.LVL300:
 2749 056c 0746     		mov	r7, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2750              		.loc 2 272 37 view .LVU723
 2751 056e 3146     		mov	r1, r6
 2752 0570 4046     		mov	r0, r8
 2753 0572 FFF7FEFF 		bl	__aeabi_fmul
 2754              	.LVL301:
 2755 0576 0146     		mov	r1, r0
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2756              		.loc 2 272 31 view .LVU724
 2757 0578 3846     		mov	r0, r7
 2758 057a FFF7FEFF 		bl	__aeabi_fsub
 2759              	.LVL302:
 272:Core/Inc/Fusion/FusionMath.h ****     return result;
 2760              		.loc 2 272 19 view .LVU725
 2761 057e A860     		str	r0, [r5, #8]	@ float
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2762              		.loc 2 273 5 is_stmt 1 view .LVU726
 273:Core/Inc/Fusion/FusionMath.h **** #undef A
 2763              		.loc 2 273 12 is_stmt 0 view .LVU727
 2764 0580 51AB     		add	r3, sp, #324
 2765 0582 95E80700 		ldm	r5, {r0, r1, r2}
 2766 0586 83E80700 		stm	r3, {r0, r1, r2}
 2767              	.LBE224:
 2768              	.LBE223:
 171:Core/Src/Fusion/FusionAhrs.c **** 
ARM GAS  /tmp/cc8mw5hc.s 			page 69


 2769              		.loc 1 171 42 view .LVU728
 2770 058a 04F14405 		add	r5, r4, #68
 2771 058e 85E80700 		stm	r5, {r0, r1, r2}
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2772              		.loc 1 174 9 is_stmt 1 view .LVU729
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2773              		.loc 1 174 18 is_stmt 0 view .LVU730
 2774 0592 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2775              		.loc 1 174 12 view .LVU731
 2776 0596 002B     		cmp	r3, #0
 2777 0598 31D1     		bne	.L62
 2778 059a 10AB     		add	r3, sp, #64
 2779 059c 95E80700 		ldm	r5, {r0, r1, r2}
 2780 05a0 83E80700 		stm	r3, {r0, r1, r2}
 2781              	.LBB225:
 2782              	.LBI225:
 283:Core/Inc/Fusion/FusionMath.h ****     return FusionVectorSum(FusionVectorHadamardProduct(vector, vector));
 2783              		.loc 2 283 21 is_stmt 1 discriminator 1 view .LVU732
 2784              	.LBB226:
 284:Core/Inc/Fusion/FusionMath.h **** }
 2785              		.loc 2 284 5 discriminator 1 view .LVU733
 2786 05a4 17AE     		add	r6, sp, #92
 2787 05a6 86E80700 		stm	r6, {r0, r1, r2}
 2788 05aa 13AF     		add	r7, sp, #76
 2789 05ac 87E80700 		stm	r7, {r0, r1, r2}
 2790              	.LBB227:
 2791              	.LBI227:
 252:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2792              		.loc 2 252 28 discriminator 1 view .LVU734
 2793              	.LBB228:
 253:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x * vectorB.axis.x;
 2794              		.loc 2 253 5 discriminator 1 view .LVU735
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2795              		.loc 2 254 5 discriminator 1 view .LVU736
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2796              		.loc 2 254 36 is_stmt 0 discriminator 1 view .LVU737
 2797 05b0 3968     		ldr	r1, [r7]	@ float
 2798 05b2 3068     		ldr	r0, [r6]	@ float
 2799 05b4 FFF7FEFF 		bl	__aeabi_fmul
 2800              	.LVL303:
 2801 05b8 8046     		mov	r8, r0
 254:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y * vectorB.axis.y;
 2802              		.loc 2 254 19 discriminator 1 view .LVU738
 2803 05ba 1BAD     		add	r5, sp, #108
 2804 05bc 1B90     		str	r0, [sp, #108]	@ float
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2805              		.loc 2 255 5 is_stmt 1 discriminator 1 view .LVU739
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2806              		.loc 2 255 36 is_stmt 0 discriminator 1 view .LVU740
 2807 05be 7968     		ldr	r1, [r7, #4]	@ float
 2808 05c0 7068     		ldr	r0, [r6, #4]	@ float
 2809 05c2 FFF7FEFF 		bl	__aeabi_fmul
 2810              	.LVL304:
 2811 05c6 8146     		mov	r9, r0
 255:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z * vectorB.axis.z;
 2812              		.loc 2 255 19 discriminator 1 view .LVU741
ARM GAS  /tmp/cc8mw5hc.s 			page 70


 2813 05c8 1C90     		str	r0, [sp, #112]	@ float
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2814              		.loc 2 256 5 is_stmt 1 discriminator 1 view .LVU742
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2815              		.loc 2 256 36 is_stmt 0 discriminator 1 view .LVU743
 2816 05ca B968     		ldr	r1, [r7, #8]	@ float
 2817 05cc B068     		ldr	r0, [r6, #8]	@ float
 2818 05ce FFF7FEFF 		bl	__aeabi_fmul
 2819              	.LVL305:
 2820 05d2 0646     		mov	r6, r0
 256:Core/Inc/Fusion/FusionMath.h ****     return result;
 2821              		.loc 2 256 19 discriminator 1 view .LVU744
 2822 05d4 1D90     		str	r0, [sp, #116]	@ float
 257:Core/Inc/Fusion/FusionMath.h **** }
 2823              		.loc 2 257 5 is_stmt 1 discriminator 1 view .LVU745
 257:Core/Inc/Fusion/FusionMath.h **** }
 2824              		.loc 2 257 12 is_stmt 0 discriminator 1 view .LVU746
 2825 05d6 57AB     		add	r3, sp, #348
 2826 05d8 95E80700 		ldm	r5, {r0, r1, r2}
 2827 05dc 83E80700 		stm	r3, {r0, r1, r2}
 2828              	.LBE228:
 2829              	.LBE227:
 2830              	.LBB229:
 2831              	.LBI229:
 228:Core/Inc/Fusion/FusionMath.h ****     return vector.axis.x + vector.axis.y + vector.axis.z;
 2832              		.loc 2 228 21 is_stmt 1 discriminator 1 view .LVU747
 2833              	.LBB230:
 229:Core/Inc/Fusion/FusionMath.h **** }
 2834              		.loc 2 229 5 discriminator 1 view .LVU748
 229:Core/Inc/Fusion/FusionMath.h **** }
 2835              		.loc 2 229 26 is_stmt 0 discriminator 1 view .LVU749
 2836 05e0 4946     		mov	r1, r9
 2837 05e2 4046     		mov	r0, r8
 2838 05e4 FFF7FEFF 		bl	__aeabi_fadd
 2839              	.LVL306:
 2840 05e8 0146     		mov	r1, r0
 229:Core/Inc/Fusion/FusionMath.h **** }
 2841              		.loc 2 229 42 discriminator 1 view .LVU750
 2842 05ea 3046     		mov	r0, r6
 2843 05ec FFF7FEFF 		bl	__aeabi_fadd
 2844              	.LVL307:
 2845 05f0 0146     		mov	r1, r0
 2846              	.LBE230:
 2847              	.LBE229:
 2848              	.LBE226:
 2849              	.LBE225:
 174:Core/Src/Fusion/FusionAhrs.c ****             halfMagnetometerFeedback = ahrs->halfMagnetometerFeedback;
 2850              		.loc 1 174 42 discriminator 1 view .LVU751
 2851 05f2 A068     		ldr	r0, [r4, #8]	@ float
 2852 05f4 FFF7FEFF 		bl	__aeabi_fcmpge
 2853              	.LVL308:
 2854 05f8 0028     		cmp	r0, #0
 2855 05fa 00F0C281 		beq	.L85
 2856              	.L62:
 175:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
 2857              		.loc 1 175 13 is_stmt 1 view .LVU752
 175:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magnetometerIgnored = false;
ARM GAS  /tmp/cc8mw5hc.s 			page 71


 2858              		.loc 1 175 38 is_stmt 0 view .LVU753
 2859 05fe 25AB     		add	r3, sp, #148
 2860 0600 04F14402 		add	r2, r4, #68
 2861 0604 07CA     		ldm	r2, {r0, r1, r2}
 2862 0606 83E80700 		stm	r3, {r0, r1, r2}
 176:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 2863              		.loc 1 176 13 is_stmt 1 view .LVU754
 176:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
 2864              		.loc 1 176 39 is_stmt 0 view .LVU755
 2865 060a 0023     		movs	r3, #0
 2866 060c 84F85930 		strb	r3, [r4, #89]
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2867              		.loc 1 177 13 is_stmt 1 view .LVU756
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2868              		.loc 1 177 42 is_stmt 0 view .LVU757
 2869 0610 E36D     		ldr	r3, [r4, #92]
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2870              		.loc 1 177 85 view .LVU758
 2871 0612 092B     		cmp	r3, #9
 2872 0614 40F2B381 		bls	.L74
 2873 0618 0A22     		movs	r2, #10
 2874              	.L65:
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2875              		.loc 1 177 42 discriminator 4 view .LVU759
 2876 061a 9B1A     		subs	r3, r3, r2
 2877 061c E365     		str	r3, [r4, #92]
 2878              	.L60:
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 2879              		.loc 1 177 42 discriminator 4 view .LVU760
 2880              	.LBE208:
 184:Core/Src/Fusion/FusionAhrs.c **** 
 2881              		.loc 1 184 5 is_stmt 1 view .LVU761
 2882              	.LVL309:
 128:Core/Inc/Fusion/FusionMath.h **** }
 2883              		.loc 2 128 5 view .LVU762
 128:Core/Inc/Fusion/FusionMath.h **** }
 2884              		.loc 2 128 5 is_stmt 0 view .LVU763
 2885 061e 17AE     		add	r6, sp, #92
 2886 0620 07AB     		add	r3, sp, #28
 2887 0622 93E80700 		ldm	r3, {r0, r1, r2}
 2888 0626 86E80700 		stm	r6, {r0, r1, r2}
 2889              	.LVL310:
 2890              	.LBB231:
 2891              	.LBI231:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2892              		.loc 2 238 28 is_stmt 1 view .LVU764
 2893              	.LBB232:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2894              		.loc 2 239 5 view .LVU765
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2895              		.loc 2 240 5 view .LVU766
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2896              		.loc 2 240 35 is_stmt 0 view .LVU767
 2897 062a 5849     		ldr	r1, .L91+12
 2898 062c 3068     		ldr	r0, [r6]	@ float
 2899 062e FFF7FEFF 		bl	__aeabi_fmul
 2900              	.LVL311:
ARM GAS  /tmp/cc8mw5hc.s 			page 72


 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2901              		.loc 2 240 19 view .LVU768
 2902 0632 1BAD     		add	r5, sp, #108
 2903 0634 0390     		str	r0, [sp, #12]	@ float
 2904 0636 2860     		str	r0, [r5]	@ float
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2905              		.loc 2 241 5 is_stmt 1 view .LVU769
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2906              		.loc 2 241 35 is_stmt 0 view .LVU770
 2907 0638 5449     		ldr	r1, .L91+12
 2908 063a 7068     		ldr	r0, [r6, #4]	@ float
 2909 063c FFF7FEFF 		bl	__aeabi_fmul
 2910              	.LVL312:
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2911              		.loc 2 241 19 view .LVU771
 2912 0640 0490     		str	r0, [sp, #16]	@ float
 2913 0642 6860     		str	r0, [r5, #4]	@ float
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2914              		.loc 2 242 5 is_stmt 1 view .LVU772
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2915              		.loc 2 242 35 is_stmt 0 view .LVU773
 2916 0644 5149     		ldr	r1, .L91+12
 2917 0646 B068     		ldr	r0, [r6, #8]	@ float
 2918 0648 FFF7FEFF 		bl	__aeabi_fmul
 2919              	.LVL313:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 2920              		.loc 2 242 19 view .LVU774
 2921 064c 0590     		str	r0, [sp, #20]	@ float
 2922 064e A860     		str	r0, [r5, #8]	@ float
 243:Core/Inc/Fusion/FusionMath.h **** }
 2923              		.loc 2 243 5 is_stmt 1 view .LVU775
 243:Core/Inc/Fusion/FusionMath.h **** }
 2924              		.loc 2 243 12 is_stmt 0 view .LVU776
 2925 0650 95E80700 		ldm	r5, {r0, r1, r2}
 2926 0654 22AF     		add	r7, sp, #136
 2927 0656 87E80700 		stm	r7, {r0, r1, r2}
 2928              	.LVL314:
 243:Core/Inc/Fusion/FusionMath.h **** }
 2929              		.loc 2 243 12 view .LVU777
 2930              	.LBE232:
 2931              	.LBE231:
 187:Core/Src/Fusion/FusionAhrs.c **** 
 2932              		.loc 1 187 5 is_stmt 1 view .LVU778
 2933 065a 13AF     		add	r7, sp, #76
 2934 065c 28AB     		add	r3, sp, #160
 2935 065e 93E80700 		ldm	r3, {r0, r1, r2}
 2936 0662 87E80700 		stm	r7, {r0, r1, r2}
 2937 0666 25AB     		add	r3, sp, #148
 2938 0668 93E80700 		ldm	r3, {r0, r1, r2}
 2939 066c 86E80700 		stm	r6, {r0, r1, r2}
 2940              	.LBB233:
 2941              	.LBI233:
 201:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2942              		.loc 2 201 28 view .LVU779
 2943              	.LBB234:
 202:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 2944              		.loc 2 202 5 view .LVU780
ARM GAS  /tmp/cc8mw5hc.s 			page 73


 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2945              		.loc 2 203 5 view .LVU781
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2946              		.loc 2 203 36 is_stmt 0 view .LVU782
 2947 0670 3168     		ldr	r1, [r6]	@ float
 2948 0672 3868     		ldr	r0, [r7]	@ float
 2949 0674 FFF7FEFF 		bl	__aeabi_fadd
 2950              	.LVL315:
 2951 0678 8146     		mov	r9, r0
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 2952              		.loc 2 203 19 view .LVU783
 2953 067a 2860     		str	r0, [r5]	@ float
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2954              		.loc 2 204 5 is_stmt 1 view .LVU784
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2955              		.loc 2 204 36 is_stmt 0 view .LVU785
 2956 067c 7168     		ldr	r1, [r6, #4]	@ float
 2957 067e 7868     		ldr	r0, [r7, #4]	@ float
 2958 0680 FFF7FEFF 		bl	__aeabi_fadd
 2959              	.LVL316:
 2960 0684 8046     		mov	r8, r0
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 2961              		.loc 2 204 19 view .LVU786
 2962 0686 6860     		str	r0, [r5, #4]	@ float
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2963              		.loc 2 205 5 is_stmt 1 view .LVU787
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2964              		.loc 2 205 36 is_stmt 0 view .LVU788
 2965 0688 B168     		ldr	r1, [r6, #8]	@ float
 2966 068a B868     		ldr	r0, [r7, #8]	@ float
 2967 068c FFF7FEFF 		bl	__aeabi_fadd
 2968              	.LVL317:
 2969 0690 8246     		mov	r10, r0
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 2970              		.loc 2 205 19 view .LVU789
 2971 0692 A860     		str	r0, [r5, #8]	@ float
 206:Core/Inc/Fusion/FusionMath.h **** }
 2972              		.loc 2 206 5 is_stmt 1 view .LVU790
 206:Core/Inc/Fusion/FusionMath.h **** }
 2973              		.loc 2 206 12 is_stmt 0 view .LVU791
 2974 0694 37AB     		add	r3, sp, #220
 2975 0696 95E80700 		ldm	r5, {r0, r1, r2}
 2976 069a 83E80700 		stm	r3, {r0, r1, r2}
 2977              	.LBE234:
 2978              	.LBE233:
 187:Core/Src/Fusion/FusionAhrs.c **** 
 2979              		.loc 1 187 48 view .LVU792
 2980 069e D4F830B0 		ldr	fp, [r4, #48]	@ float
 2981 06a2 86E80700 		stm	r6, {r0, r1, r2}
 2982              	.LVL318:
 2983              	.LBB235:
 2984              	.LBI235:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 2985              		.loc 2 238 28 is_stmt 1 view .LVU793
 2986              	.LBB236:
 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 2987              		.loc 2 239 5 view .LVU794
ARM GAS  /tmp/cc8mw5hc.s 			page 74


 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2988              		.loc 2 240 5 view .LVU795
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2989              		.loc 2 240 35 is_stmt 0 view .LVU796
 2990 06a6 4946     		mov	r1, r9
 2991 06a8 5846     		mov	r0, fp
 2992 06aa FFF7FEFF 		bl	__aeabi_fmul
 2993              	.LVL319:
 2994 06ae 8146     		mov	r9, r0
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 2995              		.loc 2 240 19 view .LVU797
 2996 06b0 2860     		str	r0, [r5]	@ float
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2997              		.loc 2 241 5 is_stmt 1 view .LVU798
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 2998              		.loc 2 241 35 is_stmt 0 view .LVU799
 2999 06b2 4146     		mov	r1, r8
 3000 06b4 5846     		mov	r0, fp
 3001 06b6 FFF7FEFF 		bl	__aeabi_fmul
 3002              	.LVL320:
 3003 06ba 8046     		mov	r8, r0
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 3004              		.loc 2 241 19 view .LVU800
 3005 06bc 6860     		str	r0, [r5, #4]	@ float
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 3006              		.loc 2 242 5 is_stmt 1 view .LVU801
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 3007              		.loc 2 242 35 is_stmt 0 view .LVU802
 3008 06be 5146     		mov	r1, r10
 3009 06c0 5846     		mov	r0, fp
 3010 06c2 FFF7FEFF 		bl	__aeabi_fmul
 3011              	.LVL321:
 3012 06c6 8246     		mov	r10, r0
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 3013              		.loc 2 242 19 view .LVU803
 3014 06c8 A860     		str	r0, [r5, #8]	@ float
 243:Core/Inc/Fusion/FusionMath.h **** }
 3015              		.loc 2 243 5 is_stmt 1 view .LVU804
 243:Core/Inc/Fusion/FusionMath.h **** }
 3016              		.loc 2 243 12 is_stmt 0 view .LVU805
 3017 06ca 3AAB     		add	r3, sp, #232
 3018 06cc 95E80700 		ldm	r5, {r0, r1, r2}
 3019 06d0 83E80700 		stm	r3, {r0, r1, r2}
 3020              	.LVL322:
 243:Core/Inc/Fusion/FusionMath.h **** }
 3021              		.loc 2 243 12 view .LVU806
 3022 06d4 0DF1880C 		add	ip, sp, #136
 3023 06d8 9CE80700 		ldm	ip, {r0, r1, r2}
 3024 06dc 87E80700 		stm	r7, {r0, r1, r2}
 3025 06e0 93E80700 		ldm	r3, {r0, r1, r2}
 3026 06e4 86E80700 		stm	r6, {r0, r1, r2}
 3027              	.LBE236:
 3028              	.LBE235:
 3029              	.LBB237:
 3030              	.LBI237:
 201:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 3031              		.loc 2 201 28 is_stmt 1 view .LVU807
ARM GAS  /tmp/cc8mw5hc.s 			page 75


 3032              	.LBB238:
 202:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vectorA.axis.x + vectorB.axis.x;
 3033              		.loc 2 202 5 view .LVU808
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 3034              		.loc 2 203 5 view .LVU809
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 3035              		.loc 2 203 36 is_stmt 0 view .LVU810
 3036 06e8 0399     		ldr	r1, [sp, #12]	@ float
 3037 06ea 4846     		mov	r0, r9
 3038 06ec FFF7FEFF 		bl	__aeabi_fadd
 3039              	.LVL323:
 3040 06f0 8146     		mov	r9, r0
 203:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vectorA.axis.y + vectorB.axis.y;
 3041              		.loc 2 203 19 view .LVU811
 3042 06f2 2860     		str	r0, [r5]	@ float
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 3043              		.loc 2 204 5 is_stmt 1 view .LVU812
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 3044              		.loc 2 204 36 is_stmt 0 view .LVU813
 3045 06f4 0499     		ldr	r1, [sp, #16]	@ float
 3046 06f6 4046     		mov	r0, r8
 3047 06f8 FFF7FEFF 		bl	__aeabi_fadd
 3048              	.LVL324:
 3049 06fc 8046     		mov	r8, r0
 204:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vectorA.axis.z + vectorB.axis.z;
 3050              		.loc 2 204 19 view .LVU814
 3051 06fe 6860     		str	r0, [r5, #4]	@ float
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 3052              		.loc 2 205 5 is_stmt 1 view .LVU815
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 3053              		.loc 2 205 36 is_stmt 0 view .LVU816
 3054 0700 0599     		ldr	r1, [sp, #20]	@ float
 3055 0702 5046     		mov	r0, r10
 3056 0704 FFF7FEFF 		bl	__aeabi_fadd
 3057              	.LVL325:
 3058 0708 8246     		mov	r10, r0
 205:Core/Inc/Fusion/FusionMath.h ****     return result;
 3059              		.loc 2 205 19 view .LVU817
 3060 070a A860     		str	r0, [r5, #8]	@ float
 206:Core/Inc/Fusion/FusionMath.h **** }
 3061              		.loc 2 206 5 is_stmt 1 view .LVU818
 206:Core/Inc/Fusion/FusionMath.h **** }
 3062              		.loc 2 206 12 is_stmt 0 view .LVU819
 3063 070c 1FAB     		add	r3, sp, #124
 3064 070e 95E80700 		ldm	r5, {r0, r1, r2}
 3065 0712 83E80700 		stm	r3, {r0, r1, r2}
 3066              	.LBE238:
 3067              	.LBE237:
 190:Core/Src/Fusion/FusionAhrs.c **** 
 3068              		.loc 1 190 5 is_stmt 1 view .LVU820
 3069 0716 86E80700 		stm	r6, {r0, r1, r2}
 3070              	.LVL326:
 3071              	.LBB239:
 3072              	.LBI239:
 238:Core/Inc/Fusion/FusionMath.h ****     FusionVector result;
 3073              		.loc 2 238 28 view .LVU821
 3074              	.LBB240:
ARM GAS  /tmp/cc8mw5hc.s 			page 76


 239:Core/Inc/Fusion/FusionMath.h ****     result.axis.x = vector.axis.x * scalar;
 3075              		.loc 2 239 5 view .LVU822
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 3076              		.loc 2 240 5 view .LVU823
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 3077              		.loc 2 240 35 is_stmt 0 view .LVU824
 3078 071a 4946     		mov	r1, r9
 3079 071c 6E98     		ldr	r0, [sp, #440]	@ float
 3080 071e FFF7FEFF 		bl	__aeabi_fmul
 3081              	.LVL327:
 240:Core/Inc/Fusion/FusionMath.h ****     result.axis.y = vector.axis.y * scalar;
 3082              		.loc 2 240 19 view .LVU825
 3083 0722 2860     		str	r0, [r5]	@ float
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 3084              		.loc 2 241 5 is_stmt 1 view .LVU826
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 3085              		.loc 2 241 35 is_stmt 0 view .LVU827
 3086 0724 4146     		mov	r1, r8
 3087 0726 6E98     		ldr	r0, [sp, #440]	@ float
 3088 0728 FFF7FEFF 		bl	__aeabi_fmul
 3089              	.LVL328:
 241:Core/Inc/Fusion/FusionMath.h ****     result.axis.z = vector.axis.z * scalar;
 3090              		.loc 2 241 19 view .LVU828
 3091 072c 6860     		str	r0, [r5, #4]	@ float
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 3092              		.loc 2 242 5 is_stmt 1 view .LVU829
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 3093              		.loc 2 242 35 is_stmt 0 view .LVU830
 3094 072e 5146     		mov	r1, r10
 3095 0730 6E98     		ldr	r0, [sp, #440]	@ float
 3096 0732 FFF7FEFF 		bl	__aeabi_fmul
 3097              	.LVL329:
 242:Core/Inc/Fusion/FusionMath.h ****     return result;
 3098              		.loc 2 242 19 view .LVU831
 3099 0736 A860     		str	r0, [r5, #8]	@ float
 243:Core/Inc/Fusion/FusionMath.h **** }
 3100              		.loc 2 243 5 is_stmt 1 view .LVU832
 243:Core/Inc/Fusion/FusionMath.h **** }
 3101              		.loc 2 243 12 is_stmt 0 view .LVU833
 3102 0738 0DF1F40C 		add	ip, sp, #244
 3103 073c 95E80700 		ldm	r5, {r0, r1, r2}
 3104 0740 8CE80700 		stm	ip, {r0, r1, r2}
 3105              	.LVL330:
 243:Core/Inc/Fusion/FusionMath.h **** }
 3106              		.loc 2 243 12 view .LVU834
 3107 0744 1034     		adds	r4, r4, #16
 3108              	.LVL331:
 243:Core/Inc/Fusion/FusionMath.h **** }
 3109              		.loc 2 243 12 view .LVU835
 3110 0746 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 3111 074a 86E80F00 		stm	r6, {r0, r1, r2, r3}
 3112 074e 9CE80700 		ldm	ip, {r0, r1, r2}
 3113 0752 87E80700 		stm	r7, {r0, r1, r2}
 3114              	.LBE240:
 3115              	.LBE239:
 3116              	.LBB241:
 3117              	.LBI241:
ARM GAS  /tmp/cc8mw5hc.s 			page 77


 343:Core/Inc/Fusion/FusionMath.h **** #undef A
 344:Core/Inc/Fusion/FusionMath.h **** #undef B
 345:Core/Inc/Fusion/FusionMath.h **** }
 346:Core/Inc/Fusion/FusionMath.h **** 
 347:Core/Inc/Fusion/FusionMath.h **** /**
 348:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the multiplication of a quaternion with a vector.  This is a
 349:Core/Inc/Fusion/FusionMath.h ****  * normal quaternion multiplication where the vector is treated a
 350:Core/Inc/Fusion/FusionMath.h ****  * quaternion with a W element value of zero.  The quaternion is post-
 351:Core/Inc/Fusion/FusionMath.h ****  * multiplied by the vector.
 352:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 353:Core/Inc/Fusion/FusionMath.h ****  * @param vector Vector.
 354:Core/Inc/Fusion/FusionMath.h ****  * @return Multiplication of a quaternion with a vector.
 355:Core/Inc/Fusion/FusionMath.h ****  */
 356:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, co
 3118              		.loc 2 356 32 is_stmt 1 view .LVU836
 3119              	.LBB242:
 357:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 358:Core/Inc/Fusion/FusionMath.h **** #define V vector.axis
 359:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 3120              		.loc 2 359 5 view .LVU837
 360:Core/Inc/Fusion/FusionMath.h ****     result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
 3121              		.loc 2 360 5 view .LVU838
 3122              		.loc 2 360 26 is_stmt 0 view .LVU839
 3123 0756 7368     		ldr	r3, [r6, #4]	@ float
 3124              		.loc 2 360 24 view .LVU840
 3125 0758 0393     		str	r3, [sp, #12]	@ float
 3126 075a 03F10040 		add	r0, r3, #-2147483648
 3127              		.loc 2 360 32 view .LVU841
 3128 075e D7F80080 		ldr	r8, [r7]	@ float
 3129              		.loc 2 360 29 view .LVU842
 3130 0762 4146     		mov	r1, r8
 3131 0764 FFF7FEFF 		bl	__aeabi_fmul
 3132              	.LVL332:
 3133 0768 8246     		mov	r10, r0
 3134              		.loc 2 360 38 view .LVU843
 3135 076a B268     		ldr	r2, [r6, #8]	@ float
 3136              		.loc 2 360 44 view .LVU844
 3137 076c D7F80490 		ldr	r9, [r7, #4]	@ float
 3138              		.loc 2 360 41 view .LVU845
 3139 0770 4946     		mov	r1, r9
 3140 0772 0492     		str	r2, [sp, #16]	@ float
 3141 0774 1046     		mov	r0, r2
 3142 0776 FFF7FEFF 		bl	__aeabi_fmul
 3143              	.LVL333:
 3144 077a 0146     		mov	r1, r0
 3145 077c 08E0     		b	.L92
 3146              	.L93:
 3147 077e 00BF     		.align	2
 3148              	.L91:
 3149 0780 12141F5F 		.word	1595872274
 3150 0784 12D3363F 		.word	1060557586
 3151 0788 FF51D83F 		.word	1071141375
 3152 078c 35FA0E3C 		.word	1007614517
 3153              	.L92:
 3154              		.loc 2 360 35 view .LVU846
 3155 0790 5046     		mov	r0, r10
 3156 0792 FFF7FEFF 		bl	__aeabi_fsub
ARM GAS  /tmp/cc8mw5hc.s 			page 78


 3157              	.LVL334:
 3158 0796 8346     		mov	fp, r0
 3159              		.loc 2 360 50 view .LVU847
 3160 0798 F168     		ldr	r1, [r6, #12]	@ float
 3161 079a 8C46     		mov	ip, r1
 3162              		.loc 2 360 56 view .LVU848
 3163 079c D7F808A0 		ldr	r10, [r7, #8]	@ float
 3164              		.loc 2 360 53 view .LVU849
 3165 07a0 5146     		mov	r1, r10
 3166 07a2 CDF814C0 		str	ip, [sp, #20]	@ float
 3167 07a6 6046     		mov	r0, ip
 3168 07a8 FFF7FEFF 		bl	__aeabi_fmul
 3169              	.LVL335:
 3170 07ac 0146     		mov	r1, r0
 3171              		.loc 2 360 47 view .LVU850
 3172 07ae 5846     		mov	r0, fp
 3173 07b0 FFF7FEFF 		bl	__aeabi_fsub
 3174              	.LVL336:
 3175              		.loc 2 360 22 view .LVU851
 3176 07b4 2860     		str	r0, [r5]	@ float
 361:Core/Inc/Fusion/FusionMath.h ****     result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
 3177              		.loc 2 361 5 is_stmt 1 view .LVU852
 3178              		.loc 2 361 25 is_stmt 0 view .LVU853
 3179 07b6 3168     		ldr	r1, [r6]	@ float
 3180              		.loc 2 361 28 view .LVU854
 3181 07b8 0691     		str	r1, [sp, #24]	@ float
 3182 07ba 4046     		mov	r0, r8
 3183 07bc FFF7FEFF 		bl	__aeabi_fmul
 3184              	.LVL337:
 3185 07c0 8346     		mov	fp, r0
 3186              		.loc 2 361 40 view .LVU855
 3187 07c2 5146     		mov	r1, r10
 3188 07c4 0498     		ldr	r0, [sp, #16]	@ float
 3189 07c6 FFF7FEFF 		bl	__aeabi_fmul
 3190              	.LVL338:
 3191 07ca 0146     		mov	r1, r0
 3192              		.loc 2 361 34 view .LVU856
 3193 07cc 5846     		mov	r0, fp
 3194 07ce FFF7FEFF 		bl	__aeabi_fadd
 3195              	.LVL339:
 3196 07d2 8346     		mov	fp, r0
 3197              		.loc 2 361 52 view .LVU857
 3198 07d4 0599     		ldr	r1, [sp, #20]	@ float
 3199 07d6 4846     		mov	r0, r9
 3200 07d8 FFF7FEFF 		bl	__aeabi_fmul
 3201              	.LVL340:
 3202 07dc 0146     		mov	r1, r0
 3203              		.loc 2 361 46 view .LVU858
 3204 07de 5846     		mov	r0, fp
 3205 07e0 FFF7FEFF 		bl	__aeabi_fsub
 3206              	.LVL341:
 3207              		.loc 2 361 22 view .LVU859
 3208 07e4 6860     		str	r0, [r5, #4]	@ float
 362:Core/Inc/Fusion/FusionMath.h ****     result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
 3209              		.loc 2 362 5 is_stmt 1 view .LVU860
 3210              		.loc 2 362 28 is_stmt 0 view .LVU861
 3211 07e6 0699     		ldr	r1, [sp, #24]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 79


 3212 07e8 4846     		mov	r0, r9
 3213 07ea FFF7FEFF 		bl	__aeabi_fmul
 3214              	.LVL342:
 3215 07ee 8346     		mov	fp, r0
 3216              		.loc 2 362 40 view .LVU862
 3217 07f0 5146     		mov	r1, r10
 3218 07f2 0398     		ldr	r0, [sp, #12]	@ float
 3219 07f4 FFF7FEFF 		bl	__aeabi_fmul
 3220              	.LVL343:
 3221 07f8 0146     		mov	r1, r0
 3222              		.loc 2 362 34 view .LVU863
 3223 07fa 5846     		mov	r0, fp
 3224 07fc FFF7FEFF 		bl	__aeabi_fsub
 3225              	.LVL344:
 3226 0800 8346     		mov	fp, r0
 3227              		.loc 2 362 52 view .LVU864
 3228 0802 0599     		ldr	r1, [sp, #20]	@ float
 3229 0804 4046     		mov	r0, r8
 3230 0806 FFF7FEFF 		bl	__aeabi_fmul
 3231              	.LVL345:
 3232 080a 0146     		mov	r1, r0
 3233              		.loc 2 362 46 view .LVU865
 3234 080c 5846     		mov	r0, fp
 3235 080e FFF7FEFF 		bl	__aeabi_fadd
 3236              	.LVL346:
 3237              		.loc 2 362 22 view .LVU866
 3238 0812 A860     		str	r0, [r5, #8]	@ float
 363:Core/Inc/Fusion/FusionMath.h ****     result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
 3239              		.loc 2 363 5 is_stmt 1 view .LVU867
 3240              		.loc 2 363 28 is_stmt 0 view .LVU868
 3241 0814 0699     		ldr	r1, [sp, #24]	@ float
 3242 0816 5046     		mov	r0, r10
 3243 0818 FFF7FEFF 		bl	__aeabi_fmul
 3244              	.LVL347:
 3245 081c 8246     		mov	r10, r0
 3246              		.loc 2 363 40 view .LVU869
 3247 081e 4946     		mov	r1, r9
 3248 0820 0398     		ldr	r0, [sp, #12]	@ float
 3249 0822 FFF7FEFF 		bl	__aeabi_fmul
 3250              	.LVL348:
 3251 0826 0146     		mov	r1, r0
 3252              		.loc 2 363 34 view .LVU870
 3253 0828 5046     		mov	r0, r10
 3254 082a FFF7FEFF 		bl	__aeabi_fadd
 3255              	.LVL349:
 3256 082e 8146     		mov	r9, r0
 3257              		.loc 2 363 52 view .LVU871
 3258 0830 0499     		ldr	r1, [sp, #16]	@ float
 3259 0832 4046     		mov	r0, r8
 3260 0834 FFF7FEFF 		bl	__aeabi_fmul
 3261              	.LVL350:
 3262 0838 0146     		mov	r1, r0
 3263              		.loc 2 363 46 view .LVU872
 3264 083a 4846     		mov	r0, r9
 3265 083c FFF7FEFF 		bl	__aeabi_fsub
 3266              	.LVL351:
 3267              		.loc 2 363 22 view .LVU873
ARM GAS  /tmp/cc8mw5hc.s 			page 80


 3268 0840 E860     		str	r0, [r5, #12]	@ float
 364:Core/Inc/Fusion/FusionMath.h ****     return result;
 3269              		.loc 2 364 5 is_stmt 1 view .LVU874
 3270              		.loc 2 364 12 is_stmt 0 view .LVU875
 3271 0842 0DF5807C 		add	ip, sp, #256
 3272 0846 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 3273 084a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 3274 084e 94E80F00 		ldm	r4, {r0, r1, r2, r3}
 3275 0852 87E80F00 		stm	r7, {r0, r1, r2, r3}
 3276 0856 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 3277 085a 86E80F00 		stm	r6, {r0, r1, r2, r3}
 3278              	.LBE242:
 3279              	.LBE241:
 3280              	.LBB243:
 3281              	.LBI243:
 319:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion result;
 3282              		.loc 2 319 32 is_stmt 1 view .LVU876
 3283              	.LBB244:
 320:Core/Inc/Fusion/FusionMath.h ****     result.element.w = quaternionA.element.w + quaternionB.element.w;
 3284              		.loc 2 320 5 view .LVU877
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 3285              		.loc 2 321 5 view .LVU878
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 3286              		.loc 2 321 46 is_stmt 0 view .LVU879
 3287 085e 3168     		ldr	r1, [r6]	@ float
 3288 0860 3868     		ldr	r0, [r7]	@ float
 3289 0862 FFF7FEFF 		bl	__aeabi_fadd
 3290              	.LVL352:
 321:Core/Inc/Fusion/FusionMath.h ****     result.element.x = quaternionA.element.x + quaternionB.element.x;
 3291              		.loc 2 321 22 view .LVU880
 3292 0866 2860     		str	r0, [r5]	@ float
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 3293              		.loc 2 322 5 is_stmt 1 view .LVU881
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 3294              		.loc 2 322 46 is_stmt 0 view .LVU882
 3295 0868 7168     		ldr	r1, [r6, #4]	@ float
 3296 086a 7868     		ldr	r0, [r7, #4]	@ float
 3297 086c FFF7FEFF 		bl	__aeabi_fadd
 3298              	.LVL353:
 322:Core/Inc/Fusion/FusionMath.h ****     result.element.y = quaternionA.element.y + quaternionB.element.y;
 3299              		.loc 2 322 22 view .LVU883
 3300 0870 6860     		str	r0, [r5, #4]	@ float
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 3301              		.loc 2 323 5 is_stmt 1 view .LVU884
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 3302              		.loc 2 323 46 is_stmt 0 view .LVU885
 3303 0872 B168     		ldr	r1, [r6, #8]	@ float
 3304 0874 B868     		ldr	r0, [r7, #8]	@ float
 3305 0876 FFF7FEFF 		bl	__aeabi_fadd
 3306              	.LVL354:
 323:Core/Inc/Fusion/FusionMath.h ****     result.element.z = quaternionA.element.z + quaternionB.element.z;
 3307              		.loc 2 323 22 view .LVU886
 3308 087a A860     		str	r0, [r5, #8]	@ float
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 3309              		.loc 2 324 5 is_stmt 1 view .LVU887
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 3310              		.loc 2 324 46 is_stmt 0 view .LVU888
ARM GAS  /tmp/cc8mw5hc.s 			page 81


 3311 087c F168     		ldr	r1, [r6, #12]	@ float
 3312 087e F868     		ldr	r0, [r7, #12]	@ float
 3313 0880 FFF7FEFF 		bl	__aeabi_fadd
 3314              	.LVL355:
 324:Core/Inc/Fusion/FusionMath.h ****     return result;
 3315              		.loc 2 324 22 view .LVU889
 3316 0884 E860     		str	r0, [r5, #12]	@ float
 325:Core/Inc/Fusion/FusionMath.h **** }
 3317              		.loc 2 325 5 is_stmt 1 view .LVU890
 325:Core/Inc/Fusion/FusionMath.h **** }
 3318              		.loc 2 325 12 is_stmt 0 view .LVU891
 3319 0886 44AF     		add	r7, sp, #272
 3320 0888 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 3321 088c 87E80F00 		stm	r7, {r0, r1, r2, r3}
 3322              	.LBE244:
 3323              	.LBE243:
 190:Core/Src/Fusion/FusionAhrs.c **** 
 3324              		.loc 1 190 24 view .LVU892
 3325 0890 84E80F00 		stm	r4, {r0, r1, r2, r3}
 193:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 3326              		.loc 1 193 5 is_stmt 1 view .LVU893
 3327 0894 86E80F00 		stm	r6, {r0, r1, r2, r3}
 3328              	.LBB245:
 3329              	.LBI245:
 365:Core/Inc/Fusion/FusionMath.h **** #undef Q
 366:Core/Inc/Fusion/FusionMath.h **** #undef V
 367:Core/Inc/Fusion/FusionMath.h **** }
 368:Core/Inc/Fusion/FusionMath.h **** 
 369:Core/Inc/Fusion/FusionMath.h **** /**
 370:Core/Inc/Fusion/FusionMath.h ****  * @brief Returns the normalised quaternion.
 371:Core/Inc/Fusion/FusionMath.h ****  * @param quaternion Quaternion.
 372:Core/Inc/Fusion/FusionMath.h ****  * @return Normalised quaternion.
 373:Core/Inc/Fusion/FusionMath.h ****  */
 374:Core/Inc/Fusion/FusionMath.h **** static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
 3330              		.loc 2 374 32 view .LVU894
 3331              	.LBB246:
 375:Core/Inc/Fusion/FusionMath.h **** #define Q quaternion.element
 376:Core/Inc/Fusion/FusionMath.h **** #ifdef FUSION_USE_NORMAL_SQRT
 377:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
 378:Core/Inc/Fusion/FusionMath.h **** #else
 379:Core/Inc/Fusion/FusionMath.h ****     const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z
 3332              		.loc 2 379 5 view .LVU895
 3333              		.loc 2 379 62 is_stmt 0 view .LVU896
 3334 0898 D6F80090 		ldr	r9, [r6]	@ float
 3335              		.loc 2 379 65 view .LVU897
 3336 089c 4946     		mov	r1, r9
 3337 089e 4846     		mov	r0, r9
 3338 08a0 FFF7FEFF 		bl	__aeabi_fmul
 3339              	.LVL356:
 3340 08a4 0746     		mov	r7, r0
 3341              		.loc 2 379 74 view .LVU898
 3342 08a6 D6F80480 		ldr	r8, [r6, #4]	@ float
 3343              		.loc 2 379 77 view .LVU899
 3344 08aa 4146     		mov	r1, r8
 3345 08ac 4046     		mov	r0, r8
 3346 08ae FFF7FEFF 		bl	__aeabi_fmul
 3347              	.LVL357:
ARM GAS  /tmp/cc8mw5hc.s 			page 82


 3348 08b2 0146     		mov	r1, r0
 3349              		.loc 2 379 71 view .LVU900
 3350 08b4 3846     		mov	r0, r7
 3351 08b6 FFF7FEFF 		bl	__aeabi_fadd
 3352              	.LVL358:
 3353 08ba 8246     		mov	r10, r0
 3354              		.loc 2 379 86 view .LVU901
 3355 08bc B768     		ldr	r7, [r6, #8]	@ float
 3356              		.loc 2 379 89 view .LVU902
 3357 08be 3946     		mov	r1, r7
 3358 08c0 3846     		mov	r0, r7
 3359 08c2 FFF7FEFF 		bl	__aeabi_fmul
 3360              	.LVL359:
 3361 08c6 0146     		mov	r1, r0
 3362              		.loc 2 379 83 view .LVU903
 3363 08c8 5046     		mov	r0, r10
 3364 08ca FFF7FEFF 		bl	__aeabi_fadd
 3365              	.LVL360:
 3366 08ce 8346     		mov	fp, r0
 3367              		.loc 2 379 98 view .LVU904
 3368 08d0 D6F80CA0 		ldr	r10, [r6, #12]	@ float
 3369              		.loc 2 379 101 view .LVU905
 3370 08d4 5146     		mov	r1, r10
 3371 08d6 5046     		mov	r0, r10
 3372 08d8 FFF7FEFF 		bl	__aeabi_fmul
 3373              	.LVL361:
 3374 08dc 0146     		mov	r1, r0
 3375              		.loc 2 379 39 view .LVU906
 3376 08de 5846     		mov	r0, fp
 3377 08e0 FFF7FEFF 		bl	__aeabi_fadd
 3378              	.LVL362:
 3379              	.LBB247:
 3380              	.LBI247:
 169:Core/Inc/Fusion/FusionMath.h **** 
 3381              		.loc 2 169 21 is_stmt 1 view .LVU907
 3382              	.LBB248:
 171:Core/Inc/Fusion/FusionMath.h ****         float f;
 3383              		.loc 2 171 5 view .LVU908
 176:Core/Inc/Fusion/FusionMath.h ****     union32.i = 0x5F1F1412 - (union32.i >> 1);
 3384              		.loc 2 176 5 view .LVU909
 177:Core/Inc/Fusion/FusionMath.h ****     return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
 3385              		.loc 2 177 5 view .LVU910
 178:Core/Inc/Fusion/FusionMath.h **** }
 3386              		.loc 2 178 5 view .LVU911
 3387 08e4 294E     		ldr	r6, .L94
 3388 08e6 A6EB6006 		sub	r6, r6, r0, asr #1
 178:Core/Inc/Fusion/FusionMath.h **** }
 3389              		.loc 2 178 52 is_stmt 0 view .LVU912
 3390 08ea 2949     		ldr	r1, .L94+4
 3391 08ec FFF7FEFF 		bl	__aeabi_fmul
 3392              	.LVL363:
 178:Core/Inc/Fusion/FusionMath.h **** }
 3393              		.loc 2 178 52 view .LVU913
 3394 08f0 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 3395              		.loc 2 178 56 view .LVU914
 3396 08f2 3046     		mov	r0, r6
ARM GAS  /tmp/cc8mw5hc.s 			page 83


 3397 08f4 FFF7FEFF 		bl	__aeabi_fmul
 3398              	.LVL364:
 3399 08f8 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 3400              		.loc 2 178 68 view .LVU915
 3401 08fa 3046     		mov	r0, r6
 3402 08fc FFF7FEFF 		bl	__aeabi_fmul
 3403              	.LVL365:
 3404 0900 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 3405              		.loc 2 178 37 view .LVU916
 3406 0902 2448     		ldr	r0, .L94+8
 3407 0904 FFF7FEFF 		bl	__aeabi_fsub
 3408              	.LVL366:
 3409 0908 0146     		mov	r1, r0
 178:Core/Inc/Fusion/FusionMath.h **** }
 3410              		.loc 2 178 22 view .LVU917
 3411 090a 3046     		mov	r0, r6
 3412 090c FFF7FEFF 		bl	__aeabi_fmul
 3413              	.LVL367:
 3414 0910 0646     		mov	r6, r0
 3415              	.LVL368:
 178:Core/Inc/Fusion/FusionMath.h **** }
 3416              		.loc 2 178 22 view .LVU918
 3417              	.LBE248:
 3418              	.LBE247:
 380:Core/Inc/Fusion/FusionMath.h **** #endif
 381:Core/Inc/Fusion/FusionMath.h ****     FusionQuaternion normalisedQuaternion;
 3419              		.loc 2 381 5 is_stmt 1 view .LVU919
 382:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
 3420              		.loc 2 382 5 view .LVU920
 3421              		.loc 2 382 42 is_stmt 0 view .LVU921
 3422 0912 0146     		mov	r1, r0
 3423 0914 4846     		mov	r0, r9
 3424              	.LVL369:
 3425              		.loc 2 382 42 view .LVU922
 3426 0916 FFF7FEFF 		bl	__aeabi_fmul
 3427              	.LVL370:
 3428              		.loc 2 382 36 view .LVU923
 3429 091a 2860     		str	r0, [r5]	@ float
 383:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
 3430              		.loc 2 383 5 is_stmt 1 view .LVU924
 3431              		.loc 2 383 42 is_stmt 0 view .LVU925
 3432 091c 3146     		mov	r1, r6
 3433 091e 4046     		mov	r0, r8
 3434 0920 FFF7FEFF 		bl	__aeabi_fmul
 3435              	.LVL371:
 3436              		.loc 2 383 36 view .LVU926
 3437 0924 6860     		str	r0, [r5, #4]	@ float
 384:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
 3438              		.loc 2 384 5 is_stmt 1 view .LVU927
 3439              		.loc 2 384 42 is_stmt 0 view .LVU928
 3440 0926 3146     		mov	r1, r6
 3441 0928 3846     		mov	r0, r7
 3442 092a FFF7FEFF 		bl	__aeabi_fmul
 3443              	.LVL372:
 3444              		.loc 2 384 36 view .LVU929
ARM GAS  /tmp/cc8mw5hc.s 			page 84


 3445 092e A860     		str	r0, [r5, #8]	@ float
 385:Core/Inc/Fusion/FusionMath.h ****     normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
 3446              		.loc 2 385 5 is_stmt 1 view .LVU930
 3447              		.loc 2 385 42 is_stmt 0 view .LVU931
 3448 0930 3146     		mov	r1, r6
 3449 0932 5046     		mov	r0, r10
 3450 0934 FFF7FEFF 		bl	__aeabi_fmul
 3451              	.LVL373:
 3452              		.loc 2 385 36 view .LVU932
 3453 0938 E860     		str	r0, [r5, #12]	@ float
 386:Core/Inc/Fusion/FusionMath.h ****     return normalisedQuaternion;
 3454              		.loc 2 386 5 is_stmt 1 view .LVU933
 3455              		.loc 2 386 12 is_stmt 0 view .LVU934
 3456 093a 5AAE     		add	r6, sp, #360
 3457              	.LVL374:
 3458              		.loc 2 386 12 view .LVU935
 3459 093c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 3460 0940 86E80F00 		stm	r6, {r0, r1, r2, r3}
 3461              	.LBE246:
 3462              	.LBE245:
 193:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 3463              		.loc 1 193 24 view .LVU936
 3464 0944 84E80F00 		stm	r4, {r0, r1, r2, r3}
 195:Core/Src/Fusion/FusionAhrs.c **** 
 3465              		.loc 1 195 1 view .LVU937
 3466 0948 5FB0     		add	sp, sp, #380
 3467              	.LCFI19:
 3468              		.cfi_remember_state
 3469              		.cfi_def_cfa_offset 36
 3470              		@ sp needed
 3471 094a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3472              	.LVL375:
 3473              	.L84:
 3474              	.LCFI20:
 3475              		.cfi_restore_state
 3476              	.LBB249:
 3477              	.LBB204:
 192:Core/Inc/Fusion/FusionMath.h **** }
 3478              		.loc 2 192 63 view .LVU938
 3479 094e 0023     		movs	r3, #0
 3480 0950 01E5     		b	.L57
 3481              	.L73:
 3482 0952 0123     		movs	r3, #1
 3483 0954 FFE4     		b	.L57
 3484              	.L88:
 192:Core/Inc/Fusion/FusionMath.h **** }
 3485              		.loc 2 192 63 view .LVU939
 3486              	.LBE204:
 3487              	.LBE249:
 3488              	.LBB250:
 158:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimer = 0;
 3489              		.loc 1 158 13 is_stmt 1 view .LVU940
 3490 0956 6CAB     		add	r3, sp, #432
 3491 0958 93E80300 		ldm	r3, {r0, r1}
 3492 095c 8DE80300 		stm	sp, {r0, r1}
 3493 0960 6B9B     		ldr	r3, [sp, #428]
 3494 0962 2BAA     		add	r2, sp, #172
ARM GAS  /tmp/cc8mw5hc.s 			page 85


 3495 0964 07CA     		ldm	r2, {r0, r1, r2}
 3496 0966 FFF7FEFF 		bl	FusionCompassCalculateHeading
 3497              	.LVL376:
 3498 096a 0146     		mov	r1, r0
 3499 096c 2046     		mov	r0, r4
 3500 096e FFF7FEFF 		bl	FusionAhrsSetHeading
 3501              	.LVL377:
 159:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimeout = true;
 3502              		.loc 1 159 13 view .LVU941
 159:Core/Src/Fusion/FusionAhrs.c ****             ahrs->magneticRejectionTimeout = true;
 3503              		.loc 1 159 42 is_stmt 0 view .LVU942
 3504 0972 0023     		movs	r3, #0
 3505 0974 E365     		str	r3, [r4, #92]
 160:Core/Src/Fusion/FusionAhrs.c ****         }
 3506              		.loc 1 160 13 is_stmt 1 view .LVU943
 160:Core/Src/Fusion/FusionAhrs.c ****         }
 3507              		.loc 1 160 44 is_stmt 0 view .LVU944
 3508 0976 0123     		movs	r3, #1
 3509 0978 84F86030 		strb	r3, [r4, #96]
 3510 097c F5E4     		b	.L61
 3511              	.L74:
 177:Core/Src/Fusion/FusionAhrs.c ****         } else {
 3512              		.loc 1 177 85 view .LVU945
 3513 097e 0022     		movs	r2, #0
 3514 0980 4BE6     		b	.L65
 3515              	.L85:
 179:Core/Src/Fusion/FusionAhrs.c ****         }
 3516              		.loc 1 179 13 is_stmt 1 view .LVU946
 179:Core/Src/Fusion/FusionAhrs.c ****         }
 3517              		.loc 1 179 17 is_stmt 0 view .LVU947
 3518 0982 E36D     		ldr	r3, [r4, #92]
 179:Core/Src/Fusion/FusionAhrs.c ****         }
 3519              		.loc 1 179 41 view .LVU948
 3520 0984 0133     		adds	r3, r3, #1
 3521 0986 E365     		str	r3, [r4, #92]
 3522 0988 49E6     		b	.L60
 3523              	.L95:
 3524 098a 00BF     		.align	2
 3525              	.L94:
 3526 098c 12141F5F 		.word	1595872274
 3527 0990 12D3363F 		.word	1060557586
 3528 0994 FF51D83F 		.word	1071141375
 3529              	.LBE250:
 3530              		.cfi_endproc
 3531              	.LFE24:
 3533              		.section	.text.FusionAhrsUpdateExternalHeading,"ax",%progbits
 3534              		.align	1
 3535              		.global	FusionAhrsUpdateExternalHeading
 3536              		.syntax unified
 3537              		.thumb
 3538              		.thumb_func
 3539              		.fpu softvfp
 3541              	FusionAhrsUpdateExternalHeading:
 3542              	.LVL378:
 3543              	.LFB26:
 225:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 3544              		.loc 1 225 170 is_stmt 1 view -0
ARM GAS  /tmp/cc8mw5hc.s 			page 86


 3545              		.cfi_startproc
 3546              		@ args = 20, pretend = 0, frame = 32
 3547              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Core/Src/Fusion/FusionAhrs.c **** #define Q ahrs->quaternion.element
 3548              		.loc 1 225 170 is_stmt 0 view .LVU950
 3549 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3550              	.LCFI21:
 3551              		.cfi_def_cfa_offset 28
 3552              		.cfi_offset 4, -28
 3553              		.cfi_offset 5, -24
 3554              		.cfi_offset 6, -20
 3555              		.cfi_offset 7, -16
 3556              		.cfi_offset 8, -12
 3557              		.cfi_offset 9, -8
 3558              		.cfi_offset 14, -4
 3559 0004 91B0     		sub	sp, sp, #68
 3560              	.LCFI22:
 3561              		.cfi_def_cfa_offset 96
 3562 0006 0446     		mov	r4, r0
 3563 0008 09AD     		add	r5, sp, #36
 3564 000a 85E80E00 		stm	r5, {r1, r2, r3}
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3565              		.loc 1 229 5 is_stmt 1 view .LVU951
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3566              		.loc 1 229 38 is_stmt 0 view .LVU952
 3567 000e D0F81490 		ldr	r9, [r0, #20]	@ float
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3568              		.loc 1 229 35 view .LVU953
 3569 0012 4946     		mov	r1, r9
 3570 0014 0069     		ldr	r0, [r0, #16]	@ float
 3571              	.LVL379:
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3572              		.loc 1 229 35 view .LVU954
 3573 0016 FFF7FEFF 		bl	__aeabi_fmul
 3574              	.LVL380:
 3575 001a 0746     		mov	r7, r0
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3576              		.loc 1 229 44 view .LVU955
 3577 001c A669     		ldr	r6, [r4, #24]	@ float
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3578              		.loc 1 229 47 view .LVU956
 3579 001e E169     		ldr	r1, [r4, #28]	@ float
 3580 0020 3046     		mov	r0, r6
 3581 0022 FFF7FEFF 		bl	__aeabi_fmul
 3582              	.LVL381:
 3583 0026 8046     		mov	r8, r0
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3584              		.loc 1 229 65 view .LVU957
 3585 0028 3146     		mov	r1, r6
 3586 002a 3046     		mov	r0, r6
 3587 002c FFF7FEFF 		bl	__aeabi_fmul
 3588              	.LVL382:
 3589 0030 0146     		mov	r1, r0
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3590              		.loc 1 229 59 view .LVU958
 3591 0032 4FF07C50 		mov	r0, #1056964608
 3592 0036 FFF7FEFF 		bl	__aeabi_fsub
ARM GAS  /tmp/cc8mw5hc.s 			page 87


 3593              	.LVL383:
 3594 003a 0646     		mov	r6, r0
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3595              		.loc 1 229 77 view .LVU959
 3596 003c 4946     		mov	r1, r9
 3597 003e 4846     		mov	r0, r9
 3598 0040 FFF7FEFF 		bl	__aeabi_fmul
 3599              	.LVL384:
 3600 0044 0146     		mov	r1, r0
 229:Core/Src/Fusion/FusionAhrs.c **** 
 3601              		.loc 1 229 24 view .LVU960
 3602 0046 3046     		mov	r0, r6
 3603 0048 FFF7FEFF 		bl	__aeabi_fsub
 3604              	.LVL385:
 3605 004c 0646     		mov	r6, r0
 3606 004e 4146     		mov	r1, r8
 3607 0050 3846     		mov	r0, r7
 3608 0052 FFF7FEFF 		bl	__aeabi_fadd
 3609              	.LVL386:
 3610 0056 3146     		mov	r1, r6
 3611 0058 FFF7FEFF 		bl	atan2f
 3612              	.LVL387:
 3613 005c 0746     		mov	r7, r0
 3614              	.LVL388:
 232:Core/Src/Fusion/FusionAhrs.c ****     const float sinHeadingRadians = sinf(headingRadians);
 3615              		.loc 1 232 5 is_stmt 1 view .LVU961
 3616              	.LBB251:
 3617              	.LBI251:
 127:Core/Inc/Fusion/FusionMath.h ****     return degrees * ((float) M_PI / 180.0f);
 3618              		.loc 2 127 21 view .LVU962
 3619              	.LBB252:
 128:Core/Inc/Fusion/FusionMath.h **** }
 3620              		.loc 2 128 5 view .LVU963
 128:Core/Inc/Fusion/FusionMath.h **** }
 3621              		.loc 2 128 20 is_stmt 0 view .LVU964
 3622 005e 1849     		ldr	r1, .L98
 3623 0060 1B98     		ldr	r0, [sp, #108]	@ float
 3624              	.LVL389:
 128:Core/Inc/Fusion/FusionMath.h **** }
 3625              		.loc 2 128 20 view .LVU965
 3626 0062 FFF7FEFF 		bl	__aeabi_fmul
 3627              	.LVL390:
 3628 0066 8046     		mov	r8, r0
 3629              	.LVL391:
 128:Core/Inc/Fusion/FusionMath.h **** }
 3630              		.loc 2 128 20 view .LVU966
 3631              	.LBE252:
 3632              	.LBE251:
 233:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 3633              		.loc 1 233 5 is_stmt 1 view .LVU967
 233:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 3634              		.loc 1 233 37 is_stmt 0 view .LVU968
 3635 0068 FFF7FEFF 		bl	sinf
 3636              	.LVL392:
 233:Core/Src/Fusion/FusionAhrs.c ****     const FusionVector magnetometer = {
 3637              		.loc 1 233 37 view .LVU969
 3638 006c 0646     		mov	r6, r0
ARM GAS  /tmp/cc8mw5hc.s 			page 88


 3639              	.LVL393:
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 3640              		.loc 1 234 5 is_stmt 1 view .LVU970
 235:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = -1.0f * cosf(roll) * sinHeadingRadians,
 3641              		.loc 1 235 23 is_stmt 0 view .LVU971
 3642 006e 4046     		mov	r0, r8
 3643              	.LVL394:
 235:Core/Src/Fusion/FusionAhrs.c ****             .axis.y = -1.0f * cosf(roll) * sinHeadingRadians,
 3644              		.loc 1 235 23 view .LVU972
 3645 0070 FFF7FEFF 		bl	cosf
 3646              	.LVL395:
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 3647              		.loc 1 234 24 view .LVU973
 3648 0074 0D90     		str	r0, [sp, #52]	@ float
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 3649              		.loc 1 236 31 view .LVU974
 3650 0076 3846     		mov	r0, r7
 3651 0078 FFF7FEFF 		bl	cosf
 3652              	.LVL396:
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 3653              		.loc 1 236 29 view .LVU975
 3654 007c 00F10040 		add	r0, r0, #-2147483648
 236:Core/Src/Fusion/FusionAhrs.c ****             .axis.z = sinHeadingRadians * sinf(roll),
 3655              		.loc 1 236 42 view .LVU976
 3656 0080 3146     		mov	r1, r6
 3657 0082 FFF7FEFF 		bl	__aeabi_fmul
 3658              	.LVL397:
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 3659              		.loc 1 234 24 view .LVU977
 3660 0086 0E90     		str	r0, [sp, #56]	@ float
 237:Core/Src/Fusion/FusionAhrs.c ****     };
 3661              		.loc 1 237 43 view .LVU978
 3662 0088 3846     		mov	r0, r7
 3663 008a FFF7FEFF 		bl	sinf
 3664              	.LVL398:
 237:Core/Src/Fusion/FusionAhrs.c ****     };
 3665              		.loc 1 237 41 view .LVU979
 3666 008e 3146     		mov	r1, r6
 3667 0090 FFF7FEFF 		bl	__aeabi_fmul
 3668              	.LVL399:
 234:Core/Src/Fusion/FusionAhrs.c ****             .axis.x = cosf(headingRadians),
 3669              		.loc 1 234 24 view .LVU980
 3670 0094 0F90     		str	r0, [sp, #60]	@ float
 241:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 3671              		.loc 1 241 5 is_stmt 1 view .LVU981
 3672 0096 1C9B     		ldr	r3, [sp, #112]	@ float
 3673 0098 0693     		str	r3, [sp, #24]	@ float
 3674 009a 03AB     		add	r3, sp, #12
 3675 009c 10AA     		add	r2, sp, #64
 3676 009e 12E90700 		ldmdb	r2, {r0, r1, r2}
 3677 00a2 83E80700 		stm	r3, {r0, r1, r2}
 3678 00a6 18AB     		add	r3, sp, #96
 3679              	.LVL400:
 241:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 3680              		.loc 1 241 5 is_stmt 0 view .LVU982
 3681 00a8 93E80700 		ldm	r3, {r0, r1, r2}
 3682 00ac 8DE80700 		stm	sp, {r0, r1, r2}
ARM GAS  /tmp/cc8mw5hc.s 			page 89


 3683 00b0 95E80E00 		ldm	r5, {r1, r2, r3}
 3684              	.LVL401:
 241:Core/Src/Fusion/FusionAhrs.c **** #undef Q
 3685              		.loc 1 241 5 view .LVU983
 3686 00b4 2046     		mov	r0, r4
 3687 00b6 FFF7FEFF 		bl	FusionAhrsUpdate
 3688              	.LVL402:
 243:Core/Src/Fusion/FusionAhrs.c **** 
 3689              		.loc 1 243 1 view .LVU984
 3690 00ba 11B0     		add	sp, sp, #68
 3691              	.LCFI23:
 3692              		.cfi_def_cfa_offset 28
 3693              		@ sp needed
 3694 00bc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 3695              	.LVL403:
 3696              	.L99:
 243:Core/Src/Fusion/FusionAhrs.c **** 
 3697              		.loc 1 243 1 view .LVU985
 3698              		.align	2
 3699              	.L98:
 3700 00c0 35FA8E3C 		.word	1016003125
 3701              		.cfi_endproc
 3702              	.LFE26:
 3704              		.section	.text.FusionAhrsUpdateNoMagnetometer,"ax",%progbits
 3705              		.align	1
 3706              		.global	FusionAhrsUpdateNoMagnetometer
 3707              		.syntax unified
 3708              		.thumb
 3709              		.thumb_func
 3710              		.fpu softvfp
 3712              	FusionAhrsUpdateNoMagnetometer:
 3713              	.LVL404:
 3714              	.LFB25:
 205:Core/Src/Fusion/FusionAhrs.c **** 
 3715              		.loc 1 205 148 is_stmt 1 view -0
 3716              		.cfi_startproc
 3717              		@ args = 16, pretend = 0, frame = 32
 3718              		@ frame_needed = 0, uses_anonymous_args = 0
 205:Core/Src/Fusion/FusionAhrs.c **** 
 3719              		.loc 1 205 148 is_stmt 0 view .LVU987
 3720 0000 10B5     		push	{r4, lr}
 3721              	.LCFI24:
 3722              		.cfi_def_cfa_offset 8
 3723              		.cfi_offset 4, -8
 3724              		.cfi_offset 14, -4
 3725 0002 90B0     		sub	sp, sp, #64
 3726              	.LCFI25:
 3727              		.cfi_def_cfa_offset 72
 3728 0004 0446     		mov	r4, r0
 3729 0006 0DF1240C 		add	ip, sp, #36
 3730 000a 8CE80E00 		stm	ip, {r1, r2, r3}
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3731              		.loc 1 208 5 is_stmt 1 view .LVU988
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3732              		.loc 1 208 54 is_stmt 0 view .LVU989
 3733 000e 0023     		movs	r3, #0
 3734 0010 0D93     		str	r3, [sp, #52]	@ float
ARM GAS  /tmp/cc8mw5hc.s 			page 90


 3735 0012 0E93     		str	r3, [sp, #56]	@ float
 3736 0014 0F93     		str	r3, [sp, #60]	@ float
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3737              		.loc 1 208 5 view .LVU990
 3738 0016 159B     		ldr	r3, [sp, #84]	@ float
 3739 0018 0693     		str	r3, [sp, #24]	@ float
 3740 001a 03AB     		add	r3, sp, #12
 3741 001c 10AA     		add	r2, sp, #64
 3742 001e 12E90700 		ldmdb	r2, {r0, r1, r2}
 3743              	.LVL405:
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3744              		.loc 1 208 5 view .LVU991
 3745 0022 83E80700 		stm	r3, {r0, r1, r2}
 3746 0026 12AB     		add	r3, sp, #72
 3747              	.LVL406:
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3748              		.loc 1 208 5 view .LVU992
 3749 0028 93E80700 		ldm	r3, {r0, r1, r2}
 3750 002c 8DE80700 		stm	sp, {r0, r1, r2}
 3751 0030 9CE80E00 		ldm	ip, {r1, r2, r3}
 3752              	.LVL407:
 208:Core/Src/Fusion/FusionAhrs.c **** 
 3753              		.loc 1 208 5 view .LVU993
 3754 0034 2046     		mov	r0, r4
 3755 0036 FFF7FEFF 		bl	FusionAhrsUpdate
 3756              	.LVL408:
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3757              		.loc 1 211 5 is_stmt 1 view .LVU994
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3758              		.loc 1 211 14 is_stmt 0 view .LVU995
 3759 003a 94F82C30 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3760              		.loc 1 211 8 view .LVU996
 3761 003e 13B1     		cbz	r3, .L100
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3762              		.loc 1 211 46 discriminator 1 view .LVU997
 3763 0040 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 211:Core/Src/Fusion/FusionAhrs.c ****         FusionAhrsSetHeading(ahrs, 0.0f);
 3764              		.loc 1 211 38 discriminator 1 view .LVU998
 3765 0044 0BB1     		cbz	r3, .L103
 3766              	.L100:
 214:Core/Src/Fusion/FusionAhrs.c **** 
 3767              		.loc 1 214 1 view .LVU999
 3768 0046 10B0     		add	sp, sp, #64
 3769              	.LCFI26:
 3770              		.cfi_remember_state
 3771              		.cfi_def_cfa_offset 8
 3772              		@ sp needed
 3773 0048 10BD     		pop	{r4, pc}
 3774              	.LVL409:
 3775              	.L103:
 3776              	.LCFI27:
 3777              		.cfi_restore_state
 212:Core/Src/Fusion/FusionAhrs.c ****     }
 3778              		.loc 1 212 9 is_stmt 1 view .LVU1000
 3779 004a 0021     		movs	r1, #0
 3780 004c 2046     		mov	r0, r4
ARM GAS  /tmp/cc8mw5hc.s 			page 91


 3781 004e FFF7FEFF 		bl	FusionAhrsSetHeading
 3782              	.LVL410:
 214:Core/Src/Fusion/FusionAhrs.c **** 
 3783              		.loc 1 214 1 is_stmt 0 view .LVU1001
 3784 0052 F8E7     		b	.L100
 3785              		.cfi_endproc
 3786              	.LFE25:
 3788              		.section	.rodata
 3789              		.align	2
 3790              		.set	.LANCHOR0,. + 0
 3791              	.LC0:
 3792 0000 0000003F 		.word	1056964608
 3793 0004 0000B442 		.word	1119092736
 3794 0008 0000B442 		.word	1119092736
 3795 000c 00000000 		.word	0
 3796              		.text
 3797              	.Letext0:
 3798              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 3799              		.file 4 "Core/Inc/Fusion/FusionAhrs.h"
 3800              		.file 5 "/usr/include/newlib/math.h"
 3801              		.file 6 "Core/Inc/Fusion/FusionCompass.h"
ARM GAS  /tmp/cc8mw5hc.s 			page 92


DEFINED SYMBOLS
                            *ABS*:0000000000000000 FusionAhrs.c
     /tmp/cc8mw5hc.s:16     .text.FusionAhrsReset:0000000000000000 $t
     /tmp/cc8mw5hc.s:24     .text.FusionAhrsReset:0000000000000000 FusionAhrsReset
     /tmp/cc8mw5hc.s:88     .text.FusionAhrsReset:0000000000000044 $d
     /tmp/cc8mw5hc.s:97     .text.FusionAhrsSetSettings:0000000000000000 $t
     /tmp/cc8mw5hc.s:104    .text.FusionAhrsSetSettings:0000000000000000 FusionAhrsSetSettings
     /tmp/cc8mw5hc.s:260    .text.FusionAhrsSetSettings:0000000000000094 $d
     /tmp/cc8mw5hc.s:268    .text.FusionAhrsInitialise:0000000000000000 $t
     /tmp/cc8mw5hc.s:275    .text.FusionAhrsInitialise:0000000000000000 FusionAhrsInitialise
     /tmp/cc8mw5hc.s:320    .text.FusionAhrsInitialise:0000000000000024 $d
     /tmp/cc8mw5hc.s:325    .text.FusionAhrsGetQuaternion:0000000000000000 $t
     /tmp/cc8mw5hc.s:332    .text.FusionAhrsGetQuaternion:0000000000000000 FusionAhrsGetQuaternion
     /tmp/cc8mw5hc.s:359    .text.FusionAhrsGetLinearAcceleration:0000000000000000 $t
     /tmp/cc8mw5hc.s:366    .text.FusionAhrsGetLinearAcceleration:0000000000000000 FusionAhrsGetLinearAcceleration
     /tmp/cc8mw5hc.s:537    .text.FusionAhrsGetEarthAcceleration:0000000000000000 $t
     /tmp/cc8mw5hc.s:544    .text.FusionAhrsGetEarthAcceleration:0000000000000000 FusionAhrsGetEarthAcceleration
     /tmp/cc8mw5hc.s:845    .text.FusionAhrsGetInternalStates:0000000000000000 $t
     /tmp/cc8mw5hc.s:852    .text.FusionAhrsGetInternalStates:0000000000000000 FusionAhrsGetInternalStates
     /tmp/cc8mw5hc.s:1247   .text.FusionAhrsGetInternalStates:0000000000000198 $d
     /tmp/cc8mw5hc.s:1255   .text.FusionAhrsGetFlags:0000000000000000 $t
     /tmp/cc8mw5hc.s:1262   .text.FusionAhrsGetFlags:0000000000000000 FusionAhrsGetFlags
     /tmp/cc8mw5hc.s:1312   .text.FusionAhrsSetHeading:0000000000000000 $t
     /tmp/cc8mw5hc.s:1319   .text.FusionAhrsSetHeading:0000000000000000 FusionAhrsSetHeading
     /tmp/cc8mw5hc.s:1664   .text.FusionAhrsSetHeading:00000000000001d4 $d
     /tmp/cc8mw5hc.s:1670   .text.FusionAhrsUpdate:0000000000000000 $t
     /tmp/cc8mw5hc.s:1677   .text.FusionAhrsUpdate:0000000000000000 FusionAhrsUpdate
     /tmp/cc8mw5hc.s:2341   .text.FusionAhrsUpdate:0000000000000348 $d
     /tmp/cc8mw5hc.s:2348   .text.FusionAhrsUpdate:0000000000000354 $t
     /tmp/cc8mw5hc.s:3149   .text.FusionAhrsUpdate:0000000000000780 $d
     /tmp/cc8mw5hc.s:3155   .text.FusionAhrsUpdate:0000000000000790 $t
     /tmp/cc8mw5hc.s:3526   .text.FusionAhrsUpdate:000000000000098c $d
     /tmp/cc8mw5hc.s:3534   .text.FusionAhrsUpdateExternalHeading:0000000000000000 $t
     /tmp/cc8mw5hc.s:3541   .text.FusionAhrsUpdateExternalHeading:0000000000000000 FusionAhrsUpdateExternalHeading
     /tmp/cc8mw5hc.s:3700   .text.FusionAhrsUpdateExternalHeading:00000000000000c0 $d
     /tmp/cc8mw5hc.s:3705   .text.FusionAhrsUpdateNoMagnetometer:0000000000000000 $t
     /tmp/cc8mw5hc.s:3712   .text.FusionAhrsUpdateNoMagnetometer:0000000000000000 FusionAhrsUpdateNoMagnetometer
     /tmp/cc8mw5hc.s:3789   .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_fcmpeq
__aeabi_fmul
__aeabi_fsub
__aeabi_fdiv
sinf
powf
__aeabi_fadd
__aeabi_fcmple
__aeabi_fcmpge
__aeabi_ui2f
sqrtf
asinf
atan2f
cosf
__aeabi_fcmplt
FusionCompassCalculateHeading
